!function e$$12(name, n, r) {
    /**
     * @param {string} o
     * @param {?} u
     * @return {?}
     */
    function s(o, u) {
        if (!n[o]) {
            if (!name[o]) {
                var a = "function" === typeof require && require;
                if (!u && a) {
                    return a(o, true);
                }
                if (i) {
                    return i(o, true);
                }
                /** @type {Error} */
                var err = new Error("Cannot find module '" + o + "'");
                throw err.code = "MODULE_NOT_FOUND", err;
            }
            var attributes = n[o] = {
                exports : {}
            };
            name[o][0].call(attributes.exports, function(e) {
                var n = name[o][1][e];
                return s(n ? n : e);
            }, attributes, attributes.exports, e$$12, name, n, r);
        }
        return n[o].exports;
    }
    var i = "function" === typeof require && require;
    /** @type {number} */
    var o = 0;
    for (;o < r.length;o++) {
        s(r[o]);
    }
    return s;
}({
    1 : [function(_method, module, object) {
        (function(actual) {
            !function(factory) {
                if ("object" === typeof object && "undefined" !== typeof module) {
                    module.exports = factory();
                } else {
                    if ("function" === typeof define && define.amd) {
                        define([], factory);
                    } else {
                        var root;
                        root = "undefined" !== typeof window ? window : "undefined" !== typeof actual ? actual : "undefined" !== typeof self ? self : this;
                        root.Changesets = factory();
                    }
                }
            }(function() {
                return function node(name, t, n) {
                    /**
                     * @param {string} d
                     * @param {?} s
                     * @return {?}
                     */
                    function i(d, s) {
                        if (!t[d]) {
                            if (!name[d]) {
                                /** @type {(Function|boolean)} */
                                var o = "function" === typeof _method && _method;
                                if (!s && o) {
                                    return o(d, true);
                                }
                                if (objectToString) {
                                    return objectToString(d, true);
                                }
                                /** @type {Error} */
                                var err = new Error("Cannot find module '" + d + "'");
                                throw err.code = "MODULE_NOT_FOUND", err;
                            }
                            var attributes = t[d] = {
                                exports : {}
                            };
                            name[d][0].call(attributes.exports, function(t) {
                                var r = name[d][1][t];
                                return i(r ? r : t);
                            }, attributes, attributes.exports, node, name, t, n);
                        }
                        return t[d].exports;
                    }
                    /** @type {(Function|boolean)} */
                    var objectToString = "function" === typeof _method && _method;
                    /** @type {number} */
                    var s = 0;
                    for (;s < n.length;s++) {
                        i(n[s]);
                    }
                    return i;
                }({
                    1 : [function(factory, module, dataAndEvents) {
                        try {
                            module.exports = factory("./lib/changesets");
                        } catch (r) {
                        }
                    }, {
                        "./lib/changesets" : 2
                    }],
                    2 : [function(require, options, dataAndEvents) {
                        var toObject = require("textdiff").textdiff;
                        var _ = require("lodash");
                        var q = {
                            /**
                             * @param {?} result
                             * @return {?}
                             */
                            op : function(result) {
                                return result = _.clone(result), result.len = result.text ? result.text.length : 0, result.toString = function() {
                                    return this.type + this.pos + ":" + this.text;
                                }, result.extend = function(opt_attributes) {
                                    return result = _.extend(_.clone(this), opt_attributes), result.len = result.text.length, result;
                                }, result.revision = function(dataAndEvents) {
                                    return _.extend(_.clone(this), {
                                        accessory : dataAndEvents
                                    });
                                }, result.apply = function(expectedHashCode, type) {
                                    if ("+" === this.type) {
                                        if (expectedHashCode.length !== this.tlen) {
                                            throw new Error("Text length doesn't match expected length. It's most likely you have missed a transformation: expected:" + this.tlen + ", actual:" + expectedHashCode.length);
                                        }
                                        return type && (this.pos < type.b && (type.b += this.text.length), this.pos < type.e && (type.e += this.text.length)), expectedHashCode.slice(0, this.pos) + this.text + expectedHashCode.slice(this.pos);
                                    }
                                    if ("-" === this.type) {
                                        if (expectedHashCode.length !== this.tlen) {
                                            throw new Error("Text length doesn't match expected length. It's most likely you have missed a transformation: expected:" + this.tlen + ", actual:" + expectedHashCode.length);
                                        }
                                        if (expectedHashCode.substr(this.pos, this.len) !== this.text) {
                                            throw new Error("Applying delete operation: Passed context doesn't match assumed context: " + JSON.stringify(result) + ', actual context: "' + expectedHashCode.substr(this.pos, this.len) + '"');
                                        }
                                        return type && (this.pos < type.b && (type.b -= Math.min(this.text.length, type.b - this.pos)), this.pos < type.e && (type.e -= Math.min(this.text.length, type.e - this.pos))), expectedHashCode.slice(0, this.pos) + expectedHashCode.slice(this.pos + this.len);
                                    }
                                    if ("=" === this.type) {
                                        return expectedHashCode;
                                    }
                                }, result.transformAgainst = function(e) {
                                    if ("+" === this.type && "+" === e.type) {
                                        var tlen = this.tlen + e.len;
                                        if (this.pos < e.pos) {
                                            return this.extend({
                                                tlen : tlen
                                            });
                                        }
                                        if (this.pos === e.pos && this.accessory < e.accessory) {
                                            return this.extend({
                                                tlen : tlen
                                            });
                                        }
                                        if (e.pos <= this.pos) {
                                            return this.extend({
                                                tlen : tlen,
                                                pos : this.pos + e.len
                                            });
                                        }
                                    } else {
                                        if ("+" === this.type && "-" === e.type) {
                                            /** @type {number} */
                                            tlen = this.tlen - e.len;
                                            if (this.pos < e.pos) {
                                                return this.extend({
                                                    tlen : tlen
                                                });
                                            }
                                            if (this.pos === e.pos) {
                                                return this.extend({
                                                    tlen : tlen
                                                });
                                            }
                                            if (e.pos < this.pos) {
                                                return this.extend({
                                                    tlen : tlen,
                                                    pos : Math.max(this.pos - e.len, e.pos)
                                                });
                                            }
                                        } else {
                                            if ("-" === this.type && "-" === e.type) {
                                                /** @type {number} */
                                                tlen = this.tlen - e.len;
                                                if (this.pos < e.pos) {
                                                    /** @type {number} */
                                                    var nl = Math.min(e.pos - this.pos, this.len);
                                                    return this.extend({
                                                        tlen : tlen,
                                                        text : this.text.substr(0, nl) + this.text.substr(nl + e.len)
                                                    });
                                                }
                                                if (this.pos === e.pos) {
                                                    return this.len <= e.len ? q.op({
                                                        type : "="
                                                    }) : this.extend({
                                                        tlen : tlen,
                                                        text : this.text.substr(e.len)
                                                    });
                                                }
                                                if (e.pos < this.pos) {
                                                    /** @type {number} */
                                                    var start = e.pos + e.len - this.pos;
                                                    return start >= this.len ? q.op({
                                                        type : "="
                                                    }) : start > 0 ? this.extend({
                                                        tlen : tlen,
                                                        pos : e.pos,
                                                        text : this.text.substr(start)
                                                    }) : this.extend({
                                                        tlen : tlen,
                                                        pos : this.pos - e.len
                                                    });
                                                }
                                            } else {
                                                if ("-" === this.type && "+" === e.type) {
                                                    tlen = this.tlen + e.len;
                                                    if (this.pos < e.pos) {
                                                        if (this.pos + this.len > e.pos) {
                                                            /** @type {number} */
                                                            var end = e.pos - this.pos;
                                                            return[this.extend({
                                                                tlen : tlen,
                                                                text : this.text.substr(0, end)
                                                            }), this.extend({
                                                                tlen : tlen,
                                                                pos : e.pos + e.len,
                                                                text : this.text.substr(end)
                                                            })];
                                                        }
                                                        return this.extend({
                                                            tlen : tlen
                                                        });
                                                    }
                                                    if (this.pos === e.pos) {
                                                        return this.extend({
                                                            tlen : tlen,
                                                            pos : this.pos + e.len
                                                        });
                                                    }
                                                    if (e.pos < this.pos) {
                                                        return this.extend({
                                                            tlen : tlen,
                                                            pos : this.pos + e.len
                                                        });
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    return this;
                                }, result;
                            },
                            /**
                             * @param {string} expectedHashCode
                             * @return {?}
                             */
                            cs : function(expectedHashCode) {
                                return expectedHashCode = _.clone(expectedHashCode.map(function(values) {
                                    return _.clone(values);
                                })), expectedHashCode.toString = function() {
                                    return this.map(function(dstUri) {
                                        return dstUri.toString();
                                    }).join(" ");
                                }, expectedHashCode.push = function(type) {
                                    if (type instanceof Array) {
                                        type.forEach(function(cycle) {
                                            [].push.call(expectedHashCode, cycle);
                                        });
                                    } else {
                                        [].push.call(expectedHashCode, type);
                                    }
                                }, expectedHashCode.revision = function(dataAndEvents) {
                                    return q.cs(expectedHashCode.map(function(snap) {
                                        return snap.revision(dataAndEvents);
                                    }));
                                }, expectedHashCode.maxRevision = function() {
                                    return Math.max(0, Math.max.apply(null, expectedHashCode.map(function(data) {
                                        return data.accessory;
                                    })));
                                }, expectedHashCode.apply = function(expectedHashCode, type) {
                                    return this.sequencify().forEach(function(matcherFunction) {
                                        expectedHashCode = matcherFunction.apply(expectedHashCode, type);
                                    }), expectedHashCode;
                                }, expectedHashCode.transformAgainst = function(datum) {
                                    var cycles = q.cs([]);
                                    datum = datum.sequencify();
                                    return this.forEach(function(cycle) {
                                        datum.forEach(function(datum) {
                                            cycle = cycle.transformAgainst(datum);
                                        });
                                        cycles.push(cycle);
                                    }), cycles;
                                }, expectedHashCode.sequencify = function(dataAndEvents) {
                                    var cycles = q.cs([]);
                                    return this.forEach(function(cycle) {
                                        if ("=" !== cycle.type) {
                                            cycles.forEach(function(datum) {
                                                cycle = cycle.transformAgainst(datum);
                                            });
                                            cycles.push(cycle);
                                        }
                                    }), cycles;
                                }, expectedHashCode.pack = function() {
                                    return this.filter(function(statement) {
                                        return "=" !== statement.type;
                                    }).map(function(data) {
                                        var t = data.text.replace(/%/g, "%25").replace(/:/g, "%3A");
                                        var px = data.pos.toString(36);
                                        var r = data.tlen.toString(36);
                                        var o = data.accessory.toString(36);
                                        return data.type + px + ":" + r + ":" + t + ":" + o;
                                    }).join("");
                                }, expectedHashCode;
                            },
                            /**
                             * @param {string} array
                             * @param {string} obj2
                             * @param {number} start
                             * @return {?}
                             */
                            diff : function(array, obj2, start) {
                                start = start || 0;
                                var self = toObject(array, obj2);
                                var eventPath = q.cs([]);
                                var array_length = array.length;
                                return self.oldFragment && eventPath.push(q.op({
                                    type : "-",
                                    tlen : array_length,
                                    pos : self.from,
                                    text : self.oldFragment,
                                    accessory : start
                                })), self.newFragment && eventPath.push(q.op({
                                    type : "+",
                                    tlen : array_length,
                                    pos : self.from,
                                    text : self.newFragment,
                                    accessory : start
                                })), eventPath;
                            },
                            /**
                             * @param {string} data
                             * @return {?}
                             */
                            unpack : function(data) {
                                if ("" === data) {
                                    return q.cs([]);
                                }
                                var mod = data.match(/(\+|-)\w+?:\w+?:[^:]+?:\w+/g);
                                if (!mod) {
                                    throw new Error("Cannot unpack invalid serialized changeset string");
                                }
                                return q.cs(mod.map(function(rgb) {
                                    var split = rgb.substr(1).split(":");
                                    return q.op({
                                        type : rgb.substr(0, 1),
                                        pos : parseInt(split[0], 36),
                                        tlen : parseInt(split[1], 36),
                                        text : split[2].replace(/%3A/gi, ":").replace(/%25/g, "%"),
                                        accessory : parseInt(split[3], 36)
                                    });
                                }));
                            }
                        };
                        try {
                            options.exports = q;
                        } catch (a) {
                        }
                    }, {
                        lodash : "lodash",
                        textdiff : "textdiff"
                    }]
                }, {}, [1])(1);
            });
        }).call(this, "undefined" !== typeof window ? window : {});
    }, {
        "./lib/changesets" : 2,
        lodash : "lodash",
        textdiff : "textdiff"
    }],
    2 : [function(require, options, dataAndEvents) {
        var toObject = require("textdiff").textdiff;
        var _ = require("lodash");
        var q = {
            /**
             * @param {?} result
             * @return {?}
             */
            op : function(result) {
                return result = _.clone(result), result.len = result.text ? result.text.length : 0, result.toString = function() {
                    return this.type + this.pos + ":" + this.text;
                }, result.extend = function(opt_attributes) {
                    return result = _.extend(_.clone(this), opt_attributes), result.len = result.text.length, result;
                }, result.revision = function(dataAndEvents) {
                    return _.extend(_.clone(this), {
                        accessory : dataAndEvents
                    });
                }, result.apply = function(expectedHashCode, type) {
                    if ("+" === this.type) {
                        if (expectedHashCode.length !== this.tlen) {
                            throw new Error("Text length doesn't match expected length. It's most likely you have missed a transformation: expected:" + this.tlen + ", actual:" + expectedHashCode.length);
                        }
                        return type && (this.pos < type.b && (type.b += this.text.length), this.pos < type.e && (type.e += this.text.length)), expectedHashCode.slice(0, this.pos) + this.text + expectedHashCode.slice(this.pos);
                    }
                    if ("-" === this.type) {
                        if (expectedHashCode.length !== this.tlen) {
                            throw new Error("Text length doesn't match expected length. It's most likely you have missed a transformation: expected:" + this.tlen + ", actual:" + expectedHashCode.length);
                        }
                        if (expectedHashCode.substr(this.pos, this.len) !== this.text) {
                            throw new Error("Applying delete operation: Passed context doesn't match assumed context: " + JSON.stringify(result) + ', actual context: "' + expectedHashCode.substr(this.pos, this.len) + '"');
                        }
                        return type && (this.pos < type.b && (type.b -= Math.min(this.text.length, type.b - this.pos)), this.pos < type.e && (type.e -= Math.min(this.text.length, type.e - this.pos))), expectedHashCode.slice(0, this.pos) + expectedHashCode.slice(this.pos + this.len);
                    }
                    if ("=" === this.type) {
                        return expectedHashCode;
                    }
                }, result.transformAgainst = function(e) {
                    if ("+" === this.type && "+" === e.type) {
                        var tlen = this.tlen + e.len;
                        if (this.pos < e.pos) {
                            return this.extend({
                                tlen : tlen
                            });
                        }
                        if (this.pos === e.pos && this.accessory < e.accessory) {
                            return this.extend({
                                tlen : tlen
                            });
                        }
                        if (e.pos <= this.pos) {
                            return this.extend({
                                tlen : tlen,
                                pos : this.pos + e.len
                            });
                        }
                    } else {
                        if ("+" === this.type && "-" === e.type) {
                            /** @type {number} */
                            tlen = this.tlen - e.len;
                            if (this.pos < e.pos) {
                                return this.extend({
                                    tlen : tlen
                                });
                            }
                            if (this.pos === e.pos) {
                                return this.extend({
                                    tlen : tlen
                                });
                            }
                            if (e.pos < this.pos) {
                                return this.extend({
                                    tlen : tlen,
                                    pos : Math.max(this.pos - e.len, e.pos)
                                });
                            }
                        } else {
                            if ("-" === this.type && "-" === e.type) {
                                /** @type {number} */
                                tlen = this.tlen - e.len;
                                if (this.pos < e.pos) {
                                    /** @type {number} */
                                    var nl = Math.min(e.pos - this.pos, this.len);
                                    return this.extend({
                                        tlen : tlen,
                                        text : this.text.substr(0, nl) + this.text.substr(nl + e.len)
                                    });
                                }
                                if (this.pos === e.pos) {
                                    return this.len <= e.len ? q.op({
                                        type : "="
                                    }) : this.extend({
                                        tlen : tlen,
                                        text : this.text.substr(e.len)
                                    });
                                }
                                if (e.pos < this.pos) {
                                    /** @type {number} */
                                    var start = e.pos + e.len - this.pos;
                                    return start >= this.len ? q.op({
                                        type : "="
                                    }) : start > 0 ? this.extend({
                                        tlen : tlen,
                                        pos : e.pos,
                                        text : this.text.substr(start)
                                    }) : this.extend({
                                        tlen : tlen,
                                        pos : this.pos - e.len
                                    });
                                }
                            } else {
                                if ("-" === this.type && "+" === e.type) {
                                    tlen = this.tlen + e.len;
                                    if (this.pos < e.pos) {
                                        if (this.pos + this.len > e.pos) {
                                            /** @type {number} */
                                            var end = e.pos - this.pos;
                                            return[this.extend({
                                                tlen : tlen,
                                                text : this.text.substr(0, end)
                                            }), this.extend({
                                                tlen : tlen,
                                                pos : e.pos + e.len,
                                                text : this.text.substr(end)
                                            })];
                                        }
                                        return this.extend({
                                            tlen : tlen
                                        });
                                    }
                                    if (this.pos === e.pos) {
                                        return this.extend({
                                            tlen : tlen,
                                            pos : this.pos + e.len
                                        });
                                    }
                                    if (e.pos < this.pos) {
                                        return this.extend({
                                            tlen : tlen,
                                            pos : this.pos + e.len
                                        });
                                    }
                                }
                            }
                        }
                    }
                    return this;
                }, result;
            },
            /**
             * @param {string} expectedHashCode
             * @return {?}
             */
            cs : function(expectedHashCode) {
                return expectedHashCode = _.clone(expectedHashCode.map(function(values) {
                    return _.clone(values);
                })), expectedHashCode.toString = function() {
                    return this.map(function(dstUri) {
                        return dstUri.toString();
                    }).join(" ");
                }, expectedHashCode.push = function(type) {
                    if (type instanceof Array) {
                        type.forEach(function(cycle) {
                            [].push.call(expectedHashCode, cycle);
                        });
                    } else {
                        [].push.call(expectedHashCode, type);
                    }
                }, expectedHashCode.revision = function(dataAndEvents) {
                    return q.cs(expectedHashCode.map(function(snap) {
                        return snap.revision(dataAndEvents);
                    }));
                }, expectedHashCode.maxRevision = function() {
                    return Math.max(0, Math.max.apply(null, expectedHashCode.map(function(data) {
                        return data.accessory;
                    })));
                }, expectedHashCode.apply = function(expectedHashCode, type) {
                    return this.sequencify().forEach(function(matcherFunction) {
                        expectedHashCode = matcherFunction.apply(expectedHashCode, type);
                    }), expectedHashCode;
                }, expectedHashCode.transformAgainst = function(datum) {
                    var cycles = q.cs([]);
                    datum = datum.sequencify();
                    return this.forEach(function(cycle) {
                        datum.forEach(function(datum) {
                            cycle = cycle.transformAgainst(datum);
                        });
                        cycles.push(cycle);
                    }), cycles;
                }, expectedHashCode.sequencify = function(dataAndEvents) {
                    var cycles = q.cs([]);
                    return this.forEach(function(cycle) {
                        if ("=" !== cycle.type) {
                            cycles.forEach(function(datum) {
                                cycle = cycle.transformAgainst(datum);
                            });
                            cycles.push(cycle);
                        }
                    }), cycles;
                }, expectedHashCode.pack = function() {
                    return this.filter(function(statement) {
                        return "=" !== statement.type;
                    }).map(function(data) {
                        var t = data.text.replace(/%/g, "%25").replace(/:/g, "%3A");
                        var px = data.pos.toString(36);
                        var r = data.tlen.toString(36);
                        var o = data.accessory.toString(36);
                        return data.type + px + ":" + r + ":" + t + ":" + o;
                    }).join("");
                }, expectedHashCode;
            },
            /**
             * @param {string} array
             * @param {string} obj2
             * @param {number} start
             * @return {?}
             */
            diff : function(array, obj2, start) {
                start = start || 0;
                var self = toObject(array, obj2);
                var eventPath = q.cs([]);
                var array_length = array.length;
                return self.oldFragment && eventPath.push(q.op({
                    type : "-",
                    tlen : array_length,
                    pos : self.from,
                    text : self.oldFragment,
                    accessory : start
                })), self.newFragment && eventPath.push(q.op({
                    type : "+",
                    tlen : array_length,
                    pos : self.from,
                    text : self.newFragment,
                    accessory : start
                })), eventPath;
            },
            /**
             * @param {string} data
             * @return {?}
             */
            unpack : function(data) {
                if ("" === data) {
                    return q.cs([]);
                }
                var mod = data.match(/(\+|-)\w+?:\w+?:[^:]+?:\w+/g);
                if (!mod) {
                    throw new Error("Cannot unpack invalid serialized changeset string");
                }
                return q.cs(mod.map(function(rgb) {
                    var split = rgb.substr(1).split(":");
                    return q.op({
                        type : rgb.substr(0, 1),
                        pos : parseInt(split[0], 36),
                        tlen : parseInt(split[1], 36),
                        text : split[2].replace(/%3A/gi, ":").replace(/%25/g, "%"),
                        accessory : parseInt(split[3], 36)
                    });
                }));
            }
        };
        try {
            options.exports = q;
        } catch (a) {
        }
    }, {
        lodash : "lodash",
        textdiff : "textdiff"
    }],
    3 : [function(dataAndEvents, deepDataAndEvents, result) {
        /**
         * @param {number} value
         * @param {number} params
         * @param {?} val
         * @return {?}
         */
        function style(value, params, val) {
            return arguments.length < 2 ? callback(value) : void set(value, params, val);
        }
        /**
         * @param {number} value
         * @param {number} params
         * @return {undefined}
         */
        function set(value, params) {
            var opt = arguments.length <= 2 || void 0 === arguments[2] ? {} : arguments[2];
            /** @type {string} */
            var curCookie = isFunction(value) + "=" + isFunction(params);
            if (null === params) {
                /** @type {number} */
                opt.maxage = -1;
            }
            if (opt.maxage) {
                /** @type {Date} */
                opt.expires = new Date(+new Date + opt.maxage);
            }
            if (opt.path) {
                curCookie += "; path=" + opt.path;
            }
            if (opt.domain) {
                curCookie += "; domain=" + opt.domain;
            }
            if (opt.expires) {
                curCookie += "; expires=" + opt.expires.toUTCString();
            }
            if (opt.secure) {
                curCookie += "; secure";
            }
            /** @type {string} */
            document.cookie = curCookie;
        }
        /**
         * @param {number} method
         * @return {?}
         */
        function callback(method) {
            var value = each(document.cookie);
            return method ? value[method] : value;
        }
        /**
         * @param {string} collection
         * @return {?}
         */
        function each(collection) {
            var result = {};
            var n = collection.split(/ *; */);
            if (!n[0]) {
                return result;
            }
            var expectedHashCode = n;
            /** @type {boolean} */
            var o = Array.isArray(expectedHashCode);
            /** @type {number} */
            var x = 0;
            expectedHashCode = o ? expectedHashCode : expectedHashCode[Symbol.iterator]();
            for (;;) {
                var val;
                if (o) {
                    if (x >= expectedHashCode.length) {
                        break;
                    }
                    val = expectedHashCode[x++];
                } else {
                    if (x = expectedHashCode.next(), x.done) {
                        break;
                    }
                    val = x.value;
                }
                var param = val;
                param = param.split("=");
                result[decode(param[0])] = decode(param[1]);
            }
            return result;
        }
        /**
         * @param {number} arg
         * @return {?}
         */
        function isFunction(arg) {
            try {
                return encodeURIComponent(arg);
            } catch (t) {
                return null;
            }
        }
        /**
         * @param {?} path
         * @return {?}
         */
        function decode(path) {
            try {
                return decodeURIComponent(path);
            } catch (t) {
                return null;
            }
        }
        /** @type {boolean} */
        result.__esModule = true;
        /** @type {function (number, number, ?): ?} */
        result["default"] = style;
    }, {}],
    4 : [function(require, dataAndEvents, expectedHashCode) {
        /**
         * @param {string} _value
         * @return {?}
         */
        function resolve(_value) {
            return{
                type : "success",
                value : _value
            };
        }
        /**
         * @param {Error} reason
         * @return {?}
         */
        function reject(reason) {
            return{
                type : "failure",
                error : reason
            };
        }
        /**
         * @param {?} promise
         * @return {?}
         */
        function connect(promise) {
            return promise.then(resolve, reject);
        }
        /**
         * @param {number} opt_attributes
         * @param {number} timestep
         * @param {Function} callback
         * @return {?}
         */
        function save(opt_attributes, timestep, callback) {
            var result = callback();
            return opt_attributes > 0 ? result["catch"](function(dataAndEvents) {
                return(new Promise(function(fnc, dataAndEvents) {
                    return setTimeout(fnc, timestep);
                })).then(function(dataAndEvents) {
                    return save(opt_attributes - 1, timestep, callback);
                });
            }) : result;
        }
        var throttledUpdate = this && this.__extends || function() {
            var throttledUpdate = Object.setPrototypeOf || ({
                __proto__ : []
            } instanceof Array && function(expectedHashCode, type) {
                /** @type {string} */
                expectedHashCode.__proto__ = type;
            } || function(expectedHashCode, type) {
                var i;
                for (i in type) {
                    if (type.hasOwnProperty(i)) {
                        expectedHashCode[i] = type[i];
                    }
                }
            });
            return function(expectedHashCode, cycle) {
                /**
                 * @return {undefined}
                 */
                function __() {
                    /** @type {string} */
                    this.constructor = expectedHashCode;
                }
                throttledUpdate(expectedHashCode, cycle);
                expectedHashCode.prototype = null === cycle ? Object.create(cycle) : (__.prototype = cycle.prototype, new __);
            };
        }();
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var events = require("@grammarly-npm/cookie");
        var Base = require("./util");
        /** @type {string} */
        var key = "gnar_containerId";
        /** @type {string} */
        var storageKey = "gnar_containerId_test";
        /** @type {number} */
        var attributes = 12;
        /**
         * @return {?}
         */
        var formatDate = function() {
            return(new Date).setFullYear((new Date).getFullYear() + 10);
        };
        /**
         * @return {?}
         */
        var timestamp = function() {
            return(new Date).setMinutes((new Date).getMinutes() + 10);
        };
        /** @type {RegExp} */
        var isSimple = /^\.\w+\.\w+/;
        var ContainerIdManager = function() {
            /**
             * @param {?} err
             * @param {number} contexts
             * @param {?} n
             * @param {?} ctx
             * @param {number} a
             * @param {number} substitution
             * @param {Function} x
             * @return {undefined}
             */
            function f(err, contexts, n, ctx, a, substitution, x) {
                if (void 0 === contexts) {
                    /** @type {Array} */
                    contexts = [];
                }
                if (void 0 === a) {
                    /** @type {number} */
                    a = 3E5;
                }
                if (void 0 === substitution) {
                    /** @type {number} */
                    substitution = 0;
                }
                if (void 0 === x) {
                    /**
                     * @return {?}
                     */
                    x = function() {
                        return Date.now();
                    };
                }
                this.primaryStorage = err;
                /** @type {number} */
                this.secondaryStorages = contexts;
                this._logger = n;
                this._metric = ctx;
                /** @type {number} */
                this._cacheSuccessTimeoutMillis = a;
                /** @type {number} */
                this._cacheFailureTimeoutMillis = substitution;
                /** @type {Function} */
                this._getTime = x;
                /** @type {Array} */
                this._allStorages = [err].concat(contexts);
            }
            return f.prototype._expireCache = function(dataAndEvents) {
                if (0 === dataAndEvents) {
                    /** @type {number} */
                    this._cacheExpireTimestamp = 0;
                } else {
                    if (dataAndEvents > 0) {
                        this._cacheExpireTimestamp = this._getTime() + dataAndEvents;
                    }
                }
            }, f.prototype.getContainerId = function() {
                var that = this;
                if (void 0 !== this._cache && (void 0 === this._cacheExpireTimestamp || this._getTime() < this._cacheExpireTimestamp)) {
                    return this._cache;
                }
                var event = this._metric.getTimer("doGetContainerId.timer").start();
                var val = this._doGetContainerId();
                return this._cache = val, this._cacheExpireTimestamp = void 0, val.then(function(dataAndEvents) {
                    return that._expireCache(that._cacheSuccessTimeoutMillis);
                }, function(dataAndEvents) {
                    return that._expireCache(that._cacheFailureTimeoutMillis);
                }), val.then(function(dataAndEvents) {
                    event.stop();
                    that._metric.getCounter("doGetContainerId.success").increment();
                }, function(cycle) {
                    event.stop();
                    that._metric.getCounter("doGetContainerId.failure").increment();
                    that._logger.warn("doGetContainerId.failed", cycle);
                }), val;
            }, f._generateContainerId = function() {
                return Base.alphanumeric(attributes);
            }, f.prototype._doGetContainerId = function() {
                var self = this;
                var promise = Promise.all(this._allStorages.map(function(dataAndEvents) {
                    return connect(dataAndEvents.safeGetContainerId());
                }));
                return promise.then(function(a) {
                    var next = a[0];
                    if ("failure" === next.type) {
                        return Promise.reject("getting containerId from primary storage " + ("'" + self.primaryStorage.name + "' has failed: " + next.error));
                    }
                    var expectedHashCode;
                    var amount = a.find(function(textfield) {
                        return "success" === textfield.type && void 0 !== textfield.value;
                    });
                    /** @type {boolean} */
                    var program = "success" === next.type && (void 0 === next.value && void 0 !== amount);
                    /** @type {boolean} */
                    var inverse = false;
                    if (void 0 === amount) {
                        expectedHashCode = f._generateContainerId();
                        /** @type {boolean} */
                        inverse = true;
                    } else {
                        expectedHashCode = amount.value;
                    }
                    var values = a.map(function(textfield, timeoutKey) {
                        return "success" === textfield.type && textfield.value !== expectedHashCode ? connect(self._allStorages[timeoutKey].safeSetContainerId(expectedHashCode)) : Promise.resolve(resolve(void 0));
                    });
                    var promise = Promise.all(values).then(function(params) {
                        if (program || inverse) {
                            var param = params[0];
                            if ("success" !== param.type) {
                                return Promise.reject("setting containerId to primary storage has failed: " + param.error);
                            }
                        }
                        return Promise.resolve(expectedHashCode);
                    });
                    return promise.then(function(dataAndEvents) {
                        if (program) {
                            self._metric.getCounter("recovered").increment();
                        } else {
                            if (inverse) {
                                self._metric.getCounter("generated").increment();
                            }
                        }
                    }), promise;
                });
            }, f;
        }();
        expectedHashCode.ContainerIdManager = ContainerIdManager;
        var cycle = function() {
            /**
             * @param {string} name
             * @return {undefined}
             */
            function Set(name) {
                /** @type {string} */
                this.name = name;
            }
            return Set.prototype.safeSetContainerId = function(isXML) {
                var req1 = this;
                return this.ensureAvailable().then(function() {
                    return req1.setContainerId(isXML);
                });
            }, Set.prototype.safeGetContainerId = function() {
                var getContainerId = this;
                return this.ensureAvailable().then(function() {
                    return getContainerId.getContainerId();
                }).then(function(buffer) {
                    return "" === buffer ? void 0 : buffer;
                });
            }, Set;
        }();
        expectedHashCode.BaseStorage = cycle;
        var ChromeCookieStorage = function(cycle) {
            /**
             * @param {?} url
             * @param {?} qualifier
             * @return {?}
             */
            function expectedHashCode(url, qualifier) {
                var self = cycle.call(this, "chromeCookie") || this;
                if (self._url = url, self._domain = qualifier, !isSimple.test(qualifier)) {
                    throw new Error('Incorrect cookie domain provided.\n        Use top-level domain, starting from "."');
                }
                return self;
            }
            return throttledUpdate(expectedHashCode, cycle), expectedHashCode.prototype._hasRuntimeError = function() {
                return window.chrome && (window.chrome.runtime && window.chrome.runtime.lastError);
            }, expectedHashCode.prototype.ensureAvailable = function() {
                var settings = this;
                return save(2, 1E3, function() {
                    return new Promise(function($sanitize, done) {
                        var tag = Base.alphanumeric(10);
                        try {
                            window.chrome.cookies.set({
                                name : tag,
                                value : tag,
                                url : settings._url,
                                domain : settings._domain,
                                expirationDate : timestamp() / 1E3
                            }, function(child) {
                                var ex = settings._hasRuntimeError();
                                if (!child) {
                                    if (ex) {
                                        done("chrome.cookie.set failed with an error: " + ex.message);
                                    }
                                }
                                if (child && child.value === tag) {
                                    $sanitize();
                                } else {
                                    done(new Error("ChromeCookieStorage is unavailable.\n              Availability test failed.\n              Tried to set " + tag + ", the result is " + (child ? child.value : child) + "."));
                                }
                            });
                        } catch (err) {
                            done(err);
                        }
                    });
                });
            }, expectedHashCode.prototype.getContainerId = function() {
                var settings = this;
                return new Promise(function(done, on) {
                    try {
                        window.chrome.cookies.get({
                            url : settings._url,
                            name : key
                        }, function(found) {
                            var ex = settings._hasRuntimeError();
                            if (!found) {
                                if (ex) {
                                    on("chrome.cookie.get failed with an error: " + ex.message);
                                }
                            }
                            done(found ? found.value : void 0);
                        });
                    } catch (failuresLink) {
                        on(failuresLink);
                    }
                });
            }, expectedHashCode.prototype.setContainerId = function(value) {
                var settings = this;
                return new Promise(function($sanitize, done) {
                    try {
                        window.chrome.cookies.set({
                            name : key,
                            value : value,
                            url : settings._url,
                            domain : settings._domain,
                            expirationDate : formatDate() / 1E3
                        }, function(s) {
                            var ex = settings._hasRuntimeError();
                            if (!s) {
                                if (ex) {
                                    done("chrome.cookie.set failed with an error: " + ex.message);
                                }
                            }
                            if (!(s && s.value === value)) {
                                done(new Error("setContainerId failed.\n            Tried to set " + value + ", the result is " + (s ? s.value : s) + "."));
                            }
                            $sanitize();
                        });
                    } catch (err) {
                        done(err);
                    }
                });
            }, expectedHashCode;
        }(cycle);
        expectedHashCode.ChromeCookieStorage = ChromeCookieStorage;
        var WebExtensionsCookieStorage = function(cycle) {
            /**
             * @param {?} url
             * @param {?} qualifier
             * @return {?}
             */
            function expectedHashCode(url, qualifier) {
                var self = cycle.call(this, "webExtensionsCookie") || this;
                if (self._url = url, self._domain = qualifier, !isSimple.test(qualifier)) {
                    throw new Error('Incorrect cookie domain provided.\n        Use top-level domain, starting from "."');
                }
                return self;
            }
            return throttledUpdate(expectedHashCode, cycle), expectedHashCode.prototype.ensureAvailable = function() {
                var settings = this;
                return save(2, 1E3, function() {
                    return new Promise(function($sanitize, done) {
                        var tag = Base.alphanumeric(10);
                        window.browser.cookies.set({
                            name : tag,
                            value : tag,
                            url : settings._url,
                            domain : settings._domain,
                            expirationDate : timestamp() / 1E3
                        }).then(function() {
                            window.browser.cookies.get({
                                url : settings._url,
                                name : tag
                            }).then(function(child) {
                                if (child && child.value === tag) {
                                    $sanitize();
                                } else {
                                    done(new Error("WebExtensionsCookieStorage is unavailable.\n              Availability test failed.\n              Tried to set " + tag + ", the result is " + (child ? child.value : child) + "."));
                                }
                            })["catch"](function(m1) {
                                done("browser.cookies.get failed with an error: " + m1.message);
                            });
                        })["catch"](function(m1) {
                            done("browser.cookies.set failed with an error: " + m1.message);
                        });
                    });
                });
            }, expectedHashCode.prototype.getContainerId = function() {
                var settings = this;
                return new Promise(function(done, $sanitize) {
                    window.browser.cookies.get({
                        url : settings._url,
                        name : key
                    }).then(function(found) {
                        done(found ? found.value : void 0);
                    })["catch"](function(m1) {
                        $sanitize("browser.cookies.get failed with an error: " + m1.message);
                    });
                });
            }, expectedHashCode.prototype.setContainerId = function(value) {
                var settings = this;
                return new Promise(function($sanitize, done) {
                    window.browser.cookies.set({
                        name : key,
                        value : value,
                        url : settings._url,
                        domain : settings._domain,
                        expirationDate : formatDate() / 1E3
                    }).then(function(s) {
                        if (!(s && s.value === value)) {
                            done(new Error("setContainerId failed.\n          Tried to set " + value + ", the result is " + (s ? s.value : s) + "."));
                        }
                        $sanitize();
                    })["catch"](function(m1) {
                        done("browser.cookies.set failed with an error: " + m1.message);
                    });
                });
            }, expectedHashCode;
        }(cycle);
        expectedHashCode.WebExtensionsCookieStorage = WebExtensionsCookieStorage;
        var LocalStorage = function(cycle) {
            /**
             * @return {?}
             */
            function expectedHashCode() {
                return cycle.call(this, "localStorage") || this;
            }
            return throttledUpdate(expectedHashCode, cycle), expectedHashCode.prototype.ensureAvailable = function() {
                var tabId = Base.alphanumeric(10);
                return new Promise(function($sanitize, done) {
                    localStorage.setItem(storageKey, tabId);
                    if (localStorage.getItem(storageKey) !== tabId) {
                        done(new Error("LocalStorage is unavailable.\n          Availability test failed.\n          Tried to set " + tabId + ", the result is " + localStorage.getItem(storageKey) + "."));
                    } else {
                        $sanitize();
                    }
                    localStorage.removeItem(storageKey);
                });
            }, expectedHashCode.prototype.getContainerId = function() {
                var value = localStorage.getItem(key);
                return new Promise(function(resolve, dataAndEvents) {
                    return resolve(null === value ? void 0 : value);
                });
            }, expectedHashCode.prototype.setContainerId = function(value) {
                return new Promise(function($sanitize, dataAndEvents) {
                    localStorage.setItem(key, value);
                    $sanitize();
                });
            }, expectedHashCode;
        }(cycle);
        expectedHashCode.LocalStorage = LocalStorage;
        var CookieStorage = function(cycle) {
            /**
             * @param {?} qualifier
             * @return {?}
             */
            function expectedHashCode(qualifier) {
                var self = cycle.call(this, "cookie") || this;
                if (self._domain = qualifier, !isSimple.test(qualifier)) {
                    throw new Error('Incorrect cookie domain provided.\n        Use top-level domain, starting from "."');
                }
                return self;
            }
            return throttledUpdate(expectedHashCode, cycle), expectedHashCode.prototype._getCookieOptions = function() {
                return{
                    path : "/",
                    domain : this._domain,
                    expires : new Date(formatDate())
                };
            }, expectedHashCode.prototype.ensureAvailable = function() {
                var event = Base.alphanumeric(10);
                return new Promise(function($sanitize, done) {
                    events["default"](event, event);
                    if (events["default"](event) !== event) {
                        done(new Error("CookieStorage is unavailable.\n          Availability test failed.\n          Tried to set " + event + ", the result is " + events["default"](event) + "."));
                    } else {
                        $sanitize();
                    }
                    events["default"](event, null);
                });
            }, expectedHashCode.prototype.getContainerId = function() {
                return new Promise(function(func, dataAndEvents) {
                    return func(events["default"](key));
                });
            }, expectedHashCode.prototype.setContainerId = function(isXML) {
                var _getCookieOptions = this;
                return new Promise(function($sanitize, dataAndEvents) {
                    events["default"](key, isXML, _getCookieOptions._getCookieOptions());
                    $sanitize();
                });
            }, expectedHashCode;
        }(cycle);
        expectedHashCode.CookieStorage = CookieStorage;
        var BackendStorage = function(cycle) {
            /**
             * @param {?} theTitle
             * @param {string} client
             * @return {?}
             */
            function expectedHashCode(theTitle, client) {
                var self = cycle.call(this, "backend") || this;
                return self._fetch = theTitle, self._url = client, self._keyName = key, self._testKeyName = storageKey, self._baseUrl = client + "/cookies", self;
            }
            return throttledUpdate(expectedHashCode, cycle), expectedHashCode.prototype.ensureAvailable = function() {
                var util = this;
                var val = Base.alphanumeric(10);
                /** @type {number} */
                var type = (timestamp() - Date.now()) / 1E3;
                /** @type {string} */
                var desc = this._baseUrl + "?name=" + this._testKeyName;
                /** @type {string} */
                var msg = desc + "&value=" + val + "&maxAge=" + type;
                return this._doSend(msg, "post").then(function(assert) {
                    if (!assert.ok) {
                        throw new Error("BackendStorage is unavailable.\n          Availability test failed.\n          Tried to set " + val + ". Request failed.\n        ");
                    }
                }).then(function() {
                    return util._doSend(desc, "get").then(function(res) {
                        if (res.ok) {
                            return res.json().then(function(rel) {
                                if (rel.value !== val) {
                                    throw new Error("BackendStorage is unavailable.\n                Availability test failed.\n                Tried to get " + util._testKeyName + " from server.\n                Got " + rel.value + " instead of " + val + ".");
                                }
                            });
                        }
                        throw new Error("BackendStorage is unavailable.\n            Availability test failed.\n            Tried to get " + util._testKeyName + " from server. Request failed.");
                    });
                });
            }, expectedHashCode.prototype._doSend = function(data, method) {
                return this._fetch(data, {
                    credentials : "include",
                    method : method
                });
            }, expectedHashCode.prototype.getContainerId = function() {
                /** @type {string} */
                var pdataCur = this._baseUrl + "?name=" + this._keyName;
                return this._doSend(pdataCur, "get").then(function(res) {
                    return res.json();
                }).then(function($provide) {
                    return $provide.value;
                });
            }, expectedHashCode.prototype.setContainerId = function(isXML) {
                /** @type {number} */
                var type = (formatDate() - Date.now()) / 1E3;
                /** @type {string} */
                var msg = this._baseUrl + "?name=" + this._keyName + "&value=" + isXML + "&maxAge=" + type;
                return this._doSend(msg, "post").then(function() {
                });
            }, expectedHashCode;
        }(cycle);
        expectedHashCode.BackendStorage = BackendStorage;
        var MemoryStorage = function(cycle) {
            /**
             * @param {Object} _value
             * @return {?}
             */
            function expectedHashCode(_value) {
                if (void 0 === _value) {
                    _value = void 0;
                }
                var _lastDisplayedGridState = cycle.call(this, "memory") || this;
                return _lastDisplayedGridState._value = _value, _lastDisplayedGridState;
            }
            return throttledUpdate(expectedHashCode, cycle), expectedHashCode.prototype.ensureAvailable = function() {
                return Promise.resolve();
            }, expectedHashCode.prototype.getContainerId = function() {
                return Promise.resolve(this._value);
            }, expectedHashCode.prototype.setContainerId = function(value) {
                return this._value = value, Promise.resolve();
            }, expectedHashCode;
        }(cycle);
        expectedHashCode.MemoryStorage = MemoryStorage;
    }, {
        "./util" : 6,
        "@grammarly-npm/cookie" : 3
    }],
    5 : [function(lerp, dataAndEvents, expectedHashCode) {
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var cd = lerp("./util");
        var bc = lerp("./container_id_manager");
        expectedHashCode.ContainerIdManager = bc.ContainerIdManager;
        expectedHashCode.BaseStorage = bc.BaseStorage;
        expectedHashCode.MemoryStorage = bc.MemoryStorage;
        expectedHashCode.LocalStorage = bc.LocalStorage;
        expectedHashCode.CookieStorage = bc.CookieStorage;
        expectedHashCode.ChromeCookieStorage = bc.ChromeCookieStorage;
        expectedHashCode.WebExtensionsCookieStorage = bc.WebExtensionsCookieStorage;
        expectedHashCode.BackendStorage = bc.BackendStorage;
        /** @type {Array} */
        var excludes = ["eventName", "client", "clientVersion", "userId", "isTest", "containerId", "instanceId", "batchId"];
        /** @type {string} */
        var storageKey = "gnar_nextPingTimestamp";
        var GnarClientImpl = function() {
            /**
             * @param {string} err
             * @param {string} key
             * @param {?} name
             * @param {?} val
             * @param {?} count
             * @param {?} logger
             * @param {?} child
             * @param {boolean} res
             * @return {undefined}
             */
            function self(err, key, name, val, count, logger, child, res) {
                if (void 0 === res) {
                    /** @type {boolean} */
                    res = false;
                }
                /** @type {string} */
                this._client = key;
                this._clientVersion = name;
                this._fetch = val;
                this._containerIdManager = count;
                this._logger = logger;
                this._metric = child;
                /** @type {boolean} */
                this._storePingTimestamp = res;
                /** @type {number} */
                this._batchId = 0;
                this._instanceId = cd.alphanumeric(8);
                /** @type {boolean} */
                this._isReady = false;
                /** @type {Array} */
                this._queue = [];
                /** @type {string} */
                this._eventsUrl = err + "/events";
                this._pingMaybe();
            }
            return self.prototype.track = function(url, expectedHashCode) {
                if (void 0 === expectedHashCode && (expectedHashCode = {}), 0 === url.indexOf(this._client + "/")) {
                    throw new Error("Event name " + url + " should not start with '" + this._client + "/'");
                }
                Object.keys(expectedHashCode).forEach(function(el) {
                    if (excludes.indexOf(el) !== -1) {
                        throw new Error("Event data should not contain '" + el + "' prop.");
                    }
                });
                if (this._isReady) {
                    if ("ping" !== url) {
                        this._pingMaybe();
                    }
                    this._send(url, expectedHashCode);
                } else {
                    this._enqueue(url, expectedHashCode);
                }
            }, self.prototype.setUser = function(value, user) {
                if (null === value || "" === value) {
                    throw new Error("Invalid userId: " + value);
                }
                var _userId = this._userId && (this._userId !== value && !(/^-/.test(value) && /^-/.test(this._userId)));
                this._isTest = user;
                /** @type {number} */
                this._userId = value;
                if (_userId) {
                    this._pingMaybe(true);
                }
                if (!this._isReady) {
                    this._execQueue();
                    /** @type {boolean} */
                    this._isReady = true;
                }
            }, self.prototype.getContainerId = function() {
                return this._containerIdManager.getContainerId();
            }, self.prototype._setNextPingTimestamp = function() {
                var dstUri = cd.getNextPingDate();
                if (this._nextPingTimestamp = dstUri, this._storePingTimestamp) {
                    try {
                        localStorage.setItem(storageKey, dstUri.toString());
                    } catch (cycle) {
                        this._metric.getCounter("nextPingDate.write.failure").increment();
                        this._logger.warn("nextPingDate.write.failed", cycle);
                    }
                }
            }, self.prototype._getNextPingTimestamp = function() {
                var _nextPingTimestamp = this._nextPingTimestamp;
                if (void 0 !== _nextPingTimestamp || !this._storePingTimestamp) {
                    return _nextPingTimestamp;
                }
                try {
                    var cDigit = localStorage.getItem(storageKey);
                    /** @type {(number|undefined)} */
                    _nextPingTimestamp = null === cDigit ? void 0 : parseInt(cDigit, 10);
                } catch (cycle) {
                    _nextPingTimestamp = void 0;
                    this._metric.getCounter("nextPingDate.read.failure").increment();
                    this._logger.warn("nextPingDate.read.failed", cycle);
                }
                return _nextPingTimestamp;
            }, self.prototype._shouldPing = function(deepDataAndEvents) {
                if (deepDataAndEvents) {
                    return true;
                }
                var number = this._getNextPingTimestamp();
                return void 0 === number || number < Date.now();
            }, self.prototype._pingMaybe = function(deepDataAndEvents) {
                if (void 0 === deepDataAndEvents && (deepDataAndEvents = false), this._shouldPing(deepDataAndEvents)) {
                    this._setNextPingTimestamp();
                    var props = {
                        referrer : document.referrer,
                        url : document.location.href,
                        userAgent : navigator.userAgent,
                        navigatorAppName : navigator.appName,
                        navigatorAppCodeName : navigator.appCodeName,
                        navigatorAppVersion : navigator.appVersion,
                        navigatorVendor : navigator.vendor,
                        screenWidth : screen.width,
                        screenHeight : screen.height
                    };
                    this.track("ping", props);
                }
            }, self.prototype.pingMaybe = function() {
                this._pingMaybe();
            }, self.prototype._enqueue = function(key, cb) {
                this._queue.push([key, cb]);
            }, self.prototype._execQueue = function() {
                var that = this;
                this._queue.forEach(function(args) {
                    var text = args[0];
                    var cb = args[1];
                    return that._send(text, cb);
                });
                /** @type {Array} */
                this._queue = [];
            }, self.prototype._send = function(type, o) {
                var self = this;
                /** @type {number} */
                var _batchId = this._batchId++;
                this.getContainerId().then(function(containerId) {
                    var options = {
                        eventName : self._client + "/" + type,
                        client : self._client,
                        clientVersion : self._clientVersion,
                        userId : self._userId,
                        isTest : self._isTest,
                        containerId : containerId,
                        instanceId : self._instanceId,
                        batchId : _batchId
                    };
                    return self._doSend(options, o);
                })["catch"](function(cycle) {
                    self._metric.getCounter("send.failure").increment();
                    self._logger.warn("send.failed", cycle);
                });
            }, self.prototype._doSend = function(expectedHashCode, cycle) {
                return this._fetch(this._eventsUrl, {
                    mode : "cors",
                    credentials : "include",
                    method : "post",
                    headers : {
                        "Content-Type" : "application/json"
                    },
                    body : JSON.stringify({
                        events : [Object.assign(expectedHashCode, cycle)]
                    })
                });
            }, self;
        }();
        expectedHashCode.GnarClientImpl = GnarClientImpl;
        var MemoryGnarClient = function() {
            /**
             * @return {undefined}
             */
            function self() {
                /** @type {Array} */
                this.history = [];
            }
            return self.prototype.track = function(eventName, properties) {
                if (void 0 === properties) {
                    properties = {};
                }
                this.history.push({
                    eventName : eventName,
                    props : properties
                });
            }, self.prototype.pingMaybe = function() {
            }, self.prototype.setUser = function(user, aValue) {
            }, self.prototype.getContainerId = function() {
                return Promise.resolve("dummy_container_id");
            }, self;
        }();
        expectedHashCode.MemoryGnarClient = MemoryGnarClient;
        var LocalStorageGnarClient = function() {
            /**
             * @return {undefined}
             */
            function self() {
            }
            return self.prototype.track = function(eventName, properties) {
                if (void 0 === properties) {
                    properties = {};
                }
                /** @type {string} */
                var storageKey = "trackingGnar";
                try {
                    /** @type {*} */
                    var list = JSON.parse(localStorage.getItem(storageKey)) || [];
                    list.push({
                        eventName : eventName,
                        props : properties
                    });
                    localStorage.setItem(storageKey, JSON.stringify(list));
                } catch (o) {
                }
            }, self.prototype.pingMaybe = function() {
            }, self.prototype.setUser = function(user, aValue) {
            }, self.prototype.getContainerId = function() {
                return Promise.resolve("dummy_container_id");
            }, self;
        }();
        expectedHashCode.LocalStorageGnarClient = LocalStorageGnarClient;
    }, {
        "./container_id_manager" : 4,
        "./util" : 6
    }],
    6 : [function(dataAndEvents, deepDataAndEvents, expectedHashCode) {
        /**
         * @param {number} opt_attributes
         * @param {string} max
         * @return {?}
         */
        function rand(opt_attributes, max) {
            if (void 0 === max && (max = ""), opt_attributes <= 0) {
                return max;
            }
            /** @type {number} */
            var index2 = Math.floor(Math.random() * (possible.length - 1));
            return rand(opt_attributes - 1, max + possible.charAt(index2));
        }
        /**
         * @return {?}
         */
        function process() {
            /** @type {Date} */
            var currentTime = new Date;
            return currentTime.getHours() > 2 && currentTime.setDate(currentTime.getDate() + 1), currentTime.setHours(3), currentTime.setMinutes(Math.floor(60 * Math.random())), currentTime.getTime();
        }
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        /** @type {string} */
        var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
        /** @type {function (number, string): ?} */
        expectedHashCode.alphanumeric = rand;
        /** @type {function (): ?} */
        expectedHashCode.getNextPingDate = process;
    }, {}],
    7 : [function(require, dataAndEvents, expectedHashCode) {
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var nodes = require("./ring_buffer");
        var CrashLogWrapper = function() {
            /**
             * @param {HTMLAnchorElement} css
             * @param {Function} options
             * @param {?} fileContent
             * @param {?} str
             * @return {undefined}
             */
            function Tokenizer(css, options, fileContent, str) {
                var self = this;
                this._eventsSink = fileContent;
                this._crashLogger = str;
                /** @type {boolean} */
                this._crashLogged = false;
                /**
                 * @param {string} name
                 * @return {undefined}
                 */
                this.sink = function(name) {
                    self._buffer.push(name);
                    self._eventsSink(name);
                    if (self._trigger(name)) {
                        self._sendCrashLog(name);
                    }
                };
                this._buffer = new nodes.RingBuffer(css, true);
                /** @type {Function} */
                this._trigger = "function" === typeof options ? options : function(o) {
                    return o.level >= options;
                };
            }
            return Tokenizer.prototype._sendCrashLog = function(o) {
                if (!this._crashLogged || this._buffer.size > this._buffer.capacity / 2) {
                    var error = void 0;
                    try {
                        /** @type {string} */
                        error = JSON.stringify(this._buffer, void 0, "");
                    } catch (err) {
                        error = err;
                    }
                    this._crashLogger.log(o.level, "CrashLog", {
                        events : error,
                        first : !this._crashLogged
                    });
                    /** @type {boolean} */
                    this._crashLogged = true;
                    this._buffer.clear();
                }
            }, Tokenizer;
        }();
        expectedHashCode.CrashLogWrapper = CrashLogWrapper;
    }, {
        "./ring_buffer" : 11
    }],
    8 : [function(require, dataAndEvents, expectedHashCode) {
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var helper = require("./log4ts");
        expectedHashCode.Logging = helper;
        var nodes = require("./log4ts_impl");
        expectedHashCode.LoggingImpl = nodes;
        var Block = require("./timeseries");
        expectedHashCode.TimeSeries = Block;
        var inspect = require("./timeseries_impl");
        expectedHashCode.TimeSeriesImpl = inspect;
        var selfClosing = require("./utils");
        expectedHashCode.EventProps = selfClosing.EventProps;
        var c;
        !function(exports) {
            var EventEmitter = function() {
                /**
                 * @return {undefined}
                 */
                function expectedHashCode() {
                }
                return Object.defineProperty(expectedHashCode, "root", {
                    /**
                     * @return {?}
                     */
                    get : function() {
                        return nodes.LoggingConfig.getRootLogger();
                    },
                    enumerable : true,
                    configurable : true
                }), expectedHashCode.getLogger = function(name, deepDataAndEvents) {
                    return expectedHashCode.root.getLogger(name, deepDataAndEvents);
                }, expectedHashCode;
            }();
            exports.Logging = EventEmitter;
            var TimeSeries = function() {
                /**
                 * @return {undefined}
                 */
                function expectedHashCode() {
                }
                return Object.defineProperty(expectedHashCode, "root", {
                    /**
                     * @return {?}
                     */
                    get : function() {
                        return inspect.MetricsConfig.getRootMetric();
                    },
                    enumerable : true,
                    configurable : true
                }), expectedHashCode;
            }();
            exports.TimeSeries = TimeSeries;
        }(c = expectedHashCode.Monitoring || (expectedHashCode.Monitoring = {}));
    }, {
        "./log4ts" : 9,
        "./log4ts_impl" : 10,
        "./timeseries" : 12,
        "./timeseries_impl" : 13,
        "./utils" : 14
    }],
    9 : [function(dataAndEvents, deepDataAndEvents, expectedHashCode) {
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var r;
        !function(Level) {
            /** @type {string} */
            Level[Level.TRACE = 0] = "TRACE";
            /** @type {string} */
            Level[Level.DEBUG = 1] = "DEBUG";
            /** @type {string} */
            Level[Level.INFO = 2] = "INFO";
            /** @type {string} */
            Level[Level.WARN = 3] = "WARN";
            /** @type {string} */
            Level[Level.ERROR = 4] = "ERROR";
            /** @type {string} */
            Level[Level.FATAL = 5] = "FATAL";
            /** @type {string} */
            Level[Level.OFF = 6] = "OFF";
        }(r = expectedHashCode.LogLevel || (expectedHashCode.LogLevel = {}));
        (function(Level) {
            /**
             * @param {string} iLogLevel
             * @return {?}
             */
            function getLevel(iLogLevel) {
                switch(iLogLevel) {
                    case "TRACE":
                        return Level.TRACE;
                    case "DEBUG":
                        return Level.DEBUG;
                    case "INFO":
                        return Level.INFO;
                    case "WARN":
                        return Level.WARN;
                    case "ERROR":
                        return Level.ERROR;
                    case "FATAL":
                        return Level.FATAL;
                    case "OFF":
                        return Level.OFF;
                    default:
                        throw new TypeError("Unrecognized log level string '" + iLogLevel + "'");;
                }
            }
            /** @type {function (string): ?} */
            Level.fromString = getLevel;
        })(r = expectedHashCode.LogLevel || (expectedHashCode.LogLevel = {}));
    }, {}],
    10 : [function(require, dataAndEvents, expectedHashCode) {
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var log = require("tslib");
        var selfClosing = require("./utils");
        var self = require("./log4ts");
        var nodes = require("./utils");
        var Block = require("./crash_logger");
        var jasmine = require("./ring_buffer");
        var Logger = function() {
            /**
             * @param {?} obj
             * @return {undefined}
             */
            function self(obj) {
                this.parent = obj;
                this.context = void 0;
            }
            return self.prototype.get = function() {
                var cycle = this.parent && this.parent.get();
                var attributes = this.context;
                return cycle || attributes ? Object.assign({}, cycle, attributes) : void 0;
            }, self.prototype.add = function(attributes) {
                this.context = Object.assign({}, this.context, attributes);
            }, self.prototype.remove = function(opt_attributes) {
                var element = this;
                if (this.context) {
                    opt_attributes.forEach(function(key) {
                        if (key in element.context) {
                            delete element.context[key];
                        }
                    });
                }
            }, self.prototype.clear = function() {
                this.context = void 0;
            }, self;
        }();
        expectedHashCode.TreeContext = Logger;
        var cycle = function() {
            /**
             * @param {string} name
             * @param {number} level
             * @param {?} element
             * @return {undefined}
             */
            function Logger(name, level, element) {
                /** @type {string} */
                this.name = name;
                /** @type {number} */
                this.level = level;
                this.context = element;
                selfClosing.validateName(name);
            }
            return Logger.prototype.isEnabled = function(level) {
                return level >= this.level;
            }, Logger.prototype.handler = function(msg, attributes) {
                var logger = this;
                return{
                    /**
                     * @param {string} expectedHashCode
                     * @return {?}
                     */
                    trace : function(expectedHashCode) {
                        throw logger.trace(msg, expectedHashCode, attributes), expectedHashCode;
                    },
                    /**
                     * @param {string} expectedHashCode
                     * @return {?}
                     */
                    debug : function(expectedHashCode) {
                        throw logger.debug(msg, expectedHashCode, attributes), expectedHashCode;
                    },
                    /**
                     * @param {string} data
                     * @return {?}
                     */
                    info : function(data) {
                        throw logger.info(msg, data, attributes), data;
                    },
                    /**
                     * @param {string} expectedHashCode
                     * @return {?}
                     */
                    warn : function(expectedHashCode) {
                        throw logger.warn(msg, expectedHashCode, attributes), expectedHashCode;
                    },
                    /**
                     * @param {string} expectedHashCode
                     * @return {?}
                     */
                    error : function(expectedHashCode) {
                        throw logger.error(msg, expectedHashCode, attributes), expectedHashCode;
                    },
                    /**
                     * @param {string} name
                     * @return {?}
                     */
                    fatal : function(name) {
                        throw logger.fatal(msg, name, attributes), name;
                    }
                };
            }, Logger.prototype.trace = function(expectedHashCode, type, opt_attributes) {
                this.log(self.LogLevel.TRACE, expectedHashCode, type, opt_attributes);
            }, Logger.prototype.debug = function(expectedHashCode, type, opt_attributes) {
                this.log(self.LogLevel.DEBUG, expectedHashCode, type, opt_attributes);
            }, Logger.prototype.info = function(cycle, attributes, recurring) {
                this.log(self.LogLevel.INFO, cycle, attributes, recurring);
            }, Logger.prototype.warn = function(expectedHashCode, type, opt_attributes) {
                this.log(self.LogLevel.WARN, expectedHashCode, type, opt_attributes);
            }, Logger.prototype.error = function(expectedHashCode, type, opt_attributes) {
                this.log(self.LogLevel.ERROR, expectedHashCode, type, opt_attributes);
            }, Logger.prototype.fatal = function(cycle, attributes, recurring) {
                this.log(self.LogLevel.FATAL, cycle, attributes, recurring);
            }, Logger.prototype.log = function(expectedHashCode, type, opt_attributes, recurring) {
                if (this.isEnabled(expectedHashCode)) {
                    if (opt_attributes && recurring || nodes.ErrorLike.isErrorLike(opt_attributes)) {
                        this.logImpl(expectedHashCode, type, opt_attributes, recurring);
                    } else {
                        this.logImpl(expectedHashCode, type, void 0, recurring || opt_attributes);
                    }
                }
            }, Logger;
        }();
        expectedHashCode.AbstractLogger = cycle;
        var WARN = function() {
            /**
             * @param {number} ui
             * @param {string} msg
             * @param {?} logger
             * @param {number} onFailed
             * @param {?} error
             * @param {Object} args
             * @param {Object} context
             * @return {undefined}
             */
            function start(ui, msg, logger, onFailed, error, args, context) {
                /** @type {number} */
                this.level = ui;
                /** @type {string} */
                this.message = msg;
                this.logger = logger;
                /** @type {number} */
                this.timestamp = onFailed;
                this.exception = error;
                /** @type {Object} */
                this.extra = args;
                /** @type {Object} */
                this.context = context;
            }
            return start;
        }();
        expectedHashCode.LogEvent = WARN;
        var Buffer = function(cycle) {
            /**
             * @param {string} fix
             * @param {?} attributes
             * @param {?} lvl
             * @param {?} opt_renderer
             * @return {?}
             */
            function expectedHashCode(fix, attributes, lvl, opt_renderer) {
                var o = cycle.call(this, fix, attributes, opt_renderer || new Logger) || this;
                return o.appender = lvl, o;
            }
            return log.__extends(expectedHashCode, cycle), expectedHashCode.prototype.getLogger = function(name, deepDataAndEvents) {
                return new expectedHashCode(this.name + "." + name, deepDataAndEvents || this.level, this.appender, new Logger(this.context));
            }, expectedHashCode.prototype.logImpl = function(dataAndEvents, keepData, opt_attributes, recurring) {
                var suiteView = new WARN(dataAndEvents, keepData, this.name, Date.now(), opt_attributes, recurring, this.context.get());
                try {
                    this.appender(suiteView);
                } catch (cycle) {
                    console.error("Failed processing log event", cycle);
                    try {
                        exp.printToConsole(suiteView);
                    } catch (fix) {
                        console.error("No luck. Can't print the event", fix);
                    }
                }
            }, expectedHashCode;
        }(cycle);
        expectedHashCode.SimpleLogger = Buffer;
        var exp = function(cycle) {
            /**
             * @param {string} fix
             * @param {?} attributes
             * @param {Object} dataAndEvents
             * @return {?}
             */
            function expectedHashCode(fix, attributes, dataAndEvents) {
                return cycle.call(this, fix, attributes, expectedHashCode.printToConsole, dataAndEvents) || this;
            }
            return log.__extends(expectedHashCode, cycle), expectedHashCode.printToConsole = function(obj) {
                /** @type {function (this:Console, ...[*]): ?} */
                var log = console.log;
                /** @type {Function} */
                log = obj.level <= self.LogLevel.TRACE ? console.trace || console.log : obj.level <= self.LogLevel.DEBUG ? console.debug || console.log : obj.level <= self.LogLevel.INFO ? console.log : obj.level <= self.LogLevel.WARN ? console.warn : console.error;
                log.apply(console, ["[" + obj.logger + "]: " + self.LogLevel[obj.level] + " : " + obj.message, obj.exception, obj.extra].filter(function(dataAndEvents) {
                    return!!dataAndEvents;
                }));
            }, expectedHashCode;
        }(Buffer);
        expectedHashCode.ConsoleLogger = exp;
        var _t = function() {
            /**
             * @return {undefined}
             */
            function _t() {
            }
            return _t.createRootLogger = function(length, LEVEL_LIST, r, elm, dataAndEvents) {
                if (void 0 === dataAndEvents) {
                    /** @type {boolean} */
                    dataAndEvents = false;
                }
                /**
                 * @param {Object} o
                 * @return {undefined}
                 */
                var log = function(o) {
                    if (o.level >= LEVEL_LIST) {
                        if (dataAndEvents) {
                            exp.printToConsole(o);
                        }
                        r.append(o)["catch"](_t._onError);
                    }
                };
                var logger = new Logger;
                /** @type {function (Object): undefined} */
                var orig = log;
                if (elm) {
                    var value2 = new Buffer(length + ".crashLogs", self.LogLevel.TRACE, function(value) {
                        elm.append(value)["catch"](_t._onError);
                    }, new Logger(logger));
                    var event = new Block.CrashLogWrapper(500, self.LogLevel.ERROR, log, value2);
                    orig = event.sink;
                }
                return new Buffer(length, LEVEL_LIST, orig, logger);
            }, _t;
        }();
        /**
         * @param {number} data
         * @return {?}
         */
        _t._onError = function(data) {
            return exp.printToConsole(new WARN(self.LogLevel.WARN, "Error while logging message to the server.", "Fallback", 0, void 0, data));
        };
        expectedHashCode.DefaultLogAppender = _t;
        var Color = function() {
            /**
             * @param {(Object|string)} event
             * @return {undefined}
             */
            function render(event) {
                var promise = this;
                /** @type {(Object|string)} */
                this.event = event;
                this.promise = (new Promise(function(resolve, dataAndEvents) {
                    promise.resolve = resolve;
                })).then(function() {
                });
            }
            return render;
        }();
        /** @type {number} */
        var pkgName = 300;
        /** @type {number} */
        var target = 1E4;
        var LogQueue = function() {
            /**
             * @param {?} dataAndEvents
             * @param {number} name
             * @param {number} deep
             * @return {undefined}
             */
            function clone(dataAndEvents, name, deep) {
                if (void 0 === name) {
                    /** @type {number} */
                    name = pkgName;
                }
                if (void 0 === deep) {
                    /** @type {number} */
                    deep = target;
                }
                this._sink = dataAndEvents;
                /** @type {number} */
                this._retryInterval = deep;
                /** @type {null} */
                this._currentItem = null;
                /** @type {null} */
                this._skippedCounter = null;
                this._buffer = new jasmine.RingBuffer(name, false);
            }
            return clone.prototype.append = function(color) {
                if (this._buffer.isFull) {
                    return this._incSkippedCounter(), Promise.reject(new Error("Outgoing message buffer is full"));
                }
                var c = new Color(color);
                return this._buffer.push(c), this._doAppend(), c.promise;
            }, clone.prototype._incSkippedCounter = function() {
                if (!this._skippedCounter) {
                    this._skippedCounter = new WARN(self.LogLevel.WARN, "Messages was skipped due to buffer overflow", "log4ts_impl.LogQueue", Date.now(), void 0, {
                        count : 0
                    });
                }
                this._skippedCounter.extra.count++;
            }, clone.prototype._doAppend = function() {
                var me = this;
                if (!this._buffer.isEmpty && !this._currentItem) {
                    var result = this._buffer.first;
                    var promise = this._sink.append(result.event);
                    this._currentItem = result;
                    promise.then(function() {
                        result.resolve();
                        var expected = me._buffer.pop();
                        if (expected !== result && expected === me._currentItem) {
                            throw new Error("Illegal state");
                        }
                        /** @type {null} */
                        me._currentItem = null;
                        if (me._skippedCounter) {
                            me.append(me._skippedCounter);
                            /** @type {null} */
                            me._skippedCounter = null;
                        }
                        me._doAppend();
                    })["catch"](function(dataAndEvents) {
                        me._retryAppend(result);
                    });
                }
            }, clone.prototype._retryAppend = function(e) {
                var m = this;
                setTimeout(function() {
                    var cycle = e.event.extra || {};
                    if (!cycle.appendRetries) {
                        cycle = e.event.extra = Object.assign({
                            appendRetries : 1
                        }, cycle);
                    }
                    ++cycle.appendRetries;
                    /** @type {null} */
                    m._currentItem = null;
                    m._doAppend();
                }, this._retryInterval);
            }, clone;
        }();
        expectedHashCode.LogQueue = LogQueue;
        var DummyFelogClient = function() {
            /**
             * @return {undefined}
             */
            function $Element() {
            }
            return $Element.prototype.append = function(op) {
                return Promise.resolve();
            }, $Element;
        }();
        expectedHashCode.DummyFelogClient = DummyFelogClient;
        var enemy = function() {
            /**
             * @param {?} events
             * @param {?} dataAndEvents
             * @param {?} deepDataAndEvents
             * @param {?} keepData
             * @return {undefined}
             */
            function clone(events, dataAndEvents, deepDataAndEvents, keepData) {
                this._appName = events;
                this._appVersion = dataAndEvents;
                this._env = deepDataAndEvents;
                this._fetch = keepData;
            }
            return clone.prototype.append = function(op) {
                return this._fetch(this._prepareData(op));
            }, clone.prototype._toObject = function(expectedHashCode) {
                return void 0 === expectedHashCode || (null === expectedHashCode || expectedHashCode instanceof Object && !Array.isArray(expectedHashCode)) ? expectedHashCode : {
                    extra : expectedHashCode
                };
            }, clone.prototype._parseException = function(slide) {
                if (slide) {
                    var e = this._toObject(slide);
                    var a = e.name;
                    var an = void 0 === a ? "UnknownError" : a;
                    var msg = e.message;
                    var message = void 0 === msg ? "Unknown error message" : msg;
                    var stack = e.stack;
                    var expectedHashCode = log.__rest(e, ["name", "message", "stack"]);
                    return{
                        exceptionPart : {
                            exception : {
                                name : an,
                                message : message,
                                stack : stack
                            }
                        },
                        exceptionDetailsPart : Object.keys(expectedHashCode).length > 0 ? {
                            exceptionDetails : expectedHashCode
                        } : {}
                    };
                }
                return{
                    exceptionPart : {},
                    exceptionDetailsPart : {}
                };
            }, clone.prototype._prepareData = function(data) {
                /** @type {({context: ??}|{})} */
                var fix = data.context ? {
                    context : data.context
                } : {};
                var table = this._parseException(data.exception);
                var attributes = table.exceptionPart;
                var cycle = table.exceptionDetailsPart;
                /** @type {string} */
                var err = JSON.stringify(Object.assign({}, cycle, this._toObject(data.extra)));
                var b = Object.assign({
                    message : data.message,
                    logger : data.logger,
                    level : self.LogLevel[data.level],
                    application : this._appName,
                    version : this._appVersion,
                    env : this._env
                }, fix, attributes, "{}" !== err && {
                    details : err
                });
                return JSON.stringify(b, null, "");
            }, clone;
        }();
        expectedHashCode.FelogClientBase = enemy;
        var enemyIndex = function(cycle) {
            /**
             * @param {?} url
             * @param {string} fix
             * @param {?} attributes
             * @param {boolean} recurring
             * @param {?} xhr
             * @return {?}
             */
            function expectedHashCode(url, fix, attributes, recurring, xhr) {
                return cycle.call(this, fix, attributes, recurring, function(reqData) {
                    return xhr(url, {
                        method : "POST",
                        cache : "no-cache",
                        headers : {
                            "Content-Type" : "application/json"
                        },
                        body : reqData
                    }).then(function() {
                    });
                }) || this;
            }
            return log.__extends(expectedHashCode, cycle), expectedHashCode;
        }(enemy);
        expectedHashCode.PostFelogClient = enemyIndex;
        var ind = function(cycle) {
            /**
             * @param {string} dataAndEvents
             * @param {string} fix
             * @param {?} attributes
             * @param {boolean} recurring
             * @param {?} $transition
             * @return {?}
             */
            function expectedHashCode(dataAndEvents, fix, attributes, recurring, $transition) {
                var a = this;
                /** @type {string} */
                var deliminator = dataAndEvents + "/log?json=";
                return a = cycle.call(this, fix, attributes, recurring, function(i) {
                    return $transition(deliminator + encodeURIComponent(i), {
                        mode : "no-cors",
                        method : "get",
                        cache : "no-cache"
                    }).then(function() {
                    });
                }) || this;
            }
            return log.__extends(expectedHashCode, cycle), expectedHashCode;
        }(enemy);
        expectedHashCode.GetFelogClient = ind;
        var LoggingConfig = function() {
            /**
             * @return {undefined}
             */
            function self() {
            }
            return self.getRootLogger = function() {
                return self._rootLogger || (self._rootLogger = self._createDefaultRootLogger(), self._rootLogger.warn("Using DEFAULT root logger")), self._rootLogger;
            }, self.configure = function(cycle) {
                /** @type {string} */
                self._rootLogger = cycle;
                self._rootLogger.debug("ROOT logger changed", cycle);
            }, self._createDefaultRootLogger = function() {
                return new exp("DEFAULT", self.LogLevel.DEBUG);
            }, self;
        }();
        expectedHashCode.LoggingConfig = LoggingConfig;
    }, {
        "./crash_logger" : 7,
        "./log4ts" : 9,
        "./ring_buffer" : 11,
        "./utils" : 14,
        tslib : "tslib"
    }],
    11 : [function(dataAndEvents, deepDataAndEvents, expectedHashCode) {
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var RingBuffer = function() {
            /**
             * @param {number} c
             * @param {boolean} err
             * @return {undefined}
             */
            function self(c, err) {
                if (void 0 === err && (err = false), this.capacity = c, this.allowOverflow = err, this._start = 0, this._end = 0, this._isFull = false, this.toJSON = this.toArray, c <= 0) {
                    throw new Error("Invalid capacity " + c);
                }
                /** @type {Array} */
                this._buffer = new Array(c);
            }
            return Object.defineProperty(self.prototype, "size", {
                /**
                 * @return {?}
                 */
                get : function() {
                    return this._isFull ? this._buffer.length : (this._end - this._start + this._buffer.length) % this._buffer.length;
                },
                enumerable : true,
                configurable : true
            }), Object.defineProperty(self.prototype, "isEmpty", {
                /**
                 * @return {?}
                 */
                get : function() {
                    return 0 === this.size;
                },
                enumerable : true,
                configurable : true
            }), Object.defineProperty(self.prototype, "isFull", {
                /**
                 * @return {?}
                 */
                get : function() {
                    return this._isFull;
                },
                enumerable : true,
                configurable : true
            }), self.prototype.push = function(type) {
                if (this.isFull) {
                    if (!this.allowOverflow) {
                        throw new Error("Buffer is full");
                    }
                    ++this._start;
                    if (this._start === this.capacity) {
                        /** @type {number} */
                        this._start = 0;
                    }
                }
                /** @type {string} */
                this._buffer[this._end++] = type;
                if (this._end === this.capacity) {
                    /** @type {number} */
                    this._end = 0;
                }
                if (this._start === this._end) {
                    /** @type {boolean} */
                    this._isFull = true;
                }
            }, self.prototype.pop = function() {
                if (!this.isEmpty) {
                    var first = this._buffer[this._start];
                    return this._buffer[this._start] = void 0, this._start++, this._start === this.capacity && (this._start = 0), this._isFull = false, first;
                }
            }, Object.defineProperty(self.prototype, "first", {
                /**
                 * @return {?}
                 */
                get : function() {
                    return this.isEmpty ? void 0 : this._buffer[this._start];
                },
                enumerable : true,
                configurable : true
            }), Object.defineProperty(self.prototype, "last", {
                /**
                 * @return {?}
                 */
                get : function() {
                    return this.isEmpty ? void 0 : this._buffer[0 === this._end ? this.capacity - 1 : this._end - 1];
                },
                enumerable : true,
                configurable : true
            }), self.prototype.clear = function() {
                /** @type {Array} */
                this._buffer = new Array(this.capacity);
                /** @type {number} */
                this._start = this._end = 0;
                /** @type {boolean} */
                this._isFull = false;
            }, self.prototype.toArray = function() {
                var array;
                if (this.isEmpty) {
                    /** @type {Array} */
                    array = new Array(0);
                } else {
                    if (this._start < this._end) {
                        array = this._buffer.slice(this._start, this._end);
                    } else {
                        /** @type {Array} */
                        array = new Array(this.size);
                        /** @type {number} */
                        var i = 0;
                        var j = this._start;
                        for (;j < this.capacity;++j, ++i) {
                            array[i] = this._buffer[j];
                        }
                        /** @type {number} */
                        j = 0;
                        for (;j < this._end;++j, ++i) {
                            array[i] = this._buffer[j];
                        }
                    }
                }
                return array;
            }, self;
        }();
        expectedHashCode.RingBuffer = RingBuffer;
    }, {}],
    12 : [function(dataAndEvents, deepDataAndEvents, expectedHashCode) {
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
    }, {}],
    13 : [function(require, dataAndEvents, expectedHashCode) {
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var Block = require("tslib");
        var selfClosing = require("./utils");
        var cycle = function() {
            /**
             * @param {string} name
             * @param {?} err
             * @param {?} key
             * @return {undefined}
             */
            function self(name, err, key) {
                /** @type {string} */
                this.name = name;
                this.timersSink = err;
                this.countersSink = key;
                selfClosing.validateName(name);
            }
            return self.prototype.getMetric = function(name) {
                return this._createChild(name);
            }, self.prototype.getTimer = function(pending) {
                return this._createChild(pending);
            }, self.prototype.getCounter = function(opt_callback) {
                return this._createChild(opt_callback);
            }, Object.defineProperty(self.prototype, "parent", {
                /**
                 * @return {?}
                 */
                get : function() {
                    var offset = this.name.lastIndexOf(".");
                    var arg = this.name.substring(0, offset === -1 ? 0 : offset);
                    return "" === arg ? void 0 : new self(arg, this.timersSink, this.countersSink);
                },
                enumerable : true,
                configurable : true
            }), Object.defineProperty(self.prototype, "root", {
                /**
                 * @return {?}
                 */
                get : function() {
                    var offset = this.name.indexOf(".");
                    var arg = this.name.substring(0, offset === -1 ? 0 : offset);
                    return "" === arg ? this : new self(arg, this.timersSink, this.countersSink);
                },
                enumerable : true,
                configurable : true
            }), self.prototype._createName = function(name) {
                return this.name + "." + name;
            }, self.prototype.start = function() {
                /** @type {number} */
                var length = Date.now();
                var ret = this;
                return{
                    /**
                     * @return {undefined}
                     */
                    stop : function() {
                        ret.recordTime(Date.now() - length);
                    }
                };
            }, self.prototype.recordTime = function(keepData) {
                this.timersSink(this.name, keepData);
            }, self.prototype.timing = function(callback) {
                var event = this.start();
                try {
                    return callback();
                } finally {
                    try {
                        event.stop();
                    } catch (n) {
                    }
                }
            }, self.prototype.increment = function(object) {
                if (void 0 === object) {
                    /** @type {number} */
                    object = 1;
                }
                this.countersSink(this.name, object);
            }, self.prototype.decrement = function(item) {
                if (void 0 === item) {
                    /** @type {number} */
                    item = 1;
                }
                this.increment(-item);
            }, self.prototype._createChild = function(options) {
                return new self(this._createName(options), this.timersSink, this.countersSink);
            }, self;
        }();
        expectedHashCode.AbstractMetricsStorage = cycle;
        var log = function(cycle) {
            /**
             * @param {?} require
             * @return {?}
             */
            function expectedHashCode(require) {
                return cycle.call(this, "MP", function(dataAndEvents, path) {
                    return require("TIMER: " + dataAndEvents + " = " + path);
                }, function(dataAndEvents, path) {
                    return require("COUNTER: " + dataAndEvents + " = " + path);
                }) || this;
            }
            return Block.__extends(expectedHashCode, cycle), expectedHashCode;
        }(cycle);
        expectedHashCode.MetricsPrinter = log;
        /** @type {number} */
        var mat = 7500;
        /** @type {number} */
        var charLen = 3;
        var MetricsStorage = function(cycle) {
            /**
             * @param {string} fix
             * @param {string} ng
             * @param {?} theTitle
             * @param {number} dest
             * @return {?}
             */
            function expectedHashCode(fix, ng, theTitle, dest) {
                if (void 0 === dest) {
                    /** @type {number} */
                    dest = mat;
                }
                var self = cycle.call(this, fix, function(deepDataAndEvents, funcToCall) {
                    return self._reportTimer(deepDataAndEvents, funcToCall);
                }, function(onComplete, deepDataAndEvents) {
                    return self._reportCounter(onComplete, deepDataAndEvents);
                }) || this;
                return self._fetch = theTitle, self._sendTimeout = dest, self._countersBuffer = {}, self._timersBuffer = new Array, self._sendTimer = void 0, self._sendData = function() {
                    /** @type {string} */
                    var _ = [self._timersBuffer.join("&"), Object.keys(self._countersBuffer).map(function(timeoutKey) {
                        return timeoutKey + "=" + self._countersBuffer[timeoutKey];
                    }).join("&")].filter(function(newlines) {
                        return newlines.length;
                    }).join("&");
                    /** @type {string} */
                    var attributes = self._baseUrl + _;
                    /** @type {number} */
                    self._timersBuffer.length = 0;
                    self._countersBuffer = {};
                    self._sendTimer = void 0;
                    /** @type {number} */
                    var i = 0;
                    /**
                     * @return {undefined}
                     */
                    var run = function() {
                        self._fetch(attributes, {
                            mode : "no-cors",
                            cache : "no-cache"
                        })["catch"](function(cycle) {
                            if (i++ < charLen) {
                                setTimeout(run, 5E3 * i);
                            } else {
                                console.error("Cannot send timesereies data", cycle, attributes);
                            }
                        });
                    };
                    run();
                }, self._baseUrl = ng + "/ts?", self;
            }
            return Block.__extends(expectedHashCode, cycle), expectedHashCode.createRoot = function(dataAndEvents, suffix, putativeSpy) {
                return new expectedHashCode(dataAndEvents, suffix, putativeSpy);
            }, expectedHashCode.prototype._reportTimer = function(deepDataAndEvents, funcToCall) {
                this._timersBuffer.push("t." + deepDataAndEvents + "=" + funcToCall);
                this._startSending();
            }, expectedHashCode.prototype._reportCounter = function(onComplete, deepDataAndEvents) {
                /** @type {string} */
                var unlock = "c." + onComplete;
                this._countersBuffer[unlock] = (this._countersBuffer[unlock] || 0) + deepDataAndEvents;
                this._startSending();
            }, expectedHashCode.prototype._startSending = function() {
                if (!this._sendTimer) {
                    /** @type {number} */
                    this._sendTimer = setTimeout(this._sendData, this._sendTimeout);
                }
            }, expectedHashCode;
        }(cycle);
        expectedHashCode.MetricsStorage = MetricsStorage;
        var MetricsConfig = function() {
            /**
             * @return {undefined}
             */
            function context() {
            }
            return context.getRootMetric = function() {
                return context._metricsRoot || (console.warn("[WARNING] Using default timeseries implementation."), context._metricsRoot = new log(console.log)), context._metricsRoot;
            }, context.configure = function(clear) {
                context._metricsRoot = clear;
            }, context;
        }();
        expectedHashCode.MetricsConfig = MetricsConfig;
    }, {
        "./utils" : 14,
        tslib : "tslib"
    }],
    14 : [function(dataAndEvents, deepDataAndEvents, expectedHashCode) {
        /**
         * @param {string} value
         * @return {undefined}
         */
        function url(value) {
            if ("" === value) {
                throw new Error("Empty name");
            }
            if (!rchecked.test(value)) {
                throw new Error("Invalid name: " + value + ". Should be hierarchical dot separated string and may contain only word characters)");
            }
        }
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var jQuery;
        !function(on) {
            /**
             * @param {boolean} e
             * @return {?}
             */
            function fn(e) {
                /** @type {boolean} */
                var exception = e;
                return exception && (void 0 !== exception.message && void 0 !== exception.name || void 0 !== exception.stack);
            }
            /** @type {function (boolean): ?} */
            on.isErrorLike = fn;
        }(jQuery = expectedHashCode.ErrorLike || (expectedHashCode.ErrorLike = {}));
        var i;
        !function(__exports__) {
            /**
             * @param {Object} value
             * @return {?}
             */
            function extend(value) {
                return init(value, [value], jQuery.isErrorLike(value));
            }
            /**
             * @param {string} obj
             * @param {Array} attr
             * @param {(Function|string)} allBindingsAccessor
             * @return {?}
             */
            function init(obj, attr, allBindingsAccessor) {
                if (!obj) {
                    return{};
                }
                var qs = {};
                /** @type {function (Object): Array.<string>} */
                var select = allBindingsAccessor ? Object.getOwnPropertyNames : Object.keys;
                return select(obj).forEach(function(i) {
                    var val = obj[i];
                    if (null === val || (void 0 === val || ("number" === typeof val || ("string" === typeof val || "boolean" === typeof val)))) {
                        qs[i] = val;
                    } else {
                        if ("object" === typeof val) {
                            if (val instanceof Boolean || (val instanceof Number || (val instanceof String || (val instanceof Date || val instanceof RegExp)))) {
                                qs[i] = val.toString();
                            } else {
                                if (attr.indexOf(val) === -1) {
                                    attr.push(val);
                                    var expectedHashCode = init(val, attr, jQuery.isErrorLike(val));
                                    if (Object.keys(expectedHashCode).length > 0) {
                                        qs[i] = expectedHashCode;
                                    }
                                }
                            }
                        }
                    }
                }), qs;
            }
            /** @type {function (Object): ?} */
            __exports__.fromAny = extend;
        }(i = expectedHashCode.EventProps || (expectedHashCode.EventProps = {}));
        /** @type {RegExp} */
        var rchecked = /^(?!\.[\w])[\w.]*\w$/;
        /** @type {function (string): undefined} */
        expectedHashCode.validateName = url;
    }, {}],
    15 : [function(dataAndEvents, module, deepDataAndEvents) {
        !function() {
            /**
             * @param {string} arg
             * @param {string} b
             * @return {?}
             */
            function extend(arg, b) {
                var result = next(arg, b);
                return void 0 === result.from ? {
                    s : -1,
                    delta : 0
                } : {
                    s : result.from,
                    delta : result.newFragment.length - result.oldFragment.length
                };
            }
            /**
             * @param {string} x
             * @param {string} v
             * @return {?}
             */
            function next(x, v) {
                if (x === v) {
                    return{};
                }
                var min = x.length;
                var max = v.length;
                if (print("oldLength: " + min + ". newLength: " + max), max > min) {
                    if (v.substr(0, min) === x) {
                        return print("some characters was added to the end"), {
                            from : min,
                            to : min,
                            oldFragment : "",
                            newFragment : v.substr(min)
                        };
                    }
                    if (v.substr(max - min) === x) {
                        return print("some characters was added to the start"), {
                            from : 0,
                            to : 0,
                            oldFragment : "",
                            newFragment : v.substr(0, max - min)
                        };
                    }
                }
                if (max < min) {
                    if (x.substr(min - max) === v) {
                        return print("some characters was removed from the end"), {
                            from : 0,
                            to : min - max,
                            oldFragment : x.substr(0, min - max),
                            newFragment : ""
                        };
                    }
                    if (x.substr(0, max) === v) {
                        return print("some characters was removed from the start"), {
                            from : max,
                            to : min,
                            oldFragment : x.substr(max),
                            newFragment : ""
                        };
                    }
                }
                var i = max < min ? max : min;
                var start = f(x, v, i);
                var length = add(x, v, min, max, i);
                return print("front: " + start), print("back: " + length), start + length > min && (length -= start + length - min), start + length > max && (length -= start + length - max), {
                    from : start,
                    to : min - length,
                    oldFragment : x.substr(start, min - length - start),
                    newFragment : v.substr(start, max - length - start)
                };
            }
            /**
             * @param {Object} a
             * @param {Object} b
             * @param {number} n
             * @return {?}
             */
            function f(a, b, n) {
                /** @type {number} */
                var i = 0;
                for (;a[i] === b[i] && i < n;) {
                    i += 1;
                }
                return i;
            }
            /**
             * @param {(Array|Uint8Array|string)} block
             * @param {(Array|Uint8Array|string)} v2
             * @param {number} a
             * @param {number} l
             * @param {number} g
             * @return {?}
             */
            function add(block, v2, a, l, g) {
                /** @type {number} */
                var b = 0;
                for (;block[a - b - 1] === v2[l - b - 1] && g - b >= 0;) {
                    b += 1;
                }
                return b;
            }
            /**
             * @return {undefined}
             */
            function print() {
            }
            if ("undefined" === typeof module) {
                /** @type {function (string, string): ?} */
                window.diffPos = extend;
                /** @type {function (string, string): ?} */
                window.textdiff = next;
            }
            try {
                module.exports = {
                    /** @type {function (string, string): ?} */
                    diffPos : extend,
                    /** @type {function (string, string): ?} */
                    textdiff : next
                };
            } catch (a) {
            }
        }();
    }, {}],
    16 : [function(factory, module, dataAndEvents) {
        try {
            module.exports = factory("./lib/textdiff");
        } catch (r) {
        }
    }, {
        "./lib/textdiff" : 15
    }],
    17 : [function(require, module, dataAndEvents) {
        /**
         * @param {string} expectedHashCode
         * @return {?}
         */
        function init(expectedHashCode) {
            /**
             * @param {boolean} expectedNumberOfNonCommentArgs
             * @return {undefined}
             */
            function init(expectedNumberOfNonCommentArgs) {
                if (!self.isConnected()) {
                    debug("connect to url: " + expectedHashCode.url);
                    socket = new WebSocket(expectedHashCode.url);
                    /** @type {boolean} */
                    finished = false;
                    /** @type {boolean} */
                    online = false;
                    /**
                     * @return {undefined}
                     */
                    socket.onopen = function() {
                        /** @type {number} */
                        dt = dt_floor;
                        /** @type {boolean} */
                        online = true;
                        if (T) {
                            /** @type {boolean} */
                            T = false;
                            self.close();
                        }
                        if (expectedNumberOfNonCommentArgs && expectedHashCode.resetQueueOnReconnect) {
                            /** @type {Array} */
                            ql = [];
                        } else {
                            listener();
                        }
                        self.emit("connect");
                        if (expectedNumberOfNonCommentArgs) {
                            self.emit("reconnect");
                            /** @type {boolean} */
                            y = false;
                        }
                    };
                    /**
                     * @param {MessageEvent} event
                     * @return {undefined}
                     */
                    socket.onmessage = function(event) {
                        if (w) {
                            console.log("%c Received: %s", "color: #46af91;", event.data);
                        }
                        log(event.data);
                        onError(event.data);
                    };
                    /**
                     * @param {Function} attributes
                     * @return {undefined}
                     */
                    socket.onclose = function(attributes) {
                        /** @type {boolean} */
                        online = false;
                        self.emit("disconnect", attributes);
                        if (!finished) {
                            error("disconnected");
                        }
                    };
                    /** @type {function (Object): undefined} */
                    socket.onerror = error;
                    if (window.app) {
                        app.one("offline", function() {
                            if (online) {
                                self.close();
                                app.one("online", function() {
                                    self.connect();
                                });
                            }
                        });
                    }
                }
            }
            /**
             * @return {undefined}
             */
            function done() {
                if (!y) {
                    /** @type {boolean} */
                    y = true;
                    if (self.isConnected()) {
                        self.one("disconnect", function() {
                            setTimeout(self.connect.bind(null, true), 0);
                        });
                        /** @type {boolean} */
                        finished = true;
                        self.close();
                    } else {
                        self.connect(true);
                    }
                }
            }
            /**
             * @param {string} obj
             * @return {undefined}
             */
            function log(obj) {
                if (expectedHashCode.useStandBy) {
                    if (obj) {
                        if (!callback(obj)) {
                            clearTimeout(to);
                            /** @type {number} */
                            to = setTimeout(function() {
                                self.close();
                                /** @type {boolean} */
                                E = true;
                                /** @type {boolean} */
                                to = false;
                            }, expectedHashCode.useStandBy);
                        }
                    }
                }
            }
            /**
             * @param {string} value
             * @return {?}
             */
            function callback(value) {
                if (value && "ping" === value) {
                    return true;
                }
                var request;
                /** @type {boolean} */
                var n = false;
                try {
                    /** @type {*} */
                    request = JSON.parse(value);
                } catch (r) {
                }
                return request && (("ping" === request || request.action && "pong" === request.action) && (n = true)), n;
            }
            /**
             * @param {string} value
             * @return {?}
             */
            function set(value) {
                return!callback(value) && void(E && (E = false, init(true)));
            }
            /**
             * @return {undefined}
             */
            function listener() {
                if (socket) {
                    for (;socket.readyState === WebSocket.OPEN && ql.length;) {
                        render(ql.shift());
                    }
                }
            }
            /**
             * @param {?} attributes
             * @return {undefined}
             */
            function render(attributes) {
                if (w) {
                    console.log("%c Sending %s", "color:rgba(10, 10, 10, 0.6); font-size: 10px", attributes);
                }
                log(attributes);
                socket.send(attributes);
                if (animationTimer) {
                    clearTimeout(animationTimer);
                }
                /** @type {number} */
                animationTimer = setTimeout(next, expectedHashCode.idleTimeout);
            }
            /**
             * @return {undefined}
             */
            function next() {
                /** @type {null} */
                animationTimer = null;
                self.send("ping");
            }
            /**
             * @param {?} attributes
             * @return {undefined}
             */
            function onError(attributes) {
                try {
                    /** @type {*} */
                    attributes = JSON.parse(attributes);
                } catch (e) {
                    $(e.stack || e, attributes);
                }
                if (expectedHashCode.useQueue) {
                    qr.push(attributes);
                    start();
                } else {
                    self.emit("message", attributes);
                }
            }
            /**
             * @param {Object} attributes
             * @return {undefined}
             */
            function error(attributes) {
                $("websocket error", attributes);
                self.emit("error", attributes);
                if (!(attributes && (attributes.target && [WebSocket.CLOSING, WebSocket.CLOSED].indexOf(attributes.target.readyState) > -1))) {
                    if (!tref) {
                        if (online) {
                            self.close();
                        }
                        debug("try to reconnect in " + dt / 1E3 + "s");
                        /** @type {number} */
                        tref = setTimeout(function() {
                            /** @type {number} */
                            dt = Math.min(one_vw, 1.5 * dt);
                            /** @type {null} */
                            tref = null;
                            init(true);
                        }, dt);
                    }
                }
            }
            /**
             * @return {undefined}
             */
            function debug() {
                if (w) {
                    console.log.apply(console, arguments);
                }
            }
            /**
             * @return {undefined}
             */
            function $() {
                console.error.apply(console, arguments);
            }
            /**
             * @return {?}
             */
            function start() {
                if (!object && !property) {
                    return 0 === qr.length ? void(object = null) : void(object = setTimeout(function() {
                        if (!property) {
                            self.emit("message", qr.shift());
                        }
                        /** @type {null} */
                        object = null;
                        start();
                    }, expectedHashCode.useQueue));
                }
            }
            var socket;
            var tref;
            var animationTimer;
            var object;
            var going;
            var y;
            /** @type {boolean} */
            var w = !expectedHashCode.silentLogs;
            var WebSocket = window.WebSocket || window.MozWebSocket;
            /** @type {boolean} */
            var E = false;
            /** @type {null} */
            var to = null;
            /** @type {boolean} */
            var online = false;
            /** @type {boolean} */
            var finished = false;
            /** @type {boolean} */
            var T = false;
            /** @type {number} */
            var dt = 1E3;
            /** @type {number} */
            var dt_floor = 1E3;
            /** @type {number} */
            var one_vw = 6E4;
            /** @type {Array} */
            var ql = [];
            /** @type {Array} */
            var qr = [];
            /** @type {boolean} */
            var property = false;
            expectedHashCode = Object.assign({}, {
                url : null,
                connectionTimeout : 1E3,
                idleTimeout : 3E5,
                useQueue : false,
                useStandBy : false,
                playDelay : 50,
                resetQueueOnReconnect : false
            }, expectedHashCode);
            var self = Event({
                /** @type {function (boolean): undefined} */
                connect : init,
                /** @type {function (): undefined} */
                reconnect : done,
                /**
                 * @param {string} obj
                 * @return {undefined}
                 */
                send : function(obj) {
                    if (E) {
                        set(obj);
                    } else {
                        /** @type {string} */
                        var cycle = JSON.stringify(obj);
                        ql.push(cycle);
                        listener();
                    }
                },
                /**
                 * @return {?}
                 */
                close : function() {
                    if (finished = true, debug("explicit close requested"), !online) {
                        return T = true;
                    }
                    try {
                        if (socket) {
                            socket.close();
                        }
                        if (tref) {
                            clearTimeout(tref);
                            /** @type {null} */
                            tref = null;
                        }
                    } catch (e) {
                        $("socket closing bug", e.stack || e);
                    }
                    /** @type {boolean} */
                    online = false;
                    if (to) {
                        clearTimeout(to);
                    }
                },
                /**
                 * @return {?}
                 */
                isConnected : function() {
                    return online;
                },
                /**
                 * @return {undefined}
                 */
                release : function() {
                    clearTimeout(tref);
                },
                /**
                 * @return {?}
                 */
                toString : function() {
                    return "[object WebSocket]";
                },
                /**
                 * @return {undefined}
                 */
                wsPlay : function() {
                    clearTimeout(going);
                    /** @type {number} */
                    going = setTimeout(function() {
                        /** @type {boolean} */
                        property = false;
                        start();
                    }, expectedHashCode.playDelay);
                },
                /**
                 * @return {undefined}
                 */
                wsPause : function() {
                    clearTimeout(going);
                    /** @type {boolean} */
                    property = true;
                }
            });
            return self;
        }
        var Event = require("emitter");
        if ("function" !== typeof Object.assign) {
            !function() {
                /**
                 * @param {string} expectedHashCode
                 * @return {?}
                 */
                Object.assign = function(expectedHashCode) {
                    if (void 0 === expectedHashCode || null === expectedHashCode) {
                        throw new TypeError("Cannot convert undefined or null to object");
                    }
                    var object = Object(expectedHashCode);
                    /** @type {number} */
                    var i = 1;
                    for (;i < arguments.length;i++) {
                        var iterable = arguments[i];
                        if (void 0 !== iterable && null !== iterable) {
                            var key;
                            for (key in iterable) {
                                if (iterable.hasOwnProperty(key)) {
                                    object[key] = iterable[key];
                                }
                            }
                        }
                    }
                    return object;
                };
            }();
        }
        try {
            /** @type {function (string): ?} */
            module.exports = init;
        } catch (i) {
        }
    }, {
        emitter : "emitter"
    }],
    18 : [function(factory, module, dataAndEvents) {
        try {
            module.exports = factory("./lib/websocket");
        } catch (r) {
        }
    }, {
        "./lib/websocket" : 17
    }],
    19 : [function($sanitize, module, dataAndEvents) {
        module.exports = {
            "default" : $sanitize("core-js/library/fn/array/from"),
            __esModule : true
        };
    }, {
        "core-js/library/fn/array/from" : 44
    }],
    20 : [function($sanitize, module, dataAndEvents) {
        module.exports = {
            "default" : $sanitize("core-js/library/fn/get-iterator"),
            __esModule : true
        };
    }, {
        "core-js/library/fn/get-iterator" : 45
    }],
    21 : [function($sanitize, module, dataAndEvents) {
        module.exports = {
            "default" : $sanitize("core-js/library/fn/is-iterable"),
            __esModule : true
        };
    }, {
        "core-js/library/fn/is-iterable" : 46
    }],
    22 : [function($sanitize, module, dataAndEvents) {
        module.exports = {
            "default" : $sanitize("core-js/library/fn/json/stringify"),
            __esModule : true
        };
    }, {
        "core-js/library/fn/json/stringify" : 47
    }],
    23 : [function($sanitize, module, dataAndEvents) {
        module.exports = {
            "default" : $sanitize("core-js/library/fn/map"),
            __esModule : true
        };
    }, {
        "core-js/library/fn/map" : 48
    }],
    24 : [function($sanitize, module, dataAndEvents) {
        module.exports = {
            "default" : $sanitize("core-js/library/fn/object/assign"),
            __esModule : true
        };
    }, {
        "core-js/library/fn/object/assign" : 49
    }],
    25 : [function($sanitize, module, dataAndEvents) {
        module.exports = {
            "default" : $sanitize("core-js/library/fn/object/create"),
            __esModule : true
        };
    }, {
        "core-js/library/fn/object/create" : 50
    }],
    26 : [function($sanitize, module, dataAndEvents) {
        module.exports = {
            "default" : $sanitize("core-js/library/fn/object/define-property"),
            __esModule : true
        };
    }, {
        "core-js/library/fn/object/define-property" : 51
    }],
    27 : [function($sanitize, module, dataAndEvents) {
        module.exports = {
            "default" : $sanitize("core-js/library/fn/object/get-own-property-symbols"),
            __esModule : true
        };
    }, {
        "core-js/library/fn/object/get-own-property-symbols" : 52
    }],
    28 : [function($sanitize, module, dataAndEvents) {
        module.exports = {
            "default" : $sanitize("core-js/library/fn/object/get-prototype-of"),
            __esModule : true
        };
    }, {
        "core-js/library/fn/object/get-prototype-of" : 53
    }],
    29 : [function($sanitize, module, dataAndEvents) {
        module.exports = {
            "default" : $sanitize("core-js/library/fn/object/keys"),
            __esModule : true
        };
    }, {
        "core-js/library/fn/object/keys" : 54
    }],
    30 : [function($sanitize, module, dataAndEvents) {
        module.exports = {
            "default" : $sanitize("core-js/library/fn/object/set-prototype-of"),
            __esModule : true
        };
    }, {
        "core-js/library/fn/object/set-prototype-of" : 55
    }],
    31 : [function($sanitize, module, dataAndEvents) {
        module.exports = {
            "default" : $sanitize("core-js/library/fn/promise"),
            __esModule : true
        };
    }, {
        "core-js/library/fn/promise" : 56
    }],
    32 : [function($sanitize, module, dataAndEvents) {
        module.exports = {
            "default" : $sanitize("core-js/library/fn/symbol"),
            __esModule : true
        };
    }, {
        "core-js/library/fn/symbol" : 57
    }],
    33 : [function($sanitize, module, dataAndEvents) {
        module.exports = {
            "default" : $sanitize("core-js/library/fn/symbol/iterator"),
            __esModule : true
        };
    }, {
        "core-js/library/fn/symbol/iterator" : 58
    }],
    34 : [function(dataAndEvents, deepDataAndEvents, __exports__) {
        /** @type {boolean} */
        __exports__.__esModule = true;
        /**
         * @param {?} dataAndEvents
         * @param {Function} deepDataAndEvents
         * @return {undefined}
         */
        __exports__["default"] = function(dataAndEvents, deepDataAndEvents) {
            if (!(dataAndEvents instanceof deepDataAndEvents)) {
                throw new TypeError("Cannot call a class as a function");
            }
        };
    }, {}],
    35 : [function(neighbours, dataAndEvents, __exports__) {
        /**
         * @param {?} value
         * @return {?}
         */
        function url(value) {
            return value && value.__esModule ? value : {
                "default" : value
            };
        }
        /** @type {boolean} */
        __exports__.__esModule = true;
        var tile = neighbours("../core-js/object/define-property");
        var tileUrl = url(tile);
        __exports__["default"] = function() {
            /**
             * @param {Function} value
             * @param {Array} obj
             * @return {undefined}
             */
            function defineProperty(value, obj) {
                /** @type {number} */
                var i = 0;
                for (;i < obj.length;i++) {
                    var property = obj[i];
                    property.enumerable = property.enumerable || false;
                    /** @type {boolean} */
                    property.configurable = true;
                    if ("value" in property) {
                        /** @type {boolean} */
                        property.writable = true;
                    }
                    (0, tileUrl["default"])(value, property.key, property);
                }
            }
            return function(ctor, key, element) {
                return key && defineProperty(ctor.prototype, key), element && defineProperty(ctor, element), ctor;
            };
        }();
    }, {
        "../core-js/object/define-property" : 26
    }],
    36 : [function(require, dataAndEvents, __exports__) {
        /**
         * @param {?} value
         * @return {?}
         */
        function appendModelPrefix(value) {
            return value && value.__esModule ? value : {
                "default" : value
            };
        }
        /** @type {boolean} */
        __exports__.__esModule = true;
        var other = require("../core-js/object/define-property");
        var fullOtherName = appendModelPrefix(other);
        /**
         * @param {Object} obj
         * @param {?} key
         * @param {string} value
         * @return {?}
         */
        __exports__["default"] = function(obj, key, value) {
            return key in obj ? (0, fullOtherName["default"])(obj, key, {
                value : value,
                enumerable : true,
                configurable : true,
                writable : true
            }) : obj[key] = value, obj;
        };
    }, {
        "../core-js/object/define-property" : 26
    }],
    37 : [function(require, dataAndEvents, __exports__) {
        /**
         * @param {?} value
         * @return {?}
         */
        function appendModelPrefix(value) {
            return value && value.__esModule ? value : {
                "default" : value
            };
        }
        /** @type {boolean} */
        __exports__.__esModule = true;
        var other = require("../core-js/object/assign");
        var fullOtherName = appendModelPrefix(other);
        __exports__["default"] = fullOtherName["default"] || function(dataAndEvents) {
            /** @type {number} */
            var i = 1;
            for (;i < arguments.length;i++) {
                var expectedHashCode = arguments[i];
                var cycle;
                for (cycle in expectedHashCode) {
                    if (Object.prototype.hasOwnProperty.call(expectedHashCode, cycle)) {
                        dataAndEvents[cycle] = expectedHashCode[cycle];
                    }
                }
            }
            return dataAndEvents;
        };
    }, {
        "../core-js/object/assign" : 24
    }],
    38 : [function(require, dataAndEvents, __exports__) {
        /**
         * @param {?} parent
         * @return {?}
         */
        function $(parent) {
            return parent && parent.__esModule ? parent : {
                "default" : parent
            };
        }
        /** @type {boolean} */
        __exports__.__esModule = true;
        var path = require("../core-js/object/set-prototype-of");
        var p = $(path);
        var target = require("../core-js/object/create");
        var type = $(target);
        var selector = require("../helpers/typeof");
        var elem = $(selector);
        /**
         * @param {Object} f
         * @param {Object} callback
         * @return {undefined}
         */
        __exports__["default"] = function(f, callback) {
            if ("function" !== typeof callback && null !== callback) {
                throw new TypeError("Super expression must either be null or a function, not " + ("undefined" === typeof callback ? "undefined" : (0, elem["default"])(callback)));
            }
            f.prototype = (0, type["default"])(callback && callback.prototype, {
                constructor : {
                    value : f,
                    enumerable : false,
                    writable : true,
                    configurable : true
                }
            });
            if (callback) {
                if (p["default"]) {
                    (0, p["default"])(f, callback);
                } else {
                    /** @type {Object} */
                    f.__proto__ = callback;
                }
            }
        };
    }, {
        "../core-js/object/create" : 25,
        "../core-js/object/set-prototype-of" : 30,
        "../helpers/typeof" : 42
    }],
    39 : [function(proceed, dataAndEvents, __exports__) {
        /**
         * @param {?} value
         * @return {?}
         */
        function lookupIterator(value) {
            return value && value.__esModule ? value : {
                "default" : value
            };
        }
        /** @type {boolean} */
        __exports__.__esModule = true;
        var value = proceed("../helpers/typeof");
        var iterator = lookupIterator(value);
        /**
         * @param {string} dataAndEvents
         * @param {?} callback
         * @return {?}
         */
        __exports__["default"] = function(dataAndEvents, callback) {
            if (!dataAndEvents) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }
            return!callback || "object" !== ("undefined" === typeof callback ? "undefined" : (0, iterator["default"])(callback)) && "function" !== typeof callback ? dataAndEvents : callback;
        };
    }, {
        "../helpers/typeof" : 42
    }],
    40 : [function(require, dataAndEvents, __exports__) {
        /**
         * @param {?} options
         * @return {?}
         */
        function compile(options) {
            return options && options.__esModule ? options : {
                "default" : options
            };
        }
        /** @type {boolean} */
        __exports__.__esModule = true;
        var locals = require("../core-js/is-iterable");
        var result = compile(locals);
        var content = require("../core-js/get-iterator");
        var template = compile(content);
        __exports__["default"] = function() {
            /**
             * @param {string} value
             * @param {number} n
             * @return {?}
             */
            function token(value, n) {
                /** @type {Array} */
                var matched = [];
                /** @type {boolean} */
                var callback2 = true;
                /** @type {boolean} */
                var o = false;
                var bulk = void 0;
                try {
                    var rule;
                    var iterator = (0, template["default"])(value);
                    for (;!(callback2 = (rule = iterator.next()).done) && (matched.push(rule.value), !n || matched.length !== n);callback2 = true) {
                    }
                } catch (fn) {
                    /** @type {boolean} */
                    o = true;
                    bulk = fn;
                } finally {
                    try {
                        if (!callback2) {
                            if (iterator["return"]) {
                                iterator["return"]();
                            }
                        }
                    } finally {
                        if (o) {
                            throw bulk;
                        }
                    }
                }
                return matched;
            }
            return function(expectedHashCode, ret) {
                if (Array.isArray(expectedHashCode)) {
                    return expectedHashCode;
                }
                if ((0, result["default"])(Object(expectedHashCode))) {
                    return token(expectedHashCode, ret);
                }
                throw new TypeError("Invalid attempt to destructure non-iterable instance");
            };
        }();
    }, {
        "../core-js/get-iterator" : 20,
        "../core-js/is-iterable" : 21
    }],
    41 : [function(neighbours, dataAndEvents, __exports__) {
        /**
         * @param {?} value
         * @return {?}
         */
        function url(value) {
            return value && value.__esModule ? value : {
                "default" : value
            };
        }
        /** @type {boolean} */
        __exports__.__esModule = true;
        var tile = neighbours("../core-js/array/from");
        var tileUrl = url(tile);
        /**
         * @param {string} expectedHashCode
         * @return {?}
         */
        __exports__["default"] = function(expectedHashCode) {
            if (Array.isArray(expectedHashCode)) {
                /** @type {number} */
                var name = 0;
                /** @type {Array} */
                var old = Array(expectedHashCode.length);
                for (;name < expectedHashCode.length;name++) {
                    old[name] = expectedHashCode[name];
                }
                return old;
            }
            return(0, tileUrl["default"])(expectedHashCode);
        };
    }, {
        "../core-js/array/from" : 19
    }],
    42 : [function(require, dataAndEvents, __exports__) {
        /**
         * @param {?} type
         * @return {?}
         */
        function Event(type) {
            return type && type.__esModule ? type : {
                "default" : type
            };
        }
        /** @type {boolean} */
        __exports__.__esModule = true;
        var nodes = require("../core-js/symbol/iterator");
        var result = Event(nodes);
        var type = require("../core-js/symbol");
        var types = Event(type);
        /** @type {function (Function): ?} */
        var lookupIterator = "function" === typeof types["default"] && "symbol" === typeof result["default"] ? function(putativeSpy) {
            return typeof putativeSpy;
        } : function(value) {
            return value && ("function" === typeof types["default"] && (value.constructor === types["default"] && value !== types["default"].prototype)) ? "symbol" : typeof value;
        };
        /** @type {function (Function): ?} */
        __exports__["default"] = "function" === typeof types["default"] && "symbol" === lookupIterator(result["default"]) ? function(value) {
            return "undefined" === typeof value ? "undefined" : lookupIterator(value);
        } : function(value) {
            return value && ("function" === typeof types["default"] && (value.constructor === types["default"] && value !== types["default"].prototype)) ? "symbol" : "undefined" === typeof value ? "undefined" : lookupIterator(value);
        };
    }, {
        "../core-js/symbol" : 32,
        "../core-js/symbol/iterator" : 33
    }],
    43 : [function(factory, module, dataAndEvents) {
        module.exports = factory("regenerator-runtime");
    }, {
        "regenerator-runtime" : 163
    }],
    44 : [function($sanitize, opts, dataAndEvents) {
        $sanitize("../../modules/es6.string.iterator");
        $sanitize("../../modules/es6.array.from");
        opts.exports = $sanitize("../../modules/_core").Array.from;
    }, {
        "../../modules/_core" : 73,
        "../../modules/es6.array.from" : 141,
        "../../modules/es6.string.iterator" : 152
    }],
    45 : [function(factory, module, dataAndEvents) {
        factory("../modules/web.dom.iterable");
        factory("../modules/es6.string.iterator");
        module.exports = factory("../modules/core.get-iterator");
    }, {
        "../modules/core.get-iterator" : 139,
        "../modules/es6.string.iterator" : 152,
        "../modules/web.dom.iterable" : 157
    }],
    46 : [function(factory, module, dataAndEvents) {
        factory("../modules/web.dom.iterable");
        factory("../modules/es6.string.iterator");
        module.exports = factory("../modules/core.is-iterable");
    }, {
        "../modules/core.is-iterable" : 140,
        "../modules/es6.string.iterator" : 152,
        "../modules/web.dom.iterable" : 157
    }],
    47 : [function($sanitize, module, dataAndEvents) {
        var S = $sanitize("../../modules/_core");
        var newArgs = S.JSON || (S.JSON = {
            /** @type {function (this:JSONType, *, (Array.<string>|function (string, *): *|null)=, (number|string)=): string} */
            stringify : JSON.stringify
        });
        /**
         * @param {string} expectedHashCode
         * @return {?}
         */
        module.exports = function(expectedHashCode) {
            return newArgs.stringify.apply(newArgs, arguments);
        };
    }, {
        "../../modules/_core" : 73
    }],
    48 : [function($sanitize, module, dataAndEvents) {
        $sanitize("../modules/es6.object.to-string");
        $sanitize("../modules/es6.string.iterator");
        $sanitize("../modules/web.dom.iterable");
        $sanitize("../modules/es6.map");
        $sanitize("../modules/es7.map.to-json");
        module.exports = $sanitize("../modules/_core").Map;
    }, {
        "../modules/_core" : 73,
        "../modules/es6.map" : 143,
        "../modules/es6.object.to-string" : 150,
        "../modules/es6.string.iterator" : 152,
        "../modules/es7.map.to-json" : 154,
        "../modules/web.dom.iterable" : 157
    }],
    49 : [function($sanitize, module, dataAndEvents) {
        $sanitize("../../modules/es6.object.assign");
        module.exports = $sanitize("../../modules/_core").Object.assign;
    }, {
        "../../modules/_core" : 73,
        "../../modules/es6.object.assign" : 144
    }],
    50 : [function($sanitize, module, dataAndEvents) {
        $sanitize("../../modules/es6.object.create");
        var DOM = $sanitize("../../modules/_core").Object;
        /**
         * @param {string} expectedHashCode
         * @param {string} type
         * @return {?}
         */
        module.exports = function(expectedHashCode, type) {
            return DOM.create(expectedHashCode, type);
        };
    }, {
        "../../modules/_core" : 73,
        "../../modules/es6.object.create" : 145
    }],
    51 : [function($sanitize, module, dataAndEvents) {
        $sanitize("../../modules/es6.object.define-property");
        var OBJECT = $sanitize("../../modules/_core").Object;
        /**
         * @param {string} expectedHashCode
         * @param {string} type
         * @param {?} opt_attributes
         * @return {?}
         */
        module.exports = function(expectedHashCode, type, opt_attributes) {
            return OBJECT.defineProperty(expectedHashCode, type, opt_attributes);
        };
    }, {
        "../../modules/_core" : 73,
        "../../modules/es6.object.define-property" : 146
    }],
    52 : [function($sanitize, module, dataAndEvents) {
        $sanitize("../../modules/es6.symbol");
        module.exports = $sanitize("../../modules/_core").Object.getOwnPropertySymbols;
    }, {
        "../../modules/_core" : 73,
        "../../modules/es6.symbol" : 153
    }],
    53 : [function($sanitize, module, dataAndEvents) {
        $sanitize("../../modules/es6.object.get-prototype-of");
        module.exports = $sanitize("../../modules/_core").Object.getPrototypeOf;
    }, {
        "../../modules/_core" : 73,
        "../../modules/es6.object.get-prototype-of" : 147
    }],
    54 : [function($sanitize, config, dataAndEvents) {
        $sanitize("../../modules/es6.object.keys");
        config.exports = $sanitize("../../modules/_core").Object.keys;
    }, {
        "../../modules/_core" : 73,
        "../../modules/es6.object.keys" : 148
    }],
    55 : [function($sanitize, module, dataAndEvents) {
        $sanitize("../../modules/es6.object.set-prototype-of");
        module.exports = $sanitize("../../modules/_core").Object.setPrototypeOf;
    }, {
        "../../modules/_core" : 73,
        "../../modules/es6.object.set-prototype-of" : 149
    }],
    56 : [function(require, module, dataAndEvents) {
        require("../modules/es6.object.to-string");
        require("../modules/es6.string.iterator");
        require("../modules/web.dom.iterable");
        require("../modules/es6.promise");
        module.exports = require("../modules/_core").Promise;
    }, {
        "../modules/_core" : 73,
        "../modules/es6.object.to-string" : 150,
        "../modules/es6.promise" : 151,
        "../modules/es6.string.iterator" : 152,
        "../modules/web.dom.iterable" : 157
    }],
    57 : [function($sanitize, module, dataAndEvents) {
        $sanitize("../../modules/es6.symbol");
        $sanitize("../../modules/es6.object.to-string");
        $sanitize("../../modules/es7.symbol.async-iterator");
        $sanitize("../../modules/es7.symbol.observable");
        module.exports = $sanitize("../../modules/_core").Symbol;
    }, {
        "../../modules/_core" : 73,
        "../../modules/es6.object.to-string" : 150,
        "../../modules/es6.symbol" : 153,
        "../../modules/es7.symbol.async-iterator" : 155,
        "../../modules/es7.symbol.observable" : 156
    }],
    58 : [function($sanitize, module, dataAndEvents) {
        $sanitize("../../modules/es6.string.iterator");
        $sanitize("../../modules/web.dom.iterable");
        module.exports = $sanitize("../../modules/_wks-ext").f("iterator");
    }, {
        "../../modules/_wks-ext" : 136,
        "../../modules/es6.string.iterator" : 152,
        "../../modules/web.dom.iterable" : 157
    }],
    59 : [function(dataAndEvents, module, deepDataAndEvents) {
        /**
         * @param {string} expectedHashCode
         * @return {?}
         */
        module.exports = function(expectedHashCode) {
            if ("function" !== typeof expectedHashCode) {
                throw TypeError(expectedHashCode + " is not a function!");
            }
            return expectedHashCode;
        };
    }, {}],
    60 : [function(dataAndEvents, module, deepDataAndEvents) {
        /**
         * @return {undefined}
         */
        module.exports = function() {
        };
    }, {}],
    61 : [function(dataAndEvents, module, deepDataAndEvents) {
        /**
         * @param {string} expectedHashCode
         * @param {string} type
         * @param {?} opt_attributes
         * @param {boolean} recurring
         * @return {?}
         */
        module.exports = function(expectedHashCode, type, opt_attributes, recurring) {
            if (!(expectedHashCode instanceof type) || void 0 !== recurring && recurring in expectedHashCode) {
                throw TypeError(opt_attributes + ": incorrect invocation!");
            }
            return expectedHashCode;
        };
    }, {}],
    62 : [function(require, module, dataAndEvents) {
        var getActual = require("./_is-object");
        /**
         * @param {string} expectedHashCode
         * @return {?}
         */
        module.exports = function(expectedHashCode) {
            if (!getActual(expectedHashCode)) {
                throw TypeError(expectedHashCode + " is not an object!");
            }
            return expectedHashCode;
        };
    }, {
        "./_is-object" : 93
    }],
    63 : [function(require, module, dataAndEvents) {
        var getActual = require("./_for-of");
        /**
         * @param {string} expectedHashCode
         * @param {string} type
         * @return {?}
         */
        module.exports = function(expectedHashCode, type) {
            /** @type {Array} */
            var progressValues = [];
            return getActual(expectedHashCode, false, progressValues.push, progressValues, type), progressValues;
        };
    }, {
        "./_for-of" : 83
    }],
    64 : [function(require, module, dataAndEvents) {
        var matcher = require("./_to-iobject");
        var assert = require("./_to-length");
        var each = require("./_to-index");
        /**
         * @param {string} expectedHashCode
         * @return {?}
         */
        module.exports = function(expectedHashCode) {
            return function(input, elem, funcs) {
                var element;
                var elements = matcher(input);
                var f = assert(elements.length);
                var i = each(funcs, f);
                if (expectedHashCode && elem !== elem) {
                    for (;f > i;) {
                        if (element = elements[i++], element !== element) {
                            return true;
                        }
                    }
                } else {
                    for (;f > i;i++) {
                        if ((expectedHashCode || i in elements) && elements[i] === elem) {
                            return expectedHashCode || (i || 0);
                        }
                    }
                }
                return!expectedHashCode && -1;
            };
        };
    }, {
        "./_to-index" : 128,
        "./_to-iobject" : 130,
        "./_to-length" : 131
    }],
    65 : [function(require, module, dataAndEvents) {
        var callback = require("./_ctx");
        var flag = require("./_iobject");
        var isFunction = require("./_to-object");
        var assert = require("./_to-length");
        var attr = require("./_array-species-create");
        /**
         * @param {string} expectedHashCode
         * @param {string} type
         * @return {?}
         */
        module.exports = function(expectedHashCode, type) {
            /** @type {boolean} */
            var selector = 1 === expectedHashCode;
            /** @type {boolean} */
            var iterator = 2 === expectedHashCode;
            /** @type {boolean} */
            var dataType = 3 === expectedHashCode;
            /** @type {boolean} */
            var success = 4 === expectedHashCode;
            /** @type {boolean} */
            var common = 6 === expectedHashCode;
            /** @type {boolean} */
            var ret = 5 === expectedHashCode || common;
            var a = type || attr;
            return function(context, basis, mongoObject) {
                var val;
                var el;
                var data = isFunction(context);
                var obj = flag(data);
                var func = callback(basis, mongoObject, 3);
                var code = assert(obj.length);
                /** @type {number} */
                var name = 0;
                var elems = selector ? a(context, code) : iterator ? a(context, 0) : void 0;
                for (;code > name;name++) {
                    if ((ret || name in obj) && (val = obj[name], el = func(val, name, data), expectedHashCode)) {
                        if (selector) {
                            elems[name] = el;
                        } else {
                            if (el) {
                                switch(expectedHashCode) {
                                    case 3:
                                        return true;
                                    case 5:
                                        return val;
                                    case 6:
                                        return name;
                                    case 2:
                                        elems.push(val);
                                }
                            } else {
                                if (success) {
                                    return false;
                                }
                            }
                        }
                    }
                }
                return common ? -1 : dataType || success ? success : elems;
            };
        };
    }, {
        "./_array-species-create" : 67,
        "./_ctx" : 75,
        "./_iobject" : 90,
        "./_to-length" : 131,
        "./_to-object" : 132
    }],
    66 : [function(require, module, dataAndEvents) {
        var inspect = require("./_is-object");
        var getActual = require("./_is-array");
        var eventName = require("./_wks")("species");
        /**
         * @param {string} expectedHashCode
         * @return {?}
         */
        module.exports = function(expectedHashCode) {
            var c;
            return getActual(expectedHashCode) && (c = expectedHashCode.constructor, "function" !== typeof c || (c !== Array && !getActual(c.prototype) || (c = void 0)), inspect(c) && (c = c[eventName], null === c && (c = void 0))), void 0 === c ? Array : c;
        };
    }, {
        "./_is-array" : 92,
        "./_is-object" : 93,
        "./_wks" : 137
    }],
    67 : [function(require, module, dataAndEvents) {
        var getActual = require("./_array-species-constructor");
        /**
         * @param {string} expectedHashCode
         * @param {string} type
         * @return {?}
         */
        module.exports = function(expectedHashCode, type) {
            return new (getActual(expectedHashCode))(type);
        };
    }, {
        "./_array-species-constructor" : 66
    }],
    68 : [function(require, module, dataAndEvents) {
        var getActual = require("./_cof");
        var camelKey = require("./_wks")("toStringTag");
        /** @type {boolean} */
        var nativeIsArray = "Arguments" === getActual(function() {
            return arguments;
        }());
        /**
         * @param {Array} data
         * @param {number} key
         * @return {?}
         */
        var dataAttr = function(data, key) {
            try {
                return data[key];
            } catch (n) {
            }
        };
        /**
         * @param {string} expectedHashCode
         * @return {?}
         */
        module.exports = function(expectedHashCode) {
            var obj;
            var data;
            var hash;
            return void 0 === expectedHashCode ? "Undefined" : null === expectedHashCode ? "Null" : "string" === typeof(data = dataAttr(obj = Object(expectedHashCode), camelKey)) ? data : nativeIsArray ? getActual(obj) : "Object" === (hash = getActual(obj)) && "function" === typeof obj.callee ? "Arguments" : hash;
        };
    }, {
        "./_cof" : 69,
        "./_wks" : 137
    }],
    69 : [function(dataAndEvents, module, deepDataAndEvents) {
        /** @type {function (this:*): string} */
        var ostring = {}.toString;
        /**
         * @param {string} expectedHashCode
         * @return {?}
         */
        module.exports = function(expectedHashCode) {
            return ostring.call(expectedHashCode).slice(8, -1);
        };
    }, {}],
    70 : [function(require, def, dataAndEvents) {
        var defineProperty = require("./_object-dp").f;
        var getActual = require("./_object-create");
        var assert = require("./_redefine-all");
        var baseCreateCallback = require("./_ctx");
        var check = require("./_an-instance");
        var inspect = require("./_defined");
        var transport = require("./_for-of");
        var normalize = require("./_iter-define");
        var callback = require("./_iter-step");
        var forOwn = require("./_set-species");
        var work = require("./_descriptors");
        var isString = require("./_meta").fastKey;
        /** @type {string} */
        var i = work ? "_s" : "size";
        /**
         * @param {Function} a
         * @param {string} text
         * @return {?}
         */
        var $ = function(a, text) {
            var t;
            var width = isString(text);
            if ("F" !== width) {
                return a._i[width];
            }
            t = a._f;
            for (;t;t = t.n) {
                if (t.k === text) {
                    return t;
                }
            }
        };
        def.exports = {
            /**
             * @param {string} source
             * @param {string} service
             * @param {boolean} dataAndEvents
             * @param {string} className
             * @return {?}
             */
            getConstructor : function(source, service, dataAndEvents, className) {
                var ctor = source(function(config, ss) {
                    check(config, ctor, service, "_i");
                    config._i = getActual(null);
                    config._f = void 0;
                    config._l = void 0;
                    /** @type {number} */
                    config[i] = 0;
                    if (void 0 !== ss) {
                        transport(ss, dataAndEvents, config[className], config);
                    }
                });
                return assert(ctor.prototype, {
                    /**
                     * @return {undefined}
                     */
                    clear : function() {
                        var config = this;
                        var string = config._i;
                        var a = config._f;
                        for (;a;a = a.n) {
                            /** @type {boolean} */
                            a.r = true;
                            if (a.p) {
                                a.p = a.p.n = void 0;
                            }
                            delete string[a.i];
                        }
                        config._f = config._l = void 0;
                        /** @type {number} */
                        config[i] = 0;
                    },
                    /**
                     * @param {string} options
                     * @return {?}
                     */
                    "delete" : function(options) {
                        var self = this;
                        var o = $(self, options);
                        if (o) {
                            var f = o.n;
                            var p = o.p;
                            delete self._i[o.i];
                            /** @type {boolean} */
                            o.r = true;
                            if (p) {
                                p.n = f;
                            }
                            if (f) {
                                f.p = p;
                            }
                            if (self._f === o) {
                                self._f = f;
                            }
                            if (self._l === o) {
                                self._l = p;
                            }
                            self[i]--;
                        }
                        return!!o;
                    },
                    /**
                     * @param {Function} fn
                     * @return {undefined}
                     */
                    forEach : function(fn) {
                        check(this, ctor, "forEach");
                        var r;
                        var callback = baseCreateCallback(fn, arguments.length > 1 ? arguments[1] : void 0, 3);
                        for (;r = r ? r.n : this._f;) {
                            callback(r.v, r.k, this);
                            for (;r && r.r;) {
                                r = r.p;
                            }
                        }
                    },
                    /**
                     * @param {string} attr
                     * @return {?}
                     */
                    has : function(attr) {
                        return!!$(this, attr);
                    }
                }), work && defineProperty(ctor.prototype, "size", {
                    /**
                     * @return {?}
                     */
                    get : function() {
                        return inspect(this[i]);
                    }
                }), ctor;
            },
            /**
             * @param {Function} config
             * @param {string} object
             * @param {Object} value
             * @return {?}
             */
            def : function(config, object, value) {
                var child;
                var id;
                var obj = $(config, object);
                return obj ? obj.v = value : (config._l = obj = {
                    i : id = isString(object, true),
                    k : object,
                    v : value,
                    p : child = config._l,
                    n : void 0,
                    r : false
                }, config._f || (config._f = obj), child && (child.n = obj), config[i]++, "F" !== id && (config._i[id] = obj)), config;
            },
            /** @type {function (Function, string): ?} */
            getEntry : $,
            /**
             * @param {?} style
             * @param {string} obj
             * @param {boolean} dataAndEvents
             * @return {undefined}
             */
            setStrong : function(style, obj, dataAndEvents) {
                normalize(style, obj, function(dataAndEvents, deepDataAndEvents) {
                    /** @type {Object} */
                    this._t = dataAndEvents;
                    /** @type {(number|string)} */
                    this._k = deepDataAndEvents;
                    this._l = void 0;
                }, function() {
                    var self = this;
                    var all = self._k;
                    var r = self._l;
                    for (;r && r.r;) {
                        r = r.p;
                    }
                    return self._t && (self._l = r = r ? r.n : self._t._f) ? "keys" === all ? callback(0, r.k) : "values" === all ? callback(0, r.v) : callback(0, [r.k, r.v]) : (self._t = void 0, callback(1));
                }, dataAndEvents ? "entries" : "values", !dataAndEvents, true);
                forOwn(obj);
            }
        };
    }, {
        "./_an-instance" : 61,
        "./_ctx" : 75,
        "./_defined" : 76,
        "./_descriptors" : 77,
        "./_for-of" : 83,
        "./_iter-define" : 96,
        "./_iter-step" : 98,
        "./_meta" : 102,
        "./_object-create" : 105,
        "./_object-dp" : 106,
        "./_redefine-all" : 118,
        "./_set-species" : 121
    }],
    71 : [function(require, module, dataAndEvents) {
        var getName = require("./_classof");
        var getActual = require("./_array-from-iterable");
        /**
         * @param {string} expectedHashCode
         * @return {?}
         */
        module.exports = function(expectedHashCode) {
            return function() {
                if (getName(this) !== expectedHashCode) {
                    throw TypeError(expectedHashCode + "#toJSON isn't generic");
                }
                return getActual(this);
            };
        };
    }, {
        "./_array-from-iterable" : 63,
        "./_classof" : 68
    }],
    72 : [function(require, module, dataAndEvents) {
        var str = require("./_global");
        var start = require("./_export");
        var nodes = require("./_meta");
        var objDisplay = require("./_fails");
        var isFunction = require("./_hide");
        var getActual = require("./_redefine-all");
        var callback = require("./_for-of");
        var set = require("./_an-instance");
        var Event = require("./_is-object");
        var inspect = require("./_set-to-string-tag");
        var getter = require("./_object-dp").f;
        var swap = require("./_array-methods")(0);
        var Block = require("./_descriptors");
        /**
         * @param {string} expectedHashCode
         * @param {string} type
         * @param {?} opt_attributes
         * @param {boolean} recurring
         * @param {boolean} dataAndEvents
         * @param {boolean} keepData
         * @return {?}
         */
        module.exports = function(expectedHashCode, type, opt_attributes, recurring, dataAndEvents, keepData) {
            var label = str[expectedHashCode];
            var value = label;
            /** @type {string} */
            var i = dataAndEvents ? "set" : "add";
            var data = value && value.prototype;
            var memory = {};
            return Block && ("function" === typeof value && (keepData || data.forEach && !objDisplay(function() {
                (new value).entries().next();
            }))) ? (value = type(function(self, basis) {
                set(self, value, expectedHashCode, "_c");
                self._c = new label;
                if (void 0 !== basis) {
                    callback(basis, dataAndEvents, self[i], self);
                }
            }), swap("add,clear,delete,forEach,get,has,set,keys,values,entries,toJSON".split(","), function(mode) {
                /** @type {boolean} */
                var parent = "add" === mode || "set" === mode;
                if (mode in data) {
                    if (!keepData || "clear" !== mode) {
                        isFunction(value.prototype, mode, function(type, protoProps) {
                            if (set(this, value, mode), !parent && (keepData && !Event(type))) {
                                return "get" === mode && void 0;
                            }
                            var child = this._c[mode](0 === type ? 0 : type, protoProps);
                            return parent ? this : child;
                        });
                    }
                }
            }), "size" in data && getter(value.prototype, "size", {
                /**
                 * @return {?}
                 */
                get : function() {
                    return this._c.size;
                }
            })) : (value = recurring.getConstructor(type, expectedHashCode, dataAndEvents, i), getActual(value.prototype, opt_attributes), nodes.NEED = true), inspect(value, expectedHashCode), memory[expectedHashCode] = value, start(start.G + start.W + start.F, memory), keepData || recurring.setStrong(value, expectedHashCode, dataAndEvents), value;
        };
    }, {
        "./_an-instance" : 61,
        "./_array-methods" : 65,
        "./_descriptors" : 77,
        "./_export" : 81,
        "./_fails" : 82,
        "./_for-of" : 83,
        "./_global" : 84,
        "./_hide" : 86,
        "./_is-object" : 93,
        "./_meta" : 102,
        "./_object-dp" : 106,
        "./_redefine-all" : 118,
        "./_set-to-string-tag" : 122
    }],
    73 : [function(dataAndEvents, $, deepDataAndEvents) {
        var r = $.exports = {
            version : "2.4.0"
        };
        if ("number" === typeof __e) {
            __e = r;
        }
    }, {}],
    74 : [function(require, module, dataAndEvents) {
        var h = require("./_object-dp");
        var getActual = require("./_property-desc");
        /**
         * @param {string} expectedHashCode
         * @param {string} type
         * @param {?} opt_attributes
         * @return {undefined}
         */
        module.exports = function(expectedHashCode, type, opt_attributes) {
            if (type in expectedHashCode) {
                h.f(expectedHashCode, type, getActual(0, opt_attributes));
            } else {
                expectedHashCode[type] = opt_attributes;
            }
        };
    }, {
        "./_object-dp" : 106,
        "./_property-desc" : 117
    }],
    75 : [function(require, module, dataAndEvents) {
        var getActual = require("./_a-function");
        /**
         * @param {string} expectedHashCode
         * @param {string} type
         * @param {?} opt_attributes
         * @return {?}
         */
        module.exports = function(expectedHashCode, type, opt_attributes) {
            if (getActual(expectedHashCode), void 0 === type) {
                return expectedHashCode;
            }
            switch(opt_attributes) {
                case 1:
                    return function(cycle) {
                        return expectedHashCode.call(type, cycle);
                    };
                case 2:
                    return function(cycle, attributes) {
                        return expectedHashCode.call(type, cycle, attributes);
                    };
                case 3:
                    return function(cycle, attributes, recurring) {
                        return expectedHashCode.call(type, cycle, attributes, recurring);
                    };
            }
            return function() {
                return expectedHashCode.apply(type, arguments);
            };
        };
    }, {
        "./_a-function" : 59
    }],
    76 : [function(dataAndEvents, module, deepDataAndEvents) {
        /**
         * @param {string} expectedHashCode
         * @return {?}
         */
        module.exports = function(expectedHashCode) {
            if (void 0 === expectedHashCode) {
                throw TypeError("Can't call method on  " + expectedHashCode);
            }
            return expectedHashCode;
        };
    }, {}],
    77 : [function($sanitize, module, dataAndEvents) {
        /** @type {boolean} */
        module.exports = !$sanitize("./_fails")(function() {
            return 7 !== Object.defineProperty({}, "a", {
                /**
                 * @return {?}
                 */
                get : function() {
                    return 7;
                }
            }).a;
        });
    }, {
        "./_fails" : 82
    }],
    78 : [function($sanitize, module, dataAndEvents) {
        var isArray = $sanitize("./_is-object");
        var target = $sanitize("./_global").document;
        var i = isArray(target) && isArray(target.createElement);
        /**
         * @param {string} expectedHashCode
         * @return {?}
         */
        module.exports = function(expectedHashCode) {
            return i ? target.createElement(expectedHashCode) : {};
        };
    }, {
        "./_global" : 84,
        "./_is-object" : 93
    }],
    79 : [function(dataAndEvents, module, deepDataAndEvents) {
        /** @type {Array.<string>} */
        module.exports = "constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",");
    }, {}],
    80 : [function(require, module, dataAndEvents) {
        var getActual = require("./_object-keys");
        var utils = require("./_object-gops");
        var a = require("./_object-pie");
        /**
         * @param {string} expectedHashCode
         * @return {?}
         */
        module.exports = function(expectedHashCode) {
            var suite = getActual(expectedHashCode);
            var inspect = utils.f;
            if (inspect) {
                var cycle;
                var str = inspect(expectedHashCode);
                var f = a.f;
                /** @type {number} */
                var chars = 0;
                for (;str.length > chars;) {
                    if (f.call(expectedHashCode, cycle = str[chars++])) {
                        suite.push(cycle);
                    }
                }
            }
            return suite;
        };
    }, {
        "./_object-gops" : 111,
        "./_object-keys" : 114,
        "./_object-pie" : 115
    }],
    81 : [function(require, module, dataAndEvents) {
        var nodes = require("./_global");
        var global = require("./_core");
        var inspect = require("./_ctx");
        var get = require("./_hide");
        /** @type {string} */
        var name = "prototype";
        /**
         * @param {string} expectedHashCode
         * @param {string} type
         * @param {?} opt_attributes
         * @return {undefined}
         */
        var run = function(expectedHashCode, type, opt_attributes) {
            var prop;
            var overridden;
            var orig;
            /** @type {number} */
            var _isOldIE = expectedHashCode & run.F;
            /** @type {number} */
            var opt_context = expectedHashCode & run.G;
            /** @type {number} */
            var parent = expectedHashCode & run.S;
            /** @type {number} */
            var test = expectedHashCode & run.P;
            /** @type {number} */
            var min = expectedHashCode & run.B;
            /** @type {number} */
            var b = expectedHashCode & run.W;
            var context = opt_context ? global : global[type] || (global[type] = {});
            var old = context[name];
            var originalEvent = opt_context ? nodes : parent ? nodes[type] : (nodes[type] || {})[name];
            if (opt_context) {
                /** @type {string} */
                opt_attributes = type;
            }
            for (prop in opt_attributes) {
                overridden = !_isOldIE && (originalEvent && void 0 !== originalEvent[prop]);
                if (!(overridden && prop in context)) {
                    orig = overridden ? originalEvent[prop] : opt_attributes[prop];
                    context[prop] = opt_context && "function" !== typeof originalEvent[prop] ? opt_attributes[prop] : min && overridden ? inspect(orig, nodes) : b && originalEvent[prop] === orig ? function(old) {
                        /**
                         * @param {string} textStatus
                         * @param {string} canceled
                         * @param {string} status
                         * @return {?}
                         */
                        var complete = function(textStatus, canceled, status) {
                            if (this instanceof old) {
                                switch(arguments.length) {
                                    case 0:
                                        return new old;
                                    case 1:
                                        return new old(textStatus);
                                    case 2:
                                        return new old(textStatus, canceled);
                                }
                                return new old(textStatus, canceled, status);
                            }
                            return old.apply(this, arguments);
                        };
                        return complete[name] = old[name], complete;
                    }(orig) : test && "function" === typeof orig ? inspect(Function.call, orig) : orig;
                    if (test) {
                        (context.virtual || (context.virtual = {}))[prop] = orig;
                        if (expectedHashCode & run.R) {
                            if (old) {
                                if (!old[prop]) {
                                    get(old, prop, orig);
                                }
                            }
                        }
                    }
                }
            }
        };
        /** @type {number} */
        run.F = 1;
        /** @type {number} */
        run.G = 2;
        /** @type {number} */
        run.S = 4;
        /** @type {number} */
        run.P = 8;
        /** @type {number} */
        run.B = 16;
        /** @type {number} */
        run.W = 32;
        /** @type {number} */
        run.U = 64;
        /** @type {number} */
        run.R = 128;
        /** @type {function (string, string, ?): undefined} */
        module.exports = run;
    }, {
        "./_core" : 73,
        "./_ctx" : 75,
        "./_global" : 84,
        "./_hide" : 86
    }],
    82 : [function(dataAndEvents, module, deepDataAndEvents) {
        /**
         * @param {string} expectedHashCode
         * @return {?}
         */
        module.exports = function(expectedHashCode) {
            try {
                return!!expectedHashCode();
            } catch (t) {
                return true;
            }
        };
    }, {}],
    83 : [function(require, module, e) {
        var getActual = require("./_ctx");
        var promote = require("./_iter-call");
        var setup = require("./_is-array-iter");
        var objDisplay = require("./_an-object");
        var assert = require("./_to-length");
        var inspect = require("./core.get-iterator-method");
        var Infinity = {};
        var element = {};
        /** @type {function (string, string, ?, boolean, boolean): ?} */
        e = module.exports = function(expectedHashCode, type, opt_attributes, recurring, dataAndEvents) {
            var l;
            var _ref;
            var parent;
            var obj;
            var listener = dataAndEvents ? function() {
                return expectedHashCode;
            } : inspect(expectedHashCode);
            var _ = getActual(opt_attributes, recurring, type ? 2 : 1);
            /** @type {number} */
            var i = 0;
            if ("function" !== typeof listener) {
                throw TypeError(expectedHashCode + " is not iterable!");
            }
            if (setup(listener)) {
                l = assert(expectedHashCode.length);
                for (;l > i;i++) {
                    if (obj = type ? _(objDisplay(_ref = expectedHashCode[i])[0], _ref[1]) : _(expectedHashCode[i]), obj === Infinity || obj === element) {
                        return obj;
                    }
                }
            } else {
                parent = listener.call(expectedHashCode);
                for (;!(_ref = parent.next()).done;) {
                    if (obj = promote(parent, _, _ref.value, type), obj === Infinity || obj === element) {
                        return obj;
                    }
                }
            }
        };
        e.BREAK = Infinity;
        e.RETURN = element;
    }, {
        "./_an-object" : 62,
        "./_ctx" : 75,
        "./_is-array-iter" : 91,
        "./_iter-call" : 94,
        "./_to-length" : 131,
        "./core.get-iterator-method" : 138
    }],
    84 : [function(dataAndEvents, module, deepDataAndEvents) {
        var r = module.exports = "undefined" !== typeof window && window.Math === Math ? window : "undefined" !== typeof self && self.Math === Math ? self : Function("return this")();
        if ("number" === typeof __g) {
            __g = r;
        }
    }, {}],
    85 : [function(dataAndEvents, module, deepDataAndEvents) {
        /** @type {function (this:Object, *): boolean} */
        var __hasProp = {}.hasOwnProperty;
        /**
         * @param {string} expectedHashCode
         * @param {string} type
         * @return {?}
         */
        module.exports = function(expectedHashCode, type) {
            return __hasProp.call(expectedHashCode, type);
        };
    }, {}],
    86 : [function(topic, module, dataAndEvents) {
        var out = topic("./_object-dp");
        var easing = topic("./_property-desc");
        /** @type {function (string, string, ?): ?} */
        module.exports = topic("./_descriptors") ? function(expectedHashCode, type, opt_attributes) {
            return out.f(expectedHashCode, type, easing(1, opt_attributes));
        } : function(expectedHashCode, type, opt_attributes) {
            return expectedHashCode[type] = opt_attributes, expectedHashCode;
        };
    }, {
        "./_descriptors" : 77,
        "./_object-dp" : 106,
        "./_property-desc" : 117
    }],
    87 : [function($sanitize, module, dataAndEvents) {
        module.exports = $sanitize("./_global").document && document.documentElement;
    }, {
        "./_global" : 84
    }],
    88 : [function($sanitize, module, dataAndEvents) {
        /** @type {boolean} */
        module.exports = !$sanitize("./_descriptors") && !$sanitize("./_fails")(function() {
            return 7 !== Object.defineProperty($sanitize("./_dom-create")("div"), "a", {
                /**
                 * @return {?}
                 */
                get : function() {
                    return 7;
                }
            }).a;
        });
    }, {
        "./_descriptors" : 77,
        "./_dom-create" : 78,
        "./_fails" : 82
    }],
    89 : [function(dataAndEvents, module, deepDataAndEvents) {
        /**
         * @param {string} expectedHashCode
         * @param {string} type
         * @param {string} opt_attributes
         * @return {?}
         */
        module.exports = function(expectedHashCode, type, opt_attributes) {
            /** @type {boolean} */
            var r = void 0 === opt_attributes;
            switch(type.length) {
                case 0:
                    return r ? expectedHashCode() : expectedHashCode.call(opt_attributes);
                case 1:
                    return r ? expectedHashCode(type[0]) : expectedHashCode.call(opt_attributes, type[0]);
                case 2:
                    return r ? expectedHashCode(type[0], type[1]) : expectedHashCode.call(opt_attributes, type[0], type[1]);
                case 3:
                    return r ? expectedHashCode(type[0], type[1], type[2]) : expectedHashCode.call(opt_attributes, type[0], type[1], type[2]);
                case 4:
                    return r ? expectedHashCode(type[0], type[1], type[2], type[3]) : expectedHashCode.call(opt_attributes, type[0], type[1], type[2], type[3]);
            }
            return expectedHashCode.apply(opt_attributes, type);
        };
    }, {}],
    90 : [function(require, module, dataAndEvents) {
        var getActual = require("./_cof");
        /** @type {Function} */
        module.exports = Object("z").propertyIsEnumerable(0) ? Object : function(expectedHashCode) {
            return "String" === getActual(expectedHashCode) ? expectedHashCode.split("") : Object(expectedHashCode);
        };
    }, {
        "./_cof" : 69
    }],
    91 : [function(require, module, dataAndEvents) {
        var nodes = require("./_iterators");
        var expression = require("./_wks")("iterator");
        var e = Array.prototype;
        /**
         * @param {string} expectedHashCode
         * @return {?}
         */
        module.exports = function(expectedHashCode) {
            return void 0 !== expectedHashCode && (nodes.Array === expectedHashCode || e[expression] === expectedHashCode);
        };
    }, {
        "./_iterators" : 99,
        "./_wks" : 137
    }],
    92 : [function(require, module, dataAndEvents) {
        var getActual = require("./_cof");
        /** @type {function (*): boolean} */
        module.exports = Array.isArray || function(expectedHashCode) {
            return "Array" === getActual(expectedHashCode);
        };
    }, {
        "./_cof" : 69
    }],
    93 : [function(dataAndEvents, module, deepDataAndEvents) {
        /**
         * @param {string} expectedHashCode
         * @return {?}
         */
        module.exports = function(expectedHashCode) {
            return "object" === typeof expectedHashCode ? null !== expectedHashCode : "function" === typeof expectedHashCode;
        };
    }, {}],
    94 : [function(require, module, dataAndEvents) {
        var getActual = require("./_an-object");
        /**
         * @param {string} expectedHashCode
         * @param {string} type
         * @param {?} opt_attributes
         * @param {boolean} recurring
         * @return {?}
         */
        module.exports = function(expectedHashCode, type, opt_attributes, recurring) {
            try {
                return recurring ? type(getActual(opt_attributes)[0], opt_attributes[1]) : type(opt_attributes);
            } catch (i) {
                var conditional = expectedHashCode["return"];
                throw void 0 !== conditional && getActual(conditional.call(expectedHashCode)), i;
            }
        };
    }, {
        "./_an-object" : 62
    }],
    95 : [function(require, module, dataAndEvents) {
        var getActual = require("./_object-create");
        var objDisplay = require("./_property-desc");
        var inspect = require("./_set-to-string-tag");
        var proto = {};
        require("./_hide")(proto, require("./_wks")("iterator"), function() {
            return this;
        });
        /**
         * @param {string} expectedHashCode
         * @param {string} type
         * @param {?} opt_attributes
         * @return {undefined}
         */
        module.exports = function(expectedHashCode, type, opt_attributes) {
            expectedHashCode.prototype = getActual(proto, {
                next : objDisplay(1, opt_attributes)
            });
            inspect(expectedHashCode, type + " Iterator");
        };
    }, {
        "./_hide" : 86,
        "./_object-create" : 105,
        "./_property-desc" : 117,
        "./_set-to-string-tag" : 122,
        "./_wks" : 137
    }],
    96 : [function(require, module, dataAndEvents) {
        var Block = require("./_library");
        var getActual = require("./_export");
        var inspect = require("./_redefine");
        var set = require("./_hide");
        var g = require("./_has");
        var cfg = require("./_iterators");
        var debug = require("./_iter-create");
        var assert = require("./_set-to-string-tag");
        var objDisplay = require("./_object-gpo");
        var y = require("./_wks")("iterator");
        /** @type {boolean} */
        var program = !([].keys && "next" in [].keys());
        /** @type {string} */
        var callbackSymbol = "@@iterator";
        /** @type {string} */
        var root = "keys";
        /** @type {string} */
        var data = "values";
        /**
         * @return {?}
         */
        var val = function() {
            return this;
        };
        /**
         * @param {string} expectedHashCode
         * @param {string} type
         * @param {?} opt_attributes
         * @param {boolean} recurring
         * @param {string} path
         * @param {(Function|string)} name
         * @param {?} t
         * @return {?}
         */
        module.exports = function(expectedHashCode, type, opt_attributes, recurring, path, name, t) {
            debug(opt_attributes, type, recurring);
            var obj;
            var key;
            var x;
            /**
             * @param {Function} key
             * @return {?}
             */
            var callback = function(key) {
                if (!program && key in self) {
                    return self[key];
                }
                switch(key) {
                    case root:
                        return function() {
                            return new opt_attributes(this, key);
                        };
                    case data:
                        return function() {
                            return new opt_attributes(this, key);
                        };
                }
                return function() {
                    return new opt_attributes(this, key);
                };
            };
            /** @type {string} */
            var opt = type + " Iterator";
            /** @type {boolean} */
            var err = path === data;
            /** @type {boolean} */
            var inverse = false;
            var self = expectedHashCode.prototype;
            var transition = self[y] || (self[callbackSymbol] || path && self[path]);
            var value = transition || callback(path);
            var entries = path ? err ? callback("entries") : value : void 0;
            var conditional = "Array" === type ? self.entries || transition : transition;
            if (conditional && (x = objDisplay(conditional.call(new expectedHashCode)), x !== Object.prototype && (assert(x, opt, true), Block || (g(x, y) || set(x, y, val)))), err && (transition && (transition.name !== data && (inverse = true, value = function() {
                    return transition.call(this);
                }))), Block && !t || (!program && (!inverse && self[y]) || set(self, y, value)), cfg[type] = value, cfg[opt] = val, path) {
                if (obj = {
                        values : err ? value : callback(data),
                        keys : name ? value : callback(root),
                        entries : entries
                    }, t) {
                    for (key in obj) {
                        if (!(key in self)) {
                            inspect(self, key, obj[key]);
                        }
                    }
                } else {
                    getActual(getActual.P + getActual.F * (program || inverse), type, obj);
                }
            }
            return obj;
        };
    }, {
        "./_export" : 81,
        "./_has" : 85,
        "./_hide" : 86,
        "./_iter-create" : 95,
        "./_iterators" : 99,
        "./_library" : 101,
        "./_object-gpo" : 112,
        "./_redefine" : 119,
        "./_set-to-string-tag" : 122,
        "./_wks" : 137
    }],
    97 : [function($sanitize, module, dataAndEvents) {
        var prop = $sanitize("./_wks")("iterator");
        /** @type {boolean} */
        var foundInvalidType = false;
        try {
            var expectedHashCode = [7][prop]();
            /**
             * @return {undefined}
             */
            expectedHashCode["return"] = function() {
                /** @type {boolean} */
                foundInvalidType = true;
            };
            Array.from(expectedHashCode, function() {
                throw 2;
            });
        } catch (a) {
        }
        /**
         * @param {string} expectedHashCode
         * @param {string} type
         * @return {?}
         */
        module.exports = function(expectedHashCode, type) {
            if (!type && !foundInvalidType) {
                return false;
            }
            /** @type {boolean} */
            var str = false;
            try {
                /** @type {Array} */
                var originalEvent = [7];
                var stream = originalEvent[prop]();
                /**
                 * @return {?}
                 */
                stream.next = function() {
                    return{
                        done : str = true
                    };
                };
                /**
                 * @return {?}
                 */
                originalEvent[prop] = function() {
                    return stream;
                };
                expectedHashCode(originalEvent);
            } catch (s) {
            }
            return str;
        };
    }, {
        "./_wks" : 137
    }],
    98 : [function(dataAndEvents, module, deepDataAndEvents) {
        /**
         * @param {string} expectedHashCode
         * @param {string} type
         * @return {?}
         */
        module.exports = function(expectedHashCode, type) {
            return{
                value : type,
                done : !!expectedHashCode
            };
        };
    }, {}],
    99 : [function(dataAndEvents, module, deepDataAndEvents) {
        module.exports = {};
    }, {}],
    100 : [function(require, module, dataAndEvents) {
        var inspect = require("./_object-keys");
        var flag = require("./_to-iobject");
        /**
         * @param {string} expectedHashCode
         * @param {string} type
         * @return {?}
         */
        module.exports = function(expectedHashCode, type) {
            var c;
            var obj = flag(expectedHashCode);
            var str = inspect(obj);
            var len = str.length;
            /** @type {number} */
            var j = 0;
            for (;len > j;) {
                if (obj[c = str[j++]] === type) {
                    return c;
                }
            }
        };
    }, {
        "./_object-keys" : 114,
        "./_to-iobject" : 130
    }],
    101 : [function(dataAndEvents, module, deepDataAndEvents) {
        /** @type {boolean} */
        module.exports = true;
    }, {}],
    102 : [function($resource, module, dataAndEvents) {
        var fix = $resource("./_uid")("meta");
        var Event = $resource("./_is-object");
        var load = $resource("./_has");
        var _toString = $resource("./_object-dp").f;
        /** @type {number} */
        var O = 0;
        /** @type {function (Object): boolean} */
        var isString = Object.isExtensible || function() {
            return true;
        };
        /** @type {boolean} */
        var l = !$resource("./_fails")(function() {
            return isString(Object.preventExtensions({}));
        });
        /**
         * @param {string} expectedHashCode
         * @return {undefined}
         */
        var isArray = function(expectedHashCode) {
            _toString(expectedHashCode, fix, {
                value : {
                    i : "O" + ++O,
                    w : {}
                }
            });
        };
        /**
         * @param {string} type
         * @param {boolean} dataAndEvents
         * @return {?}
         */
        var init = function(type, dataAndEvents) {
            if (!Event(type)) {
                return "symbol" === typeof type ? type : ("string" === typeof type ? "S" : "P") + type;
            }
            if (!load(type, fix)) {
                if (!isString(type)) {
                    return "F";
                }
                if (!dataAndEvents) {
                    return "E";
                }
                isArray(type);
            }
            return type[fix].i;
        };
        /**
         * @param {string} value
         * @param {?} vec0
         * @return {?}
         */
        var add = function(value, vec0) {
            if (!load(value, fix)) {
                if (!isString(value)) {
                    return true;
                }
                if (!vec0) {
                    return false;
                }
                isArray(value);
            }
            return value[fix].w;
        };
        /**
         * @param {string} value
         * @return {?}
         */
        var update = function(value) {
            return l && (NEED.NEED && (isString(value) && (!load(value, fix) && isArray(value)))), value;
        };
        var NEED = module.exports = {
            KEY : fix,
            NEED : false,
            /** @type {function (string, boolean): ?} */
            fastKey : init,
            /** @type {function (string, ?): ?} */
            getWeak : add,
            /** @type {function (string): ?} */
            onFreeze : update
        };
    }, {
        "./_fails" : 82,
        "./_has" : 85,
        "./_is-object" : 93,
        "./_object-dp" : 106,
        "./_uid" : 134
    }],
    103 : [function($sanitize, module, dataAndEvents) {
        var expectedHashCode = $sanitize("./_global");
        var setter = $sanitize("./_task").set;
        var Response = expectedHashCode.MutationObserver || expectedHashCode.WebKitMutationObserver;
        var process = expectedHashCode.process;
        var p1 = expectedHashCode.Promise;
        /** @type {boolean} */
        var c = "process" === $sanitize("./_cof")(process);
        /**
         * @return {?}
         */
        module.exports = function() {
            var head;
            var ret;
            var finish;
            /**
             * @return {undefined}
             */
            var cycle = function() {
                var d;
                var fn;
                if (c) {
                    if (d = process.domain) {
                        d.exit();
                    }
                }
                for (;head;) {
                    fn = head.fn;
                    head = head.next;
                    try {
                        fn();
                    } catch (i) {
                        throw head ? finish() : ret = void 0, i;
                    }
                }
                ret = void 0;
                if (d) {
                    d.enter();
                }
            };
            if (c) {
                /**
                 * @return {undefined}
                 */
                finish = function() {
                    process.nextTick(cycle);
                };
            } else {
                if (Response) {
                    /** @type {boolean} */
                    var iterations = true;
                    /** @type {Text} */
                    var node = document.createTextNode("");
                    (new Response(cycle)).observe(node, {
                        characterData : true
                    });
                    /**
                     * @return {undefined}
                     */
                    finish = function() {
                        /** @type {boolean} */
                        node.data = iterations = !iterations;
                    };
                } else {
                    if (p1 && p1.resolve) {
                        var seq = p1.resolve();
                        /**
                         * @return {undefined}
                         */
                        finish = function() {
                            seq.then(cycle);
                        };
                    } else {
                        /**
                         * @return {undefined}
                         */
                        finish = function() {
                            setter.call(expectedHashCode, cycle);
                        };
                    }
                }
            }
            return function(fn) {
                var next = {
                    /** @type {Function} */
                    fn : fn,
                    next : void 0
                };
                if (ret) {
                    ret.next = next;
                }
                if (!head) {
                    head = next;
                    finish();
                }
                ret = next;
            };
        };
    }, {
        "./_cof" : 69,
        "./_global" : 84,
        "./_task" : 127
    }],
    104 : [function(require, module, dataAndEvents) {
        var inspect = require("./_object-keys");
        var nodes = require("./_object-gops");
        var c = require("./_object-pie");
        var getActual = require("./_to-object");
        var update = require("./_iobject");
        /** @type {function (string): ?} */
        var getNames_ = Object.assign;
        /** @type {Function} */
        module.exports = !getNames_ || require("./_fails")(function() {
            var fix = {};
            var cycle = {};
            var i = Symbol();
            /** @type {string} */
            var baseName = "abcdefghijklmnopqrst";
            return fix[i] = 7, baseName.split("").forEach(function(testname) {
                /** @type {string} */
                cycle[testname] = testname;
            }), 7 !== getNames_({}, fix)[i] || Object.keys(getNames_({}, cycle)).join("") !== baseName;
        }) ? function(expectedHashCode, type) {
            var old = getActual(expectedHashCode);
            /** @type {number} */
            var argLength = arguments.length;
            /** @type {number} */
            var current = 1;
            var n = nodes.f;
            var p = c.f;
            for (;argLength > current;) {
                var name;
                var a = update(arguments[current++]);
                var attrNames = n ? inspect(a).concat(n(a)) : inspect(a);
                var l = attrNames.length;
                /** @type {number} */
                var i = 0;
                for (;l > i;) {
                    if (p.call(a, name = attrNames[i++])) {
                        old[name] = a[name];
                    }
                }
            }
            return old;
        } : getNames_;
    }, {
        "./_fails" : 82,
        "./_iobject" : 90,
        "./_object-gops" : 111,
        "./_object-keys" : 114,
        "./_object-pie" : 115,
        "./_to-object" : 132
    }],
    105 : [function(select, module, dataAndEvents) {
        var f = select("./_an-object");
        var on = select("./_object-dps");
        var tokenized = select("./_enum-bug-keys");
        var unlock = select("./_shared-key")("IE_PROTO");
        /**
         * @return {undefined}
         */
        var newObject = function() {
        };
        /** @type {string} */
        var i = "prototype";
        /**
         * @return {?}
         */
        var run = function() {
            var d;
            var ifr = select("./_dom-create")("iframe");
            var index = tokenized.length;
            /** @type {string} */
            var prefix = "<";
            /** @type {string} */
            var name = ">";
            /** @type {string} */
            ifr.style.display = "none";
            select("./_html").appendChild(ifr);
            /** @type {string} */
            ifr.src = "javascript:";
            d = ifr.contentWindow.document;
            d.open();
            d.write(prefix + "script" + name + "document.F=Object" + prefix + "/script" + name);
            d.close();
            run = d.F;
            for (;index--;) {
                delete run[i][tokenized[index]];
            }
            return run();
        };
        /** @type {function ((Object|null), (Object|null)=): Object} */
        module.exports = Object.create || function(expectedHashCode, type) {
            var failuresLink;
            return null !== expectedHashCode ? (newObject[i] = f(expectedHashCode), failuresLink = new newObject, newObject[i] = null, failuresLink[unlock] = expectedHashCode) : failuresLink = run(), void 0 === type ? failuresLink : on(failuresLink, type);
        };
    }, {
        "./_an-object" : 62,
        "./_dom-create" : 78,
        "./_enum-bug-keys" : 79,
        "./_html" : 87,
        "./_object-dps" : 107,
        "./_shared-key" : 123
    }],
    106 : [function(require, dataAndEvents, entry) {
        var getActual = require("./_an-object");
        var Block = require("./_ie8-dom-define");
        var Event = require("./_to-primitive");
        /** @type {function (Object, string, Object): Object} */
        var setDescriptor = Object.defineProperty;
        /** @type {Function} */
        entry.f = require("./_descriptors") ? Object.defineProperty : function(expectedHashCode, type, opt_attributes) {
            if (getActual(expectedHashCode), type = Event(type, true), getActual(opt_attributes), Block) {
                try {
                    return setDescriptor(expectedHashCode, type, opt_attributes);
                } catch (s) {
                }
            }
            if ("get" in opt_attributes || "set" in opt_attributes) {
                throw TypeError("Accessors not supported!");
            }
            return "value" in opt_attributes && (expectedHashCode[type] = opt_attributes.value), expectedHashCode;
        };
    }, {
        "./_an-object" : 62,
        "./_descriptors" : 77,
        "./_ie8-dom-define" : 88,
        "./_to-primitive" : 133
    }],
    107 : [function(require, module, dataAndEvents) {
        var util = require("./_object-dp");
        var getActual = require("./_an-object");
        var Event = require("./_object-keys");
        /** @type {Function} */
        module.exports = require("./_descriptors") ? Object.defineProperties : function(expectedHashCode, type) {
            getActual(expectedHashCode);
            var f;
            var res = Event(type);
            var l = res.length;
            /** @type {number} */
            var i = 0;
            for (;l > i;) {
                util.f(expectedHashCode, f = res[i++], type[f]);
            }
            return expectedHashCode;
        };
    }, {
        "./_an-object" : 62,
        "./_descriptors" : 77,
        "./_object-dp" : 106,
        "./_object-keys" : 114
    }],
    108 : [function(require, dataAndEvents, entry) {
        var module = require("./_object-pie");
        var getActual = require("./_property-desc");
        var nodes = require("./_to-iobject");
        var Event = require("./_to-primitive");
        var queue = require("./_has");
        var Block = require("./_ie8-dom-define");
        /** @type {function (Object, string): (ObjectPropertyDescriptor|undefined)} */
        var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
        /** @type {Function} */
        entry.f = require("./_descriptors") ? getOwnPropertyDescriptor : function(expectedHashCode, type) {
            if (expectedHashCode = nodes(expectedHashCode), type = Event(type, true), Block) {
                try {
                    return getOwnPropertyDescriptor(expectedHashCode, type);
                } catch (n) {
                }
            }
            if (queue(expectedHashCode, type)) {
                return getActual(!module.f.call(expectedHashCode, type), expectedHashCode[type]);
            }
        };
    }, {
        "./_descriptors" : 77,
        "./_has" : 85,
        "./_ie8-dom-define" : 88,
        "./_object-pie" : 115,
        "./_property-desc" : 117,
        "./_to-iobject" : 130,
        "./_to-primitive" : 133
    }],
    109 : [function(symbol, mod, dataAndEvents) {
        var a = symbol("./_to-iobject");
        var f = symbol("./_object-gopn").f;
        /** @type {function (this:*): string} */
        var ostring = {}.toString;
        /** @type {Array} */
        var models = "object" === typeof window && (window && Object.getOwnPropertyNames) ? Object.getOwnPropertyNames(window) : [];
        /**
         * @param {string} expectedHashCode
         * @return {?}
         */
        var tryIt = function(expectedHashCode) {
            try {
                return f(expectedHashCode);
            } catch (t) {
                return models.slice();
            }
        };
        /**
         * @param {string} expectedHashCode
         * @return {?}
         */
        mod.exports.f = function(expectedHashCode) {
            return models && "[object Window]" === ostring.call(expectedHashCode) ? tryIt(expectedHashCode) : f(a(expectedHashCode));
        };
    }, {
        "./_object-gopn" : 110,
        "./_to-iobject" : 130
    }],
    110 : [function(f, dataAndEvents, entry) {
        var dataAttr = f("./_object-keys-internal");
        var camelKey = f("./_enum-bug-keys").concat("length", "prototype");
        /** @type {function (Object): Array.<string>} */
        entry.f = Object.getOwnPropertyNames || function(expectedHashCode) {
            return dataAttr(expectedHashCode, camelKey);
        };
    }, {
        "./_enum-bug-keys" : 79,
        "./_object-keys-internal" : 113
    }],
    111 : [function(dataAndEvents, deepDataAndEvents, object) {
        object.f = Object.getOwnPropertySymbols;
    }, {}],
    112 : [function(require, module, dataAndEvents) {
        var hasKey = require("./_has");
        var getActual = require("./_to-object");
        var type = require("./_shared-key")("IE_PROTO");
        var objectProto = Object.prototype;
        /** @type {function (Object): (Object|null)} */
        module.exports = Object.getPrototypeOf || function(expectedHashCode) {
            return expectedHashCode = getActual(expectedHashCode), hasKey(expectedHashCode, type) ? expectedHashCode[type] : "function" === typeof expectedHashCode.constructor && expectedHashCode instanceof expectedHashCode.constructor ? expectedHashCode.constructor.prototype : expectedHashCode instanceof Object ? objectProto : null;
        };
    }, {
        "./_has" : 85,
        "./_shared-key" : 123,
        "./_to-object" : 132
    }],
    113 : [function(require, module, dataAndEvents) {
        var getActual = require("./_has");
        var flag = require("./_to-iobject");
        var callback = require("./_array-includes")(false);
        var iNoClone = require("./_shared-key")("IE_PROTO");
        /**
         * @param {string} expectedHashCode
         * @param {string} type
         * @return {?}
         */
        module.exports = function(expectedHashCode, type) {
            var i;
            var obj = flag(expectedHashCode);
            /** @type {number} */
            var value = 0;
            /** @type {Array} */
            var errors = [];
            for (i in obj) {
                if (i !== iNoClone) {
                    if (getActual(obj, i)) {
                        errors.push(i);
                    }
                }
            }
            for (;type.length > value;) {
                if (getActual(obj, i = type[value++])) {
                    if (!~callback(errors, i)) {
                        errors.push(i);
                    }
                }
            }
            return errors;
        };
    }, {
        "./_array-includes" : 64,
        "./_has" : 85,
        "./_shared-key" : 123,
        "./_to-iobject" : 130
    }],
    114 : [function(require, module, dataAndEvents) {
        var getActual = require("./_object-keys-internal");
        var args = require("./_enum-bug-keys");
        /** @type {function (Object): Array.<string>} */
        module.exports = Object.keys || function(expectedHashCode) {
            return getActual(expectedHashCode, args);
        };
    }, {
        "./_enum-bug-keys" : 79,
        "./_object-keys-internal" : 113
    }],
    115 : [function(dataAndEvents, deepDataAndEvents, entry) {
        /** @type {function (this:Object, string): boolean} */
        entry.f = {}.propertyIsEnumerable;
    }, {}],
    116 : [function(require, module, dataAndEvents) {
        var inspect = require("./_export");
        var util = require("./_core");
        var getActual = require("./_fails");
        /**
         * @param {string} expectedHashCode
         * @param {string} type
         * @return {undefined}
         */
        module.exports = function(expectedHashCode, type) {
            var resolve = (util.Object || {})[expectedHashCode] || Object[expectedHashCode];
            var r20 = {};
            r20[expectedHashCode] = type(resolve);
            inspect(inspect.S + inspect.F * getActual(function() {
                resolve(1);
            }), "Object", r20);
        };
    }, {
        "./_core" : 73,
        "./_export" : 81,
        "./_fails" : 82
    }],
    117 : [function(dataAndEvents, module, deepDataAndEvents) {
        /**
         * @param {string} expectedHashCode
         * @param {string} type
         * @return {?}
         */
        module.exports = function(expectedHashCode, type) {
            return{
                enumerable : !(1 & expectedHashCode),
                configurable : !(2 & expectedHashCode),
                writable : !(4 & expectedHashCode),
                value : type
            };
        };
    }, {}],
    118 : [function(getCallback, module, dataAndEvents) {
        var callback = getCallback("./_hide");
        /**
         * @param {string} expectedHashCode
         * @param {string} type
         * @param {?} opt_attributes
         * @return {?}
         */
        module.exports = function(expectedHashCode, type, opt_attributes) {
            var i;
            for (i in type) {
                if (opt_attributes && expectedHashCode[i]) {
                    expectedHashCode[i] = type[i];
                } else {
                    callback(expectedHashCode, i, type[i]);
                }
            }
            return expectedHashCode;
        };
    }, {
        "./_hide" : 86
    }],
    119 : [function(factory, module, dataAndEvents) {
        module.exports = factory("./_hide");
    }, {
        "./_hide" : 86
    }],
    120 : [function(require, c, dataAndEvents) {
        var forIn = require("./_is-object");
        var baseCreateCallback = require("./_an-object");
        /**
         * @param {Object} callback
         * @param {Object} attr
         * @return {undefined}
         */
        var forOwn = function(callback, attr) {
            if (baseCreateCallback(callback), !forIn(attr) && null !== attr) {
                throw TypeError(attr + ": can't set as prototype!");
            }
        };
        c.exports = {
            set : Object.setPrototypeOf || ("__proto__" in {} ? function(value, err, callback) {
                try {
                    callback = require("./_ctx")(Function.call, require("./_object-gopd").f(Object.prototype, "__proto__").set, 2);
                    callback(value, []);
                    /** @type {boolean} */
                    err = !(value instanceof Array);
                } catch (o) {
                    /** @type {boolean} */
                    err = true;
                }
                return function(obj, model) {
                    return forOwn(obj, model), err ? obj.__proto__ = model : callback(obj, model), obj;
                };
            }({}, false) : void 0),
            /** @type {function (Object, Object): undefined} */
            check : forOwn
        };
    }, {
        "./_an-object" : 62,
        "./_ctx" : 75,
        "./_is-object" : 93,
        "./_object-gopd" : 108
    }],
    121 : [function(require, module, dataAndEvents) {
        var Block = require("./_global");
        var nodes = require("./_core");
        var ret = require("./_object-dp");
        var helper = require("./_descriptors");
        var fix = require("./_wks")("species");
        /**
         * @param {string} expectedHashCode
         * @return {undefined}
         */
        module.exports = function(expectedHashCode) {
            var rreturn = "function" === typeof nodes[expectedHashCode] ? nodes[expectedHashCode] : Block[expectedHashCode];
            if (helper) {
                if (rreturn) {
                    if (!rreturn[fix]) {
                        ret.f(rreturn, fix, {
                            configurable : true,
                            /**
                             * @return {?}
                             */
                            get : function() {
                                return this;
                            }
                        });
                    }
                }
            }
        };
    }, {
        "./_core" : 73,
        "./_descriptors" : 77,
        "./_global" : 84,
        "./_object-dp" : 106,
        "./_wks" : 137
    }],
    122 : [function(require, module, dataAndEvents) {
        var setDescriptor = require("./_object-dp").f;
        var getActual = require("./_has");
        var cycle = require("./_wks")("toStringTag");
        /**
         * @param {string} expectedHashCode
         * @param {string} type
         * @param {?} opt_attributes
         * @return {undefined}
         */
        module.exports = function(expectedHashCode, type, opt_attributes) {
            if (expectedHashCode) {
                if (!getActual(expectedHashCode = opt_attributes ? expectedHashCode : expectedHashCode.prototype, cycle)) {
                    setDescriptor(expectedHashCode, cycle, {
                        configurable : true,
                        value : type
                    });
                }
            }
        };
    }, {
        "./_has" : 85,
        "./_object-dp" : 106,
        "./_wks" : 137
    }],
    123 : [function(require, module, dataAndEvents) {
        var key = require("./_shared")("keys");
        var getActual = require("./_uid");
        /**
         * @param {string} expectedHashCode
         * @return {?}
         */
        module.exports = function(expectedHashCode) {
            return key[expectedHashCode] || (key[expectedHashCode] = getActual(expectedHashCode));
        };
    }, {
        "./_shared" : 124,
        "./_uid" : 134
    }],
    124 : [function(require, module, dataAndEvents) {
        var map = require("./_global");
        /** @type {string} */
        var objUid = "__core-js_shared__";
        var i = map[objUid] || (map[objUid] = {});
        /**
         * @param {string} expectedHashCode
         * @return {?}
         */
        module.exports = function(expectedHashCode) {
            return i[expectedHashCode] || (i[expectedHashCode] = {});
        };
    }, {
        "./_global" : 84
    }],
    125 : [function(require, module, dataAndEvents) {
        var getActual = require("./_an-object");
        var inspect = require("./_a-function");
        var prop = require("./_wks")("species");
        /**
         * @param {string} expectedHashCode
         * @param {string} type
         * @return {?}
         */
        module.exports = function(expectedHashCode, type) {
            var a;
            var obj = getActual(expectedHashCode).constructor;
            return void 0 === obj || void 0 === (a = getActual(obj)[prop]) ? type : inspect(a);
        };
    }, {
        "./_a-function" : 59,
        "./_an-object" : 62,
        "./_wks" : 137
    }],
    126 : [function(getCallback, module, dataAndEvents) {
        var func = getCallback("./_to-integer");
        var callback = getCallback("./_defined");
        /**
         * @param {string} expectedHashCode
         * @return {?}
         */
        module.exports = function(expectedHashCode) {
            return function(value, fn) {
                var chr;
                var a;
                /** @type {string} */
                var str = String(callback(value));
                var i = func(fn);
                /** @type {number} */
                var len = str.length;
                return i < 0 || i >= len ? expectedHashCode ? "" : void 0 : (chr = str.charCodeAt(i), chr < 55296 || (chr > 56319 || (i + 1 === len || ((a = str.charCodeAt(i + 1)) < 56320 || a > 57343))) ? expectedHashCode ? str.charAt(i) : chr : expectedHashCode ? str.slice(i, i + 2) : (chr - 55296 << 10) + (a - 56320) + 65536);
            };
        };
    }, {
        "./_defined" : 76,
        "./_to-integer" : 129
    }],
    127 : [function(require, c, dataAndEvents) {
        var callback;
        var channel;
        var thisArg;
        var bind = require("./_ctx");
        var getActual = require("./_invoke");
        var xml = require("./_html");
        var inspect = require("./_dom-create");
        var global = require("./_global");
        var process = global.process;
        var last = global.setImmediate;
        var assertHashcodeEquals = global.clearImmediate;
        var MessageChannel = global.MessageChannel;
        /** @type {number} */
        var pdataCur = 0;
        var a = {};
        /** @type {string} */
        var onreadystatechange = "onreadystatechange";
        /**
         * @return {undefined}
         */
        var self = function() {
            /** @type {number} */
            var cur = +this;
            if (a.hasOwnProperty(cur)) {
                var next = a[cur];
                delete a[cur];
                next();
            }
        };
        /**
         * @param {MessageEvent} ev
         * @return {undefined}
         */
        var onmessage = function(ev) {
            self.call(ev.data);
        };
        if (!(last && assertHashcodeEquals)) {
            /**
             * @param {string} expectedHashCode
             * @return {?}
             */
            last = function(expectedHashCode) {
                /** @type {Array} */
                var args = [];
                /** @type {number} */
                var i = 1;
                for (;arguments.length > i;) {
                    args.push(arguments[i++]);
                }
                return a[++pdataCur] = function() {
                    getActual("function" === typeof expectedHashCode ? expectedHashCode : Function(expectedHashCode), args);
                }, callback(pdataCur), pdataCur;
            };
            /**
             * @param {string} expectedHashCode
             * @return {undefined}
             */
            assertHashcodeEquals = function(expectedHashCode) {
                delete a[expectedHashCode];
            };
            if ("process" === require("./_cof")(process)) {
                /**
                 * @param {number} data
                 * @return {undefined}
                 */
                callback = function(data) {
                    process.nextTick(bind(self, data, 1));
                };
            } else {
                if (MessageChannel) {
                    channel = new MessageChannel;
                    thisArg = channel.port2;
                    /** @type {function (MessageEvent): undefined} */
                    channel.port1.onmessage = onmessage;
                    callback = bind(thisArg.postMessage, thisArg, 1);
                } else {
                    if (global.addEventListener && ("function" === typeof postMessage && !global.importScripts)) {
                        /**
                         * @param {string} value
                         * @return {undefined}
                         */
                        callback = function(value) {
                            global.postMessage(value + "", "*");
                        };
                        global.addEventListener("message", onmessage, false);
                    } else {
                        /** @type {function (string): undefined} */
                        callback = onreadystatechange in inspect("script") ? function(expectedHashCode) {
                            /**
                             * @return {undefined}
                             */
                            xml.appendChild(inspect("script"))[onreadystatechange] = function() {
                                xml.removeChild(this);
                                self.call(expectedHashCode);
                            };
                        } : function(data) {
                            setTimeout(bind(self, data, 1), 0);
                        };
                    }
                }
            }
        }
        c.exports = {
            set : last,
            clear : assertHashcodeEquals
        };
    }, {
        "./_cof" : 69,
        "./_ctx" : 75,
        "./_dom-create" : 78,
        "./_global" : 84,
        "./_html" : 87,
        "./_invoke" : 89
    }],
    128 : [function(require, module, dataAndEvents) {
        var getActual = require("./_to-integer");
        /** @type {function (...[*]): number} */
        var _ = Math.max;
        /** @type {function (...[*]): number} */
        var log = Math.min;
        /**
         * @param {string} expectedHashCode
         * @param {string} type
         * @return {?}
         */
        module.exports = function(expectedHashCode, type) {
            return expectedHashCode = getActual(expectedHashCode), expectedHashCode < 0 ? _(expectedHashCode + type, 0) : log(expectedHashCode, type);
        };
    }, {
        "./_to-integer" : 129
    }],
    129 : [function(dataAndEvents, module, deepDataAndEvents) {
        /** @type {function (*): number} */
        var ceil = Math.ceil;
        /** @type {function (*): number} */
        var floor = Math.floor;
        /**
         * @param {string} expectedHashCode
         * @return {?}
         */
        module.exports = function(expectedHashCode) {
            return isNaN(expectedHashCode = +expectedHashCode) ? 0 : (expectedHashCode > 0 ? floor : ceil)(expectedHashCode);
        };
    }, {}],
    130 : [function(require, module, dataAndEvents) {
        var format = require("./_iobject");
        var getActual = require("./_defined");
        /**
         * @param {string} expectedHashCode
         * @return {?}
         */
        module.exports = function(expectedHashCode) {
            return format(getActual(expectedHashCode));
        };
    }, {
        "./_defined" : 76,
        "./_iobject" : 90
    }],
    131 : [function(require, module, dataAndEvents) {
        var getActual = require("./_to-integer");
        /** @type {function (...[*]): number} */
        var nativeMin = Math.min;
        /**
         * @param {string} expectedHashCode
         * @return {?}
         */
        module.exports = function(expectedHashCode) {
            return expectedHashCode > 0 ? nativeMin(getActual(expectedHashCode), 9007199254740991) : 0;
        };
    }, {
        "./_to-integer" : 129
    }],
    132 : [function(require, module, dataAndEvents) {
        var getActual = require("./_defined");
        /**
         * @param {string} expectedHashCode
         * @return {?}
         */
        module.exports = function(expectedHashCode) {
            return Object(getActual(expectedHashCode));
        };
    }, {
        "./_defined" : 76
    }],
    133 : [function(require, module, dataAndEvents) {
        var getActual = require("./_is-object");
        /**
         * @param {string} expectedHashCode
         * @param {string} type
         * @return {?}
         */
        module.exports = function(expectedHashCode, type) {
            if (!getActual(expectedHashCode)) {
                return expectedHashCode;
            }
            var valueOf;
            var str;
            if (type && ("function" === typeof(valueOf = expectedHashCode.toString) && !getActual(str = valueOf.call(expectedHashCode)))) {
                return str;
            }
            if ("function" === typeof(valueOf = expectedHashCode.valueOf) && !getActual(str = valueOf.call(expectedHashCode))) {
                return str;
            }
            if (!type && ("function" === typeof(valueOf = expectedHashCode.toString) && !getActual(str = valueOf.call(expectedHashCode)))) {
                return str;
            }
            throw TypeError("Can't convert object to primitive value");
        };
    }, {
        "./_is-object" : 93
    }],
    134 : [function(dataAndEvents, module, deepDataAndEvents) {
        /** @type {number} */
        var count = 0;
        /** @type {number} */
        var id = Math.random();
        /**
         * @param {string} expectedHashCode
         * @return {?}
         */
        module.exports = function(expectedHashCode) {
            return "Symbol(".concat(void 0 === expectedHashCode ? "" : expectedHashCode, ")_", (++count + id).toString(36));
        };
    }, {}],
    135 : [function(require, module, dataAndEvents) {
        var nodes = require("./_global");
        var runtime = require("./_core");
        var Block = require("./_library");
        var argv = require("./_wks-ext");
        var getActual = require("./_object-dp").f;
        /**
         * @param {string} expectedHashCode
         * @return {undefined}
         */
        module.exports = function(expectedHashCode) {
            var obj = runtime.Symbol || (runtime.Symbol = Block ? {} : nodes.Symbol || {});
            if (!("_" === expectedHashCode.charAt(0))) {
                if (!(expectedHashCode in obj)) {
                    getActual(obj, expectedHashCode, {
                        value : argv.f(expectedHashCode)
                    });
                }
            }
        };
    }, {
        "./_core" : 73,
        "./_global" : 84,
        "./_library" : 101,
        "./_object-dp" : 106,
        "./_wks-ext" : 136
    }],
    136 : [function(trim, dataAndEvents, el) {
        el.f = trim("./_wks");
    }, {
        "./_wks" : 137
    }],
    137 : [function(proceed, module, dataAndEvents) {
        var store = proceed("./_shared")("wks");
        var value = proceed("./_uid");
        var str = proceed("./_global").Symbol;
        /** @type {boolean} */
        var escape = "function" === typeof str;
        /** @type {function (string): ?} */
        var self = module.exports = function(expectedHashCode) {
            return store[expectedHashCode] || (store[expectedHashCode] = escape && str[expectedHashCode] || (escape ? str : value)("Symbol." + expectedHashCode));
        };
        self.store = store;
    }, {
        "./_global" : 84,
        "./_shared" : 124,
        "./_uid" : 134
    }],
    138 : [function(require, module, dataAndEvents) {
        var assert = require("./_classof");
        var id = require("./_wks")("iterator");
        var Block = require("./_iterators");
        /** @type {function ((Object|string)): ?} */
        module.exports = require("./_core").getIteratorMethod = function(done) {
            if (void 0 !== done) {
                return done[id] || (done["@@iterator"] || Block[assert(done)]);
            }
        };
    }, {
        "./_classof" : 68,
        "./_core" : 73,
        "./_iterators" : 99,
        "./_wks" : 137
    }],
    139 : [function(require, module, dataAndEvents) {
        var nodes = require("./_an-object");
        var getActual = require("./core.get-iterator-method");
        /** @type {function (string): ?} */
        module.exports = require("./_core").getIterator = function(expectedHashCode) {
            var listener = getActual(expectedHashCode);
            if ("function" !== typeof listener) {
                throw TypeError(expectedHashCode + " is not iterable!");
            }
            return nodes(listener.call(expectedHashCode));
        };
    }, {
        "./_an-object" : 62,
        "./_core" : 73,
        "./core.get-iterator-method" : 138
    }],
    140 : [function(require, module, dataAndEvents) {
        var helper = require("./_classof");
        var func = require("./_wks")("iterator");
        var tags = require("./_iterators");
        /** @type {function (string): ?} */
        module.exports = require("./_core").isIterable = function(expectedHashCode) {
            var t = Object(expectedHashCode);
            return void 0 !== t[func] || ("@@iterator" in t || tags.hasOwnProperty(helper(t)));
        };
    }, {
        "./_classof" : 68,
        "./_core" : 73,
        "./_iterators" : 99,
        "./_wks" : 137
    }],
    141 : [function(require, dataAndEvents, deepDataAndEvents) {
        var makeIterator = require("./_ctx");
        var expr = require("./_export");
        var flag = require("./_to-object");
        var each = require("./_iter-call");
        var isArray = require("./_is-array-iter");
        var expect = require("./_to-length");
        var assert = require("./_create-property");
        var getActual = require("./core.get-iterator-method");
        expr(expr.S + expr.F * !require("./_iter-detect")(function(expectedHashCode) {
            Array.from(expectedHashCode);
        }), "Array", {
            /**
             * @param {string} expectedHashCode
             * @return {?}
             */
            from : function(expectedHashCode) {
                var value;
                var first;
                var input;
                var r;
                var obj = flag(expectedHashCode);
                var type = "function" === typeof this ? this : Array;
                /** @type {number} */
                var len = arguments.length;
                var callback = len > 1 ? arguments[1] : void 0;
                /** @type {boolean} */
                var isFunction = void 0 !== callback;
                /** @type {number} */
                var i = 0;
                var values = getActual(obj);
                if (isFunction && (callback = makeIterator(callback, len > 2 ? arguments[2] : void 0, 2)), void 0 === values || type === Array && isArray(values)) {
                    value = expect(obj.length);
                    first = new type(value);
                    for (;value > i;i++) {
                        assert(first, i, isFunction ? callback(obj[i], i) : obj[i]);
                    }
                } else {
                    r = values.call(obj);
                    first = new type;
                    for (;!(input = r.next()).done;i++) {
                        assert(first, i, isFunction ? each(r, callback, [input.value, i], true) : input.value);
                    }
                }
                return first.length = i, first;
            }
        });
    }, {
        "./_create-property" : 74,
        "./_ctx" : 75,
        "./_export" : 81,
        "./_is-array-iter" : 91,
        "./_iter-call" : 94,
        "./_iter-detect" : 97,
        "./_to-length" : 131,
        "./_to-object" : 132,
        "./core.get-iterator-method" : 138
    }],
    142 : [function(require, module, dataAndEvents) {
        var isArray = require("./_add-to-unscopables");
        var a = require("./_iter-step");
        var nodes = require("./_iterators");
        var getActual = require("./_to-iobject");
        module.exports = require("./_iter-define")(Array, "Array", function(obj, dataAndEvents) {
            this._t = getActual(obj);
            /** @type {number} */
            this._i = 0;
            /** @type {(number|string)} */
            this._k = dataAndEvents;
        }, function() {
            var codeSegments = this._t;
            var c = this._k;
            /** @type {number} */
            var i = this._i++;
            return!codeSegments || i >= codeSegments.length ? (this._t = void 0, a(1)) : "keys" === c ? a(0, i) : "values" === c ? a(0, codeSegments[i]) : a(0, [i, codeSegments[i]]);
        }, "values");
        nodes.Arguments = nodes.Array;
        isArray("keys");
        isArray("values");
        isArray("entries");
    }, {
        "./_add-to-unscopables" : 60,
        "./_iter-define" : 96,
        "./_iter-step" : 98,
        "./_iterators" : 99,
        "./_to-iobject" : 130
    }],
    143 : [function(Event, module, dataAndEvents) {
        var self = Event("./_collection-strong");
        module.exports = Event("./_collection")("Map", function($sanitize) {
            return function() {
                return $sanitize(this, arguments.length > 0 ? arguments[0] : void 0);
            };
        }, {
            /**
             * @param {string} name
             * @return {?}
             */
            get : function(name) {
                var node = self.getEntry(this, name);
                return node && node.v;
            },
            /**
             * @param {string} expectedHashCode
             * @param {string} type
             * @return {?}
             */
            set : function(expectedHashCode, type) {
                return self.def(this, 0 === expectedHashCode ? 0 : expectedHashCode, type);
            }
        }, self, true);
    }, {
        "./_collection" : 72,
        "./_collection-strong" : 70
    }],
    144 : [function(parser, dataAndEvents, deepDataAndEvents) {
        var expr = parser("./_export");
        expr(expr.S + expr.F, "Object", {
            assign : parser("./_object-assign")
        });
    }, {
        "./_export" : 81,
        "./_object-assign" : 104
    }],
    145 : [function(require, dataAndEvents, deepDataAndEvents) {
        var isKind = require("./_export");
        isKind(isKind.S, "Object", {
            create : require("./_object-create")
        });
    }, {
        "./_export" : 81,
        "./_object-create" : 105
    }],
    146 : [function(parser, dataAndEvents, deepDataAndEvents) {
        var expr = parser("./_export");
        expr(expr.S + expr.F * !parser("./_descriptors"), "Object", {
            defineProperty : parser("./_object-dp").f
        });
    }, {
        "./_descriptors" : 77,
        "./_export" : 81,
        "./_object-dp" : 106
    }],
    147 : [function(require, dataAndEvents, deepDataAndEvents) {
        var condition = require("./_to-object");
        var when = require("./_object-gpo");
        require("./_object-sap")("getPrototypeOf", function() {
            return function(value) {
                return when(condition(value));
            };
        });
    }, {
        "./_object-gpo" : 112,
        "./_object-sap" : 116,
        "./_to-object" : 132
    }],
    148 : [function(require, dataAndEvents, deepDataAndEvents) {
        var walk = require("./_to-object");
        var make_conditional = require("./_object-keys");
        require("./_object-sap")("keys", function() {
            return function(c) {
                return make_conditional(walk(c));
            };
        });
    }, {
        "./_object-keys" : 114,
        "./_object-sap" : 116,
        "./_to-object" : 132
    }],
    149 : [function(require, dataAndEvents, deepDataAndEvents) {
        var isKind = require("./_export");
        isKind(isKind.S, "Object", {
            setPrototypeOf : require("./_set-proto").set
        });
    }, {
        "./_export" : 81,
        "./_set-proto" : 120
    }],
    150 : [function(dataAndEvents, deepDataAndEvents, ignoreMethodDoesntExist) {
    }, {}],
    151 : [function(get, dataAndEvents, deepDataAndEvents) {
        var Moment;
        var Deferred;
        var S_NIL;
        var end = get("./_library");
        var expectedHashCode = get("./_global");
        var fn = get("./_ctx");
        var storage = get("./_classof");
        var square = get("./_export");
        var _isFunction = get("./_is-object");
        var __bind = get("./_a-function");
        var handler = get("./_an-instance");
        var each = get("./_for-of");
        var cb = get("./_species-constructor");
        var setter = get("./_task").set;
        var done = get("./_microtask")();
        /** @type {string} */
        var req = "Promise";
        var onComplete = expectedHashCode.TypeError;
        var process = expectedHashCode.process;
        var res = expectedHashCode[req];
        process = expectedHashCode.process;
        /** @type {boolean} */
        var domain = "process" === storage(process);
        /**
         * @return {undefined}
         */
        var ret = function() {
        };
        /** @type {boolean} */
        var escaped = !!function() {
            try {
                var deferred = res.resolve(1);
                /** @type {function (?): undefined} */
                var n = (deferred.constructor = {})[get("./_wks")("species")] = function(join) {
                    join(ret, ret);
                };
                return(domain || "function" === typeof PromiseRejectionEvent) && deferred.then(ret) instanceof n;
            } catch (r) {
            }
        }();
        /**
         * @param {number} a
         * @param {number} b
         * @return {?}
         */
        var extend = function(a, b) {
            return a === b || a === res && b === S_NIL;
        };
        /**
         * @param {?} v
         * @return {?}
         */
        var callback = function(v) {
            var jmax;
            return!(!_isFunction(v) || "function" !== typeof(jmax = v.then)) && jmax;
        };
        /**
         * @param {?} value
         * @return {?}
         */
        var when = function(value) {
            return extend(res, value) ? new defer(value) : new Deferred(value);
        };
        /** @type {function (?): undefined} */
        var defer = Deferred = function(promise) {
            var doneResults;
            var text;
            this.promise = new promise(function(data, textAlt) {
                if (void 0 !== doneResults || void 0 !== text) {
                    throw onComplete("Bad Promise constructor");
                }
                doneResults = data;
                text = textAlt;
            });
            this.resolve = __bind(doneResults);
            this.reject = __bind(text);
        };
        /**
         * @param {Function} callback
         * @return {?}
         */
        var require = function(callback) {
            try {
                callback();
            } catch (err) {
                return{
                    error : err
                };
            }
        };
        /**
         * @param {Object} item
         * @param {boolean} recurring
         * @return {undefined}
         */
        var next = function(item, recurring) {
            if (!item._n) {
                /** @type {boolean} */
                item._n = true;
                var items = item._c;
                done(function() {
                    var attributes = item._v;
                    /** @type {boolean} */
                    var caseSensitive = 1 === item._s;
                    /** @type {number} */
                    var index = 0;
                    /**
                     * @param {Object} result
                     * @return {undefined}
                     */
                    var finish = function(result) {
                        var expectedHashCode;
                        var html;
                        var text = caseSensitive ? result.ok : result.fail;
                        var cycle = result.resolve;
                        var opt_attributes = result.reject;
                        var domain = result.domain;
                        try {
                            if (text) {
                                if (!caseSensitive) {
                                    if (2 === item._h) {
                                        parse(item);
                                    }
                                    /** @type {number} */
                                    item._h = 1;
                                }
                                if (text === true) {
                                    expectedHashCode = attributes;
                                } else {
                                    if (domain) {
                                        domain.enter();
                                    }
                                    expectedHashCode = text(attributes);
                                    if (domain) {
                                        domain.exit();
                                    }
                                }
                                if (expectedHashCode === result.promise) {
                                    opt_attributes(onComplete("Promise-chain cycle"));
                                } else {
                                    if (html = callback(expectedHashCode)) {
                                        html.call(expectedHashCode, cycle, opt_attributes);
                                    } else {
                                        cycle(expectedHashCode);
                                    }
                                }
                            } else {
                                opt_attributes(attributes);
                            }
                        } catch (gl) {
                            opt_attributes(gl);
                        }
                    };
                    for (;items.length > index;) {
                        finish(items[index++]);
                    }
                    /** @type {Array} */
                    item._c = [];
                    /** @type {boolean} */
                    item._n = false;
                    if (recurring) {
                        if (!item._h) {
                            test(item);
                        }
                    }
                });
            }
        };
        /**
         * @param {Object} b
         * @return {undefined}
         */
        var test = function(b) {
            setter.call(expectedHashCode, function() {
                var Log;
                var apc;
                var out;
                var cycle = b._v;
                if (addEvent(b) && (Log = require(function() {
                        if (domain) {
                            process.emit("unhandledRejection", cycle, b);
                        } else {
                            if (apc = expectedHashCode.onunhandledrejection) {
                                apc({
                                    promise : b,
                                    reason : cycle
                                });
                            } else {
                                if (out = expectedHashCode.console) {
                                    if (out.error) {
                                        out.error("Unhandled promise rejection", cycle);
                                    }
                                }
                            }
                        }
                    }), b._h = domain || addEvent(b) ? 2 : 1), b._a = void 0, Log) {
                    throw Log.error;
                }
            });
        };
        /**
         * @param {Object} obj
         * @return {?}
         */
        var addEvent = function(obj) {
            if (1 === obj._h) {
                return false;
            }
            var item;
            var items = obj._a || obj._c;
            /** @type {number} */
            var index = 0;
            for (;items.length > index;) {
                if (item = items[index++], item.fail || !addEvent(item.promise)) {
                    return false;
                }
            }
            return true;
        };
        /**
         * @param {Object} attributes
         * @return {undefined}
         */
        var parse = function(attributes) {
            setter.call(expectedHashCode, function() {
                var dec;
                if (domain) {
                    process.emit("rejectionHandled", attributes);
                } else {
                    if (dec = expectedHashCode.onrejectionhandled) {
                        dec({
                            promise : attributes,
                            reason : attributes._v
                        });
                    }
                }
            });
        };
        /**
         * @param {?} e
         * @return {undefined}
         */
        var add = function(e) {
            var a = this;
            if (!a._d) {
                /** @type {boolean} */
                a._d = true;
                a = a._w || a;
                a._v = e;
                /** @type {number} */
                a._s = 2;
                if (!a._a) {
                    a._a = a._c.slice();
                }
                next(a, true);
            }
        };
        /**
         * @param {string} e
         * @return {undefined}
         */
        var finish = function(e) {
            var value;
            var a = this;
            if (!a._d) {
                /** @type {boolean} */
                a._d = true;
                a = a._w || a;
                try {
                    if (a === e) {
                        throw onComplete("Promise can't be resolved itself");
                    }
                    if (value = callback(e)) {
                        done(function() {
                            var expectedHashCode = {
                                _w : a,
                                _d : false
                            };
                            try {
                                value.call(e, fn(finish, expectedHashCode, 1), fn(add, expectedHashCode, 1));
                            } catch (cycle) {
                                add.call(expectedHashCode, cycle);
                            }
                        });
                    } else {
                        /** @type {string} */
                        a._v = e;
                        /** @type {number} */
                        a._s = 1;
                        next(a, false);
                    }
                } catch (cycle) {
                    add.call({
                        _w : a,
                        _d : false
                    }, cycle);
                }
            }
        };
        if (!escaped) {
            /**
             * @param {string} expectedHashCode
             * @return {undefined}
             */
            res = function(expectedHashCode) {
                handler(this, res, req, "_h");
                __bind(expectedHashCode);
                Moment.call(this);
                try {
                    expectedHashCode(fn(finish, this, 1), fn(add, this, 1));
                } catch (cycle) {
                    add.call(this, cycle);
                }
            };
            /**
             * @param {?} isUTC
             * @return {undefined}
             */
            Moment = function(isUTC) {
                /** @type {Array} */
                this._c = [];
                this._a = void 0;
                /** @type {number} */
                this._s = 0;
                /** @type {boolean} */
                this._d = false;
                this._v = void 0;
                /** @type {number} */
                this._h = 0;
                /** @type {boolean} */
                this._n = false;
            };
            Moment.prototype = get("./_redefine-all")(res.prototype, {
                /**
                 * @param {Function} callback
                 * @param {Function} f
                 * @return {?}
                 */
                then : function(callback, f) {
                    var ready = when(cb(this, res));
                    return ready.ok = "function" !== typeof callback || callback, ready.fail = "function" === typeof f && f, ready.domain = domain ? process.domain : void 0, this._c.push(ready), this._a && this._a.push(ready), this._s && next(this, false), ready.promise;
                },
                /**
                 * @param {Function} opt_obj2
                 * @return {?}
                 */
                "catch" : function(opt_obj2) {
                    return this.then(void 0, opt_obj2);
                }
            });
            /**
             * @return {undefined}
             */
            defer = function() {
                var util = new Moment;
                this.promise = util;
                this.resolve = fn(finish, util, 1);
                this.reject = fn(add, util, 1);
            };
        }
        square(square.G + square.W + square.F * !escaped, {
            Promise : res
        });
        get("./_set-to-string-tag")(res, req);
        get("./_set-species")(req);
        S_NIL = get("./_core")[req];
        square(square.S + square.F * !escaped, req, {
            /**
             * @param {Error} opt_attributes
             * @return {?}
             */
            reject : function(opt_attributes) {
                var p = when(this);
                var complete = p.reject;
                return complete(opt_attributes), p.promise;
            }
        });
        square(square.S + square.F * (end || !escaped), req, {
            /**
             * @param {string} expectedHashCode
             * @return {?}
             */
            resolve : function(expectedHashCode) {
                if (expectedHashCode instanceof res && extend(expectedHashCode.constructor, this)) {
                    return expectedHashCode;
                }
                var deferred = when(this);
                var resolver = deferred.resolve;
                return resolver(expectedHashCode), deferred.promise;
            }
        });
        square(square.S + square.F * !(escaped && get("./_iter-detect")(function(tasks) {
            res.all(tasks)["catch"](ret);
        })), req, {
            /**
             * @param {?} obj
             * @return {?}
             */
            all : function(obj) {
                var promise = this;
                var result = when(promise);
                var resolver = result.resolve;
                var error = result.reject;
                var response = require(function() {
                    /** @type {Array} */
                    var chunks = [];
                    /** @type {number} */
                    var rightId = 0;
                    /** @type {number} */
                    var a = 1;
                    each(obj, false, function(expectedHashCode) {
                        /** @type {number} */
                        var id = rightId++;
                        /** @type {boolean} */
                        var c = false;
                        chunks.push(void 0);
                        a++;
                        promise.resolve(expectedHashCode).then(function(text) {
                            if (!c) {
                                /** @type {boolean} */
                                c = true;
                                chunks[id] = text;
                                if (!--a) {
                                    resolver(chunks);
                                }
                            }
                        }, error);
                    });
                    if (!--a) {
                        resolver(chunks);
                    }
                });
                return response && error(response.error), result.promise;
            },
            /**
             * @param {Array} initial
             * @return {?}
             */
            race : function(initial) {
                var promise = this;
                var result = when(promise);
                var error = result.reject;
                var response = require(function() {
                    each(initial, false, function(expectedHashCode) {
                        promise.resolve(expectedHashCode).then(result.resolve, error);
                    });
                });
                return response && error(response.error), result.promise;
            }
        });
    }, {
        "./_a-function" : 59,
        "./_an-instance" : 61,
        "./_classof" : 68,
        "./_core" : 73,
        "./_ctx" : 75,
        "./_export" : 81,
        "./_for-of" : 83,
        "./_global" : 84,
        "./_is-object" : 93,
        "./_iter-detect" : 97,
        "./_library" : 101,
        "./_microtask" : 103,
        "./_redefine-all" : 118,
        "./_set-species" : 121,
        "./_set-to-string-tag" : 122,
        "./_species-constructor" : 125,
        "./_task" : 127,
        "./_wks" : 137
    }],
    152 : [function($sanitize, dataAndEvents, deepDataAndEvents) {
        var fn = $sanitize("./_string-at")(true);
        $sanitize("./_iter-define")(String, "String", function(opt_message) {
            /** @type {string} */
            this._t = String(opt_message);
            /** @type {number} */
            this._i = 0;
        }, function() {
            var result;
            var list = this._t;
            var index = this._i;
            return index >= list.length ? {
                value : void 0,
                done : true
            } : (result = fn(list, index), this._i += result.length, {
                value : result,
                done : false
            });
        });
    }, {
        "./_iter-define" : 96,
        "./_string-at" : 126
    }],
    153 : [function($, dataAndEvents, deepDataAndEvents) {
        var opts = $("./_global");
        var hasKey = $("./_has");
        var o = $("./_descriptors");
        var tile = $("./_export");
        var isArray = $("./_redefine");
        var functionType = $("./_meta").KEY;
        var hidden = $("./_fails");
        var getStorage = $("./_shared");
        var copy = $("./_set-to-string-tag");
        var divSpan = $("./_uid");
        var that = $("./_wks");
        var entry = $("./_wks-ext");
        var collection = $("./_wks-define");
        var eachEvent = $("./_keyof");
        var poll = $("./_enum-keys");
        var floor = $("./_is-array");
        var cb = $("./_an-object");
        var css = $("./_to-iobject");
        var typeName = $("./_to-primitive");
        var summary = $("./_property-desc");
        var isFunction = $("./_object-create");
        var a = $("./_object-gopn-ext");
        var me = $("./_object-gopd");
        var obj = $("./_object-dp");
        var finish = $("./_object-keys");
        var getData = me.f;
        var fn = obj.f;
        var f = a.f;
        var options = opts.Symbol;
        var expectedHashCode = opts.JSON;
        var memoized = expectedHashCode && expectedHashCode.stringify;
        /** @type {string} */
        var key = "prototype";
        var fix = that("_hidden");
        var index = that("toPrimitive");
        /** @type {function (this:Object, string): boolean} */
        var propertyIsEnumerable = {}.propertyIsEnumerable;
        var events = getStorage("symbol-registry");
        var result = getStorage("symbols");
        var value = getStorage("op-symbols");
        var el = Object[key];
        /** @type {boolean} */
        var doExtend = "function" === typeof options;
        var duration = opts.QObject;
        /** @type {boolean} */
        var c = !duration || (!duration[key] || !duration[key].findChild);
        var handler = o && hidden(function() {
            return 7 !== isFunction(fn({}, "a", {
                /**
                 * @return {?}
                 */
                get : function() {
                    return fn(this, "a", {
                        value : 7
                    }).a;
                }
            })).a;
        }) ? function(expectedHashCode, type, opt_attributes) {
            var attributes = getData(el, type);
            if (attributes) {
                delete el[type];
            }
            fn(expectedHashCode, type, opt_attributes);
            if (attributes) {
                if (expectedHashCode !== el) {
                    fn(el, type, attributes);
                }
            }
        } : fn;
        /**
         * @param {?} type
         * @return {?}
         */
        var callback = function(type) {
            var self = result[type] = isFunction(options[key]);
            return self._k = type, self;
        };
        /** @type {function (string): ?} */
        var isString = doExtend && "symbol" === typeof options.iterator ? function(array) {
            return "symbol" === typeof array;
        } : function(array) {
            return array instanceof options;
        };
        /**
         * @param {string} expectedHashCode
         * @param {string} type
         * @param {?} opt_attributes
         * @return {?}
         */
        var emit = function(expectedHashCode, type, opt_attributes) {
            return expectedHashCode === el && emit(value, type, opt_attributes), cb(expectedHashCode), type = typeName(type, true), cb(opt_attributes), hasKey(result, type) ? (opt_attributes.enumerable ? (hasKey(expectedHashCode, fix) && (expectedHashCode[fix][type] && (expectedHashCode[fix][type] = false)), opt_attributes = isFunction(opt_attributes, {
                enumerable : summary(0, false)
            })) : (hasKey(expectedHashCode, fix) || fn(expectedHashCode, fix, summary(1, {})), expectedHashCode[fix][type] = true), handler(expectedHashCode, type, opt_attributes)) : fn(expectedHashCode, type, opt_attributes);
        };
        /**
         * @param {string} expectedHashCode
         * @param {string} type
         * @return {?}
         */
        var notify = function(expectedHashCode, type) {
            cb(expectedHashCode);
            var elem;
            var second = poll(type = css(type));
            /** @type {number} */
            var i = 0;
            var l = second.length;
            for (;l > i;) {
                emit(expectedHashCode, elem = second[i++], type[elem]);
            }
            return expectedHashCode;
        };
        /**
         * @param {string} expectedHashCode
         * @param {string} type
         * @return {?}
         */
        var create = function(expectedHashCode, type) {
            return void 0 === type ? isFunction(expectedHashCode) : notify(isFunction(expectedHashCode), type);
        };
        /**
         * @param {string} expectedHashCode
         * @return {?}
         */
        var isObject = function(expectedHashCode) {
            /** @type {boolean} */
            var t = propertyIsEnumerable.call(this, expectedHashCode = typeName(expectedHashCode, true));
            return!(this === el && (hasKey(result, expectedHashCode) && !hasKey(value, expectedHashCode))) && (!(t || (!hasKey(this, expectedHashCode) || (!hasKey(result, expectedHashCode) || hasKey(this, fix) && this[fix][expectedHashCode]))) || t);
        };
        /**
         * @param {string} expectedHashCode
         * @param {string} type
         * @return {?}
         */
        var listeners = function(expectedHashCode, type) {
            if (expectedHashCode = css(expectedHashCode), type = typeName(type, true), expectedHashCode !== el || (!hasKey(result, type) || hasKey(value, type))) {
                var d = getData(expectedHashCode, type);
                return!d || (!hasKey(result, type) || (hasKey(expectedHashCode, fix) && expectedHashCode[fix][type] || (d.enumerable = true))), d;
            }
        };
        /**
         * @param {string} expectedHashCode
         * @return {?}
         */
        var e = function(expectedHashCode) {
            var type;
            var items = f(css(expectedHashCode));
            /** @type {Array} */
            var s = [];
            /** @type {number} */
            var index = 0;
            for (;items.length > index;) {
                if (!hasKey(result, type = items[index++])) {
                    if (!(type === fix)) {
                        if (!(type === functionType)) {
                            s.push(type);
                        }
                    }
                }
            }
            return s;
        };
        /**
         * @param {string} expectedHashCode
         * @return {?}
         */
        var next = function(expectedHashCode) {
            var type;
            /** @type {boolean} */
            var raw = expectedHashCode === el;
            var items = f(raw ? value : css(expectedHashCode));
            /** @type {Array} */
            var arr = [];
            /** @type {number} */
            var index = 0;
            for (;items.length > index;) {
                if (!!hasKey(result, type = items[index++])) {
                    if (!(raw && !hasKey(el, type))) {
                        arr.push(result[type]);
                    }
                }
            }
            return arr;
        };
        if (!doExtend) {
            /**
             * @return {?}
             */
            options = function() {
                if (this instanceof options) {
                    throw TypeError("Symbol is not a constructor!");
                }
                var cycle = divSpan(arguments.length > 0 ? arguments[0] : void 0);
                /**
                 * @param {string} expectedHashCode
                 * @return {undefined}
                 */
                var matches = function(expectedHashCode) {
                    if (this === el) {
                        matches.call(value, expectedHashCode);
                    }
                    if (hasKey(this, fix)) {
                        if (hasKey(this[fix], cycle)) {
                            /** @type {boolean} */
                            this[fix][cycle] = false;
                        }
                    }
                    handler(this, cycle, summary(1, expectedHashCode));
                };
                return o && (c && handler(el, cycle, {
                    configurable : true,
                    /** @type {function (string): undefined} */
                    set : matches
                })), callback(cycle);
            };
            isArray(options[key], "toString", function() {
                return this._k;
            });
            /** @type {function (string, string): ?} */
            me.f = listeners;
            /** @type {function (string, string, ?): ?} */
            obj.f = emit;
            /** @type {function (string): ?} */
            $("./_object-gopn").f = a.f = e;
            /** @type {function (string): ?} */
            $("./_object-pie").f = isObject;
            /** @type {function (string): ?} */
            $("./_object-gops").f = next;
            if (o) {
                if (!$("./_library")) {
                    isArray(el, "propertyIsEnumerable", isObject, true);
                }
            }
            /**
             * @param {string} expectedHashCode
             * @return {?}
             */
            entry.f = function(expectedHashCode) {
                return callback(that(expectedHashCode));
            };
        }
        tile(tile.G + tile.W + tile.F * !doExtend, {
            Symbol : options
        });
        /** @type {Array.<string>} */
        var tret = "hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(",");
        /** @type {number} */
        var x = 0;
        for (;tret.length > x;) {
            that(tret[x++]);
        }
        tret = finish(that.store);
        /** @type {number} */
        x = 0;
        for (;tret.length > x;) {
            collection(tret[x++]);
        }
        tile(tile.S + tile.F * !doExtend, "Symbol", {
            /**
             * @param {string} expectedHashCode
             * @return {?}
             */
            "for" : function(expectedHashCode) {
                return hasKey(events, expectedHashCode += "") ? events[expectedHashCode] : events[expectedHashCode] = options(expectedHashCode);
            },
            /**
             * @param {string} fn
             * @return {?}
             */
            keyFor : function(fn) {
                if (isString(fn)) {
                    return eachEvent(events, fn);
                }
                throw TypeError(fn + " is not a symbol!");
            },
            /**
             * @return {undefined}
             */
            useSetter : function() {
                /** @type {boolean} */
                c = true;
            },
            /**
             * @return {undefined}
             */
            useSimple : function() {
                /** @type {boolean} */
                c = false;
            }
        });
        tile(tile.S + tile.F * !doExtend, "Object", {
            /** @type {function (string, string): ?} */
            create : create,
            /** @type {function (string, string, ?): ?} */
            defineProperty : emit,
            /** @type {function (string, string): ?} */
            defineProperties : notify,
            /** @type {function (string, string): ?} */
            getOwnPropertyDescriptor : listeners,
            /** @type {function (string): ?} */
            getOwnPropertyNames : e,
            /** @type {function (string): ?} */
            getOwnPropertySymbols : next
        });
        if (expectedHashCode) {
            tile(tile.S + tile.F * (!doExtend || hidden(function() {
                var expectedHashCode = options();
                return "[null]" !== memoized([expectedHashCode]) || ("{}" !== memoized({
                    a : expectedHashCode
                }) || "{}" !== memoized(Object(expectedHashCode)));
            })), "JSON", {
                /**
                 * @param {Object} obj
                 * @return {?}
                 */
                stringify : function(obj) {
                    if (void 0 !== obj && !isString(obj)) {
                        var make;
                        var filter;
                        /** @type {Array} */
                        var cycle = [obj];
                        /** @type {number} */
                        var i = 1;
                        for (;arguments.length > i;) {
                            cycle.push(arguments[i++]);
                        }
                        return make = cycle[1], "function" === typeof make && (filter = make), !filter && floor(make) || (make = function(cycle, attributes) {
                            if (filter && (attributes = filter.call(this, cycle, attributes)), !isString(attributes)) {
                                return attributes;
                            }
                        }), cycle[1] = make, memoized.apply(expectedHashCode, cycle);
                    }
                }
            });
        }
        if (!options[key][index]) {
            $("./_hide")(options[key], index, options[key].valueOf);
        }
        copy(options, "Symbol");
        copy(Math, "Math", true);
        copy(opts.JSON, "JSON", true);
    }, {
        "./_an-object" : 62,
        "./_descriptors" : 77,
        "./_enum-keys" : 80,
        "./_export" : 81,
        "./_fails" : 82,
        "./_global" : 84,
        "./_has" : 85,
        "./_hide" : 86,
        "./_is-array" : 92,
        "./_keyof" : 100,
        "./_library" : 101,
        "./_meta" : 102,
        "./_object-create" : 105,
        "./_object-dp" : 106,
        "./_object-gopd" : 108,
        "./_object-gopn" : 110,
        "./_object-gopn-ext" : 109,
        "./_object-gops" : 111,
        "./_object-keys" : 114,
        "./_object-pie" : 115,
        "./_property-desc" : 117,
        "./_redefine" : 119,
        "./_set-to-string-tag" : 122,
        "./_shared" : 124,
        "./_to-iobject" : 130,
        "./_to-primitive" : 133,
        "./_uid" : 134,
        "./_wks" : 137,
        "./_wks-define" : 135,
        "./_wks-ext" : 136
    }],
    154 : [function(produce, dataAndEvents, deepDataAndEvents) {
        var item = produce("./_export");
        item(item.P + item.R, "Map", {
            toJSON : produce("./_collection-to-json")("Map")
        });
    }, {
        "./_collection-to-json" : 71,
        "./_export" : 81
    }],
    155 : [function($sanitize, dataAndEvents, deepDataAndEvents) {
        $sanitize("./_wks-define")("asyncIterator");
    }, {
        "./_wks-define" : 135
    }],
    156 : [function($sanitize, dataAndEvents, deepDataAndEvents) {
        $sanitize("./_wks-define")("observable");
    }, {
        "./_wks-define" : 135
    }],
    157 : [function(require, dataAndEvents, deepDataAndEvents) {
        require("./es6.array.iterator");
        var events = require("./_global");
        var getActual = require("./_hide");
        var nodes = require("./_iterators");
        var args = require("./_wks")("toStringTag");
        /** @type {Array} */
        var def = ["NodeList", "DOMTokenList", "MediaList", "StyleSheetList", "CSSRuleList"];
        /** @type {number} */
        var n = 0;
        for (;n < 5;n++) {
            var name = def[n];
            var constructor = events[name];
            var obj = constructor && constructor.prototype;
            if (obj) {
                if (!obj[args]) {
                    getActual(obj, args, name);
                }
            }
            nodes[name] = nodes.Array;
        }
    }, {
        "./_global" : 84,
        "./_hide" : 86,
        "./_iterators" : 99,
        "./_wks" : 137,
        "./es6.array.iterator" : 142
    }],
    158 : [function(dataAndEvents, module, deepDataAndEvents) {
        /**
         * @return {?}
         */
        function r() {
            throw new Error("setTimeout has not been defined");
        }
        /**
         * @return {?}
         */
        function none() {
            throw new Error("clearTimeout has not been defined");
        }
        /**
         * @param {string} cycle
         * @return {?}
         */
        function requestAnimationFrame(cycle) {
            if (type === setTimeout) {
                return setTimeout(cycle, 0);
            }
            if ((type === r || !type) && setTimeout) {
                return type = setTimeout, setTimeout(cycle, 0);
            }
            try {
                return type(cycle, 0);
            } catch (t) {
                try {
                    return type.call(null, cycle, 0);
                } catch (t) {
                    return type.call(this, cycle, 0);
                }
            }
        }
        /**
         * @param {string} cycle
         * @return {?}
         */
        function cancelAnimationFrame(cycle) {
            if (display === clearTimeout) {
                return clearTimeout(cycle);
            }
            if ((display === none || !display) && clearTimeout) {
                return display = clearTimeout, clearTimeout(cycle);
            }
            try {
                return display(cycle);
            } catch (t) {
                try {
                    return display.call(null, cycle);
                } catch (t) {
                    return display.call(this, cycle);
                }
            }
        }
        /**
         * @return {undefined}
         */
        function update() {
            if (g) {
                if (received) {
                    /** @type {boolean} */
                    g = false;
                    if (received.length) {
                        data = received.concat(data);
                    } else {
                        /** @type {number} */
                        index = -1;
                    }
                    if (data.length) {
                        tick();
                    }
                }
            }
        }
        /**
         * @return {undefined}
         */
        function tick() {
            if (!g) {
                var id = requestAnimationFrame(update);
                /** @type {boolean} */
                g = true;
                var length = data.length;
                for (;length;) {
                    received = data;
                    /** @type {Array} */
                    data = [];
                    for (;++index < length;) {
                        if (received) {
                            received[index].run();
                        }
                    }
                    /** @type {number} */
                    index = -1;
                    /** @type {number} */
                    length = data.length;
                }
                /** @type {null} */
                received = null;
                /** @type {boolean} */
                g = false;
                cancelAnimationFrame(id);
            }
        }
        /**
         * @param {Function} options
         * @param {?} array
         * @return {undefined}
         */
        function Animation(options, array) {
            /** @type {Function} */
            this.fun = options;
            this.array = array;
        }
        /**
         * @return {undefined}
         */
        function tmp() {
        }
        var type;
        var display;
        var process = module.exports = {};
        !function() {
            try {
                /** @type {Function} */
                type = "function" === typeof setTimeout ? setTimeout : r;
            } catch (e) {
                /** @type {function (): ?} */
                type = r;
            }
            try {
                /** @type {Function} */
                display = "function" === typeof clearTimeout ? clearTimeout : none;
            } catch (e) {
                /** @type {function (): ?} */
                display = none;
            }
        }();
        var received;
        /** @type {Array} */
        var data = [];
        /** @type {boolean} */
        var g = false;
        /** @type {number} */
        var index = -1;
        /**
         * @param {Function} callback
         * @return {undefined}
         */
        process.nextTick = function(callback) {
            /** @type {Array} */
            var x = new Array(arguments.length - 1);
            if (arguments.length > 1) {
                /** @type {number} */
                var i = 1;
                for (;i < arguments.length;i++) {
                    x[i - 1] = arguments[i];
                }
            }
            data.push(new Animation(callback, x));
            if (!(1 !== data.length)) {
                if (!g) {
                    requestAnimationFrame(tick);
                }
            }
        };
        /**
         * @return {undefined}
         */
        Animation.prototype.run = function() {
            this.fun.apply(null, this.array);
        };
        /** @type {string} */
        process.title = "browser";
        /** @type {boolean} */
        process.browser = true;
        process.env = {};
        /** @type {Array} */
        process.argv = [];
        /** @type {string} */
        process.version = "";
        process.versions = {};
        /** @type {function (): undefined} */
        process.on = tmp;
        /** @type {function (): undefined} */
        process.addListener = tmp;
        /** @type {function (): undefined} */
        process.once = tmp;
        /** @type {function (): undefined} */
        process.off = tmp;
        /** @type {function (): undefined} */
        process.removeListener = tmp;
        /** @type {function (): undefined} */
        process.removeAllListeners = tmp;
        /** @type {function (): undefined} */
        process.emit = tmp;
        /**
         * @param {?} name
         * @return {?}
         */
        process.binding = function(name) {
            throw new Error("process.binding is not supported");
        };
        /**
         * @return {?}
         */
        process.cwd = function() {
            return "/";
        };
        /**
         * @param {?} dir
         * @return {?}
         */
        process.chdir = function(dir) {
            throw new Error("process.chdir is not supported");
        };
        /**
         * @return {?}
         */
        process.umask = function() {
            return 0;
        };
    }, {}],
    159 : [function(factory, module, dataAndEvents) {
        module.exports = factory("./lib/effects");
    }, {
        "./lib/effects" : 160
    }],
    160 : [function(matches, dataAndEvents, expectedHashCode) {
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        expectedHashCode.select = expectedHashCode.cancel = expectedHashCode.join = expectedHashCode.fork = expectedHashCode.cps = expectedHashCode.apply = expectedHashCode.call = expectedHashCode.race = expectedHashCode.put = expectedHashCode.take = void 0;
        var options = matches("./internal/io");
        expectedHashCode.take = options.take;
        expectedHashCode.put = options.put;
        expectedHashCode.race = options.race;
        expectedHashCode.call = options.call;
        expectedHashCode.apply = options.apply;
        expectedHashCode.cps = options.cps;
        expectedHashCode.fork = options.fork;
        expectedHashCode.join = options.join;
        expectedHashCode.cancel = options.cancel;
        expectedHashCode.select = options.select;
    }, {
        "./internal/io" : 161
    }],
    161 : [function(Event, dataAndEvents, expectedHashCode) {
        /**
         * @param {string} expectedHashCode
         * @param {string} fix
         * @param {Function} keepData
         * @return {?}
         */
        function on(expectedHashCode, fix, keepData) {
            return fix in expectedHashCode ? Object.defineProperty(expectedHashCode, fix, {
                /** @type {Function} */
                value : keepData,
                enumerable : true,
                configurable : true,
                writable : true
            }) : expectedHashCode[fix] = keepData, expectedHashCode;
        }
        /**
         * @param {string} expectedHashCode
         * @return {?}
         */
        function get(expectedHashCode) {
            return("*" === expectedHashCode ? config.wildcard : self.is.array(expectedHashCode) ? config.array : self.is.func(expectedHashCode) ? config.predicate : config["default"])(expectedHashCode);
        }
        /**
         * @param {(Object|string)} id
         * @return {?}
         */
        function run(id) {
            if (arguments.length > 0 && self.is.undef(id)) {
                throw new Error(str);
            }
            return callback(m, self.is.undef(id) ? "*" : id);
        }
        /**
         * @param {?} key
         * @return {?}
         */
        function put(key) {
            return callback(method, key);
        }
        /**
         * @param {?} props
         * @return {?}
         */
        function animate(props) {
            return callback(key, props);
        }
        /**
         * @param {string} expectedHashCode
         * @param {Array} args
         * @return {?}
         */
        function create(expectedHashCode, args) {
            (0, self.check)(expectedHashCode, self.is.notUndef, r20);
            /** @type {null} */
            var context = null;
            if (self.is.array(expectedHashCode)) {
                /** @type {string} */
                var option = expectedHashCode;
                var f = jQuery(option, 2);
                context = f[0];
                expectedHashCode = f[1];
            } else {
                if (expectedHashCode.fn) {
                    /** @type {string} */
                    var options = expectedHashCode;
                    context = options.context;
                    expectedHashCode = options.fn;
                }
            }
            return(0, self.check)(expectedHashCode, self.is.func, r20), {
                context : context,
                fn : expectedHashCode,
                args : args
            };
        }
        /**
         * @param {string} expectedHashCode
         * @return {?}
         */
        function parse(expectedHashCode) {
            /** @type {number} */
            var len = arguments.length;
            /** @type {Array} */
            var args = Array(len > 1 ? len - 1 : 0);
            /** @type {number} */
            var i = 1;
            for (;i < len;i++) {
                args[i - 1] = arguments[i];
            }
            return callback(feature, create(expectedHashCode, args));
        }
        /**
         * @param {string} expectedHashCode
         * @param {string} type
         * @return {?}
         */
        function handler(expectedHashCode, type) {
            var args = arguments.length <= 2 || void 0 === arguments[2] ? [] : arguments[2];
            return callback(feature, create({
                context : expectedHashCode,
                fn : type
            }, args));
        }
        /**
         * @param {string} start
         * @return {?}
         */
        function slice(start) {
            /** @type {number} */
            var len = arguments.length;
            /** @type {Array} */
            var args = Array(len > 1 ? len - 1 : 0);
            /** @type {number} */
            var i = 1;
            for (;i < len;i++) {
                args[i - 1] = arguments[i];
            }
            return callback(p, create(start, args));
        }
        /**
         * @param {(Array|string)} selector
         * @return {?}
         */
        function init(selector) {
            /** @type {number} */
            var len = arguments.length;
            /** @type {Array} */
            var args = Array(len > 1 ? len - 1 : 0);
            /** @type {number} */
            var i = 1;
            for (;i < len;i++) {
                args[i - 1] = arguments[i];
            }
            return callback(error, create(selector, args));
        }
        /**
         * @param {string} reason
         * @return {?}
         */
        function close(reason) {
            if (!stop(reason)) {
                throw new Error(msg);
            }
            return callback(root, reason);
        }
        /**
         * @param {string} expectedHashCode
         * @return {?}
         */
        function done(expectedHashCode) {
            if (!stop(expectedHashCode)) {
                throw new Error(objectDisposed);
            }
            return callback(which, expectedHashCode);
        }
        /**
         * @param {Function} s
         * @return {?}
         */
        function map(s) {
            /** @type {number} */
            var len = arguments.length;
            /** @type {Array} */
            var args = Array(len > 1 ? len - 1 : 0);
            /** @type {number} */
            var i = 1;
            for (;i < len;i++) {
                args[i - 1] = arguments[i];
            }
            return 0 === arguments.length ? s = self.ident : (0, self.check)(s, self.is.func, restoreScript), callback(name, {
                /** @type {Function} */
                selector : s,
                args : args
            });
        }
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        expectedHashCode.asEffect = expectedHashCode.SELECT_ARG_ERROR = expectedHashCode.INVALID_PATTERN = expectedHashCode.CANCEL_ARG_ERROR = expectedHashCode.JOIN_ARG_ERROR = expectedHashCode.FORK_ARG_ERROR = expectedHashCode.CALL_FUNCTION_ARG_ERROR = void 0;
        var jQuery = function() {
            /**
             * @param {string} arg1
             * @param {number} deepDataAndEvents
             * @return {?}
             */
            function foo(arg1, deepDataAndEvents) {
                /** @type {Array} */
                var matched = [];
                /** @type {boolean} */
                var callback2 = true;
                /** @type {boolean} */
                var o = false;
                var bulk = void 0;
                try {
                    var rule;
                    var exports = arg1[Symbol.iterator]();
                    for (;!(callback2 = (rule = exports.next()).done) && (matched.push(rule.value), !deepDataAndEvents || matched.length !== deepDataAndEvents);callback2 = true) {
                    }
                } catch (fn) {
                    /** @type {boolean} */
                    o = true;
                    bulk = fn;
                } finally {
                    try {
                        if (!callback2) {
                            if (exports["return"]) {
                                exports["return"]();
                            }
                        }
                    } finally {
                        if (o) {
                            throw bulk;
                        }
                    }
                }
                return matched;
            }
            return function(expectedHashCode, deepDataAndEvents) {
                if (Array.isArray(expectedHashCode)) {
                    return expectedHashCode;
                }
                if (Symbol.iterator in Object(expectedHashCode)) {
                    return foo(expectedHashCode, deepDataAndEvents);
                }
                throw new TypeError("Invalid attempt to destructure non-iterable instance");
            };
        }();
        /** @type {function (string): ?} */
        expectedHashCode.matcher = get;
        /** @type {function ((Object|string)): ?} */
        expectedHashCode.take = run;
        /** @type {function (?): ?} */
        expectedHashCode.put = put;
        /** @type {function (?): ?} */
        expectedHashCode.race = animate;
        /** @type {function (string): ?} */
        expectedHashCode.call = parse;
        /** @type {function (string, string): ?} */
        expectedHashCode.apply = handler;
        /** @type {function (string): ?} */
        expectedHashCode.cps = slice;
        /** @type {function ((Array|string)): ?} */
        expectedHashCode.fork = init;
        /** @type {function (string): ?} */
        expectedHashCode.join = close;
        /** @type {function (string): ?} */
        expectedHashCode.cancel = done;
        /** @type {function (Function): ?} */
        expectedHashCode.select = map;
        var self = Event("./utils");
        /** @type {string} */
        var r20 = expectedHashCode.CALL_FUNCTION_ARG_ERROR = "call/cps/fork first argument must be a function, an array [context, function] or an object {context, fn}";
        /** @type {string} */
        var msg = (expectedHashCode.FORK_ARG_ERROR = "fork first argument must be a generator function or an iterator", expectedHashCode.JOIN_ARG_ERROR = "join argument must be a valid task (a result of a fork)");
        /** @type {string} */
        var objectDisposed = expectedHashCode.CANCEL_ARG_ERROR = "cancel argument must be a valid task (a result of a fork)";
        /** @type {string} */
        var str = expectedHashCode.INVALID_PATTERN = "Invalid pattern passed to `take` (HINT: check if you didn't mispell a constant)";
        /** @type {string} */
        var restoreScript = expectedHashCode.SELECT_ARG_ERROR = "select first argument must be a function";
        var sel = (0, self.sym)("IO");
        /** @type {string} */
        var m = "TAKE";
        /** @type {string} */
        var method = "PUT";
        /** @type {string} */
        var key = "RACE";
        /** @type {string} */
        var feature = "CALL";
        /** @type {string} */
        var p = "CPS";
        /** @type {string} */
        var error = "FORK";
        /** @type {string} */
        var root = "JOIN";
        /** @type {string} */
        var which = "CANCEL";
        /** @type {string} */
        var name = "SELECT";
        /**
         * @param {string} object
         * @param {?} key
         * @return {?}
         */
        var callback = function(object, key) {
            var failuresLink;
            return failuresLink = {}, on(failuresLink, sel, true), on(failuresLink, object, key), failuresLink;
        };
        var config = {
            /**
             * @return {?}
             */
            wildcard : function() {
                return self.kTrue;
            },
            /**
             * @param {?} name
             * @return {?}
             */
            "default" : function(name) {
                return function(v) {
                    return v.type === name;
                };
            },
            /**
             * @param {string} expectedHashCode
             * @return {?}
             */
            array : function(expectedHashCode) {
                return function(message) {
                    return expectedHashCode.some(function(type) {
                        return type === message.type;
                    });
                };
            },
            /**
             * @param {string} expectedHashCode
             * @return {?}
             */
            predicate : function(expectedHashCode) {
                return function(deepDataAndEvents) {
                    return expectedHashCode(deepDataAndEvents);
                };
            }
        };
        /**
         * @param {string} e
         * @return {?}
         */
        var stop = function(e) {
            return e[self.TASK];
        };
        expectedHashCode.asEffect = {
            /**
             * @param {Object} matches
             * @return {?}
             */
            take : function(matches) {
                return matches && (matches[sel] && matches[m]);
            },
            /**
             * @param {Object} data
             * @return {?}
             */
            put : function(data) {
                return data && (data[sel] && data[method]);
            },
            /**
             * @param {Object} matches
             * @return {?}
             */
            race : function(matches) {
                return matches && (matches[sel] && matches[key]);
            },
            /**
             * @param {string} expectedHashCode
             * @return {?}
             */
            call : function(expectedHashCode) {
                return expectedHashCode && (expectedHashCode[sel] && expectedHashCode[feature]);
            },
            /**
             * @param {Object} matches
             * @return {?}
             */
            cps : function(matches) {
                return matches && (matches[sel] && matches[p]);
            },
            /**
             * @param {Object} args
             * @return {?}
             */
            fork : function(args) {
                return args && (args[sel] && args[error]);
            },
            /**
             * @param {string} item
             * @return {?}
             */
            join : function(item) {
                return item && (item[sel] && item[root]);
            },
            /**
             * @param {string} expectedHashCode
             * @return {?}
             */
            cancel : function(expectedHashCode) {
                return expectedHashCode && (expectedHashCode[sel] && expectedHashCode[which]);
            },
            /**
             * @param {Object} obj
             * @return {?}
             */
            select : function(obj) {
                return obj && (obj[sel] && obj[name]);
            }
        };
    }, {
        "./utils" : 162
    }],
    162 : [function(callback, dataAndEvents, expectedHashCode) {
        (function(el) {
            /**
             * @param {?} object
             * @return {?}
             */
            function seal(object) {
                return object;
            }
            /**
             * @param {Object} obj
             * @param {Object} attr
             * @param {?} millis
             * @return {undefined}
             */
            function check(obj, attr, millis) {
                if (!attr(obj)) {
                    throw new Error(millis);
                }
            }
            /**
             * @param {Array} opt_attributes
             * @param {Object} deepDataAndEvents
             * @return {undefined}
             */
            function remove(opt_attributes, deepDataAndEvents) {
                var fromIndex = opt_attributes.indexOf(deepDataAndEvents);
                if (fromIndex >= 0) {
                    opt_attributes.splice(fromIndex, 1);
                }
            }
            /**
             * @return {?}
             */
            function resolve() {
                var cycle = arguments.length <= 0 || void 0 === arguments[0] ? {} : arguments[0];
                var deferred = defer({}, cycle);
                var promise = new Promise(function(resolve, reject) {
                    deferred.resolve = resolve;
                    deferred.reject = reject;
                });
                return deferred.promise = promise, deferred;
            }
            /**
             * @param {number} n
             * @return {?}
             */
            function find(n) {
                /** @type {Array} */
                var file = [];
                /** @type {number} */
                var i = 0;
                for (;i < n;i++) {
                    file.push(resolve());
                }
                return file;
            }
            /**
             * @return {?}
             */
            function e() {
                var e = arguments.length <= 0 || void 0 === arguments[0] ? 0 : arguments[0];
                return function() {
                    return++e;
                };
            }
            /**
             * @param {?} successCB
             * @return {?}
             */
            function save(successCB) {
                return Promise.resolve(1).then(function() {
                    return successCB();
                });
            }
            /**
             * @param {string} cycle
             * @return {undefined}
             */
            function setup(cycle) {
                if (p) {
                    console.warn("DEPRECATION WARNING", cycle);
                }
            }
            Object.defineProperty(expectedHashCode, "__esModule", {
                value : true
            });
            /** @type {function (string): ?} */
            var defer = Object.assign || function(expectedHashCode) {
                /** @type {number} */
                var j = 1;
                for (;j < arguments.length;j++) {
                    var arr = arguments[j];
                    var cycle;
                    for (cycle in arr) {
                        if (Object.prototype.hasOwnProperty.call(arr, cycle)) {
                            expectedHashCode[cycle] = arr[cycle];
                        }
                    }
                }
                return expectedHashCode;
            };
            /** @type {function (?): ?} */
            expectedHashCode.ident = seal;
            /** @type {function (Object, Object, ?): undefined} */
            expectedHashCode.check = check;
            /** @type {function (Array, Object): undefined} */
            expectedHashCode.remove = remove;
            /** @type {function (): ?} */
            expectedHashCode.deferred = resolve;
            /** @type {function (number): ?} */
            expectedHashCode.arrayOfDeffered = find;
            /** @type {function (): ?} */
            expectedHashCode.autoInc = e;
            /** @type {function (?): ?} */
            expectedHashCode.asap = save;
            /** @type {function (string): undefined} */
            expectedHashCode.warnDeprecated = setup;
            /** @type {function (string): ?} */
            var throttledUpdate = expectedHashCode.sym = function(dataAndEvents) {
                return "@@redux-saga/" + dataAndEvents;
            };
            var sp = expectedHashCode.TASK = throttledUpdate("TASK");
            var p = (expectedHashCode.kTrue = function() {
                return true;
            }, expectedHashCode.noop = function() {
            }, expectedHashCode.isDev = "undefined" !== typeof el && (el.env && "development" === el.env.NODE_ENV));
            var args = expectedHashCode.is = {
                /**
                 * @param {number} id
                 * @return {?}
                 */
                undef : function(id) {
                    return null === id || void 0 === id;
                },
                /**
                 * @param {Object} dataAndEvents
                 * @return {?}
                 */
                notUndef : function(dataAndEvents) {
                    return null !== dataAndEvents && void 0 !== dataAndEvents;
                },
                /**
                 * @param {string} options
                 * @return {?}
                 */
                func : function(options) {
                    return "function" === typeof options;
                },
                /** @type {function (*): boolean} */
                array : Array.isArray,
                /**
                 * @param {Object} obj
                 * @return {?}
                 */
                promise : function(obj) {
                    return obj && args.func(obj.then);
                },
                /**
                 * @param {Array} obj
                 * @return {?}
                 */
                iterator : function(obj) {
                    return obj && (args.func(obj.next) && args.func(obj["throw"]));
                },
                /**
                 * @param {(Node|string)} p
                 * @return {?}
                 */
                task : function(p) {
                    return p && p[sp];
                }
            };
        }).call(this, callback("_process"));
    }, {
        _process : 158
    }],
    163 : [function(factory, module, dataAndEvents) {
        (function(options) {
            var expectedHashCode = "object" === typeof options ? options : "object" === typeof window ? window : "object" === typeof self ? self : this;
            var value = expectedHashCode.regeneratorRuntime && Object.getOwnPropertyNames(expectedHashCode).indexOf("regeneratorRuntime") >= 0;
            var attrNames = value && expectedHashCode.regeneratorRuntime;
            if (expectedHashCode.regeneratorRuntime = void 0, module.exports = factory("./runtime"), value) {
                expectedHashCode.regeneratorRuntime = attrNames;
            } else {
                try {
                    delete expectedHashCode.regeneratorRuntime;
                } catch (a) {
                    expectedHashCode.regeneratorRuntime = void 0;
                }
            }
        }).call(this, "undefined" !== typeof window ? window : {});
    }, {
        "./runtime" : 164
    }],
    164 : [function(callback, options, dataAndEvents) {
        (function(object, options) {
            !function(event) {
                /**
                 * @param {Function} deepDataAndEvents
                 * @param {Function} date
                 * @param {string} dataAndEvents
                 * @param {Array} opt_attributes
                 * @return {?}
                 */
                function clone(deepDataAndEvents, date, dataAndEvents, opt_attributes) {
                    var Type = date && date.prototype instanceof superClass ? date : superClass;
                    /** @type {Object} */
                    var ctrl = Object.create(Type.prototype);
                    var pdataCur = new Class(opt_attributes || []);
                    return ctrl._invoke = parse(deepDataAndEvents, dataAndEvents, pdataCur), ctrl;
                }
                /**
                 * @param {Function} action
                 * @param {string} expectedHashCode
                 * @param {string} cycle
                 * @return {?}
                 */
                function cb(action, expectedHashCode, cycle) {
                    try {
                        return{
                            type : "normal",
                            arg : action.call(expectedHashCode, cycle)
                        };
                    } catch (arg) {
                        return{
                            type : "throw",
                            arg : arg
                        };
                    }
                }
                /**
                 * @return {undefined}
                 */
                function superClass() {
                }
                /**
                 * @return {undefined}
                 */
                function method() {
                }
                /**
                 * @return {undefined}
                 */
                function cycle() {
                }
                /**
                 * @param {Object} o
                 * @return {undefined}
                 */
                function onComplete(o) {
                    ["next", "throw", "return"].forEach(function(pos) {
                        /**
                         * @param {string} args
                         * @return {?}
                         */
                        o[pos] = function(args) {
                            return this._invoke(pos, args);
                        };
                    });
                }
                /**
                 * @param {Object} results
                 * @return {undefined}
                 */
                function done(results) {
                    /**
                     * @param {string} name
                     * @param {string} namespace
                     * @param {?} callback
                     * @param {?} val
                     * @return {?}
                     */
                    function parse(name, namespace, callback, val) {
                        var me = cb(results[name], results, namespace);
                        if ("throw" !== me.type) {
                            var arg = me.arg;
                            var expectedHashCode = arg.value;
                            return expectedHashCode && ("object" === typeof expectedHashCode && hasOwnProperty.call(expectedHashCode, "__await")) ? Promise.resolve(expectedHashCode.__await).then(function(k) {
                                parse("next", k, callback, val);
                            }, function(k) {
                                parse("throw", k, callback, val);
                            }) : Promise.resolve(expectedHashCode).then(function(json) {
                                arg.value = json;
                                callback(arg);
                            }, val);
                        }
                        val(me.arg);
                    }
                    /**
                     * @param {string} v
                     * @param {string} options
                     * @return {?}
                     */
                    function done(v, options) {
                        /**
                         * @return {?}
                         */
                        function reject() {
                            return new Promise(function(part, val) {
                                parse(v, options, part, val);
                            });
                        }
                        return promise = promise ? promise.then(reject, reject) : reject();
                    }
                    if ("object" === typeof object) {
                        if (object.domain) {
                            parse = object.domain.bind(parse);
                        }
                    }
                    var promise;
                    /** @type {function (string, string): ?} */
                    this._invoke = done;
                }
                /**
                 * @param {Function} params
                 * @param {string} text
                 * @param {Object} data
                 * @return {?}
                 */
                function parse(params, text, data) {
                    /** @type {string} */
                    var k = n;
                    return function(type, value) {
                        if (k === _id) {
                            throw new Error("Generator is already running");
                        }
                        if (k === checked) {
                            if ("throw" === type) {
                                throw value;
                            }
                            return parseNumber();
                        }
                        /** @type {string} */
                        data.method = type;
                        data.arg = value;
                        for (;;) {
                            var name = data.delegate;
                            if (name) {
                                var obj = next(name, data);
                                if (obj) {
                                    if (obj === undef) {
                                        continue;
                                    }
                                    return obj;
                                }
                            }
                            if ("next" === data.method) {
                                data.sent = data._sent = data.arg;
                            } else {
                                if ("throw" === data.method) {
                                    if (k === n) {
                                        throw k = checked, data.arg;
                                    }
                                    data.dispatchException(data.arg);
                                } else {
                                    if ("return" === data.method) {
                                        data.abrupt("return", data.arg);
                                    }
                                }
                            }
                            /** @type {string} */
                            k = _id;
                            var item = cb(params, text, data);
                            if ("normal" === item.type) {
                                if (k = data.done ? checked : j, item.arg === undef) {
                                    continue;
                                }
                                return{
                                    value : item.arg,
                                    done : data.done
                                };
                            }
                            if ("throw" === item.type) {
                                /** @type {string} */
                                k = checked;
                                /** @type {string} */
                                data.method = "throw";
                                data.arg = item.arg;
                            }
                        }
                    };
                }
                /**
                 * @param {?} options
                 * @param {Object} data
                 * @return {?}
                 */
                function next(options, data) {
                    var val = options.iterator[data.method];
                    if (val === value) {
                        if (data.delegate = null, "throw" === data.method) {
                            if (options.iterator["return"] && (data.method = "return", data.arg = value, next(options, data), "throw" === data.method)) {
                                return undef;
                            }
                            /** @type {string} */
                            data.method = "throw";
                            /** @type {TypeError} */
                            data.arg = new TypeError("The iterator does not provide a 'throw' method");
                        }
                        return undef;
                    }
                    var self = cb(val, options.iterator, data.arg);
                    if ("throw" === self.type) {
                        return data.method = "throw", data.arg = self.arg, data.delegate = null, undef;
                    }
                    var v = self.arg;
                    return v ? v.done ? (data[options.resultName] = v.value, data.next = options.nextLoc, "return" !== data.method && (data.method = "next", data.arg = value), data.delegate = null, undef) : v : (data.method = "throw", data.arg = new TypeError("iterator result is not an object"), data.delegate = null, undef);
                }
                /**
                 * @param {Array} property
                 * @return {undefined}
                 */
                function addProperty(property) {
                    var cycle = {
                        tryLoc : property[0]
                    };
                    if (1 in property) {
                        cycle.catchLoc = property[1];
                    }
                    if (2 in property) {
                        cycle.finallyLoc = property[2];
                        cycle.afterLoc = property[3];
                    }
                    this.tryEntries.push(cycle);
                }
                /**
                 * @param {?} httpServer
                 * @return {undefined}
                 */
                function start(httpServer) {
                    var me = httpServer.completion || {};
                    /** @type {string} */
                    me.type = "normal";
                    delete me.arg;
                    httpServer.completion = me;
                }
                /**
                 * @param {string} expectedHashCode
                 * @return {undefined}
                 */
                function Class(expectedHashCode) {
                    /** @type {Array} */
                    this.tryEntries = [{
                        tryLoc : "root"
                    }];
                    expectedHashCode.forEach(addProperty, this);
                    this.reset(true);
                }
                /**
                 * @param {string} expectedHashCode
                 * @return {?}
                 */
                function val(expectedHashCode) {
                    if (expectedHashCode) {
                        var conditional = expectedHashCode[fix];
                        if (conditional) {
                            return conditional.call(expectedHashCode);
                        }
                        if ("function" === typeof expectedHashCode.next) {
                            return expectedHashCode;
                        }
                        if (!isNaN(expectedHashCode.length)) {
                            /** @type {number} */
                            var cycle = -1;
                            /**
                             * @return {?}
                             */
                            var list = function e() {
                                for (;++cycle < expectedHashCode.length;) {
                                    if (hasOwnProperty.call(expectedHashCode, cycle)) {
                                        return e.value = expectedHashCode[cycle], e.done = false, e;
                                    }
                                }
                                return e.value = value, e.done = true, e;
                            };
                            return list.next = list;
                        }
                    }
                    return{
                        /** @type {function (): ?} */
                        next : parseNumber
                    };
                }
                /**
                 * @return {?}
                 */
                function parseNumber() {
                    return{
                        value : value,
                        done : true
                    };
                }
                var value;
                var ObjProto = Object.prototype;
                /** @type {function (this:Object, *): boolean} */
                var hasOwnProperty = ObjProto.hasOwnProperty;
                var container = "function" === typeof Symbol ? Symbol : {};
                var fix = container.iterator || "@@iterator";
                var protoKey = container.toStringTag || "@@toStringTag";
                /** @type {boolean} */
                var onlyHandlers = "object" === typeof options;
                var self = event.regeneratorRuntime;
                if (self) {
                    return void(onlyHandlers && (options.exports = self));
                }
                self = event.regeneratorRuntime = onlyHandlers ? options.exports : {};
                /** @type {function (Function, Function, string, Array): ?} */
                self.wrap = clone;
                /** @type {string} */
                var n = "suspendedStart";
                /** @type {string} */
                var j = "suspendedYield";
                /** @type {string} */
                var _id = "executing";
                /** @type {string} */
                var checked = "completed";
                var undef = {};
                var expectedHashCode = {};
                /**
                 * @return {?}
                 */
                expectedHashCode[fix] = function() {
                    return this;
                };
                /** @type {function (Object): (Object|null)} */
                var getPrototypeOf = Object.getPrototypeOf;
                /** @type {(Object|null)} */
                var b = getPrototypeOf && getPrototypeOf(getPrototypeOf(val([])));
                if (b) {
                    if (b !== ObjProto) {
                        if (hasOwnProperty.call(b, fix)) {
                            /** @type {Object} */
                            expectedHashCode = b;
                        }
                    }
                }
                /** @type {Object} */
                var proto = cycle.prototype = superClass.prototype = Object.create(expectedHashCode);
                /** @type {function (): undefined} */
                method.prototype = proto.constructor = cycle;
                /** @type {function (): undefined} */
                cycle.constructor = method;
                /** @type {string} */
                cycle[protoKey] = method.displayName = "GeneratorFunction";
                /**
                 * @param {?} options
                 * @return {?}
                 */
                self.isGeneratorFunction = function(options) {
                    /** @type {(Function|boolean|null)} */
                    var func = "function" === typeof options && options.constructor;
                    return!!func && (func === method || "GeneratorFunction" === (func.displayName || func.name));
                };
                /**
                 * @param {string} expectedHashCode
                 * @return {?}
                 */
                self.mark = function(expectedHashCode) {
                    return Object.setPrototypeOf ? Object.setPrototypeOf(expectedHashCode, cycle) : (expectedHashCode.__proto__ = cycle, protoKey in expectedHashCode || (expectedHashCode[protoKey] = "GeneratorFunction")), expectedHashCode.prototype = Object.create(proto), expectedHashCode;
                };
                /**
                 * @param {?} dataAndEvents
                 * @return {?}
                 */
                self.awrap = function(dataAndEvents) {
                    return{
                        __await : dataAndEvents
                    };
                };
                onComplete(done.prototype);
                /** @type {function (Object): undefined} */
                self.AsyncIterator = done;
                /**
                 * @param {Function} deepDataAndEvents
                 * @param {?} options
                 * @param {string} dataAndEvents
                 * @param {Object} opt_attributes
                 * @return {?}
                 */
                self.async = function(deepDataAndEvents, options, dataAndEvents, opt_attributes) {
                    var stream = new done(clone(deepDataAndEvents, options, dataAndEvents, opt_attributes));
                    return self.isGeneratorFunction(options) ? stream : stream.next().then(function(d) {
                        return d.done ? d.value : stream.next();
                    });
                };
                onComplete(proto);
                /** @type {string} */
                proto[protoKey] = "Generator";
                /**
                 * @return {?}
                 */
                proto.toString = function() {
                    return "[object Generator]";
                };
                /**
                 * @param {string} expectedHashCode
                 * @return {?}
                 */
                self.keys = function(expectedHashCode) {
                    /** @type {Array} */
                    var eventPath = [];
                    var cycle;
                    for (cycle in expectedHashCode) {
                        eventPath.push(cycle);
                    }
                    return eventPath.reverse(), function init() {
                        for (;eventPath.length;) {
                            var result = eventPath.pop();
                            if (result in expectedHashCode) {
                                return init.value = result, init.done = false, init;
                            }
                        }
                        return init.done = true, init;
                    };
                };
                /** @type {function (string): ?} */
                self.values = val;
                Class.prototype = {
                    /** @type {function (string): undefined} */
                    constructor : Class,
                    /**
                     * @param {boolean} raw
                     * @return {undefined}
                     */
                    reset : function(raw) {
                        if (this.prev = 0, this.next = 0, this.sent = this._sent = value, this.done = false, this.delegate = null, this.method = "next", this.arg = value, this.tryEntries.forEach(start), !raw) {
                            var cycle;
                            for (cycle in this) {
                                if ("t" === cycle.charAt(0)) {
                                    if (hasOwnProperty.call(this, cycle)) {
                                        if (!isNaN(+cycle.slice(1))) {
                                            this[cycle] = value;
                                        }
                                    }
                                }
                            }
                        }
                    },
                    /**
                     * @return {?}
                     */
                    stop : function() {
                        /** @type {boolean} */
                        this.done = true;
                        var m = this.tryEntries[0];
                        var me = m.completion;
                        if ("throw" === me.type) {
                            throw me.arg;
                        }
                        return this.rval;
                    },
                    /**
                     * @param {?} arg
                     * @return {?}
                     */
                    dispatchException : function(arg) {
                        /**
                         * @param {?} el
                         * @param {boolean} signal_eof
                         * @return {?}
                         */
                        function next(el, signal_eof) {
                            return me.type = "throw", me.arg = arg, opts.next = el, signal_eof && (opts.method = "next", opts.arg = value), !!signal_eof;
                        }
                        if (this.done) {
                            throw arg;
                        }
                        var opts = this;
                        /** @type {number} */
                        var unlock = this.tryEntries.length - 1;
                        for (;unlock >= 0;--unlock) {
                            var expectedHashCode = this.tryEntries[unlock];
                            var me = expectedHashCode.completion;
                            if ("root" === expectedHashCode.tryLoc) {
                                return next("end");
                            }
                            if (expectedHashCode.tryLoc <= this.prev) {
                                /** @type {boolean} */
                                var a = hasOwnProperty.call(expectedHashCode, "catchLoc");
                                /** @type {boolean} */
                                var b = hasOwnProperty.call(expectedHashCode, "finallyLoc");
                                if (a && b) {
                                    if (this.prev < expectedHashCode.catchLoc) {
                                        return next(expectedHashCode.catchLoc, true);
                                    }
                                    if (this.prev < expectedHashCode.finallyLoc) {
                                        return next(expectedHashCode.finallyLoc);
                                    }
                                } else {
                                    if (a) {
                                        if (this.prev < expectedHashCode.catchLoc) {
                                            return next(expectedHashCode.catchLoc, true);
                                        }
                                    } else {
                                        if (!b) {
                                            throw new Error("try statement without catch or finally");
                                        }
                                        if (this.prev < expectedHashCode.finallyLoc) {
                                            return next(expectedHashCode.finallyLoc);
                                        }
                                    }
                                }
                            }
                        }
                    },
                    /**
                     * @param {string} type
                     * @param {?} opt_attributes
                     * @return {?}
                     */
                    abrupt : function(type, opt_attributes) {
                        /** @type {number} */
                        var unlock = this.tryEntries.length - 1;
                        for (;unlock >= 0;--unlock) {
                            var expectedHashCode = this.tryEntries[unlock];
                            if (expectedHashCode.tryLoc <= this.prev && (hasOwnProperty.call(expectedHashCode, "finallyLoc") && this.prev < expectedHashCode.finallyLoc)) {
                                var item = expectedHashCode;
                                break;
                            }
                        }
                        if (item) {
                            if ("break" === type || "continue" === type) {
                                if (item.tryLoc <= opt_attributes) {
                                    if (opt_attributes <= item.finallyLoc) {
                                        /** @type {null} */
                                        item = null;
                                    }
                                }
                            }
                        }
                        var data = item ? item.completion : {};
                        return data.type = type, data.arg = opt_attributes, item ? (this.method = "next", this.next = item.finallyLoc, undef) : this.complete(data);
                    },
                    /**
                     * @param {Event} token
                     * @param {Object} next
                     * @return {?}
                     */
                    complete : function(token, next) {
                        if ("throw" === token.type) {
                            throw token.arg;
                        }
                        return "break" === token.type || "continue" === token.type ? this.next = token.arg : "return" === token.type ? (this.rval = this.arg = token.arg, this.method = "return", this.next = "end") : "normal" === token.type && (next && (this.next = next)), undef;
                    },
                    /**
                     * @param {number} opt_attributes
                     * @return {?}
                     */
                    finish : function(opt_attributes) {
                        /** @type {number} */
                        var unlock = this.tryEntries.length - 1;
                        for (;unlock >= 0;--unlock) {
                            var httpServer = this.tryEntries[unlock];
                            if (httpServer.finallyLoc === opt_attributes) {
                                return this.complete(httpServer.completion, httpServer.afterLoc), start(httpServer), undef;
                            }
                        }
                    },
                    /**
                     * @param {?} no
                     * @return {?}
                     */
                    "catch" : function(no) {
                        /** @type {number} */
                        var unlock = this.tryEntries.length - 1;
                        for (;unlock >= 0;--unlock) {
                            var httpServer = this.tryEntries[unlock];
                            if (httpServer.tryLoc === no) {
                                var me = httpServer.completion;
                                if ("throw" === me.type) {
                                    var arg = me.arg;
                                    start(httpServer);
                                }
                                return arg;
                            }
                        }
                        throw new Error("illegal catch attempt");
                    },
                    /**
                     * @param {string} expectedHashCode
                     * @param {string} t
                     * @param {number} expectedNumberOfNonCommentArgs
                     * @return {?}
                     */
                    delegateYield : function(expectedHashCode, t, expectedNumberOfNonCommentArgs) {
                        return this.delegate = {
                            iterator : val(expectedHashCode),
                            resultName : t,
                            nextLoc : expectedNumberOfNonCommentArgs
                        }, "next" === this.method && (this.arg = value), undef;
                    }
                };
            }("object" === typeof options ? options : "object" === typeof window ? window : "object" === typeof self ? self : this);
        }).call(this, callback("_process"), "undefined" !== typeof window ? window : {});
    }, {
        _process : 158
    }],
    165 : [function(require, dataAndEvents, expectedHashCode) {
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        require("extension-api/globals");
        var cfg = require("config");
        cfg.initGlobal("chrome", "cs");
        var Block = require("extension-api/chrome");
        var nodes = require("extension-api");
        var helper = require("extension-api/web-extensions");
        helper.hacksForCompatibility();
        nodes.initGlobalExtensionApi(Block.createApi());
        require("universal/cs");
    }, {
        config : 169,
        "extension-api" : 177,
        "extension-api/chrome" : 175,
        "extension-api/globals" : 176,
        "extension-api/web-extensions" : 184,
        "universal/cs" : 342
    }],
    166 : [function(require, dataAndEvents, expectedHashCode) {
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var r;
        var helper = require("stdlib");
        var config = require("./url");
        var module = require("./services");
        !function(exports) {
            /**
             * @param {string} expectedHashCode
             * @param {string} type
             * @param {?} opt_attributes
             * @return {?}
             */
            function create(expectedHashCode, type, opt_attributes) {
                var cycle = "prod" === type ? "https://f-log-extension.grammarly.io" : "qa" === type || "dev" === type ? "https://127.0.0.1:8000" : helper.assertNever(type);
                var fix = "prod" === type ? url : "qa" === type || "dev" === type ? "qagr.io" : helper.assertNever(type);
                return{
                    url : config.UrlConfig.create(url, cycle, opt_attributes),
                    gnar : module.GnarConfig.create(expectedHashCode, fix),
                    felog : module.FelogConfig.create(expectedHashCode),
                    extensionId : extensionId
                };
            }
            /** @type {string} */
            var extensionId = "87677a2c52b84ad3a151a4a72f5bd3c4";
            /** @type {string} */
            var url = "grammarly.com";
            /** @type {function (string, string, ?): ?} */
            exports.create = create;
        }(r = expectedHashCode.AppConfig || (expectedHashCode.AppConfig = {}));
    }, {
        "./services" : 171,
        "./url" : 173,
        stdlib : 328
    }],
    167 : [function(require, dataAndEvents, expectedHashCode) {
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var r;
        var nodes = require("stdlib");
        !function(exports) {
            /**
             * @param {string} expectedHashCode
             * @param {string} type
             * @param {?} opt_attributes
             * @param {boolean} recurring
             * @param {Object} dataAndEvents
             * @param {string} name
             * @param {string} selector
             * @return {?}
             */
            function setup(expectedHashCode, type, opt_attributes, recurring, dataAndEvents, name, selector) {
                var expectedThrown = void 0 !== name && void 0 !== selector ? name : "UNVERSIONED";
                /** @type {string} */
                var l = expectedHashCode + "." + type + "." + opt_attributes;
                /** @type {string} */
                var min = ["prod" !== dataAndEvents ? dataAndEvents : null, expectedThrown !== recurring ? expectedThrown : null].filter(function(dataAndEvents) {
                    return!!dataAndEvents;
                }).join(".");
                return{
                    version : l,
                    fullVersion : l + "-" + [recurring, min].filter(function(g) {
                        return "" !== g;
                    }).join("/"),
                    commitHash : selector,
                    gitBranch : name
                };
            }
            /**
             * @param {string} selector
             * @param {string} keepData
             * @param {Object} o
             * @return {?}
             */
            function init(selector, keepData, o) {
                try {
                    switch(selector) {
                        case "safari":
                            switch(keepData) {
                                case "bg":
                                    ;
                                case "popup":
                                    return o.safari.extension.displayVersion;
                                default:
                                    return;
                            }
                            ;
                        case "chrome":
                            return o.chrome.runtime.getManifest().version;
                        case "firefox":
                            return o.firefox.runtime.getManifest().version;
                        case "edge":
                            return o.edge.runtime.getManifest().version;
                        default:
                            return nodes.assertNever(selector);
                    }
                } catch (cycle) {
                    return void console.error("Could not get extension version from manifest", cycle);
                }
            }
            /** @type {function (string, string, ?, boolean, Object, string, string): ?} */
            exports.create = setup;
            /** @type {function (string, string, Object): ?} */
            exports.getManifestVersion = init;
        }(r = expectedHashCode.BuildInfo || (expectedHashCode.BuildInfo = {}));
    }, {
        stdlib : 328
    }],
    168 : [function(require, dataAndEvents, expectedHashCode) {
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var r;
        var Block = require("stdlib");
        !function(exports) {
            /**
             * @param {string} expectedHashCode
             * @return {?}
             */
            function Detectizr(expectedHashCode) {
                return Block.optionalStringUnion(["chrome", "safari", "firefox", "edge"], expectedHashCode);
            }
            /**
             * @param {Object} context
             * @return {?}
             */
            function detect(context) {
                return context.chrome && /google/i.test(context.navigator.vendor) ? "chrome" : context.navigator.userAgent.indexOf("Firefox") !== -1 ? "firefox" : /^((?!chrome).)*safari/i.test(context.navigator.userAgent) ? "safari" : "Netscape" === context.navigator.appName && context.navigator.appVersion.indexOf("Edge") > -1 ? "edge" : void 0;
            }
            /** @type {function (string): ?} */
            exports.create = Detectizr;
            /** @type {function (Object): ?} */
            exports.detect = detect;
        }(r = expectedHashCode.TargetBrowser || (expectedHashCode.TargetBrowser = {}));
        var i;
        !function(exports) {
            /**
             * @param {string} expectedHashCode
             * @return {?}
             */
            function create(expectedHashCode) {
                return Block.optionalStringUnion(["dev", "prod", "qa"], expectedHashCode);
            }
            /** @type {function (string): ?} */
            exports.create = create;
        }(i = expectedHashCode.TargetEnv || (expectedHashCode.TargetEnv = {}));
        var a;
        !function(exports) {
            /**
             * @param {string} expectedHashCode
             * @return {?}
             */
            function create(expectedHashCode) {
                return Block.optionalStringUnion(["bg", "cs", "popup"], expectedHashCode);
            }
            /**
             * @param {Object} context
             * @param {string} obj
             * @return {?}
             */
            function detect(context, obj) {
                /**
                 * @return {?}
                 */
                function init() {
                    try {
                        return context.safari.extension.globalPage.contentWindow !== context;
                    } catch (t) {
                        return false;
                    }
                }
                /** @type {boolean} */
                var bulk = !!context.IS_BG;
                var length = "safari" === obj ? init() : !!context.IS_POPUP;
                return bulk ? "bg" : length ? "popup" : "cs";
            }
            /** @type {function (string): ?} */
            exports.create = create;
            /** @type {function (Object, string): ?} */
            exports.detect = detect;
        }(a = expectedHashCode.TargetContext || (expectedHashCode.TargetContext = {}));
        var s;
        !function(activator) {
            /**
             * @param {string} expectedHashCode
             * @param {string} type
             * @param {?} opt_attributes
             * @return {?}
             */
            function createDom(expectedHashCode, type, opt_attributes) {
                return{
                    browser : expectedHashCode,
                    env : type,
                    context : opt_attributes
                };
            }
            /** @type {function (string, string, ?): ?} */
            activator.create = createDom;
        }(s = expectedHashCode.BundleInfo || (expectedHashCode.BundleInfo = {}));
    }, {
        stdlib : 328
    }],
    169 : [function(require, dataAndEvents, expectedHashCode) {
        /**
         * @param {Object} helper
         * @return {undefined}
         */
        function getChildren(helper) {
            var key;
            for (key in helper) {
                if (!expectedHashCode.hasOwnProperty(key)) {
                    expectedHashCode[key] = helper[key];
                }
            }
        }
        /**
         * @return {?}
         */
        function match() {
            return proto.get();
        }
        /**
         * @param {string} expectedHashCode
         * @param {string} cycle
         * @param {(Object|boolean|number|string)} models
         * @return {undefined}
         */
        function reset(expectedHashCode, cycle, models) {
            proto.init(config.MainConfig.create(expectedHashCode, cycle, models || config.ProcessEnv.fromBrowserify()));
            window.GR_CFG = proto.get();
        }
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        getChildren(require("./app"));
        getChildren(require("./build"));
        getChildren(require("./bundle"));
        getChildren(require("./services"));
        getChildren(require("./system"));
        getChildren(require("./url"));
        getChildren(require("./mainConfig"));
        var config = require("./mainConfig");
        var drop = require("./bundle");
        var header = require("stdlib");
        var proto = new header.Global(function() {
            console.warn("Global config not initialized -- using fall back value.");
            var expectedHashCode = header.assertNonNull(drop.TargetBrowser.detect(window), "runtime-detected browser type");
            var _$ = config.MainConfig.create(expectedHashCode, drop.TargetContext.detect(window, expectedHashCode), config.ProcessEnv.fromBrowserify());
            return window.GR_CFG = _$, _$;
        });
        /** @type {function (): ?} */
        expectedHashCode.getGlobal = match;
        /** @type {function (string, string, (Object|boolean|number|string)): undefined} */
        expectedHashCode.initGlobal = reset;
    }, {
        "./app" : 166,
        "./build" : 167,
        "./bundle" : 168,
        "./mainConfig" : 170,
        "./services" : 171,
        "./system" : 172,
        "./url" : 173,
        stdlib : 328
    }],
    170 : [function($, dataAndEvents, expectedHashCode) {
        (function(p) {
            /**
             * @param {?} value
             * @return {?}
             */
            function h(value) {
                return value && value.__esModule ? value : {
                    "default" : value
                };
            }
            var selector = $("babel-runtime/helpers/slicedToArray");
            var elem = h(selector);
            Object.defineProperty(expectedHashCode, "__esModule", {
                value : true
            });
            var a;
            var $window = $("./app");
            var book = $("./build");
            var game = $("./system");
            var article = $("./bundle");
            var body = $("stdlib");
            !function(mockObject) {
                /**
                 * @param {string} expectedHashCode
                 * @param {string} type
                 * @param {?} opt_attributes
                 * @param {boolean} recurring
                 * @param {boolean} dataAndEvents
                 * @param {?} keepData
                 * @param {?} tagName
                 * @return {?}
                 */
                function createDom(expectedHashCode, type, opt_attributes, recurring, dataAndEvents, keepData, tagName) {
                    return{
                        env : expectedHashCode,
                        major_number : type,
                        build_number : opt_attributes,
                        release_number : recurring,
                        git_branch : dataAndEvents,
                        git_commit : keepData,
                        popup_url : tagName
                    };
                }
                /**
                 * @return {?}
                 */
                function object() {
                    return createDom("prod", "14", "794", "1083", p.env.GIT_BRANCH, "9a2e211e63c063be2ea48c13d2448ef885669f14", "https://s3.amazonaws.com/grammarly_neweditor/index/1.0.87-browserplugin_2.0/popup.html");
                }
                /** @type {function (string, string, ?, boolean, boolean, ?, ?): ?} */
                mockObject.create = createDom;
                /** @type {function (): ?} */
                mockObject.fromBrowserify = object;
            }(a = expectedHashCode.ProcessEnv || (expectedHashCode.ProcessEnv = {}));
            var f;
            !function(exports) {
                /**
                 * @param {string} expectedHashCode
                 * @param {string} type
                 * @param {?} opt_attributes
                 * @return {?}
                 */
                function setup(expectedHashCode, type, opt_attributes) {
                    var rvar = void 0;
                    if (opt_attributes.env) {
                        var target = article.TargetEnv.create(opt_attributes.env);
                        if (void 0 !== target) {
                            rvar = target;
                        } else {
                            console.warn("*** process.env.ENV is invalid ('" + opt_attributes.env + "'), assuming 'prod' env");
                            /** @type {string} */
                            rvar = "prod";
                        }
                    } else {
                        console.warn("*** process.env.ENV is not defined, assuming 'prod' env");
                        /** @type {string} */
                        rvar = "prod";
                    }
                    var cycle = body.assertNonNull(rvar, "ENV env var OR a fallback value");
                    /** @type {Array.<?>} */
                    var e = [opt_attributes.major_number, opt_attributes.build_number, opt_attributes.release_number].map(body.optionalIntString);
                    var event = void 0;
                    if (3 === e.length && e.every(function(dataAndEvents) {
                            return void 0 !== dataAndEvents;
                        })) {
                        /** @type {Array.<?>} */
                        event = e;
                    } else {
                        var tasks = (book.BuildInfo.getManifestVersion(expectedHashCode, type, window) || "").split(".").map(body.optionalIntString);
                        event = 3 === tasks.length && tasks.every(function(dataAndEvents) {
                            return void 0 !== dataAndEvents;
                        }) ? tasks : [4, 0, 2];
                    }
                    var originalEvent = event;
                    var args = (0, elem["default"])(originalEvent, 3);
                    var next = args[0];
                    var fix = args[1];
                    var attributes = args[2];
                    return{
                        buildInfo : book.BuildInfo.create(next, fix, attributes, expectedHashCode, cycle, opt_attributes.git_branch, opt_attributes.git_commit),
                        bundleInfo : article.BundleInfo.create(expectedHashCode, cycle, type),
                        appConfig : $window.AppConfig.create(expectedHashCode, cycle, opt_attributes.popup_url),
                        systemInfo : game.SystemInfo.create(expectedHashCode, window)
                    };
                }
                /** @type {function (string, string, ?): ?} */
                exports.create = setup;
            }(f = expectedHashCode.MainConfig || (expectedHashCode.MainConfig = {}));
        }).call(this, $("_process"));
    }, {
        "./app" : 166,
        "./build" : 167,
        "./bundle" : 168,
        "./system" : 172,
        _process : 158,
        "babel-runtime/helpers/slicedToArray" : 40,
        stdlib : 328
    }],
    171 : [function(require, dataAndEvents, expectedHashCode) {
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var r;
        var assert = require("stdlib");
        !function(exports) {
            /**
             * @param {string} expectedHashCode
             * @param {string} type
             * @return {?}
             */
            function create(expectedHashCode, type) {
                return{
                    appName : assert.assertNonNull(browser[expectedHashCode], "gnar app name"),
                    url : "https://gnar." + type,
                    domain : "." + type
                };
            }
            var browser = {
                chrome : "chromeExt",
                firefox : "firefoxExt",
                safari : "safariExt",
                edge : "edgeExt"
            };
            /** @type {function (string, string): ?} */
            exports.create = create;
        }(r = expectedHashCode.GnarConfig || (expectedHashCode.GnarConfig = {}));
        var i;
        !function(el) {
            /**
             * @param {string} expectedHashCode
             * @return {?}
             */
            function node(expectedHashCode) {
                return{
                    appName : assert.assertNonNull(browser[expectedHashCode], "felog app name")
                };
            }
            var browser = {
                chrome : "extensionChrome",
                firefox : "extensionFirefox",
                safari : "extensionSafari",
                edge : "extensionEdge"
            };
            /** @type {function (string): ?} */
            el.create = node;
        }(i = expectedHashCode.FelogConfig || (expectedHashCode.FelogConfig = {}));
    }, {
        stdlib : 328
    }],
    172 : [function(require, dataAndEvents, expectedHashCode) {
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var DOM;
        var drop = require("./bundle");
        var Block = require("stdlib");
        !function(node) {
            /**
             * @param {string} expectedHashCode
             * @param {string} type
             * @return {?}
             */
            function handler(expectedHashCode, type) {
                var paramType = drop.TargetBrowser.detect(type) || "other";
                return{
                    type : paramType,
                    isWE : "firefox" === expectedHashCode ? Block.try_(function() {
                        return!!firefox.runtime;
                    }, function(dataAndEvents) {
                        return false;
                    }) : "chrome" === expectedHashCode || "edge" === expectedHashCode
                };
            }
            /** @type {function (string, string): ?} */
            node.create = handler;
        }(DOM = expectedHashCode.BrowserInfo || (expectedHashCode.BrowserInfo = {}));
        var bank;
        !function(exports) {
            /**
             * @param {string} expectedHashCode
             * @return {?}
             */
            function create(expectedHashCode) {
                return{
                    isWindows : expectedHashCode.navigator.appVersion.indexOf("Win") !== -1
                };
            }
            /** @type {function (string): ?} */
            exports.create = create;
        }(bank = expectedHashCode.OsInfo || (expectedHashCode.OsInfo = {}));
        var s;
        !function(exports) {
            /**
             * @param {string} expectedHashCode
             * @param {string} type
             * @return {?}
             */
            function create(expectedHashCode, type) {
                return{
                    browser : DOM.create(expectedHashCode, type),
                    os : bank.create(type)
                };
            }
            /** @type {function (string, string): ?} */
            exports.create = create;
        }(s = expectedHashCode.SystemInfo || (expectedHashCode.SystemInfo = {}));
    }, {
        "./bundle" : 168,
        stdlib : 328
    }],
    173 : [function(dataAndEvents, deepDataAndEvents, expectedHashCode) {
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var r;
        !function(activator) {
            /**
             * @param {string} expectedHashCode
             * @param {string} type
             * @param {?} opt_attributes
             * @return {?}
             */
            function createDom(expectedHashCode, type, opt_attributes) {
                /** @type {string} */
                var authPath = "https://www." + expectedHashCode;
                /** @type {string} */
                var dapiMimic = "https://data." + expectedHashCode;
                /** @type {string} */
                var rootPath = "https://app." + expectedHashCode;
                /** @type {string} */
                var appPathRoute = "https://auth." + expectedHashCode + "/v3";
                /** @type {string} */
                var saveEmailFeedback = "https://emailfeedback." + expectedHashCode;
                return{
                    app : rootPath,
                    appPersonalDictionary : rootPath + "/profile/dictionary",
                    capi : "wss://capi." + expectedHashCode + "/freews",
                    dapiMimic : dapiMimic + "/api/mimic",
                    dapiProps : dapiMimic + "/api/props",
                    editorDictionary : rootPath + "/profile/dictionary",
                    dictionary : "https://capi." + expectedHashCode + "/api/defs",
                    docs : rootPath + "/docs",
                    docsApi : "https://dox." + expectedHashCode + "/documents",
                    authCreatePage : appPathRoute + "/redirect-anonymous?location=" + authPath + "/after_install_page",
                    userOrAnonymous : appPathRoute + "/user/oranonymous",
                    authSignin : appPathRoute + "/login",
                    authSignup : appPathRoute + "/signup",
                    signin : authPath + "/signin",
                    signup : authPath + "/signup",
                    resetPassword : authPath + "/resetpassword",
                    saveEmailFeedback : saveEmailFeedback + "/api/feedback/",
                    newFelog : type,
                    referral : authPath + "/referral?page=extension",
                    welcomeC : authPath + "/extension-success",
                    upgrade : authPath + "/upgrade",
                    uninstall : authPath + "/extension-uninstall",
                    terms : authPath + "/terms",
                    policy : authPath + "/privacy-policy",
                    pageConfigUrl : "https://d3cv4a9a9wh0bt.cloudfront.net/browserplugin/config.json",
                    popupUrl : opt_attributes,
                    grammarlyDomain : expectedHashCode
                };
            }
            /** @type {function (string, string, ?): ?} */
            activator.create = createDom;
        }(r = expectedHashCode.UrlConfig || (expectedHashCode.UrlConfig = {}));
    }, {}],
    174 : [function(dataAndEvents, deepDataAndEvents, expectedHashCode) {
        /**
         * @param {Function} onComplete
         * @param {string} fn
         * @return {undefined}
         */
        function finish(onComplete, fn) {
            if (chrome.runtime.lastError) {
                fn(chrome.runtime.lastError);
            } else {
                onComplete();
            }
        }
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        /** @type {function (Function, string): undefined} */
        expectedHashCode.handleChromeError = finish;
    }, {}],
    175 : [function($, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} value
         * @return {?}
         */
        function parseFloat(value) {
            return value && value.__esModule ? value : {
                "default" : value
            };
        }
        /**
         * @return {?}
         */
        function array() {
            return new SrcArray;
        }
        var width = $("babel-runtime/core-js/promise");
        var dimension = parseFloat(width);
        var x = $("babel-runtime/core-js/object/assign");
        var item = parseFloat(x);
        var m = $("babel-runtime/helpers/classCallCheck");
        var p = parseFloat(m);
        var obj = $("babel-runtime/helpers/createClass");
        var h = parseFloat(obj);
        var height = $("babel-runtime/helpers/defineProperty");
        var angle = (parseFloat(height), $("babel-runtime/core-js/object/get-own-property-symbols"));
        var c = parseFloat(angle);
        /**
         * @param {string} expectedHashCode
         * @param {Array} b
         * @return {?}
         */
        var extend = function(expectedHashCode, b) {
            var obj = {};
            var fix;
            for (fix in expectedHashCode) {
                if (Object.prototype.hasOwnProperty.call(expectedHashCode, fix)) {
                    if (b.indexOf(fix) < 0) {
                        obj[fix] = expectedHashCode[fix];
                    }
                }
            }
            if (null !== expectedHashCode && "function" === typeof c["default"]) {
                /** @type {number} */
                var i = 0;
                fix = (0, c["default"])(expectedHashCode);
                for (;i < fix.length;i++) {
                    if (b.indexOf(fix[i]) < 0) {
                        obj[fix[i]] = expectedHashCode[fix[i]];
                    }
                }
            }
            return obj;
        };
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var emptyJ = $("./message/bg");
        var $spy = $("./message/content");
        var $src = $("./tabs/chrome");
        var source = $("./chrome-util");
        var curElem = $("./web-extensions");
        var handler = $("lib/util");
        var $window = $("stdlib");
        var create = function() {
            /**
             * @param {string} errorName
             * @return {undefined}
             */
            function bindToTabHandler(errorName) {
                (0, p["default"])(this, bindToTabHandler);
                this.port = chrome.runtime.connect({
                    name : errorName
                });
            }
            return(0, h["default"])(bindToTabHandler, [{
                key : "onMessage",
                /**
                 * @param {string} expectedHashCode
                 * @return {undefined}
                 */
                value : function(expectedHashCode) {
                    this.port.onMessage.addListener(expectedHashCode);
                }
            }, {
                key : "onDisconnect",
                /**
                 * @param {string} expectedHashCode
                 * @return {undefined}
                 */
                value : function(expectedHashCode) {
                    this.port.onDisconnect.addListener(expectedHashCode);
                }
            }, {
                key : "postMessage",
                /**
                 * @param {string} expectedHashCode
                 * @return {undefined}
                 */
                value : function(expectedHashCode) {
                    this.port.postMessage(expectedHashCode);
                }
            }]), bindToTabHandler;
        }();
        var Splice = function() {
            /**
             * @param {Object} event
             * @return {undefined}
             */
            function next(event) {
                (0, p["default"])(this, next);
                /** @type {Object} */
                this._port = event;
                this.sender = {};
                var data = event.sender;
                var name = event.name;
                this.name = name;
                if (data) {
                    this.sender.url = data.url;
                    if (data.tab) {
                        if (data.tab.url) {
                            if (data.tab.id) {
                                this.sender.tab = {
                                    url : data.tab.url,
                                    id : data.tab.id,
                                    active : data.tab.active
                                };
                            }
                        }
                    }
                }
            }
            return(0, h["default"])(next, [{
                key : "onMessage",
                /**
                 * @param {string} expectedHashCode
                 * @return {undefined}
                 */
                value : function(expectedHashCode) {
                    this._port.onMessage.addListener(expectedHashCode);
                }
            }, {
                key : "onDisconnect",
                /**
                 * @param {string} expectedHashCode
                 * @return {undefined}
                 */
                value : function(expectedHashCode) {
                    this._port.onDisconnect.addListener(expectedHashCode);
                }
            }, {
                key : "postMessage",
                /**
                 * @param {string} expectedHashCode
                 * @return {undefined}
                 */
                value : function(expectedHashCode) {
                    this._port.postMessage(expectedHashCode);
                }
            }]), next;
        }();
        /**
         * @return {undefined}
         */
        var SrcArray = function create() {
            (0, p["default"])(this, create);
            this.tabs = new $src.ChromeTabsApiImpl;
            this.notification = {
                kind : "web-extension",
                /**
                 * @param {string} expectedHashCode
                 * @return {?}
                 */
                create : function(expectedHashCode) {
                    return $window.SafePromise.create(function(proceed, n) {
                        var cycle = expectedHashCode.onClicked;
                        var fix = expectedHashCode.onButtonClicked;
                        var oldconfig = extend(expectedHashCode, ["onClicked", "onButtonClicked"]);
                        var data = chrome.notifications;
                        var element = handler.guid();
                        data.create(element, (0, item["default"])({
                            type : "basic"
                        }, oldconfig), function() {
                            source.handleChromeError(function() {
                                if (void 0 !== cycle) {
                                    data.onClicked.addListener(cycle);
                                }
                                if (void 0 !== fix) {
                                    data.onButtonClicked.addListener(fix);
                                }
                                proceed(element);
                            }, n);
                        });
                    });
                },
                /**
                 * @param {string} expectedHashCode
                 * @return {?}
                 */
                clear : function(expectedHashCode) {
                    return $window.SafePromise.create(function(cb, n) {
                        chrome.notifications.clear(expectedHashCode, function(outErr) {
                            source.handleChromeError(function() {
                                return cb(outErr);
                            }, n);
                        });
                    });
                }
            };
            this.cookies = {
                kind : "web-extension",
                /**
                 * @param {string} name
                 * @return {?}
                 */
                get : function(name) {
                    return $window.SafePromise.create(function(cb, n) {
                        return chrome.cookies.get(name, function(outErr) {
                            return source.handleChromeError(function() {
                                return cb(outErr);
                            }, n);
                        });
                    });
                },
                /**
                 * @param {Object} opt_attributes
                 * @return {?}
                 */
                remove : function(opt_attributes) {
                    return new dimension["default"](function($sanitize, n) {
                        return chrome.cookies.remove(opt_attributes, function() {
                            return source.handleChromeError(function() {
                                return $sanitize(null);
                            }, n);
                        });
                    });
                },
                /**
                 * @param {?} context
                 * @return {?}
                 */
                getAll : function(context) {
                    return $window.SafePromise.create(function(cb, n) {
                        return chrome.cookies.getAll(context, function(outErr) {
                            return source.handleChromeError(function() {
                                return cb(outErr);
                            }, n);
                        });
                    });
                },
                /**
                 * @param {string} expectedHashCode
                 * @return {?}
                 */
                set : function(expectedHashCode) {
                    return $window.SafePromise.create(function(cb, n) {
                        return chrome.cookies.set(expectedHashCode, function(outErr) {
                            return source.handleChromeError(function() {
                                return cb(outErr);
                            }, n);
                        });
                    });
                },
                /**
                 * @param {Object} target
                 * @param {Function} prop
                 * @return {undefined}
                 */
                watch : function(target, prop) {
                    chrome.cookies.onChanged.addListener(function(options) {
                        var self = options.cookie;
                        var async = options.cause;
                        if (!!self) {
                            if (!!self.name) {
                                if (!(target.path && target.path !== self.path)) {
                                    if (!(target.name !== self.name)) {
                                        if (!(target.domain && self.domain.indexOf(target.domain) === -1)) {
                                            if ("explicit" === async) {
                                                prop(self);
                                            }
                                            if ("expired_overwrite" === async) {
                                                prop();
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    });
                }
            };
            this.preferences = curElem.preferencesApi.windowLocalStorage;
            this.button = {
                kind : "web-extension",
                /**
                 * @param {?} text
                 * @return {undefined}
                 */
                setBadge : function(text) {
                    chrome.browserAction.setBadgeText({
                        text : text
                    });
                },
                /**
                 * @param {string} data
                 * @return {undefined}
                 */
                setIconByName : function(data) {
                    /** @type {string} */
                    var label = "./src/icon/icon";
                    /** @type {string} */
                    var str = data ? "-" + data : "";
                    chrome.browserAction.setIcon({
                        path : {
                            16 : label + "16" + str + ".png",
                            32 : label + "32" + str + ".png"
                        }
                    });
                },
                /**
                 * @param {string} opt_attributes
                 * @return {undefined}
                 */
                setBadgeBackgroundColor : function(opt_attributes) {
                    chrome.browserAction.setBadgeBackgroundColor({
                        color : opt_attributes
                    });
                }
            };
            this.management = {
                /**
                 * @return {undefined}
                 */
                uninstallSelf : function() {
                    chrome.management.uninstallSelf();
                }
            };
            this.message = handler.isBg() ? new emptyJ.GenericBackgroundMessageApiImpl(function($sanitize) {
                return chrome.runtime.onConnect.addListener(function(val) {
                    return $sanitize(new Splice(val));
                });
            }, this.tabs.getActiveTab.bind(this.tabs), this.tabs.getAllTabs.bind(this.tabs)) : new $spy.GenericContentScriptMessageApiImpl(function(dataAndEvents) {
                return new create(dataAndEvents);
            });
        };
        /** @type {function (): ?} */
        expectedHashCode.createApi = array;
    }, {
        "./chrome-util" : 174,
        "./message/bg" : 179,
        "./message/content" : 180,
        "./tabs/chrome" : 183,
        "./web-extensions" : 184,
        "babel-runtime/core-js/object/assign" : 24,
        "babel-runtime/core-js/object/get-own-property-symbols" : 27,
        "babel-runtime/core-js/promise" : 31,
        "babel-runtime/helpers/classCallCheck" : 34,
        "babel-runtime/helpers/createClass" : 35,
        "babel-runtime/helpers/defineProperty" : 36,
        "lib/util" : 322,
        stdlib : 328
    }],
    176 : [function(dataAndEvents, deepDataAndEvents, expectedHashCode) {
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        window.firefox = window.browser;
        try {
            window.firefox = browser;
        } catch (r) {
        }
        window.edge = window.browser;
        window.chrome = window.chrome;
        expectedHashCode["default"] = void 0;
    }, {}],
    177 : [function(require, dataAndEvents, expectedHashCode) {
        /**
         * @param {Object} helper
         * @return {undefined}
         */
        function getChildren(helper) {
            var key;
            for (key in helper) {
                if (!expectedHashCode.hasOwnProperty(key)) {
                    expectedHashCode[key] = helper[key];
                }
            }
        }
        /**
         * @param {?} _
         * @return {undefined}
         */
        function callback(_) {
            if (window.extensionApi) {
                console.warn("Extension Api init called more than once");
            }
            window.extensionApi = window.extensionApi || _;
        }
        /**
         * @return {?}
         */
        function getGlobalExtensionApi() {
            return assert.assertNonNull(window.extensionApi, "extension api was not initialized");
        }
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var assert = require("stdlib");
        getChildren(require("./interface"));
        /** @type {function (?): undefined} */
        expectedHashCode.initGlobalExtensionApi = callback;
        /** @type {function (): ?} */
        expectedHashCode.getGlobalExtensionApi = getGlobalExtensionApi;
    }, {
        "./interface" : 178,
        stdlib : 328
    }],
    178 : [function(dataAndEvents, deepDataAndEvents, expectedHashCode) {
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        expectedHashCode.ports = {
            bridge : "bridge",
            background : "message:to-priv",
            broadcast : "message:to-non-priv"
        };
    }, {}],
    179 : [function($, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} selector
         * @return {?}
         */
        function jQuery(selector) {
            return selector && selector.__esModule ? selector : {
                "default" : selector
            };
        }
        /**
         * @return {undefined}
         */
        function initialize() {
            /** @type {number} */
            var e = 4;
            var program = (handler.isChrome() || handler.isFF()) && (!chrome.extension || (!chrome.tabs || (!chrome.runtime || !chrome.runtime.onConnect)));
            var inverse = handler.isEdge() && (!edge.extension || (!edge.tabs || (!edge.runtime || !edge.runtime.onConnect)));
            if (program || inverse) {
                /** @type {string} */
                var cDigit = window.localStorage.getItem("bgInitFail") || "0";
                /** @type {number} */
                var cycle = parseInt(cDigit, 10);
                if (cycle > e) {
                    console.error("too many bgInitFail", cycle);
                } else {
                    window.localStorage.setItem("bgInitFail", (cycle + 1).toString());
                    document.location.reload();
                }
            }
        }
        /**
         * @param {?} attr
         * @return {?}
         */
        function init(attr) {
            if (!attr) {
                return false;
            }
            var ua = sandbox.getGlobal().bundleInfo.browser;
            var pointsRe = "firefox" === ua ? /^moz-extension:\/\/.*\/src\/popup.html$/ : "edge" === ua ? /^ms-browser-extension:\/\/.*\/src\/popup.html$/ : "chrome" === ua ? chrome && (chrome.runtime && chrome.runtime.id) ? new RegExp(chrome.runtime.id + "/src/popup.html") : void 0 : console.assertNever(ua);
            return void 0 !== pointsRe && pointsRe.test(attr);
        }
        var option = $("babel-runtime/helpers/classCallCheck");
        var elem = jQuery(option);
        var target = $("babel-runtime/helpers/createClass");
        var targets = jQuery(target);
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var emptyJ = $("./helpers");
        var handler = $("lib/util");
        var sandbox = $("config");
        var console = $("stdlib");
        var me = $("../interface");
        /** @type {string} */
        expectedHashCode.SETTINGS_TAB_ID = "popup";
        /** @type {function (): undefined} */
        expectedHashCode.bgPreload = initialize;
        var GenericBackgroundMessageApiImpl = function() {
            /**
             * @param {?} callback
             * @param {?} fn
             * @param {?} fnc
             * @return {undefined}
             */
            function off(callback, fn, fnc) {
                var $ = this;
                (0, elem["default"])(this, off);
                this._getActiveTab = fn;
                this._getAllTabs = fnc;
                /** @type {string} */
                this.kind = "background-message-api";
                this._callbacks = {};
                this._tabPorts = {
                    popup : []
                };
                this._messageHelper = new emptyJ.MessageHelperImpl;
                /**
                 * @param {?} k
                 * @param {?} opt_attributes
                 * @return {undefined}
                 */
                this._sendMessageToPorts = function(k, opt_attributes) {
                    var cs = $._tabPorts[k];
                    if (cs) {
                        cs.forEach(function(ternWorker) {
                            return ternWorker.postMessage(opt_attributes);
                        });
                    }
                };
                /**
                 * @param {string} expectedHashCode
                 * @param {string} type
                 * @return {?}
                 */
                this.toFocused = function(expectedHashCode, type) {
                    return $._getActiveTab().then(function(d) {
                        var id = d.id;
                        var link = d.url;
                        if (id) {
                            return init(link) ? console.warn("toFocussed not allowed for popup when it open like regular tab", expectedHashCode, type) : void $._sendMessageToPorts(id.toString(), {
                                type : expectedHashCode,
                                content : type,
                                callid : handler.guid()
                            });
                        }
                    });
                };
                /**
                 * @param {string} type
                 * @param {?} message
                 * @return {undefined}
                 */
                this.broadcast = function(type, message) {
                    if (message) {
                        /**
                         * @param {Object} request
                         * @return {undefined}
                         */
                        var callback = function(request) {
                            var id = request.id;
                            var requestUrl = request.url;
                            if (id) {
                                if (requestUrl) {
                                    if (requestUrl.indexOf("chrome-extension:") === -1) {
                                        $._sendMessageToPorts(id.toString(), {
                                            type : type,
                                            callid : handler.guid(),
                                            content : message
                                        });
                                    }
                                }
                            }
                        };
                        $._getAllTabs().then(function(array) {
                            return array.forEach(callback);
                        });
                        if ($._tabPorts.popup) {
                            if ($._tabPorts.popup.length) {
                                $._getActiveTab().then(function(tab) {
                                    var url = tab.url;
                                    var active = tab.active;
                                    callback({
                                        id : expectedHashCode.SETTINGS_TAB_ID,
                                        url : url,
                                        active : active
                                    });
                                });
                            }
                        }
                    }
                };
                /**
                 * @param {Object} self
                 * @return {undefined}
                 */
                this._initPortListener = function(self) {
                    if (self.name === me.ports.bridge) {
                        self.onMessage(function(req) {
                            if ("message.toFocussed" === req.method) {
                                $.toFocused(req.params && req.params.type, req.params && req.params.content);
                            }
                        });
                    } else {
                        if (self.name === me.ports.broadcast) {
                            self.onMessage(function(data) {
                                return $.broadcast(data.type, data.content);
                            });
                        } else {
                            if (self.name === me.ports.background) {
                                var options = self.sender;
                                if (options) {
                                    if (options.tab) {
                                        var map = options.tab;
                                        var name = map.id;
                                        var url = map.url;
                                        if (name) {
                                            var old = $._tabPorts[name];
                                            if (void 0 === old) {
                                                /** @type {Array} */
                                                old = $._tabPorts[name] = [];
                                            }
                                            old.push(self);
                                        }
                                        if (url) {
                                            if (0 === url.indexOf("http")) {
                                                $._messageHelper.fire("tab-connected", {
                                                    tab : name,
                                                    url : url
                                                });
                                            }
                                        }
                                        self.onDisconnect(function() {
                                            if (name) {
                                                var rule = $._tabPorts[name];
                                                if (rule) {
                                                    rule.splice(rule.indexOf(self), 1);
                                                }
                                            }
                                        });
                                    }
                                    var protoProps = options.url ? options.url : options.tab ? options.tab.url : "";
                                    if (protoProps && init(protoProps)) {
                                        var module = expectedHashCode.SETTINGS_TAB_ID;
                                        $._tabPorts[module] = $._tabPorts[module] || [];
                                        $._tabPorts[module].push(self);
                                        self.onDisconnect(function() {
                                            var target = $._tabPorts[module];
                                            target.splice(target.indexOf(self), 1);
                                        });
                                    }
                                }
                                self.onMessage(function(e) {
                                    /**
                                     * @param {Object} event
                                     * @return {undefined}
                                     */
                                    var next = function(event) {
                                        var i = event.callid;
                                        var type = event.content;
                                        var evt = event.type;
                                        if ($._callbacks[i]) {
                                            $._callbacks[i](type);
                                            delete $._callbacks[i];
                                        }
                                        /**
                                         * @param {Object} elem
                                         * @return {?}
                                         */
                                        var restoreScript = function(elem) {
                                            return self.postMessage({
                                                content : elem,
                                                callid : i
                                            });
                                        };
                                        $._messageHelper.fire(evt, type, restoreScript, options && options.tab ? options.tab.id : -1);
                                    };
                                    if ("tab-connected" === e.type) {
                                        $._getActiveTab().then(function(request) {
                                            var requestUrl = request.url;
                                            e.content = {
                                                tab : expectedHashCode.SETTINGS_TAB_ID,
                                                url : requestUrl
                                            };
                                            next(e);
                                        });
                                    } else {
                                        next(e);
                                    }
                                });
                            }
                        }
                    }
                };
                callback(this._initPortListener);
            }
            return(0, targets["default"])(off, [{
                key : "sendTo",
                /**
                 * @param {string} expectedHashCode
                 * @param {string} type
                 * @param {?} opt_attributes
                 * @param {boolean} recurring
                 * @param {boolean} dataAndEvents
                 * @return {?}
                 */
                value : function(expectedHashCode, type, opt_attributes, recurring, dataAndEvents) {
                    var assertions = this._tabPorts[expectedHashCode];
                    if (!assertions || !assertions.length) {
                        return void(dataAndEvents && dataAndEvents({
                            message : "no ports on specified tabId"
                        }));
                    }
                    var msg = {
                        type : type,
                        content : opt_attributes
                    };
                    if (recurring) {
                        if ("function" === typeof recurring) {
                            msg.callid = handler.guid();
                            /** @type {boolean} */
                            this._callbacks[msg.callid] = recurring;
                        }
                    }
                    assertions.forEach(function(ternWorker) {
                        return ternWorker.postMessage(msg);
                    });
                }
            }, {
                key : "listen",
                /**
                 * @param {string} expectedHashCode
                 * @param {string} type
                 * @return {undefined}
                 */
                value : function(expectedHashCode, type) {
                    this._messageHelper.listen(expectedHashCode, type);
                }
            }]), off;
        }();
        expectedHashCode.GenericBackgroundMessageApiImpl = GenericBackgroundMessageApiImpl;
    }, {
        "../interface" : 178,
        "./helpers" : 181,
        "babel-runtime/helpers/classCallCheck" : 34,
        "babel-runtime/helpers/createClass" : 35,
        config : 169,
        "lib/util" : 322,
        stdlib : 328
    }],
    180 : [function($, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} type
         * @return {?}
         */
        function Event(type) {
            return type && type.__esModule ? type : {
                "default" : type
            };
        }
        /**
         * @return {undefined}
         */
        function init() {
            window.addEventListener("update-window-size-gr", function(options) {
                /**
                 * @return {undefined}
                 */
                function init() {
                    document.body.appendChild(testElement);
                    setTimeout(function() {
                        if (testElement.parentNode) {
                            testElement.parentNode.removeChild(testElement);
                        }
                    }, 10);
                }
                /** @type {Element} */
                var testElement = document.createElement("div");
                if (testElement.style.height = "1px", options.detail && options.detail.force) {
                    /** @type {number} */
                    var poll = setInterval(init, 100);
                    setTimeout(function() {
                        return clearInterval(poll);
                    }, 405);
                }
            }, false);
            window.addEventListener("close-popup-gr", function() {
                if (window.navigator.userAgent.indexOf("Firefox") !== -1) {
                    window.close();
                }
            }, false);
        }
        var target = $("babel-runtime/helpers/classCallCheck");
        var targets = Event(target);
        var type = $("babel-runtime/helpers/createClass");
        var event = Event(type);
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var $window = $("stdlib");
        var emptyJ = $("./helpers");
        var handler = $("lib/util");
        var me = $("../interface");
        var GenericContentScriptMessageApiImpl = function() {
            /**
             * @param {?} callback
             * @return {undefined}
             */
            function onMessage(callback) {
                var self = this;
                (0, targets["default"])(this, onMessage);
                /** @type {string} */
                this.kind = "content-script-message-api";
                this._callbacks = {};
                this._messageHelper = new emptyJ.MessageHelperImpl;
                this._proxyPortsStorage = {};
                /**
                 * @return {?}
                 */
                this.broadcastBackground = function() {
                    /** @type {number} */
                    var expectedHashCode = arguments.length;
                    /** @type {Array} */
                    var fix = Array(expectedHashCode);
                    /** @type {number} */
                    var i = 0;
                    for (;i < expectedHashCode;i++) {
                        fix[i] = arguments[i];
                    }
                    return self._emit(self.backgroundPort, "bg").apply(null, fix);
                };
                /**
                 * @return {?}
                 */
                this.broadcast = function() {
                    /** @type {number} */
                    var expectedHashCode = arguments.length;
                    /** @type {Array} */
                    var fix = Array(expectedHashCode);
                    /** @type {number} */
                    var i = 0;
                    for (;i < expectedHashCode;i++) {
                        fix[i] = arguments[i];
                    }
                    return self._emit(self.broadcastPort, "tabs").apply(null, fix);
                };
                /**
                 * @param {?} attributes
                 * @return {undefined}
                 */
                this._onPortMessage = function(attributes) {
                    console.log("[Messaging] extension api", "portMessage", attributes);
                };
                this._checkHealth = function() {
                    /**
                     * @return {undefined}
                     */
                    function ready() {
                        document.removeEventListener("grammarly:pong", completed);
                        if (timeout) {
                            clearTimeout(timeout);
                            /** @type {null} */
                            timeout = null;
                        }
                        if (interval) {
                            clearInterval(interval);
                            /** @type {null} */
                            interval = null;
                        }
                    }
                    /** @type {number} */
                    var time = 500;
                    /** @type {number} */
                    var quietMillis = 5E3;
                    /** @type {null} */
                    var interval = null;
                    /** @type {null} */
                    var timeout = null;
                    /**
                     * @return {?}
                     */
                    var animate = function() {
                        return document.dispatchEvent(new CustomEvent("grammarly:ping"));
                    };
                    /**
                     * @return {undefined}
                     */
                    var completed = function() {
                        ready();
                    };
                    /**
                     * @return {undefined}
                     */
                    var check = function() {
                        [self.port, self.backgroundPort, self.broadcastPort].forEach(function(dataAndEvents) {
                            if (dataAndEvents) {
                                if (dataAndEvents.removeMessageListeners) {
                                    dataAndEvents.removeMessageListeners();
                                }
                            }
                        });
                        /** @type {null} */
                        self.port = self.backgroundPort = self.broadcastPort = null;
                        ready();
                        document.addEventListener("grammarly:proxyports", self._onGrammarlyResetAfterTimeout);
                        document.dispatchEvent(new CustomEvent("grammarly:offline"));
                    };
                    return function() {
                        ready();
                        document.addEventListener("grammarly:pong", completed);
                        /** @type {number} */
                        interval = window.setInterval(animate, time);
                        /** @type {number} */
                        timeout = window.setTimeout(check, quietMillis);
                    };
                }();
                /**
                 * @return {undefined}
                 */
                this._onGrammarlyResetAfterTimeout = function() {
                    document.removeEventListener("grammarly:proxyports", self._onGrammarlyResetAfterTimeout);
                    self.port = self._initProxyPort(me.ports.bridge, self._onPortMessage, self._checkHealth, true);
                    self.backgroundPort = self._initProxyPort(me.ports.background, self._onBgPortMessage, self._checkHealth);
                    self.broadcastPort = self._initProxyPort(me.ports.broadcast, null, self._checkHealth);
                };
                /**
                 * @param {Object} msg
                 * @return {undefined}
                 */
                this._onBgPortMessage = function(msg) {
                    var level = msg.callid;
                    var args = msg.content;
                    var fn = msg.type;
                    if (self._callbacks[level]) {
                        self._callbacks[level](args);
                        delete self._callbacks[level];
                    } else {
                        self._messageHelper.fire(fn, args, function(h) {
                            if (!self.backgroundPort) {
                                throw new Error("fail reply to bg page - connection lost");
                            }
                            self.backgroundPort.postMessage({
                                content : h,
                                callid : level
                            });
                        });
                    }
                };
                /**
                 * @param {?} conf
                 * @param {Object} recurring
                 * @param {?} data
                 * @return {?}
                 */
                this._initProxyPort = function(conf, recurring, data) {
                    var o = arguments.length > 3 && (void 0 !== arguments[3] && arguments[3]);
                    var client = self._proxyPort(conf);
                    return o && self._checkHealth(), recurring && client.onMessage(recurring), data && client.onDisconnect(data), client;
                };
                /**
                 * @param {?} data
                 * @param {string} child
                 * @return {?}
                 */
                this._emit = function(data, child) {
                    return function(paramType, h, view, on) {
                        var name = handler.guid();
                        if (view) {
                            if ("function" === typeof view) {
                                /** @type {Function} */
                                self._callbacks[name] = view;
                            }
                        }
                        try {
                            if (!data) {
                                throw new Error("lost connection to " + child + " port");
                            }
                            data.postMessage({
                                type : paramType,
                                callid : name,
                                content : h
                            });
                        } catch (failuresLink) {
                            if (!on) {
                                throw failuresLink;
                            }
                            on(failuresLink);
                        }
                    };
                };
                /**
                 * @param {?} key
                 * @return {?}
                 */
                this._proxyPort = function(key) {
                    self._proxyPortsStorage[key] = {};
                    /**
                     * @param {string} value
                     * @param {Event} event
                     * @return {undefined}
                     */
                    var callback = function(value, event) {
                        var data = event.detail;
                        if (data.name === key) {
                            var template = self._proxyPortsStorage[key][value];
                            if (template) {
                                template(data.msg);
                            }
                        }
                    };
                    /**
                     * @param {Event} request
                     * @return {?}
                     */
                    var completed = function(request) {
                        return callback("success", request);
                    };
                    /**
                     * @param {Event} key
                     * @return {?}
                     */
                    var handler = function(key) {
                        return callback("error", key);
                    };
                    return document.addEventListener("grammarly:message", completed), document.addEventListener("grammarly:error", handler), {
                        /**
                         * @return {?}
                         */
                        postMessage : function() {
                            var task = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
                            var options = {
                                data : task,
                                name : key
                            };
                            return document.dispatchEvent(new CustomEvent("grammarly:action", {
                                detail : options
                            }));
                        },
                        /**
                         * @param {Function} recurring
                         * @return {undefined}
                         */
                        onMessage : function(recurring) {
                            /** @type {Function} */
                            self._proxyPortsStorage[key].success = recurring;
                        },
                        /**
                         * @param {Function} e
                         * @return {undefined}
                         */
                        onDisconnect : function(e) {
                            /** @type {Function} */
                            self._proxyPortsStorage[key].error = e;
                        },
                        /**
                         * @return {undefined}
                         */
                        removeMessageListeners : function() {
                            document.removeEventListener("grammarly:message", completed);
                            document.removeEventListener("grammarly:error", handler);
                        }
                    };
                };
                this.port = callback(me.ports.bridge);
                this.port.onMessage(this._onPortMessage);
                this.port.onDisconnect(function() {
                    /** @type {null} */
                    self.port = null;
                    self.port = self._initProxyPort(me.ports.bridge, self._onPortMessage, self._checkHealth, true);
                });
                this.backgroundPort = callback(me.ports.background);
                this.backgroundPort.onMessage(this._onBgPortMessage);
                this.backgroundPort.onDisconnect(function() {
                    /** @type {null} */
                    self.backgroundPort = null;
                    self.backgroundPort = self._initProxyPort(me.ports.background, self._onBgPortMessage, self._checkHealth);
                });
                this.broadcastPort = callback(me.ports.broadcast);
                this.broadcastPort.onDisconnect(function() {
                    /** @type {null} */
                    self.broadcastPort = null;
                    self.broadcastPort = self._initProxyPort(me.ports.broadcast, null, self._checkHealth);
                });
            }
            return(0, event["default"])(onMessage, [{
                key : "listen",
                /**
                 * @param {string} expectedHashCode
                 * @param {string} type
                 * @return {undefined}
                 */
                value : function(expectedHashCode, type) {
                    this._messageHelper.listen(expectedHashCode, type);
                }
            }, {
                key : "toFocused",
                /**
                 * @param {string} expectedHashCode
                 * @param {string} type
                 * @return {?}
                 */
                value : function(expectedHashCode, type) {
                    var map = this;
                    return $window.SafePromise.create(function(it) {
                        if (!map.port) {
                            throw new Error("lost connection to bg page");
                        }
                        map.port.postMessage({
                            method : "message.toFocussed",
                            params : {
                                type : expectedHashCode,
                                content : type
                            }
                        });
                        it();
                    });
                }
            }]), onMessage;
        }();
        expectedHashCode.GenericContentScriptMessageApiImpl = GenericContentScriptMessageApiImpl;
        /** @type {function (): undefined} */
        expectedHashCode.hacksForCompatibility = init;
    }, {
        "../interface" : 178,
        "./helpers" : 181,
        "babel-runtime/helpers/classCallCheck" : 34,
        "babel-runtime/helpers/createClass" : 35,
        "lib/util" : 322,
        stdlib : 328
    }],
    181 : [function(require, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} type
         * @return {?}
         */
        function Event(type) {
            return type && type.__esModule ? type : {
                "default" : type
            };
        }
        /**
         * @return {?}
         */
        function dispatchContext() {
            return safari.application.activeBrowserWindow && safari.application.activeBrowserWindow.activeTab;
        }
        /**
         * @return {?}
         */
        function connect() {
            var object = dispatchContext();
            return object && object.url || "http://newtab";
        }
        /**
         * @return {?}
         */
        function runInContext() {
            /**
             * @param {string} type
             * @param {Function} opt_attributes
             * @param {boolean} deepDataAndEvents
             * @return {undefined}
             */
            function clone(type, opt_attributes, deepDataAndEvents) {
                var handler = handlers[type];
                if (handler) {
                    handler.forEach(function(callback) {
                        return callback(opt_attributes, deepDataAndEvents);
                    });
                } else {
                    if (!listeners[type]) {
                        /** @type {Array} */
                        listeners[type] = [];
                    }
                    listeners[type].push({
                        /** @type {Function} */
                        data : opt_attributes,
                        callback : deepDataAndEvents
                    });
                }
            }
            /**
             * @param {string} type
             * @param {Function} opt_attributes
             * @return {undefined}
             */
            function on(type, opt_attributes) {
                if (!handlers[type]) {
                    /** @type {Array} */
                    handlers[type] = [];
                }
                handlers[type].push(opt_attributes);
                if (listeners[type]) {
                    listeners[type].forEach(function(ev) {
                        return opt_attributes(ev.data, ev.callback);
                    });
                }
            }
            var handlers = {};
            var listeners = {};
            return{
                /** @type {function (string, Function, boolean): undefined} */
                emit : clone,
                /** @type {function (string, Function): undefined} */
                on : on
            };
        }
        var type = require("babel-runtime/core-js/get-iterator");
        var event = Event(type);
        var selector = require("babel-runtime/helpers/classCallCheck");
        var elem = Event(selector);
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var i = require("lib/config");
        /**
         * @return {undefined}
         */
        var opt_fromIndex = function() {
        };
        /**
         * @return {undefined}
         */
        var MessageHelperImpl = function Dispatcher() {
            var self = this;
            (0, elem["default"])(this, Dispatcher);
            this._listeners = {};
            this._queue = {};
            /**
             * @param {string} event
             * @param {string} type
             * @return {undefined}
             */
            this.fire = function(event, type) {
                var fromIndex = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : opt_fromIndex;
                var arr = arguments[3];
                var assertions = self._listeners[event] || [];
                if (assertions.length) {
                    assertions.forEach(function(iterator) {
                        return iterator(type, fromIndex, arr);
                    });
                } else {
                    self._queue[event] = self._queue[event] || [];
                    self._queue[event].push({
                        content : type,
                        callback : fromIndex,
                        sender : arr
                    });
                }
            };
            /**
             * @param {?} src
             * @param {string} type
             * @return {undefined}
             */
            this.unlisten = function(src, type) {
                var states = self._listeners[src] || [];
                var index = states.indexOf(type);
                if (index !== -1) {
                    if (1 === states.length) {
                        delete self._listeners[src];
                    } else {
                        states.splice(index, 1);
                    }
                }
            };
            /**
             * @param {string} expectedHashCode
             * @param {?} callback
             * @return {undefined}
             */
            this.listenOnce = function(expectedHashCode, callback) {
                /**
                 * @param {?} e
                 * @param {?} idx
                 * @param {?} p
                 * @return {undefined}
                 */
                var cycle = function cycle(e, idx, p) {
                    self.unlisten(expectedHashCode, cycle);
                    if (callback) {
                        callback(e, idx, p);
                    }
                };
                self.listen(expectedHashCode, cycle);
            };
            /**
             * @param {string} expectedHashCode
             * @param {string} type
             * @return {undefined}
             */
            this.listen = function(expectedHashCode, type) {
                self._listeners[expectedHashCode] = self._listeners[expectedHashCode] || [];
                if (self._listeners[expectedHashCode].indexOf(type) === -1) {
                    self._listeners[expectedHashCode].push(type);
                }
                var destElements = self._queue[expectedHashCode] || [];
                if (destElements.length) {
                    /** @type {boolean} */
                    var callback2 = true;
                    /** @type {boolean} */
                    var i = false;
                    var bulk = void 0;
                    try {
                        var res;
                        var exports = (0, event["default"])(destElements);
                        for (;!(callback2 = (res = exports.next()).done);callback2 = true) {
                            var data = res.value;
                            try {
                                type(data.content, data.callback, data.sender);
                            } catch (cycle) {
                                console.error("exception during proccesing buffered messages", cycle);
                            }
                        }
                    } catch (fn) {
                        /** @type {boolean} */
                        i = true;
                        bulk = fn;
                    } finally {
                        try {
                            if (!callback2) {
                                if (exports["return"]) {
                                    exports["return"]();
                                }
                            }
                        } finally {
                            if (i) {
                                throw bulk;
                            }
                        }
                    }
                    delete self._queue[expectedHashCode];
                }
            };
        };
        /** @type {function (): undefined} */
        expectedHashCode.MessageHelperImpl = MessageHelperImpl;
        expectedHashCode.safariBridgeId = "forge-bridge" + i.getUuid();
        /** @type {function (): ?} */
        expectedHashCode.getSafariActiveTab = dispatchContext;
        /** @type {function (): ?} */
        expectedHashCode.getSafariActiveTabUrl = connect;
        /** @type {function (): ?} */
        expectedHashCode.emitter = runInContext;
    }, {
        "babel-runtime/core-js/get-iterator" : 20,
        "babel-runtime/helpers/classCallCheck" : 34,
        "lib/config" : 211
    }],
    182 : [function(require, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} value
         * @return {?}
         */
        function $(value) {
            return value && value.__esModule ? value : {
                "default" : value
            };
        }
        /**
         * @param {Object} client
         * @param {Function} results
         * @return {?}
         */
        function initialize(client, results) {
            return{
                get : client.get.bind(client),
                set : client.set.bind(client),
                getAll : client.getAll.bind(client),
                remove : client.remove.bind(client),
                /**
                 * @return {?}
                 */
                removeAll : function() {
                    return setup(this, void 0, void 0, panels["default"].mark(function end() {
                        var result;
                        return panels["default"].wrap(function(self) {
                            for (;;) {
                                switch(self.prev = self.next) {
                                    case 0:
                                        return self.next = 2, client.getAll();
                                    case 2:
                                        return result = self.sent, self.next = 5, client.removeAll();
                                    case 5:
                                        return self.next = 7, column["default"].all((0, type["default"])(result).filter(results).map(function(expectedHashCode) {
                                            return client.set(expectedHashCode, result[expectedHashCode]);
                                        }));
                                    case 7:
                                        ;
                                    case "end":
                                        return self.stop();
                                }
                            }
                        }, end, this);
                    }));
                }
            };
        }
        var selector = require("babel-runtime/helpers/classCallCheck");
        var elem = $(selector);
        var json = require("babel-runtime/helpers/createClass");
        var obj = $(json);
        var nodes = require("babel-runtime/regenerator");
        var panels = $(nodes);
        var path = require("babel-runtime/core-js/object/keys");
        var type = $(path);
        var one = require("babel-runtime/core-js/promise");
        var column = $(one);
        /**
         * @param {string} expectedHashCode
         * @param {Array} opt_attributes
         * @param {(Element|string)} expectedNumberOfNonCommentArgs
         * @param {Text} fn
         * @return {?}
         */
        var setup = function(expectedHashCode, opt_attributes, expectedNumberOfNonCommentArgs, fn) {
            return new (expectedNumberOfNonCommentArgs || (expectedNumberOfNonCommentArgs = column["default"]))(function(success, done) {
                /**
                 * @param {string} expectedHashCode
                 * @return {undefined}
                 */
                function handler(expectedHashCode) {
                    try {
                        next(fn.next(expectedHashCode));
                    } catch (err) {
                        done(err);
                    }
                }
                /**
                 * @param {?} data
                 * @return {undefined}
                 */
                function loop(data) {
                    try {
                        next(fn["throw"](data));
                    } catch (err) {
                        done(err);
                    }
                }
                /**
                 * @param {Object} event
                 * @return {undefined}
                 */
                function next(event) {
                    if (event.done) {
                        success(event.value);
                    } else {
                        (new expectedNumberOfNonCommentArgs(function(f) {
                            f(event.value);
                        })).then(handler, loop);
                    }
                }
                next((fn = fn.apply(expectedHashCode, opt_attributes || [])).next());
            });
        };
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var response;
        var util = require("stdlib");
        var _ = require("lodash");
        !function(e) {
            /** @type {string} */
            e[e.success = 0] = "success";
            /** @type {string} */
            e[e.successWithEmpty = 1] = "successWithEmpty";
            /** @type {string} */
            e[e.alreadyMigrated = 2] = "alreadyMigrated";
        }(response = expectedHashCode.StorageMigrationResult || (expectedHashCode.StorageMigrationResult = {}));
        var special;
        !function(dataAndEvents) {
            /** @type {string} */
            dataAndEvents[dataAndEvents.nonEmptyMigration = 0] = "nonEmptyMigration";
            /** @type {string} */
            dataAndEvents[dataAndEvents.emptyMigration = 1] = "emptyMigration";
        }(special || (special = {}));
        /** @type {function (Object, Function): ?} */
        expectedHashCode.createMigrationAwareApi = initialize;
        var StorageMigration = function() {
            /**
             * @param {string} newValue
             * @param {Array} aValue
             * @param {Object} element
             * @return {undefined}
             */
            function setValue(newValue, aValue, element) {
                var arr = this;
                var _destValuesToKeep = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : [];
                (0, elem["default"])(this, setValue);
                /** @type {string} */
                this._name = newValue;
                /** @type {Array} */
                this._source = aValue;
                /** @type {Object} */
                this._destination = element;
                this._destValuesToKeep = _destValuesToKeep;
                /** @type {string} */
                this._migrationFlagSuccessfulValue = "ok";
                /** @type {string} */
                this._migrationFlagUniqueKey = "104ccd8c-9919-9ae4-931f-782fb197486c";
                /** @type {string} */
                this._migrationFlagKey = "__migration-" + this._migrationFlagUniqueKey + ":(" + this._name + ")";
                /** @type {boolean} */
                this._migrationInProgress = false;
                this.migrationAwareDestination = initialize(this._destination, function(completed) {
                    return completed === arr._migrationFlagKey;
                });
            }
            return(0, obj["default"])(setValue, [{
                key : "_getMigrated",
                /**
                 * @return {?}
                 */
                value : function() {
                    var arr = this;
                    return this._destination.get(this._migrationFlagKey).then(function(completed) {
                        return completed === arr._migrationFlagSuccessfulValue;
                    });
                }
            }, {
                key : "_setMigrated",
                /**
                 * @return {?}
                 */
                value : function() {
                    return setup(this, void 0, void 0, panels["default"].mark(function next() {
                        var code;
                        return panels["default"].wrap(function(self) {
                            for (;;) {
                                switch(self.prev = self.next) {
                                    case 0:
                                        return self.next = 2, this._destination.set(this._migrationFlagKey, this._migrationFlagSuccessfulValue);
                                    case 2:
                                        return self.next = 4, this._destination.get(this._migrationFlagKey);
                                    case 4:
                                        if (code = self.sent, code === this._migrationFlagSuccessfulValue) {
                                            /** @type {number} */
                                            self.next = 7;
                                            break;
                                        }
                                        throw new Error("Could not verify status write, actual value: " + code);;
                                    case 7:
                                        ;
                                    case "end":
                                        return self.stop();
                                }
                            }
                        }, next, this);
                    }));
                }
            }, {
                key : "_runMigration",
                /**
                 * @return {?}
                 */
                value : function() {
                    return setup(this, void 0, void 0, panels["default"].mark(function end() {
                        var target;
                        var selector;
                        var that = this;
                        return panels["default"].wrap(function(self) {
                            for (;;) {
                                switch(self.prev = self.next) {
                                    case 0:
                                        return util.assert(!this._migrationInProgress, "migration already in progress"), this._migrationInProgress = true, self.prev = 2, self.next = 5, this._source.getAll();
                                    case 5:
                                        return target = self.sent, selector = 0 === (0, type["default"])(target).length, self.next = 9, column["default"].all(this._destValuesToKeep.map(function(name) {
                                            return that._destination.get(name).then(function(copy) {
                                                if (null !== copy) {
                                                    /** @type {Object} */
                                                    target[name] = copy;
                                                }
                                            });
                                        }));
                                    case 9:
                                        return self.next = 11, this._destination.removeAll();
                                    case 11:
                                        return self.next = 13, column["default"].all((0, type["default"])(target).filter(function(methodName) {
                                            return null !== target[methodName];
                                        }).map(function(expectedHashCode) {
                                            return that._destination.set(expectedHashCode, target[expectedHashCode]);
                                        }));
                                    case 13:
                                        return self.t0 = _, self.t1 = target, self.next = 17, this._destination.getAll();
                                    case 17:
                                        if (self.t2 = self.sent, self.t0.isEqual.call(self.t0, self.t1, self.t2)) {
                                            /** @type {number} */
                                            self.next = 20;
                                            break;
                                        }
                                        throw new Error("Could not verify write");;
                                    case 20:
                                        return this._migrationInProgress = false, self.abrupt("return", selector ? special.emptyMigration : special.nonEmptyMigration);
                                    case 24:
                                        throw self.prev = 24, self.t3 = self["catch"](2), this._migrationInProgress = false, self.t3;;
                                    case 28:
                                        ;
                                    case "end":
                                        return self.stop();
                                }
                            }
                        }, end, this, [[2, 24]]);
                    }));
                }
            }, {
                key : "ensureMigrationCompleted",
                /**
                 * @return {?}
                 */
                value : function() {
                    return setup(this, void 0, void 0, panels["default"].mark(function end() {
                        var type;
                        var msg;
                        return panels["default"].wrap(function(self) {
                            for (;;) {
                                switch(self.prev = self.next) {
                                    case 0:
                                        return self.next = 2, this._getMigrated();
                                    case 2:
                                        if (!self.sent) {
                                            /** @type {number} */
                                            self.next = 6;
                                            break;
                                        }
                                        return self.abrupt("return", response.alreadyMigrated);
                                    case 6:
                                        return self.next = 8, this._runMigration();
                                    case 8:
                                        return type = self.sent, self.next = 11, this._setMigrated();
                                    case 11:
                                        self.t0 = type;
                                        /** @type {number} */
                                        self.next = self.t0 === special.nonEmptyMigration ? 14 : self.t0 === special.emptyMigration ? 15 : 16;
                                        break;
                                    case 14:
                                        return self.abrupt("return", response.success);
                                    case 15:
                                        return self.abrupt("return", response.successWithEmpty);
                                    case 16:
                                        throw msg = type, new Error("Match not exhaustive: " + type);;
                                    case 18:
                                        ;
                                    case "end":
                                        return self.stop();
                                }
                            }
                        }, end, this);
                    }));
                }
            }]), setValue;
        }();
        expectedHashCode.StorageMigration = StorageMigration;
    }, {
        "babel-runtime/core-js/object/keys" : 29,
        "babel-runtime/core-js/promise" : 31,
        "babel-runtime/helpers/classCallCheck" : 34,
        "babel-runtime/helpers/createClass" : 35,
        "babel-runtime/regenerator" : 43,
        lodash : "lodash",
        stdlib : 328
    }],
    183 : [function(require, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} type
         * @return {?}
         */
        function Event(type) {
            return type && type.__esModule ? type : {
                "default" : type
            };
        }
        var selector = require("babel-runtime/helpers/classCallCheck");
        var elem = Event(selector);
        var type = require("babel-runtime/helpers/createClass");
        var event = Event(type);
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var jQuery = require("../chrome-util");
        var config = require("stdlib");
        var ChromeTabsApiImpl = function() {
            /**
             * @return {undefined}
             */
            function onTimeout() {
                (0, elem["default"])(this, onTimeout);
                /** @type {string} */
                this.kind = "web-extension";
            }
            return(0, event["default"])(onTimeout, [{
                key : "open",
                /**
                 * @param {string} expectedHashCode
                 * @param {string} type
                 * @return {?}
                 */
                value : function(expectedHashCode, type) {
                    return config.SafePromise.create(function(cb, fn) {
                        chrome.tabs.create({
                            url : expectedHashCode,
                            active : type
                        }, function(outErr) {
                            jQuery.handleChromeError(function() {
                                return cb(outErr);
                            }, fn);
                        });
                    });
                }
            }, {
                key : "updateCurrent",
                /**
                 * @param {string} expectedHashCode
                 * @return {?}
                 */
                value : function(expectedHashCode) {
                    return config.SafePromise.create(function(cb, fn) {
                        chrome.tabs.update({
                            url : expectedHashCode
                        }, function(outErr) {
                            jQuery.handleChromeError(function() {
                                return cb(outErr);
                            }, fn);
                        });
                    });
                }
            }, {
                key : "getActiveTab",
                /**
                 * @return {?}
                 */
                value : function() {
                    return config.SafePromise.create(function(expect, fn) {
                        var model = chrome.tabs;
                        model.query({
                            active : true,
                            lastFocusedWindow : true
                        }, function(msgs) {
                            jQuery.handleChromeError(function() {
                                if (msgs && msgs.length) {
                                    expect(msgs[0]);
                                } else {
                                    model.query({
                                        active : true
                                    }, function(messages) {
                                        jQuery.handleChromeError(function() {
                                            expect(messages[0]);
                                        }, fn);
                                    });
                                }
                            }, fn);
                        });
                    });
                }
            }, {
                key : "getAllTabs",
                /**
                 * @return {?}
                 */
                value : function() {
                    return config.SafePromise.create(function(cb, fn) {
                        return chrome.tabs.query({}, function(outErr) {
                            return jQuery.handleChromeError(function() {
                                return cb(outErr);
                            }, fn);
                        });
                    });
                }
            }, {
                key : "getActiveTabUrl",
                /**
                 * @return {?}
                 */
                value : function() {
                    var myOtherTabView = this;
                    return config.SafePromise.create(function(callback, fn) {
                        return myOtherTabView.getActiveTab().then(function(req) {
                            return jQuery.handleChromeError(function() {
                                return callback(req && req.url);
                            }, fn);
                        });
                    });
                }
            }, {
                key : "onActiveTabChange",
                /**
                 * @param {string} expectedHashCode
                 * @param {string} type
                 * @return {undefined}
                 */
                value : function(expectedHashCode, type) {
                    var myOtherTabView = this;
                    /**
                     * @param {?} opt_attributes
                     * @return {undefined}
                     */
                    var forOwn = function(opt_attributes) {
                        jQuery.handleChromeError(function() {
                            if (opt_attributes) {
                                expectedHashCode(opt_attributes);
                            }
                        }, type);
                    };
                    chrome.tabs.onActivated.addListener(function(details) {
                        return chrome.tabs.get(details.tabId, function(attributes) {
                            return forOwn(attributes);
                        });
                    });
                    chrome.tabs.onUpdated.addListener(function(name, request) {
                        myOtherTabView.getActiveTab().then(function(v) {
                            if (v) {
                                if (v.id === name) {
                                    if (request.url || (request.favIconUrl || "complete" === request.status)) {
                                        chrome.tabs.get(name, function(attributes) {
                                            return forOwn(attributes);
                                        });
                                    }
                                }
                            }
                        });
                    });
                    chrome.windows.onFocusChanged.addListener(function(windowId) {
                        return chrome.tabs.query({
                            active : true,
                            windowId : windowId,
                            lastFocusedWindow : true
                        }, function(pair) {
                            return forOwn(pair[0]);
                        });
                    });
                    this.getActiveTab().then(function(attributes) {
                        return forOwn(attributes);
                    });
                }
            }, {
                key : "reload",
                /**
                 * @param {string} expectedHashCode
                 * @return {?}
                 */
                value : function(expectedHashCode) {
                    return config.SafePromise.create(function($sanitize, fn) {
                        /**
                         * @return {?}
                         */
                        var attributes = function() {
                            return jQuery.handleChromeError(function() {
                                return $sanitize();
                            }, fn);
                        };
                        if (expectedHashCode) {
                            chrome.tabs.reload(expectedHashCode, {}, attributes);
                        } else {
                            chrome.tabs.reload(attributes);
                        }
                    });
                }
            }]), onTimeout;
        }();
        expectedHashCode.ChromeTabsApiImpl = ChromeTabsApiImpl;
    }, {
        "../chrome-util" : 174,
        "babel-runtime/helpers/classCallCheck" : 34,
        "babel-runtime/helpers/createClass" : 35,
        stdlib : 328
    }],
    184 : [function($, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} name
         * @return {?}
         */
        function require(name) {
            return name && name.__esModule ? name : {
                "default" : name
            };
        }
        var elements = $("babel-runtime/helpers/defineProperty");
        var filters = require(elements);
        var p = $("babel-runtime/regenerator");
        var keys = require(p);
        var env = $("babel-runtime/core-js/object/keys");
        var features = require(env);
        var file = $("babel-runtime/core-js/promise");
        var options = require(file);
        /**
         * @param {string} expectedHashCode
         * @param {Array} args
         * @param {(Element|string)} config
         * @param {Text} f
         * @return {?}
         */
        var init = function(expectedHashCode, args, config, f) {
            return new (config || (config = options["default"]))(function(iterator, indexOf) {
                /**
                 * @param {string} expectedHashCode
                 * @return {undefined}
                 */
                function handler(expectedHashCode) {
                    try {
                        done(f.next(expectedHashCode));
                    } catch (dontCloseTags) {
                        indexOf(dontCloseTags);
                    }
                }
                /**
                 * @param {?} e
                 * @return {undefined}
                 */
                function loop(e) {
                    try {
                        done(f["throw"](e));
                    } catch (dontCloseTags) {
                        indexOf(dontCloseTags);
                    }
                }
                /**
                 * @param {Object} x
                 * @return {undefined}
                 */
                function done(x) {
                    if (x.done) {
                        iterator(x.value);
                    } else {
                        (new config(function(iterator) {
                            iterator(x.value);
                        })).then(handler, loop);
                    }
                }
                done((f = f.apply(expectedHashCode, args || [])).next());
            });
        };
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var t = $("stdlib");
        var cc = $("./storage-migration");
        var $spy = $("./message/content");
        expectedHashCode.hacksForCompatibility = $spy.hacksForCompatibility;
        var emptyJ = $("./message/bg");
        expectedHashCode.bgPreload = emptyJ.bgPreload;
        var b;
        !function(b) {
            /**
             * @return {?}
             */
            function rmDir() {
                /** @type {boolean} */
                value = true;
                var deferred = t.SafePromise.createCompletionSource();
                return promise = deferred.promise, soFar.ensureMigrationCompleted().then(function(expectedHashCode) {
                    return deferred.resolve(true), options["default"].resolve(expectedHashCode);
                }, function(attributes) {
                    return deferred.resolve(false), options["default"].reject(attributes);
                });
            }
            /**
             * @param {string} name
             * @return {?}
             */
            function method(name) {
                return function() {
                    /** @type {number} */
                    var expectedHashCode = arguments.length;
                    /** @type {Array} */
                    var fix = Array(expectedHashCode);
                    /** @type {number} */
                    var i = 0;
                    for (;i < expectedHashCode;i++) {
                        fix[i] = arguments[i];
                    }
                    return t.assert(value === true, "supposed to run data migration before accessing prefs with web-extensions API"), promise.then(function(parseOnly) {
                        var expectedHashCode = parseOnly ? soFar.migrationAwareDestination : b.windowLocalStorage;
                        return expectedHashCode[name].apply(expectedHashCode, fix);
                    });
                };
            }
            b.windowLocalStorage = {
                /**
                 * @param {string} name
                 * @return {?}
                 */
                get : function(name) {
                    return t.SafePromise.sync(function() {
                        return window.localStorage.getItem(name);
                    });
                },
                /**
                 * @param {string} expectedHashCode
                 * @param {string} type
                 * @return {?}
                 */
                set : function(expectedHashCode, type) {
                    return t.SafePromise.sync(function() {
                        return window.localStorage.setItem(expectedHashCode, type);
                    });
                },
                /**
                 * @return {?}
                 */
                getAll : function() {
                    return t.SafePromise.sync(function() {
                        var employees = {};
                        return(0, features["default"])(window.localStorage).forEach(function(i) {
                            /** @type {(null|string)} */
                            employees[i] = window.localStorage.getItem(i);
                        }), employees;
                    });
                },
                /**
                 * @param {Object} opt_attributes
                 * @return {?}
                 */
                remove : function(opt_attributes) {
                    return t.SafePromise.sync(function() {
                        return window.localStorage.removeItem(opt_attributes);
                    });
                },
                /**
                 * @return {?}
                 */
                removeAll : function() {
                    return t.SafePromise.sync(function() {
                        return window.localStorage.clear();
                    });
                }
            };
            b.browserStorageLocal = {
                /**
                 * @param {string} name
                 * @return {?}
                 */
                get : function(name) {
                    return init(this, void 0, void 0, keys["default"].mark(function next() {
                        var params;
                        return keys["default"].wrap(function(self) {
                            for (;;) {
                                switch(self.prev = self.next) {
                                    case 0:
                                        return self.next = 2, firefox.storage.local.get(name);
                                    case 2:
                                        return params = self.sent, self.abrupt("return", params.hasOwnProperty(name) ? params[name] : null);
                                    case 4:
                                        ;
                                    case "end":
                                        return self.stop();
                                }
                            }
                        }, next, this);
                    }));
                },
                /**
                 * @param {string} expectedHashCode
                 * @param {string} type
                 * @return {?}
                 */
                set : function(expectedHashCode, type) {
                    return firefox.storage.local.set((0, filters["default"])({}, expectedHashCode, type));
                },
                /**
                 * @return {?}
                 */
                getAll : function() {
                    return firefox.storage.local.get(null);
                },
                /**
                 * @param {Object} opt_attributes
                 * @return {?}
                 */
                remove : function(opt_attributes) {
                    return firefox.storage.local.remove(opt_attributes);
                },
                /**
                 * @return {?}
                 */
                removeAll : function() {
                    return init(this, void 0, void 0, keys["default"].mark(function end() {
                        return keys["default"].wrap(function(current) {
                            for (;;) {
                                switch(current.prev = current.next) {
                                    case 0:
                                        return current.next = 2, firefox.storage.local.clear();
                                    case 2:
                                        ;
                                    case "end":
                                        return current.stop();
                                }
                            }
                        }, end, this);
                    }));
                }
            };
            var soFar = new cc.StorageMigration("firefoxLocalStorageToExtApi", b.windowLocalStorage, b.browserStorageLocal, ["version"]);
            var promise = options["default"].resolve(false);
            /** @type {boolean} */
            var value = false;
            /** @type {function (): ?} */
            b.ensureMigrationCompleted = rmDir;
            b.migrationAware = {
                get : method("get"),
                set : method("set"),
                getAll : method("getAll"),
                remove : method("remove"),
                removeAll : method("removeAll")
            };
        }(b = expectedHashCode.preferencesApi || (expectedHashCode.preferencesApi = {}));
    }, {
        "./message/bg" : 179,
        "./message/content" : 180,
        "./storage-migration" : 182,
        "babel-runtime/core-js/object/keys" : 29,
        "babel-runtime/core-js/promise" : 31,
        "babel-runtime/helpers/defineProperty" : 36,
        "babel-runtime/regenerator" : 43,
        stdlib : 328
    }],
    185 : [function(require, dataAndEvents, expectedHashCode) {
        /**
         * @return {?}
         */
        function load() {
            return "about:" === document.location.protocol ? self.failover.success("index_load") : (document.body.dataset.grCSLoaded = true, self.failover.startAppLoadTimer(), void require("./lib/app"));
        }
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var functions = require("./lib/console");
        var length = functions.setSeleniumCompatibility;
        length();
        var self = require("./lib/failover");
        var Block = require("./lib/client-script");
        Block.injectClientScriptIfNeeded();
        self.failover.startPageLoadTimer();
        if ("loading" === document.readyState) {
            document.addEventListener("DOMContentLoaded", load, false);
        } else {
            load();
        }
    }, {
        "./lib/app" : 186,
        "./lib/client-script" : 205,
        "./lib/console" : 212,
        "./lib/failover" : 249
    }],
    186 : [function(require, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} value
         * @return {?}
         */
        function lookupIterator(value) {
            return value && value.__esModule ? value : {
                "default" : value
            };
        }
        /**
         * @return {undefined}
         */
        function handler() {
            var data = {
                connection : {
                    networkOffline : !window.navigator.onLine,
                    online : false,
                    bgNotConnected : true,
                    cookiesDisabled : navigator.cookieEnabled === false
                },
                user : {
                    anonymous : true,
                    premium : false,
                    settings : {}
                },
                page : {
                    enabled : true,
                    enabledDefs : false,
                    domain : domain
                }
            };
            log(data);
        }
        /**
         * @param {?} data
         * @return {?}
         */
        function log(data) {
            if (data.page.domain !== domain) {
                return void common.logger.differentStateDomain(data.page.domain);
            }
            /** @type {boolean} */
            var cookiesDisabled = navigator.cookieEnabled === false;
            if (data.connection.cookiesDisabled !== cookiesDisabled) {
                actions.updateConnection({
                    cookiesDisabled : cookiesDisabled
                });
            }
            var node = element.timers.stop(e);
            if (node) {
                if (!data.connection.bgNotConnected) {
                    common.logger.restoredBgConnection(node);
                }
            }
            if (to) {
                clearTimeout(to);
                /** @type {null} */
                to = null;
            }
            if (!B) {
                init(data.page.domain, data.connection);
            }
            if (data.page.enabled) {
                create(data);
            } else {
                done();
            }
            if (!B) {
                request.failover.success("app_load");
            }
            if (!B) {
                if (!(data.page.enabled !== false)) {
                    send(data);
                }
            }
            /** @type {boolean} */
            B = true;
        }
        /**
         * @param {Object} args
         * @return {?}
         */
        function create(args) {
            return post(args.page, args.user), self ? self.updateState(args) : void(self = nodes.Buttons((0, iterator["default"])({}, args, {
                app : AppView,
                document : document,
                actions : actions
            }), _dgram.createSocket));
        }
        /**
         * @param {Object} opt_handler
         * @param {?} number
         * @return {undefined}
         */
        function init(opt_handler, number) {
            var n = number.bgNotConnected;
            listen(opt_handler);
            if (b.isSafari()) {
                start();
            }
            var doc = assert.pageStyles(document);
            doc.customizeElements();
            doc.addDomainClass();
            request.failover.success("index_load");
            helper.one("disable-on-tab", function() {
                done();
                if (two) {
                    two.clear();
                }
                /** @type {null} */
                two = null;
            });
            if (n) {
                element.timers.start(e);
                common.logger.initWithoutBgConnection();
            }
        }
        /**
         * @param {Object} opt_capt
         * @return {undefined}
         */
        function listen(opt_capt) {
            if (opt_capt.includes(Block.GRAMMARLY_DOMAIN)) {
                inspect.addExternalEventListeners();
            }
        }
        /**
         * @param {Object} data
         * @return {undefined}
         */
        function send(data) {
            if (null !== data.page.disabledDate) {
                /** @type {number} */
                var ms = Date.now() - data.page.disabledDate;
                if (ms > s) {
                    showReminder = new selfClosing.Notifications({
                        actions : actions,
                        doc : document
                    });
                    showReminder.showReminder();
                    actions.showDisableReminder(domain);
                }
            }
        }
        /**
         * @return {undefined}
         */
        function throttledUpdate() {
            getActual.disableConsoleLog();
        }
        /**
         * @param {?} event
         * @return {undefined}
         */
        function post(event) {
            var related = event.enabledDefs;
            var cur = event.cardInspection;
            if (arguments.length > 1 && void 0 !== arguments[1]) {
                arguments[1];
            } else {
                ({});
            }
            if (related && !two) {
                two = db.dictionary({
                    doc : document,
                    cardInspection : cur
                });
            } else {
                if (two) {
                    two.clear();
                }
                /** @type {null} */
                two = null;
            }
        }
        /**
         * @return {undefined}
         */
        function start() {
            /**
             * @return {undefined}
             */
            function check() {
                /** @type {(CSSStyleDeclaration|null)} */
                var object = window.getComputedStyle(div);
                /** @type {string} */
                var nonmousedOpacity = object.getPropertyValue("opacity");
                if ("0.5" !== nonmousedOpacity) {
                    done();
                } else {
                    setTimeout(check, 200);
                }
            }
            /** @type {Element} */
            var div = document.createElement("div");
            document.body.appendChild(div);
            div.classList.add("grammarly-disable-indicator");
            setTimeout(check, 1E3);
        }
        /**
         * @return {undefined}
         */
        function done() {
            if (self) {
                self.clear();
                /** @type {null} */
                self = null;
            }
        }
        var value = require("babel-runtime/core-js/object/assign");
        var iterator = lookupIterator(value);
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var getActual = require("./console");
        var sys = require("./state");
        var b = require("./util");
        var nodes = require("./buttons");
        var assert = require("./sites");
        var inspect = require("./external");
        var request = require("./failover");
        var common = require("./tracking");
        var url = require("./location");
        var db = require("./dictionary");
        var helper = require("./message");
        var element = require("./timers");
        var selfClosing = require("./elements/notifications");
        var Block = require("lib/config");
        var logger = require("universal/cs/socket");
        /** @type {number} */
        var s = 6048E5;
        /** @type {number} */
        var backoff = 3E4;
        /** @type {string} */
        var e = "init_without_bg_connection";
        var domain = url.getDomain();
        var AppView = {};
        var showReminder = void 0;
        var self = void 0;
        var two = void 0;
        var B = void 0;
        /** @type {number} */
        var to = setTimeout(handler, backoff);
        var _dgram = new logger.ContentScriptSocketManager(common.logger, helper);
        var source = sys.createAndObserve(log);
        var actions = source.actions;
        throttledUpdate();
        /** @type {function (?): ?} */
        expectedHashCode.update = log;
    }, {
        "./buttons" : 189,
        "./console" : 212,
        "./dictionary" : 214,
        "./elements/notifications" : 228,
        "./external" : 248,
        "./failover" : 249,
        "./location" : 277,
        "./message" : 278,
        "./sites" : 294,
        "./state" : 296,
        "./test-api" : 300,
        "./timers" : 301,
        "./tracking" : 307,
        "./util" : 322,
        "babel-runtime/core-js/object/assign" : 24,
        "lib/config" : 211,
        "universal/cs/socket" : 343
    }],
    187 : [function(dataAndEvents, deepDataAndEvents, expectedHashCode) {
        /**
         * @return {undefined}
         */
        function clone() {
        }
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        /** @type {function (): undefined} */
        expectedHashCode.benchmark = clone;
    }, {}],
    188 : [function(require, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} value
         * @return {?}
         */
        function h(value) {
            return value && value.__esModule ? value : {
                "default" : value
            };
        }
        /**
         * @param {number} container
         * @param {number} target
         * @param {number} element
         * @return {?}
         */
        function add(container, target, element) {
            return self.isFocused(element) || (container === element || (self.isParent(container, element) || (container === target || self.isParent(container, target))));
        }
        /**
         * @param {Element} e
         * @return {?}
         */
        function addClass(e) {
            return 0 === e.className.indexOf("gr-") || (self.resolveEl(e, response.textarea_btn) || self.resolveEl(e, "gr__tooltip"));
        }
        /**
         * @param {Object} textStatus
         * @return {?}
         */
        function success(textStatus) {
            var authHeader = handler.guid();
            /** @type {Object} */
            var iframe = textStatus;
            self.setGRAttributes(iframe, authHeader);
            iframe.setAttribute("gramm-ifr", "true");
            var d = iframe.contentDocument;
            return self.addIframeCss(d), self.setGRAttributes(d.body, authHeader), iframe.style.height = iframe.style.height || getComputedStyle(iframe).height, d.body;
        }
        /**
         * @param {Object} opts
         * @param {Object} socket
         * @return {?}
         */
        function init(opts, socket) {
            /**
             * @return {undefined}
             */
            function Class() {
                if (self.isFocused(el)) {
                    obj();
                } else {
                    self.listen(el, "focus", obj, false);
                }
            }
            /**
             * @return {undefined}
             */
            function init() {
                node = doc.createElement("grammarly-btn");
                element = assert.findDOMNode(cb());
                check();
                /** @type {boolean} */
                result.initialized = true;
                view = new dom.Pos({
                    btnEl : element,
                    fieldEl : expectedHashCode,
                    custom : custom,
                    sourceEl : target,
                    isTextarea : "textarea" === type,
                    initCondition : enable
                }, options, message);
                changePage = Block.getWithinButtonPath({
                    editorEl : expectedHashCode,
                    btnEl : element,
                    padding : 15
                });
                that = BaseView.createMenu({
                    el : element,
                    editor : cycle,
                    enabled : enable,
                    user : res,
                    btn : result,
                    gButtonPopup : events
                }, function(textAlt) {
                    text = textAlt;
                    done();
                });
                Popcorn = BUI.createErrorTooltip({
                    el : element,
                    win : window
                });
                that.bind();
                self.listen(element, "click", attributes, false);
                socket.on("hover", error);
                self.listen(el, "blur", opt_attributes, false);
                error({
                    target : el
                });
                run();
                if (fieldParentCustomStyle.fieldParentCustomStyle) {
                    errorCB = self.setCustomCss(expectedHashCode.parentNode, fieldParentCustomStyle.fieldParentCustomStyle(expectedHashCode));
                }
                if (fieldParentCustomStyle.stopImmediatePropagationForClick) {
                    if (fieldParentCustomStyle.stopImmediatePropagationForClick(expectedHashCode)) {
                        self.listen(expectedHashCode, "click", gl);
                    }
                }
                if (!connection.online) {
                    result.offline();
                }
            }
            /**
             * @return {undefined}
             */
            function check() {
                var udataCur = {
                    "z-index" : (parseInt(self.css(expectedHashCode, "z-index"), 10) || 1) + 1
                };
                var temp = fieldParentCustomStyle.btnCustomContainer && fieldParentCustomStyle.btnCustomContainer(expectedHashCode);
                if (temp) {
                    /** @type {boolean} */
                    custom = true;
                    target = temp;
                    var r20 = fieldParentCustomStyle.btnCustomStyles && fieldParentCustomStyle.btnCustomStyles(true, expectedHashCode);
                    if (r20) {
                        (0, elem["default"])(udataCur, r20);
                    }
                }
                self.insertAfter(node, target);
                options(udataCur);
            }
            /**
             * @return {?}
             */
            function run() {
                if (_ = true, i = true, fix = true, !enable) {
                    return void update();
                }
                if (!isEditorInited) {
                    /** @type {boolean} */
                    isEditorInited = true;
                    try {
                        cycle = $.createGrammarlyEditor({
                            app : app,
                            doc : doc,
                            connection : connection,
                            page : page,
                            user : params,
                            type : type,
                            field : expectedHashCode,
                            actions : actions,
                            createSocket : timeout
                        });
                        self = test.infinityChecker(onclick, result.offline);
                        log("on");
                        cycle.run();
                        that.updateEditor(cycle);
                        view.set("minimize", !enabled);
                        view.set("editor", cycle);
                    } catch (fmt) {
                        console.error(fmt);
                        result.offline();
                    }
                    update();
                    events = new L.Popup({
                        doc : doc,
                        el : element,
                        editor : cycle,
                        user : params,
                        actions : actions,
                        notifications : app.notifications
                    });
                    that.setGbuttonPopup(events);
                    hook();
                    if (cycle) {
                        if (cycle.emailFeedbackEnabled) {
                            if (newPage.emailPerceptionPopupEnabled !== false) {
                                click();
                            }
                        }
                    }
                    try {
                        var restoreScript = nodes.getFieldType(expectedHashCode);
                        _self.logger.initSession(url.getDomain(), params.type, restoreScript, true);
                    } catch (n) {
                    }
                }
            }
            /**
             * @return {undefined}
             */
            function hook() {
                var e = !result.getState().offline && (newPage.showOnboarding && view.max);
                if (e) {
                    events.showOnboarding();
                    actions.seenOnboarding();
                }
            }
            /**
             * @return {undefined}
             */
            function click() {
                var windowsphone = res.groups.includes(ua);
                /** @type {boolean} */
                var speed = void 0 === newPage.seenEmailPerceptionPopupDate;
                /** @type {boolean} */
                var easing = speed || +new Date - newPage.seenEmailPerceptionPopupDate > P;
                if (windowsphone === true && easing || (newPage.emailPerceptionPopupEnabled && easing || windowsphone === false && speed)) {
                    cycle.on("input", onChange);
                }
            }
            /**
             * @return {undefined}
             */
            function handler() {
                cycle.off("input", onChange);
                clearTimeout(id);
                /** @type {boolean} */
                var doneA = void 0 === newPage.seenEmailPerceptionPopupDate;
                events.showEmailPerception(cycle.insertGmailFeedback, doneA);
                actions.seenEmailPerceptionPopup(+new Date);
            }
            /**
             * @return {?}
             */
            function onChange() {
                if (clearTimeout(id), void 0 !== cycle) {
                    if (cycle.emailFeedbackEnabled !== true) {
                        return void cycle.off("input", onChange);
                    }
                    var a = cycle.getText().length;
                    if (a > b) {
                        /** @type {number} */
                        id = setTimeout(handler, 5E3);
                    }
                }
            }
            /**
             * @return {undefined}
             */
            function log() {
                var newState = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "on";
                cycle[newState]("finish", resize);
                cycle[newState]("rendered", update);
                cycle[newState]("sending", onError);
                cycle[newState]("show-dialog", animate);
            }
            /**
             * @return {undefined}
             */
            function resize() {
                animate();
                update();
            }
            /**
             * @return {undefined}
             */
            function attributes() {
                if (cycle) {
                    if (cycle.isOffline()) {
                        Popcorn.fastShow();
                    }
                }
            }
            /**
             * @param {Object} e
             * @return {undefined}
             */
            function gl(e) {
                e.stopImmediatePropagation();
            }
            /**
             * @param {Event} e
             * @return {undefined}
             */
            function opt_attributes(e) {
                if (visible) {
                    if (self.isFocused(el)) {
                        error(e);
                    }
                }
            }
            /**
             * @param {?} value
             * @return {undefined}
             */
            function options(value) {
                (0, elem["default"])(extraStyle, value);
                done();
            }
            /**
             * @return {undefined}
             */
            function message() {
                /** @type {boolean} */
                e = !plus();
                /** @type {boolean} */
                wasMinimized = true;
                _self.fire("button-change-state", e);
                if (that) {
                    that.hide();
                }
            }
            /**
             * @param {(Object|string)} ev
             * @return {undefined}
             */
            function onerror(ev) {
                if (!enabled) {
                    el.focus();
                    if (self.hasClass(ev.target, response.status)) {
                        that.show(true);
                    }
                }
            }
            /**
             * @return {undefined}
             */
            function done() {
                if (!node) {
                    init();
                }
                cb();
            }
            /**
             * @return {undefined}
             */
            function onclick() {
                cycle.reset();
                cycle.hardReset();
            }
            /**
             * @return {?}
             */
            function cb() {
                return assert.render(utils.createElement(defaults.ButtonComponent, {
                    state : getState(),
                    inlineStyle : extraStyle,
                    /**
                     * @param {string} e
                     * @return {?}
                     */
                    onViewClick : function(e) {
                        return onerror(e);
                    }
                }), node);
            }
            /**
             * @param {Event} e
             * @return {?}
             */
            function error(e) {
                if (!self.isFocused(el) && i) {
                    if (changePage(e)) {
                        return void onComplete();
                    }
                    /** @type {boolean} */
                    i = false;
                }
                if (e.target !== el) {
                    return hide();
                }
                if (add(e.target, element, el)) {
                    /** @type {boolean} */
                    i = true;
                    onComplete();
                } else {
                    if (addClass(e.target)) {
                        return;
                    }
                    hide();
                }
            }
            /**
             * @return {undefined}
             */
            function render() {
                /** @type {boolean} */
                visible = true;
                /** @type {boolean} */
                fix = true;
                if (element) {
                    if ("0" === element.style.opacity) {
                        /** @type {string} */
                        element.style.opacity = "1";
                    }
                }
                update();
            }
            /**
             * @return {undefined}
             */
            function onComplete() {
                if (!visible) {
                    if (enable) {
                        render();
                    } else {
                        /** @type {number} */
                        tref = setTimeout(render, 150);
                    }
                }
            }
            /**
             * @return {?}
             */
            function hide() {
                if (visible) {
                    if (clearTimeout(tref), that && that.isOpened()) {
                        return void(element.style.opacity = "0");
                    }
                    /** @type {boolean} */
                    visible = false;
                    /** @type {boolean} */
                    fix = false;
                    update();
                }
            }
            /**
             * @return {undefined}
             */
            function onError() {
                if (!enabled) {
                    clearTimeout(animationTimer);
                    finish();
                }
            }
            /**
             * @return {undefined}
             */
            function finish() {
                clearTimeout(animationTimer);
                if (!(cycle && !cycle.getText().trim())) {
                    if (!POST) {
                        /** @type {boolean} */
                        POST = true;
                        if (self) {
                            self.start();
                        }
                        if (!visible) {
                            error({
                                target : el
                            });
                        }
                        update();
                    }
                }
            }
            /**
             * @return {undefined}
             */
            function animate() {
                clearTimeout(animationTimer);
                if (self) {
                    self.finish();
                }
                /** @type {number} */
                animationTimer = setTimeout(next, 200);
            }
            /**
             * @return {undefined}
             */
            function next() {
                /** @type {boolean} */
                POST = false;
                update();
            }
            /**
             * @return {undefined}
             */
            function stop() {
                if (cycle) {
                    if (self) {
                        self.finish();
                    }
                    /** @type {boolean} */
                    isEditorInited = false;
                    cycle.remove();
                    log("off");
                }
            }
            /**
             * @return {undefined}
             */
            function remove() {
                stop();
                detach();
                clear();
                self.unlisten(element, "click", attributes);
                socket.off("hover", error);
                self.unlisten(el, "focus", obj);
                self.unlisten(el, "blur", opt_attributes);
                if (fieldParentCustomStyle.stopImmediatePropagationForClick) {
                    self.unlisten(expectedHashCode, "click", gl);
                }
                if (Popcorn) {
                    Popcorn.remove();
                }
                if (errorCB) {
                    errorCB();
                }
                if (node) {
                    if (node.parentNode) {
                        node.parentNode.removeChild(node);
                    }
                }
            }
            /**
             * @return {undefined}
             */
            function detach() {
                if (view) {
                    view.remove();
                }
                if (that) {
                    that.remove();
                }
                if (that) {
                    that.unbind();
                }
            }
            /**
             * @return {undefined}
             */
            function clear() {
                if (events) {
                    events.remove();
                }
                if (cycle) {
                    cycle.off("input", onChange);
                }
                clearTimeout(id);
            }
            /**
             * @param {Object} options
             * @return {undefined}
             */
            function tick(options) {
                var user = options.user;
                var connection = options.connection;
                var page = options.page;
                name = user.anonymous;
                token = user.premium;
                res = user;
                newPage = page;
                close(connection.online);
                if (cycle) {
                    cycle.updateState({
                        user : user,
                        connection : connection,
                        page : page
                    });
                }
                update();
            }
            /**
             * @return {undefined}
             */
            function update() {
                var options = cycle && cycle.errorData() || {};
                options.enabled = enable;
                options.checking = POST;
                options.anonymous = name;
                options.premium = token;
                options.user = res;
                options.fieldWasFocused = _;
                options.emailFeedbackEnabled = cycle && cycle.emailFeedbackEnabled;
                if (that) {
                    that.update(options);
                }
                if (view) {
                    view.set("show", fix);
                }
                if (result.initialized === true) {
                    done();
                }
            }
            /**
             * @return {?}
             */
            function plus() {
                return view.max;
            }
            /**
             * @return {?}
             */
            function getState() {
                var errs = cycle && cycle.errorData() || {};
                var experiments = res && res.experiments || {};
                return{
                    offline : enabled,
                    checking : POST,
                    enabled : enable,
                    anonymous : name,
                    premium : token,
                    experiments : experiments,
                    show : fix,
                    visible : visible,
                    wasMinimized : wasMinimized,
                    minimized : e,
                    hovered : text,
                    isFieldEmpty : isFieldEmpty,
                    isFieldHovered : i,
                    fieldWasFocused : _,
                    isEditorInited : isEditorInited,
                    errors : errs
                };
            }
            var app = opts.app;
            var params = opts.user;
            var page = opts.page;
            var connection = opts.connection;
            var expectedHashCode = opts.field;
            var type = opts.type;
            var actions = opts.actions;
            var timeout = opts.createSocket;
            var node = void 0;
            var element = void 0;
            var Popcorn = void 0;
            var self = void 0;
            var events = void 0;
            var id = void 0;
            var i = void 0;
            var view = void 0;
            var that = void 0;
            var cycle = void 0;
            var extraStyle = {
                visibility : "hidden"
            };
            var doc = expectedHashCode.ownerDocument;
            /** @type {boolean} */
            var lightning = "iframe" === type;
            var el = lightning ? success(expectedHashCode) : expectedHashCode;
            /** @type {boolean} */
            var isFieldEmpty = 0 === (expectedHashCode.value || (expectedHashCode.textContent || "")).trim().length;
            /** @type {boolean} */
            var custom = false;
            /** @type {boolean} */
            var text = false;
            /** @type {boolean} */
            var visible = false;
            /** @type {boolean} */
            var fix = false;
            /** @type {boolean} */
            var e = false;
            /** @type {boolean} */
            var wasMinimized = false;
            /** @type {boolean} */
            var isEditorInited = false;
            /** @type {boolean} */
            var _ = false;
            var res = params;
            var newPage = page;
            var name = params.anonymous;
            var token = params.premium;
            var fieldParentCustomStyle = should.pageStyles(doc).getFixesForCurrentDomain();
            var insert = path.State(page.disabledFields, actions.toggleField);
            var target = expectedHashCode;
            /** @type {boolean} */
            var POST = false;
            /** @type {boolean} */
            var enabled = !connection.online;
            /** @type {boolean} */
            var enable = true;
            var animationTimer = void 0;
            var changePage = void 0;
            var tref = void 0;
            var errorCB = void 0;
            /**
             * @param {string} fix
             * @return {undefined}
             */
            var close = function(fix) {
                if (enabled !== !fix) {
                    /** @type {boolean} */
                    enabled = !fix;
                    if (view) {
                        view.set("minimize", fix);
                    }
                    update();
                    if (cycle) {
                        cycle[enabled ? "offline" : "online"]();
                    }
                    if (enable) {
                        if (Popcorn) {
                            Popcorn[enabled ? "enable" : "disable"]();
                        }
                    }
                }
            };
            /**
             * @param {string} cycle
             * @return {undefined}
             */
            var fn = function(cycle) {
                if (enable !== cycle) {
                    var value = cycle && !enable;
                    var proceed = handler.isSafari() && value;
                    /** @type {string} */
                    enable = cycle;
                    insert.changeFieldState(expectedHashCode, target, !cycle);
                    if (view) {
                        view.set("maximize", cycle);
                    }
                    if (cycle) {
                        that.hide();
                        run();
                    } else {
                        stop();
                    }
                    update();
                    if (proceed) {
                        /** @type {string} */
                        element.style.display = "none";
                        handler.asyncCall(function() {
                            return element.style.display = "";
                        });
                    }
                }
            };
            /**
             * @return {undefined}
             */
            var obj = function callback() {
                self.unlisten(el, "focus", callback);
                done();
            };
            /**
             * @return {?}
             */
            var clone = function() {
                return element;
            };
            var result = {
                /**
                 * @return {?}
                 */
                online : function() {
                    return close(true);
                },
                /**
                 * @return {?}
                 */
                offline : function() {
                    return close(false);
                },
                /**
                 * @return {?}
                 */
                enable : function() {
                    return fn(true);
                },
                /**
                 * @return {?}
                 */
                disable : function() {
                    return fn(false);
                },
                /** @type {function (): undefined} */
                remove : remove,
                /** @type {function (): ?} */
                getEl : clone,
                /** @type {function (): ?} */
                getState : getState,
                /** @type {function (Object): undefined} */
                updateState : tick,
                /** @type {function (): ?} */
                getPosState : plus,
                /** @type {function ((Object|string)): undefined} */
                onViewClick : onerror,
                /** @type {function (): undefined} */
                onChangeState : message,
                /** @type {function (): undefined} */
                show : onComplete,
                /** @type {function (): ?} */
                hide : hide,
                /** @type {function (): undefined} */
                update : update,
                /** @type {function (): undefined} */
                checking : onError,
                /** @type {function (): undefined} */
                cancelChecking : animate,
                initialized : false
            };
            return Class(), result;
        }
        var selector = require("babel-runtime/core-js/object/assign");
        var elem = h(selector);
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var utils = require("react");
        var assert = require("react-dom");
        var self = require("../dom");
        var should = require("../sites");
        var $ = require("../editor");
        var _self = require("../tracking");
        var url = require("../location");
        var test = require("../infinity-checker");
        var BUI = require("../elements/error-tooltip");
        var handler = require("../util");
        var dom = require("./pos");
        var Block = require("./path");
        var BaseView = require("./menu");
        var path = require("./state");
        var defaults = require("./view");
        var L = require("./popup");
        var nodes = require("../editor/field-type-detect");
        var response = {
            textarea_btn : "_e725ae-textarea_btn",
            status : "_e725ae-status",
            field_hovered : "_e725ae-field_hovered",
            btn_text : "_e725ae-btn_text",
            not_focused : "_e725ae-not_focused",
            errors_100 : "_e725ae-errors_100",
            anonymous : "_e725ae-anonymous",
            show : "_e725ae-show",
            errors : "_e725ae-errors",
            checking : "_e725ae-checking",
            has_errors : "_e725ae-has_errors",
            disabled : "_e725ae-disabled",
            transform_wrap : "_e725ae-transform_wrap",
            offline : "_e725ae-offline",
            plus_only : "_e725ae-plus_only",
            minimized : "_e725ae-minimized",
            hovered : "_e725ae-hovered",
            minimize_transition : "_e725ae-minimize_transition"
        };
        /** @type {number} */
        var b = 300;
        /** @type {number} */
        var P = 864E5;
        /** @type {string} */
        var ua = "email_perception";
        /** @type {function (Object, Object): ?} */
        expectedHashCode.Button = init;
    }, {
        "../dom" : 215,
        "../editor" : 219,
        "../editor/field-type-detect" : 218,
        "../elements/error-tooltip" : 223,
        "../infinity-checker" : 265,
        "../location" : 277,
        "../sites" : 294,
        "../tracking" : 307,
        "../util" : 322,
        "./menu" : 191,
        "./path" : 194,
        "./popup" : 197,
        "./pos" : 200,
        "./state" : 203,
        "./view" : 204,
        "babel-runtime/core-js/object/assign" : 24,
        react : "react",
        "react-dom" : "react-dom"
    }],
    189 : [function($, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} value
         * @return {?}
         */
        function h(value) {
            return value && value.__esModule ? value : {
                "default" : value
            };
        }
        /**
         * @param {Object} opts
         * @param {(RegExp|string)} var_args
         * @return {?}
         */
        function create(opts, var_args) {
            /**
             * @param {string} name
             * @return {undefined}
             */
            function attributes(name) {
                /**
                 * @param {string} expectedHashCode
                 * @param {string} type
                 * @return {undefined}
                 */
                function reset(expectedHashCode, type) {
                    model.set(expectedHashCode, that.Button({
                        field : expectedHashCode,
                        app : m,
                        createSocket : var_args,
                        user : result,
                        page : page,
                        connection : _connection,
                        type : type,
                        actions : actions
                    }, self));
                }
                func(name);
                name.textareas.forEach(function(cm) {
                    return reset(cm, "textarea");
                });
                name.contenteditables.forEach(function(cm) {
                    return reset(cm, "contenteditable");
                });
                name.iframes.forEach(function(cm) {
                    return reset(cm, "iframe");
                });
                name.htmlghosts.forEach(function(cm) {
                    return reset(cm, "htmlghost");
                });
                name.usageTracking.forEach(function(deepDataAndEvents) {
                    return close(deepDataAndEvents);
                });
            }
            /**
             * @param {string} cycle
             * @return {undefined}
             */
            function opt_attributes(cycle) {
                if (console.log("remove", cycle), model) {
                    var selfObj = model.get(cycle);
                    if (selfObj) {
                        selfObj.remove();
                    }
                    model["delete"](cycle);
                }
            }
            /**
             * @return {undefined}
             */
            function add() {
                var f = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "on";
                if (self) {
                    if ("on" === f) {
                        self.on("add", attributes);
                        self.on("remove", opt_attributes);
                    } else {
                        self.off("add", attributes);
                        self.off("remove", opt_attributes);
                    }
                }
            }
            /**
             * @param {Object} options
             * @return {undefined}
             */
            function create(options) {
                result = options.user;
                _connection = options.connection;
                page = options.page;
                callback(options.connection.bgNotConnected);
                if (m.elements) {
                    m.elements.updateState(options);
                }
                if (model) {
                    model.forEach(function(c) {
                        return c.updateState(options);
                    });
                }
            }
            /**
             * @param {boolean} object
             * @return {undefined}
             */
            function callback(object) {
                if (object && property) {
                    element.timers.start(e);
                    _this.logger.lostBgPageConnection();
                } else {
                    if (!object && !property) {
                        var node = element.timers.stop(e);
                        _this.logger.restoreBgPageConnection(node);
                    }
                }
                /** @type {boolean} */
                property = !object;
            }
            /**
             * @param {Event} evt
             * @return {undefined}
             */
            function init(evt) {
                var element = evt.target;
                element.removeEventListener("focus", init, false);
                try {
                    _this.logger.initSession(url.getDomain(), input.type, field.getFieldType(element), false);
                } catch (n) {
                }
            }
            /**
             * @param {Function} deepDataAndEvents
             * @return {undefined}
             */
            function close(deepDataAndEvents) {
                /** @type {Function} */
                var element = deepDataAndEvents;
                if ("true" !== element.gr__field_checked) {
                    element.addEventListener("focus", init, false);
                    /** @type {string} */
                    element.gr__field_checked = "true";
                }
            }
            /**
             * @return {undefined}
             */
            function reset() {
                add("off");
                if (model) {
                    model.forEach(function(selfObj) {
                        return selfObj.remove();
                    });
                    model.clear();
                }
                /** @type {null} */
                model = null;
                if (m.elements) {
                    m.elements.clear();
                }
                /** @type {null} */
                m.elements = null;
                if (self) {
                    self.reset();
                    self.stop();
                }
                /** @type {null} */
                self = null;
            }
            /**
             * @param {string} cycle
             * @return {undefined}
             */
            function func(cycle) {
                try {
                    console.log("add", cycle);
                } catch (t) {
                    console.log("fields added");
                }
            }
            var m = opts.app;
            var url = opts.doc;
            var db = opts.connection;
            var input = opts.user;
            var e = opts.page;
            var actions = opts.actions;
            var self = editors.PageFields({
                doc : url,
                page : e
            });
            var model = new elem["default"];
            /** @type {boolean} */
            var property = true;
            var result = input;
            var page = e;
            var _connection = db;
            return callback(db.bgNotConnected), add("on"), attributes(self.get()), {
                /** @type {function (string): undefined} */
                add : attributes,
                /** @type {function (Object): undefined} */
                updateState : create,
                /** @type {function (string): undefined} */
                remove : opt_attributes,
                /** @type {function (): undefined} */
                clear : reset
            };
        }
        var selector = $("babel-runtime/core-js/map");
        var elem = h(selector);
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var _this = $("../tracking");
        var element = $("../timers");
        var editors = $("../page-fields");
        var that = $("./button");
        var field = $("../editor/field-type-detect");
        var url = $("../location");
        /** @type {string} */
        var e = "life_without_bg_connection";
        /** @type {function (Object, (RegExp|string)): ?} */
        expectedHashCode.Buttons = create;
    }, {
        "../editor/field-type-detect" : 218,
        "../location" : 277,
        "../page-fields" : 288,
        "../timers" : 301,
        "../tracking" : 307,
        "./button" : 188,
        "babel-runtime/core-js/map" : 23
    }],
    190 : [function(require, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} type
         * @return {?}
         */
        function $(type) {
            return type && type.__esModule ? type : {
                "default" : type
            };
        }
        var ready = require("babel-runtime/helpers/defineProperty");
        var ret = $(ready);
        var nodes = require("babel-runtime/core-js/object/get-prototype-of");
        var result = $(nodes);
        var helper = require("babel-runtime/helpers/classCallCheck");
        var update = $(helper);
        var c = require("babel-runtime/helpers/createClass");
        var h = $(c);
        var selector = require("babel-runtime/helpers/possibleConstructorReturn");
        var elem = $(selector);
        var items = require("babel-runtime/helpers/inherits");
        var option = $(items);
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var dom = require("react");
        var array = require("react-dom");
        var command = require("../../dom");
        var params = {
            hoverMenu : "_970ef1-hoverMenu",
            opened : "_970ef1-opened",
            btn : "_970ef1-btn",
            line : "_970ef1-line",
            panel : "_970ef1-panel",
            premium : "_970ef1-premium",
            btn_premium : "_970ef1-btn_premium",
            btn_grammarly : "_970ef1-btn_grammarly",
            anonymous : "_970ef1-anonymous",
            panelText : "_970ef1-panelText",
            critical : "_970ef1-critical",
            disabled : "_970ef1-disabled",
            referralArea : "_970ef1-referralArea",
            btn_disable : "_970ef1-btn_disable",
            initial : "_970ef1-initial",
            checking : "_970ef1-checking",
            counter : "_970ef1-counter",
            counter100 : "_970ef1-counter100",
            buttonArea : "_970ef1-buttonArea",
            referralText : "_970ef1-referralText",
            feedback : "_970ef1-feedback",
            tooltip : "_970ef1-tooltip",
            tooltip_grammarly : "_970ef1-tooltip_grammarly",
            tooltip_premium : "_970ef1-tooltip_premium",
            tooltip_disable : "_970ef1-tooltip_disable",
            plus : "_970ef1-plus",
            tooltip_referral : "_970ef1-tooltip_referral",
            referral : "_970ef1-referral",
            tooltip_visible : "_970ef1-tooltip_visible",
            tooltip_hidden : "_970ef1-tooltip_hidden"
        };
        var MenuBtn = function(deepDataAndEvents) {
            /**
             * @return {?}
             */
            function process() {
                (0, update["default"])(this, process);
                var that = (0, elem["default"])(this, (process.__proto__ || (0, result["default"])(process)).call(this));
                return that.onMouseEnterHandler = that.onMouseEnterHandler.bind(that), that.onMouseLeaveHandler = that.onMouseLeaveHandler.bind(that), that.onMouseClick = that.onMouseClick.bind(that), that;
            }
            return(0, option["default"])(process, deepDataAndEvents), (0, h["default"])(process, [{
                key : "onMouseEnterHandler",
                /**
                 * @return {undefined}
                 */
                value : function() {
                    var item = this;
                    /** @type {number} */
                    var backoff = 1350;
                    /** @type {number} */
                    this.tooltipTimeout = setTimeout(function() {
                        item.props.data.onTooltip({
                            active : true,
                            el : array.findDOMNode(item),
                            text : item.props.data.text,
                            cls : item.props.data.type
                        });
                    }, backoff);
                }
            }, {
                key : "onMouseLeaveHandler",
                /**
                 * @return {undefined}
                 */
                value : function() {
                    clearTimeout(this.tooltipTimeout);
                    this.props.data.onTooltip({
                        active : false,
                        text : this.props.data.text,
                        cls : this.props.data.type
                    });
                }
            }, {
                key : "onMouseClick",
                /**
                 * @param {string} expectedHashCode
                 * @return {undefined}
                 */
                value : function(expectedHashCode) {
                    if (this.props.data.click) {
                        this.props.data.click(expectedHashCode);
                    }
                    if ("disable" === this.props.data.type) {
                        this.onMouseLeaveHandler();
                    }
                }
            }, {
                key : "render",
                /**
                 * @return {?}
                 */
                value : function() {
                    var r20;
                    var collection = this.props.data;
                    var cls = command.cs((r20 = {}, (0, ret["default"])(r20, params.btn, true), (0, ret["default"])(r20, params["btn_" + collection.type], true), (0, ret["default"])(r20, params.counter, null !== collection.count && collection.count > 0), (0, ret["default"])(r20, params.counter100, null !== collection.count && collection.count > 99), r20));
                    return dom.createElement("div", {
                        className : params.buttonArea
                    }, dom.createElement("div", {
                        className : cls,
                        onClick : this.onMouseClick,
                        onMouseEnter : this.onMouseEnterHandler,
                        onMouseLeave : this.onMouseLeaveHandler,
                        "data-action" : collection.actionType,
                        tabIndex : -1
                    }, collection.count && collection.count > 0 ? collection.count : null));
                }
            }]), process;
        }(dom.Component);
        expectedHashCode.MenuBtn = MenuBtn;
    }, {
        "../../dom" : 215,
        "babel-runtime/core-js/object/get-prototype-of" : 28,
        "babel-runtime/helpers/classCallCheck" : 34,
        "babel-runtime/helpers/createClass" : 35,
        "babel-runtime/helpers/defineProperty" : 36,
        "babel-runtime/helpers/inherits" : 38,
        "babel-runtime/helpers/possibleConstructorReturn" : 39,
        react : "react",
        "react-dom" : "react-dom"
    }],
    191 : [function(require, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} value
         * @return {?}
         */
        function lookupIterator(value) {
            return value && value.__esModule ? value : {
                "default" : value
            };
        }
        /**
         * @param {Object} settings
         * @param {Function} map
         * @return {?}
         */
        function init(settings, map) {
            /**
             * @param {(Object|string)} e
             * @return {undefined}
             */
            function onClick(e) {
                /**
                 * @return {undefined}
                 */
                function onComplete() {
                    editor.showDialog({
                        caller : "button_hover"
                    });
                    util.fire("correct-btn-clicked");
                    player.timers.start("open_editor");
                }
                /**
                 * @return {undefined}
                 */
                function play() {
                    util.fire("hook-clicked", "button_hover");
                    init();
                }
                /**
                 * @return {undefined}
                 */
                function init() {
                    var node = requirejs.getUpgradeUrlFromMatches({
                        baseUrl : request.URLS.upgrade,
                        returnUrl : "",
                        appType : "popup",
                        matches : editor.getMatches()
                    });
                    node = Block.addParamsToUpgradeURL(node, name.anonymous === true ? "signupHook" : "upHook", name.anonymous === true ? "extensionPremiumCta" : "buttonHover");
                    nodes.emitBackground("open-url", node);
                }
                if (!editor.isOffline()) {
                    var button = e.target;
                    if (self.hasClass(button, state.btn_premium)) {
                        if (options.premium) {
                            onComplete();
                        } else {
                            play();
                        }
                    } else {
                        if (self.hasClass(button, state.btn_grammarly)) {
                            onComplete();
                        }
                    }
                    setTimeout(run, 200);
                }
            }
            /**
             * @return {undefined}
             */
            function play() {
                control.showDisable();
                run();
                cb();
                util.fire("disable-button-click");
            }
            /**
             * @param {?} val
             * @return {undefined}
             */
            function update(val) {
                options = val;
                name = val.user;
                cb();
            }
            /**
             * @param {Object} type
             * @return {undefined}
             */
            function setType(type) {
                /** @type {Object} */
                editor = type;
            }
            /**
             * @param {HTMLElement} el
             * @return {?}
             */
            function init(el) {
                var p = assert.getAbsRect(container);
                var pos = p.top;
                var x = p.left;
                var o = !context.getPosState() && options.enabled;
                return el && (x -= el.clientWidth, pos -= el.clientHeight / 2), pos += o ? OBJECT : NULL, x -= o ? object : width, !o && ($.menuPosLeft && (x = $.menuPosLeft(editor, x, options))), (0, iterator["default"])({}, serialized_data, "translate(" + x + "px, " + pos + "px)");
            }
            /**
             * @return {?}
             */
            function cb() {
                var result = parse(options, init(), el);
                var doc = lang.findDOMNode(result);
                return parse(options, init(doc), node);
            }
            /**
             * @param {Object} scope
             * @param {Object} execResult
             * @param {?} node
             * @return {?}
             */
            function parse(scope, execResult, node) {
                return lang.render($.createElement(defaults.HoverMenuView, {
                    style : execResult,
                    /** @type {function ((Object|string)): undefined} */
                    click : onClick,
                    /** @type {function (): undefined} */
                    disableClick : play,
                    state : scope,
                    opened : opened,
                    el : elem,
                    /**
                     * @param {boolean} isXML
                     * @return {undefined}
                     */
                    insertGmailFeedback : function(isXML) {
                        if (void 0 !== editor) {
                            editor.insertGmailFeedback(isXML);
                            context.update();
                        }
                    },
                    /** @type {function (): undefined} */
                    hide : run
                }), node);
            }
            /**
             * @return {undefined}
             */
            function bind() {
                self.listen(doc.documentElement, "mousemove", attributes);
                if (editor) {
                    editor.on("iframe-mousemove", attributes);
                }
            }
            /**
             * @return {undefined}
             */
            function end() {
                var e = arguments.length > 0 && (void 0 !== arguments[0] && arguments[0]);
                if (!(opened && !e)) {
                    self.unlisten(doc.documentElement, "mousemove", attributes);
                    if (editor) {
                        editor.off("iframe-mousemove", attributes);
                    }
                }
            }
            /**
             * @param {Event} el
             * @return {?}
             */
            function attributes(el) {
                var cnode = self.resolveEl(el.target, options.textarea_btn);
                if (cnode && cnode !== container) {
                    return run();
                }
                if (self.hasClass(container, options.offline)) {
                    return run();
                }
                var value = self.resolveEl(el.target, state.hoverMenu);
                return cnode || value === radio ? el.target.classList.contains(options.btn_text) ? run() : void activate() : run();
            }
            /**
             * @return {undefined}
             */
            function activate() {
                var AST_Node = arguments.length > 0 && (void 0 !== arguments[0] && arguments[0]);
                if (!(control && (control.isActive && "onboarding" === control.type))) {
                    if (methods && (!options.offline && options.fieldWasFocused) || AST_Node) {
                        if (!opened) {
                            /** @type {boolean} */
                            opened = true;
                            map(true);
                            if (options.emailFeedbackEnabled === true) {
                                util.fire("email-perception-button-hover");
                            }
                            cb();
                        }
                    }
                }
            }
            /**
             * @return {undefined}
             */
            function run() {
                if (opened) {
                    /** @type {boolean} */
                    opened = false;
                    map(false);
                    cb();
                }
            }
            /**
             * @return {undefined}
             */
            function remove() {
                end();
                if (node.parentNode) {
                    node.parentNode.removeChild(node);
                }
                if (el.parentNode) {
                    el.parentNode.removeChild(el);
                }
                if (elem.parentNode) {
                    elem.parentNode.removeChild(elem);
                }
            }
            var container = settings.el;
            var context = settings.btn;
            var c = settings.gButtonPopup;
            var doc = container.ownerDocument;
            var $ = should.pageStyles(doc).getFixesForCurrentDomain();
            var node = doc.createElement("div");
            var el = doc.createElement("div");
            var elem = doc.createElement("div");
            var serialized_data = self.transformProp(doc);
            var name = settings.user;
            var editor = settings.editor;
            var control = c;
            /** @type {boolean} */
            var methods = true;
            /** @type {boolean} */
            var opened = false;
            var options = {
                critical : 0,
                plus : 0,
                offline : false,
                enabled : settings.enabled,
                initial : false,
                checking : false,
                fieldWasFocused : !!settings.fieldWasFocused
            };
            var radio = lang.findDOMNode(cb());
            /** @type {number} */
            var width = -26;
            /** @type {number} */
            var NULL = 11;
            /** @type {number} */
            var object = -13;
            /** @type {number} */
            var OBJECT = 2;
            return self.addClass(node, "gr-top-z-index"), self.addClass(node, "gr-top-zero"), node.setAttribute("tabindex", "-1"), el.style.cssText = "visibility: hidden;top: -9999px;position: absolute;opacity: 0", elem.style.cssText = "visibility: hidden;top: -9999px;position: absolute;opacity: 0", doc.documentElement.insertBefore(node, doc.body), doc.documentElement.insertBefore(el, doc.body), doc.documentElement.insertBefore(elem, doc.body), {
                /** @type {function (): undefined} */
                show : activate,
                /** @type {function (): undefined} */
                hide : run,
                /** @type {function (): undefined} */
                bind : bind,
                /** @type {function (): undefined} */
                unbind : end,
                /** @type {function (): undefined} */
                remove : remove,
                /** @type {function (): ?} */
                render : cb,
                menuEl : radio,
                /** @type {function (?): undefined} */
                update : update,
                /** @type {function ((Object|string)): undefined} */
                onclick : onClick,
                /** @type {function (Object): undefined} */
                updateEditor : setType,
                /**
                 * @return {?}
                 */
                isOpened : function() {
                    return opened;
                },
                /**
                 * @return {?}
                 */
                isEnabled : function() {
                    return methods;
                },
                /**
                 * @return {undefined}
                 */
                disable : function() {
                    /** @type {boolean} */
                    methods = false;
                },
                /**
                 * @return {undefined}
                 */
                enable : function() {
                    /** @type {boolean} */
                    methods = true;
                },
                /**
                 * @return {?}
                 */
                getState : function() {
                    return options;
                },
                /**
                 * @param {boolean} keepData
                 * @return {undefined}
                 */
                setGbuttonPopup : function(keepData) {
                    /** @type {boolean} */
                    control = keepData;
                }
            };
        }
        var value = require("babel-runtime/helpers/defineProperty");
        var iterator = lookupIterator(value);
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var $ = require("react");
        var lang = require("react-dom");
        var requirejs = require("lib/grammarly-editor");
        var self = require("../../dom");
        var assert = require("../../position");
        var request = require("../../config");
        var Block = require("lib/url");
        var nodes = require("../../message");
        var player = require("../../timers");
        var defaults = require("./view");
        var util = require("../../tracking");
        var should = require("../../sites");
        var state = {
            hoverMenu : "_970ef1-hoverMenu",
            opened : "_970ef1-opened",
            btn : "_970ef1-btn",
            line : "_970ef1-line",
            panel : "_970ef1-panel",
            premium : "_970ef1-premium",
            btn_premium : "_970ef1-btn_premium",
            btn_grammarly : "_970ef1-btn_grammarly",
            anonymous : "_970ef1-anonymous",
            panelText : "_970ef1-panelText",
            critical : "_970ef1-critical",
            disabled : "_970ef1-disabled",
            referralArea : "_970ef1-referralArea",
            btn_disable : "_970ef1-btn_disable",
            initial : "_970ef1-initial",
            checking : "_970ef1-checking",
            counter : "_970ef1-counter",
            counter100 : "_970ef1-counter100",
            buttonArea : "_970ef1-buttonArea",
            referralText : "_970ef1-referralText",
            feedback : "_970ef1-feedback",
            tooltip : "_970ef1-tooltip",
            tooltip_grammarly : "_970ef1-tooltip_grammarly",
            tooltip_premium : "_970ef1-tooltip_premium",
            tooltip_disable : "_970ef1-tooltip_disable",
            plus : "_970ef1-plus",
            tooltip_referral : "_970ef1-tooltip_referral",
            referral : "_970ef1-referral",
            tooltip_visible : "_970ef1-tooltip_visible",
            tooltip_hidden : "_970ef1-tooltip_hidden"
        };
        var options = {
            textarea_btn : "_e725ae-textarea_btn",
            status : "_e725ae-status",
            field_hovered : "_e725ae-field_hovered",
            btn_text : "_e725ae-btn_text",
            not_focused : "_e725ae-not_focused",
            errors_100 : "_e725ae-errors_100",
            anonymous : "_e725ae-anonymous",
            show : "_e725ae-show",
            errors : "_e725ae-errors",
            checking : "_e725ae-checking",
            has_errors : "_e725ae-has_errors",
            disabled : "_e725ae-disabled",
            transform_wrap : "_e725ae-transform_wrap",
            offline : "_e725ae-offline",
            plus_only : "_e725ae-plus_only",
            minimized : "_e725ae-minimized",
            hovered : "_e725ae-hovered",
            minimize_transition : "_e725ae-minimize_transition"
        };
        /** @type {function (Object, Function): ?} */
        expectedHashCode.createMenu = init;
    }, {
        "../../config" : 211,
        "../../dom" : 215,
        "../../message" : 278,
        "../../position" : 289,
        "../../sites" : 294,
        "../../timers" : 301,
        "../../tracking" : 307,
        "./view" : 193,
        "babel-runtime/helpers/defineProperty" : 36,
        "lib/grammarly-editor" : 258,
        "lib/url" : 321,
        react : "react",
        "react-dom" : "react-dom"
    }],
    192 : [function($, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} name
         * @return {?}
         */
        function require(name) {
            return name && name.__esModule ? name : {
                "default" : name
            };
        }
        var path = $("babel-runtime/helpers/defineProperty");
        var conf = require(path);
        var value = $("babel-runtime/core-js/object/get-prototype-of");
        var isFunction = require(value);
        var foo = $("babel-runtime/helpers/classCallCheck");
        var ret = require(foo);
        var env = $("babel-runtime/helpers/createClass");
        var features = require(env);
        var elements = $("babel-runtime/helpers/possibleConstructorReturn");
        var filters = require(elements);
        var b2 = $("babel-runtime/helpers/inherits");
        var c = require(b2);
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var dom = $("react");
        var obj = $("../../dom");
        var params = {
            hoverMenu : "_970ef1-hoverMenu",
            opened : "_970ef1-opened",
            btn : "_970ef1-btn",
            line : "_970ef1-line",
            panel : "_970ef1-panel",
            premium : "_970ef1-premium",
            btn_premium : "_970ef1-btn_premium",
            btn_grammarly : "_970ef1-btn_grammarly",
            anonymous : "_970ef1-anonymous",
            panelText : "_970ef1-panelText",
            critical : "_970ef1-critical",
            disabled : "_970ef1-disabled",
            referralArea : "_970ef1-referralArea",
            btn_disable : "_970ef1-btn_disable",
            initial : "_970ef1-initial",
            checking : "_970ef1-checking",
            counter : "_970ef1-counter",
            counter100 : "_970ef1-counter100",
            buttonArea : "_970ef1-buttonArea",
            referralText : "_970ef1-referralText",
            feedback : "_970ef1-feedback",
            tooltip : "_970ef1-tooltip",
            tooltip_grammarly : "_970ef1-tooltip_grammarly",
            tooltip_premium : "_970ef1-tooltip_premium",
            tooltip_disable : "_970ef1-tooltip_disable",
            plus : "_970ef1-plus",
            tooltip_referral : "_970ef1-tooltip_referral",
            referral : "_970ef1-referral",
            tooltip_visible : "_970ef1-tooltip_visible",
            tooltip_hidden : "_970ef1-tooltip_hidden"
        };
        var Tooltip = function(deepDataAndEvents) {
            /**
             * @return {?}
             */
            function value() {
                return(0, ret["default"])(this, value), (0, filters["default"])(this, (value.__proto__ || (0, isFunction["default"])(value)).apply(this, arguments));
            }
            return(0, c["default"])(value, deepDataAndEvents), (0, features["default"])(value, [{
                key : "render",
                /**
                 * @return {?}
                 */
                value : function() {
                    var r20;
                    var data = this.props.data || {};
                    var value = this.props.measure;
                    var cls = obj.cs((r20 = {}, (0, conf["default"])(r20, params.tooltip, true), (0, conf["default"])(r20, params.tooltip_visible, data.active && !value), (0, conf["default"])(r20, params.tooltip_hidden, !data.active && !value), (0, conf["default"])(r20, params["tooltip_" + data.cls], true), r20));
                    var gstyle = void 0;
                    return data.active && (!value && (gstyle = {
                        right : 0
                    })), dom.createElement("div", {
                        style : gstyle,
                        className : cls,
                        ref : "tooltip",
                        dangerouslySetInnerHTML : {
                            __html : data.text
                        }
                    });
                }
            }]), value;
        }(dom.Component);
        expectedHashCode.Tooltip = Tooltip;
    }, {
        "../../dom" : 215,
        "babel-runtime/core-js/object/get-prototype-of" : 28,
        "babel-runtime/helpers/classCallCheck" : 34,
        "babel-runtime/helpers/createClass" : 35,
        "babel-runtime/helpers/defineProperty" : 36,
        "babel-runtime/helpers/inherits" : 38,
        "babel-runtime/helpers/possibleConstructorReturn" : 39,
        react : "react"
    }],
    193 : [function(require, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} type
         * @return {?}
         */
        function $(type) {
            return type && type.__esModule ? type : {
                "default" : type
            };
        }
        var ready = require("babel-runtime/helpers/defineProperty");
        var ret = $(ready);
        var nodes = require("babel-runtime/core-js/object/get-prototype-of");
        var result = $(nodes);
        var helper = require("babel-runtime/helpers/classCallCheck");
        var update = $(helper);
        var c = require("babel-runtime/helpers/createClass");
        var h = $(c);
        var selector = require("babel-runtime/helpers/possibleConstructorReturn");
        var elem = $(selector);
        var items = require("babel-runtime/helpers/inherits");
        var option = $(items);
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var dom = require("react");
        var view = require("react-dom");
        var child = require("./action");
        var o = require("./tooltip");
        var command = require("../../dom");
        var options = {
            hoverMenu : "_970ef1-hoverMenu",
            opened : "_970ef1-opened",
            btn : "_970ef1-btn",
            line : "_970ef1-line",
            panel : "_970ef1-panel",
            premium : "_970ef1-premium",
            btn_premium : "_970ef1-btn_premium",
            btn_grammarly : "_970ef1-btn_grammarly",
            anonymous : "_970ef1-anonymous",
            panelText : "_970ef1-panelText",
            critical : "_970ef1-critical",
            disabled : "_970ef1-disabled",
            referralArea : "_970ef1-referralArea",
            btn_disable : "_970ef1-btn_disable",
            initial : "_970ef1-initial",
            checking : "_970ef1-checking",
            counter : "_970ef1-counter",
            counter100 : "_970ef1-counter100",
            buttonArea : "_970ef1-buttonArea",
            referralText : "_970ef1-referralText",
            feedback : "_970ef1-feedback",
            tooltip : "_970ef1-tooltip",
            tooltip_grammarly : "_970ef1-tooltip_grammarly",
            tooltip_premium : "_970ef1-tooltip_premium",
            tooltip_disable : "_970ef1-tooltip_disable",
            plus : "_970ef1-plus",
            tooltip_referral : "_970ef1-tooltip_referral",
            referral : "_970ef1-referral",
            tooltip_visible : "_970ef1-tooltip_visible",
            tooltip_hidden : "_970ef1-tooltip_hidden"
        };
        var HoverMenuView = function(deepDataAndEvents) {
            /**
             * @return {?}
             */
            function value() {
                (0, update["default"])(this, value);
                var me = (0, elem["default"])(this, (value.__proto__ || (0, result["default"])(value)).apply(this, arguments));
                return me.state = {
                    tooltip : {
                        active : false,
                        text : "",
                        cls : ""
                    }
                }, me.onTooltip = function(style) {
                    var isDefault = view.render(dom.createElement(o.Tooltip, {
                        data : style,
                        measure : true
                    }), me.props.el);
                    setTimeout(function() {
                        style.width = view.findDOMNode(isDefault).clientWidth;
                        me.setState({
                            tooltip : style
                        });
                    }, 10);
                }, me;
            }
            return(0, option["default"])(value, deepDataAndEvents), (0, h["default"])(value, [{
                key : "getTooltipText",
                /**
                 * @param {string} expectedHashCode
                 * @return {?}
                 */
                value : function(expectedHashCode) {
                    return expectedHashCode.enabled ? "Disable on this website" : "Enable Grammarly here";
                }
            }, {
                key : "render",
                /**
                 * @return {?}
                 */
                value : function() {
                    var r20;
                    var me = this;
                    var d = this.props;
                    var data = d.state;
                    var siteCount = data.critical;
                    var value = data.plus;
                    var cls = command.cs((r20 = {}, (0, ret["default"])(r20, options.hoverMenu, true), (0, ret["default"])(r20, options.initial, data.initial), (0, ret["default"])(r20, options.premium, data.premium), (0, ret["default"])(r20, options.anonymous, data.anonymous), (0, ret["default"])(r20, options.checking, data.checking), (0, ret["default"])(r20, options.disabled, data.enabled === false), (0, ret["default"])(r20, options.critical, !!siteCount), (0, ret["default"])(r20, options.plus, !!value),
                        (0, ret["default"])(r20, options.opened, d.opened), r20));
                    /** @type {string} */
                    var ch = data.anonymous ? "Log in to enable personalized<br/>checks and other features" : "Edit in Grammarly";
                    /** @type {string} */
                    var buf = data.premium ? "See advanced corrections" : "Upgrade to make advanced corrections";
                    var msg = this.getTooltipText(data);
                    return dom.createElement("div", {
                        className : cls,
                        style : d.style
                    }, dom.createElement("div", {
                        className : options.panel
                    }, dom.createElement(o.Tooltip, {
                        data : this.state.tooltip
                    }), dom.createElement(child.MenuBtn, {
                        data : {
                            type : "disable",
                            size : "small",
                            text : msg,
                            click : d.disableClick,
                            onTooltip : this.onTooltip
                        }
                    }), dom.createElement("div", {
                        className : options.line
                    }), data.enabled === true && (data.emailFeedbackEnabled && dom.createElement("span", {
                        /**
                         * @param {string} expectedHashCode
                         * @return {undefined}
                         */
                        onClick : function(expectedHashCode) {
                            if (me.props.insertGmailFeedback) {
                                me.props.insertGmailFeedback(expectedHashCode.altKey, false);
                                me.props.hide();
                            }
                        },
                        className : options.feedback
                    }, "Ask for feedback")), value ? dom.createElement(child.MenuBtn, {
                        data : {
                            type : "premium",
                            size : "small",
                            text : buf,
                            count : value,
                            click : d.click,
                            onTooltip : this.onTooltip
                        }
                    }) : null, dom.createElement(child.MenuBtn, {
                        data : {
                            type : "grammarly",
                            actionType : "editor",
                            size : "small",
                            text : ch,
                            click : d.click,
                            count : siteCount,
                            onTooltip : this.onTooltip
                        }
                    })));
                }
            }]), value;
        }(dom.Component);
        expectedHashCode.HoverMenuView = HoverMenuView;
    }, {
        "../../dom" : 215,
        "./action" : 190,
        "./tooltip" : 192,
        "babel-runtime/core-js/object/get-prototype-of" : 28,
        "babel-runtime/helpers/classCallCheck" : 34,
        "babel-runtime/helpers/createClass" : 35,
        "babel-runtime/helpers/defineProperty" : 36,
        "babel-runtime/helpers/inherits" : 38,
        "babel-runtime/helpers/possibleConstructorReturn" : 39,
        react : "react",
        "react-dom" : "react-dom"
    }],
    194 : [function(dataAndEvents, deepDataAndEvents, expectedHashCode) {
        /**
         * @param {Object} options
         * @return {?}
         */
        function link(options) {
            /**
             * @param {?} rect2
             * @param {?} rect1
             * @return {?}
             */
            function positionTooltip(rect2, rect1) {
                return rect1.left >= rect2.left && rect1.top >= rect2.top ? "se" : rect1.left >= rect2.left && rect1.top <= rect2.top ? "ne" : rect1.left <= rect2.left && rect1.top <= rect2.top ? "nw" : rect1.left <= rect2.left && rect1.top >= rect2.top ? "sw" : void 0;
            }
            /**
             * @param {string} gridpos
             * @param {Object} mouse
             * @param {?} rect2
             * @param {?} rect1
             * @return {?}
             */
            function moveTooltip(gridpos, mouse, rect2, rect1) {
                var date2 = rect1.left + rect1.width + padding;
                /** @type {number} */
                var left = rect1.left - padding;
                var y = rect1.top + rect1.height + padding;
                /** @type {number} */
                var top = rect1.top - padding;
                /** @type {number} */
                var width = rect2.left - padding;
                var date1 = rect2.left + rect2.width + padding;
                /** @type {number} */
                var height = rect2.top - padding;
                var bottom = rect2.top + rect2.height + padding;
                var right = date1 > date2 ? date1 : date2;
                return "se" === gridpos && (mouse.x >= width && (mouse.x <= right && (mouse.y >= height && mouse.y <= y))) || ("ne" === gridpos && (mouse.x >= width && (mouse.x <= right && (mouse.y >= top && mouse.y <= bottom))) || ("nw" === gridpos && (mouse.x >= left && (mouse.x <= date1 && (mouse.y >= top && mouse.y <= bottom))) || "sw" === gridpos && (mouse.x >= left && (mouse.x <= date1 && (mouse.y >= height && mouse.y <= y)))));
            }
            /**
             * @param {Element} target
             * @return {?}
             */
            function getPosition(target) {
                var canvasRect = target.getBoundingClientRect();
                return{
                    height : canvasRect.height,
                    width : canvasRect.width,
                    top : canvasRect.top,
                    left : canvasRect.left
                };
            }
            /**
             * @param {Object} plot
             * @return {?}
             */
            function draw(plot) {
                var rect2 = getPosition(i);
                var rect1 = getPosition(basePrototype);
                var gridpos = positionTooltip(rect2, rect1);
                return moveTooltip(gridpos, plot, rect2, rect1);
            }
            var i = options.editorEl;
            var basePrototype = options.btnEl;
            var padding = options.padding;
            return draw;
        }
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        /** @type {function (Object): ?} */
        expectedHashCode.getWithinButtonPath = link;
    }, {}],
    195 : [function(require, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} type
         * @return {?}
         */
        function parseInt(type) {
            return type && type.__esModule ? type : {
                "default" : type
            };
        }
        var nodes = require("babel-runtime/core-js/object/assign");
        var result = parseInt(nodes);
        var b = require("babel-runtime/core-js/object/get-prototype-of");
        var bp = parseInt(b);
        var text = require("babel-runtime/helpers/classCallCheck");
        var type = parseInt(text);
        var c = require("babel-runtime/helpers/createClass");
        var h = parseInt(c);
        var which = require("babel-runtime/helpers/possibleConstructorReturn");
        var keys = parseInt(which);
        var g = require("babel-runtime/helpers/inherits");
        var ret = parseInt(g);
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var dom = require("react");
        var Block = require("react-dom");
        var assert = require("lib/dom");
        var child = require("lib/elements/signin/button");
        var o = {
            gButtonPopup : "_9d9f60-gButtonPopup",
            emailPerception : "_9d9f60-emailPerception",
            text : "_9d9f60-text",
            title : "_9d9f60-title",
            popupFooter : "_9d9f60-popupFooter",
            onboarding : "_9d9f60-onboarding",
            emailPerceptionFlipped : "_9d9f60-emailPerceptionFlipped",
            isFliped : "_9d9f60-isFliped",
            secondary : "_9d9f60-secondary",
            firstTime : "_9d9f60-firstTime",
            disable : "_9d9f60-disable",
            link : "_9d9f60-link",
            bold : "_9d9f60-bold",
            close : "_9d9f60-close"
        };
        var DisablePopup = function(deepDataAndEvents) {
            /**
             * @return {?}
             */
            function initialize() {
                (0, type["default"])(this, initialize);
                var e = (0, keys["default"])(this, (initialize.__proto__ || (0, bp["default"])(initialize)).call(this));
                return e.cancel = function() {
                    if (e._node) {
                        /** @type {string} */
                        e._node.style.opacity = "0";
                        e._node.addEventListener("transitionend", function() {
                            e.props.remove();
                        }, false);
                    } else {
                        e.props.remove();
                    }
                }, e.state = {
                    styles : {}
                }, e;
            }
            return(0, ret["default"])(initialize, deepDataAndEvents), (0, h["default"])(initialize, [{
                key : "componentDidMount",
                /**
                 * @return {undefined}
                 */
                value : function() {
                    var args = this;
                    var element = Block.findDOMNode(this.refs.gButtonPopup);
                    /** @type {number} */
                    this._requestAnimationFrame = requestAnimationFrame(function() {
                        requestAnimationFrame(function() {
                            if (element.style.setProperty("transition", "opacity 0.18s cubic-bezier(0.255,0.89,0.25,1.135),transform 0.18s cubic-bezier(0.255,0.89,0.25,1.135)", "important"), element.style.opacity = "1", element.style.transform) {
                                var dig = element.style.transform.split(" ");
                                /** @type {string} */
                                dig[2] = "scale(1)";
                                element.style.transform = dig.join(" ");
                            }
                        });
                    });
                    this._node = element;
                    this.setState(function() {
                        return{
                            styles : args.props.styles
                        };
                    });
                }
            }, {
                key : "componentWillUnmount",
                /**
                 * @return {undefined}
                 */
                value : function() {
                    cancelAnimationFrame(this._requestAnimationFrame);
                }
            }, {
                key : "render",
                /**
                 * @return {?}
                 */
                value : function() {
                    var me = this;
                    var gstyle = (0, result["default"])({}, this.props.styles, {
                        transition : "none !important"
                    });
                    return dom.createElement("div", {
                        ref : "gButtonPopup",
                        className : assert.cs(o.gButtonPopup, o.disable),
                        style : gstyle
                    }, dom.createElement("p", {
                        className : o.text
                    }, "Disable Grammarly ", dom.createElement("br", null), " on ", dom.createElement("span", {
                        className : o.bold
                    }, this.props.domain), "?"), dom.createElement(child.Button, {
                        /**
                         * @return {?}
                         */
                        onClick : function() {
                            return me.props.disableOnTab();
                        },
                        cls : "disable",
                        styles : {
                            width : 208
                        },
                        text : "Disable until next visit"
                    }), dom.createElement(child.Button, {
                        /**
                         * @return {?}
                         */
                        onClick : function() {
                            return me.props.disableSite();
                        },
                        cls : "disable",
                        styles : {
                            width : 208
                        },
                        text : "Disable Forever"
                    }), dom.createElement("button", {
                        className : o.close,
                        onClick : this.cancel
                    }), dom.createElement("button", {
                        className : o.link,
                        onClick : this.cancel
                    }, "keep it working"));
                }
            }]), initialize;
        }(dom.Component);
        expectedHashCode.DisablePopup = DisablePopup;
    }, {
        "babel-runtime/core-js/object/assign" : 24,
        "babel-runtime/core-js/object/get-prototype-of" : 28,
        "babel-runtime/helpers/classCallCheck" : 34,
        "babel-runtime/helpers/createClass" : 35,
        "babel-runtime/helpers/inherits" : 38,
        "babel-runtime/helpers/possibleConstructorReturn" : 39,
        "lib/dom" : 215,
        "lib/elements/signin/button" : 240,
        react : "react",
        "react-dom" : "react-dom"
    }],
    196 : [function(require, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} value
         * @return {?}
         */
        function parseInt(value) {
            return value && value.__esModule ? value : {
                "default" : value
            };
        }
        var nodes = require("babel-runtime/core-js/object/get-prototype-of");
        var result = parseInt(nodes);
        var m = require("babel-runtime/helpers/classCallCheck");
        var row = parseInt(m);
        var g = require("babel-runtime/helpers/createClass");
        var ret = parseInt(g);
        var b = require("babel-runtime/helpers/possibleConstructorReturn");
        var bp = parseInt(b);
        var one = require("babel-runtime/helpers/inherits");
        var column = parseInt(one);
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var dom = require("react");
        var Block = require("react-dom");
        var $ = require("lib/dom");
        var child = require("lib/elements/signin/button");
        var util = require("lib/tracking");
        var defaults = {
            gButtonPopup : "_9d9f60-gButtonPopup",
            emailPerception : "_9d9f60-emailPerception",
            text : "_9d9f60-text",
            title : "_9d9f60-title",
            popupFooter : "_9d9f60-popupFooter",
            onboarding : "_9d9f60-onboarding",
            emailPerceptionFlipped : "_9d9f60-emailPerceptionFlipped",
            isFliped : "_9d9f60-isFliped",
            secondary : "_9d9f60-secondary",
            firstTime : "_9d9f60-firstTime",
            disable : "_9d9f60-disable",
            link : "_9d9f60-link",
            bold : "_9d9f60-bold",
            close : "_9d9f60-close"
        };
        /** @type {string} */
        var path = "https://www.grammarly.com/email-perception";
        var EmailPerceptionPopup = function(deepDataAndEvents) {
            /**
             * @return {?}
             */
            function initialize() {
                (0, row["default"])(this, initialize);
                var item = (0, bp["default"])(this, (initialize.__proto__ || (0, result["default"])(initialize)).call(this));
                return item.cancel = function() {
                    item.props.remove();
                    util.fire("email-perception-popup-cancel", item.props.isFirstShown);
                }, item.disable = function() {
                    item.props.disableEmailPerceptionPopup();
                    item.cancel();
                    util.fire("email-perception-disable-click", item.props.isFirstShown);
                }, item.learnMore = function() {
                    item.props.remove();
                    util.fire("email-perception-learn-more-click");
                }, item.state = {
                    styles : {}
                }, item;
            }
            return(0, column["default"])(initialize, deepDataAndEvents), (0, ret["default"])(initialize, [{
                key : "componentDidMount",
                /**
                 * @return {undefined}
                 */
                value : function() {
                    var args = this;
                    var elem = Block.findDOMNode(this.refs.gButtonPopup);
                    /** @type {number} */
                    this._requestAnimationFrame = requestAnimationFrame(function() {
                        if (elem.style.opacity = "1", elem.style.transform) {
                            var dig = elem.style.transform.split(" ");
                            /** @type {string} */
                            dig[2] = "scale(1)";
                            elem.style.transform = dig.join(" ");
                        }
                    });
                    this.setState(function() {
                        return{
                            styles : args.props.styles
                        };
                    });
                    util.fire("email-perception-popup-show", this.props.isFirstShown);
                }
            }, {
                key : "componentWillUnmount",
                /**
                 * @return {undefined}
                 */
                value : function() {
                    cancelAnimationFrame(this._requestAnimationFrame);
                }
            }, {
                key : "render",
                /**
                 * @return {?}
                 */
                value : function() {
                    var me = this;
                    var cls = $.cs(defaults.gButtonPopup, defaults[this.props.type]);
                    /** @type {string} */
                    var requires = "emailPerception" === this.props.type ? "Don\u2019t show this again" : "Don\u2019t show again";
                    return dom.createElement("div", {
                        ref : "gButtonPopup",
                        className : cls,
                        style : this.state.styles
                    }, dom.createElement("p", {
                        className : defaults.title
                    }, "What do your readers think?"), dom.createElement("p", {
                        className : defaults.text
                    }, "Ask the recipients if your message is concise and easy to read."), dom.createElement(child.Button, {
                        /**
                         * @return {undefined}
                         */
                        onClick : function() {
                            if (me.props.isFirstShown) {
                                me.props.enableEmailPerceptionPopup();
                            }
                            me.props.insertGmailFeedback(false, me.props.isFirstShown);
                        },
                        cls : "onboarding",
                        styles : {
                            width : "180px"
                        },
                        text : "Ask for feedback"
                    }), this.props.isFirstShown === true ? dom.createElement("a", {
                        className : $.cs(defaults.secondary, defaults.firstTime),
                        href : path,
                        target : "_blank",
                        onClick : this.learnMore
                    }, "Learn more") : dom.createElement("button", {
                        className : $.cs(defaults.secondary),
                        onClick : this.disable
                    }, requires), dom.createElement("button", {
                        className : defaults.close,
                        onClick : this.cancel
                    }), dom.createElement("div", {
                        className : $.cs(defaults.popupFooter, this.props.isFlipped && defaults.isFliped)
                    }, "\u25b2"));
                }
            }]), initialize;
        }(dom.Component);
        expectedHashCode.EmailPerceptionPopup = EmailPerceptionPopup;
    }, {
        "babel-runtime/core-js/object/get-prototype-of" : 28,
        "babel-runtime/helpers/classCallCheck" : 34,
        "babel-runtime/helpers/createClass" : 35,
        "babel-runtime/helpers/inherits" : 38,
        "babel-runtime/helpers/possibleConstructorReturn" : 39,
        "lib/dom" : 215,
        "lib/elements/signin/button" : 240,
        "lib/tracking" : 307,
        react : "react",
        "react-dom" : "react-dom"
    }],
    197 : [function(require, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} id
         * @return {?}
         */
        function $(id) {
            return id && id.__esModule ? id : {
                "default" : id
            };
        }
        var target = require("babel-runtime/helpers/defineProperty");
        var type = $(target);
        var info = require("babel-runtime/core-js/object/assign");
        var match = $(info);
        var selector = require("babel-runtime/helpers/classCallCheck");
        var elem = $(selector);
        var dom = require("babel-runtime/helpers/createClass");
        var h = $(dom);
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var res = require("react");
        var lang = require("react-dom");
        var item = require("./onboarding");
        var input = require("./email-perception");
        var data = require("./disable");
        var assert = require("lib/position");
        var url = require("lib/location");
        var Event = require("lib/dom");
        var m = require("../../tracking");
        var self = require("lib/message");
        var VALUE = {
            onboarding : {
                height : 170,
                left : 329,
                top : 162,
                topFlip : 35
            },
            emailPerception : {
                height : 292,
                left : -45,
                top : 250,
                topFlip : 0
            },
            emailPerceptionFlipped : {
                height : 170,
                left : 329,
                top : 162,
                topFlip : 35
            },
            disable : {
                height : 232,
                left : 248,
                top : 209,
                topFlip : -1
            }
        };
        /** @type {number} */
        var blockSize = 250;
        var Popup = function() {
            /**
             * @param {Object} self
             * @return {undefined}
             */
            function update(self) {
                var that = this;
                var doc = self.doc;
                var el = self.el;
                var editor = self.editor;
                var user = self.user;
                var actions = self.actions;
                var notifications = self.notifications;
                (0, elem["default"])(this, update);
                /**
                 * @param {boolean} hasBody
                 * @return {?}
                 */
                this._getStyles = function(hasBody) {
                    var offset = assert.getAbsRect(that.el);
                    var base = offset.top;
                    var left = offset.left;
                    var r20 = Event.transformProp(that._doc);
                    /** @type {number} */
                    var shift = left - that._offsets.left;
                    var l = that._isFlipped ? base + that._offsets.topFlip : base - that._offsets.top;
                    /** @type {string} */
                    var data = hasBody ? "scale(.7)" : "scale(1)";
                    return(0, match["default"])({}, (0, type["default"])({}, r20, "translate(" + shift + "px, " + l + "px) " + data));
                };
                /**
                 * @return {undefined}
                 */
                this._windowResize = function() {
                    var styles = that._getStyles();
                    that._component.setState(function() {
                        return{
                            styles : styles
                        };
                    });
                };
                this._doc = doc;
                this.el = el;
                this.editorId = editor.id;
                this.editor = editor;
                this.user = user;
                this.actions = actions;
                if (null !== notifications) {
                    this._notifications = notifications;
                }
            }
            return(0, h["default"])(update, [{
                key : "_openDialog",
                /**
                 * @return {undefined}
                 */
                value : function() {
                    this.hide();
                    self.emitFocusedTab("show-dialog", {
                        data : {},
                        editorId : this.editorId,
                        user : this.user,
                        isOnboarding : true
                    });
                }
            }, {
                key : "_checkContainer",
                /**
                 * @return {undefined}
                 */
                value : function() {
                    if (!this._container) {
                        this._container = this._doc.createElement("gbutton-popup");
                        this._doc.documentElement.appendChild(this._container);
                    }
                }
            }, {
                key : "showOnboarding",
                /**
                 * @return {undefined}
                 */
                value : function() {
                    this._show("onboarding");
                }
            }, {
                key : "showEmailPerception",
                /**
                 * @param {string} expectedHashCode
                 * @param {string} type
                 * @return {undefined}
                 */
                value : function(expectedHashCode, type) {
                    this._show("emailPerception");
                    /** @type {string} */
                    this._insertEmailFeedback = expectedHashCode;
                    /** @type {string} */
                    this._showFirstTime = type;
                }
            }, {
                key : "showDisable",
                /**
                 * @return {undefined}
                 */
                value : function() {
                    this._show("disable");
                }
            }, {
                key : "_show",
                /**
                 * @param {string} expectedHashCode
                 * @return {undefined}
                 */
                value : function(expectedHashCode) {
                    var self = this;
                    var position = this.el.getBoundingClientRect();
                    if (this.type = expectedHashCode, this._offsets = VALUE[expectedHashCode], "emailPerception" === expectedHashCode) {
                        /** @type {boolean} */
                        var isFinal = window.outerWidth - this.el.getBoundingClientRect().right < blockSize;
                        if (isFinal) {
                            /** @type {string} */
                            this.type = "emailPerceptionFlipped";
                            this._offsets = VALUE[this.type];
                        }
                    }
                    if ("emailPerception" !== expectedHashCode) {
                        /** @type {boolean} */
                        this._isFlipped = position.top < this._offsets.height;
                    }
                    if ("disable" === expectedHashCode) {
                        this._render();
                    } else {
                        /** @type {number} */
                        this._showTimeout = setTimeout(function() {
                            return self._render();
                        }, 700);
                    }
                    /** @type {boolean} */
                    this.isActive = true;
                    Event.listen(window, "resize", this._windowResize, false);
                }
            }, {
                key : "hide",
                /**
                 * @return {undefined}
                 */
                value : function() {
                    /** @type {boolean} */
                    this.isActive = false;
                    if (this._container) {
                        lang.unmountComponentAtNode(this._container);
                    }
                    Event.unlisten(window, "resize", this._windowResize, false);
                    clearTimeout(this._showTimeout);
                }
            }, {
                key : "_render",
                /**
                 * @return {?}
                 */
                value : function() {
                    var self = this;
                    var type = void 0;
                    this._checkContainer();
                    var styles = this._getStyles(true);
                    var domain = url.getDomain();
                    switch(this.type) {
                        case "onboarding":
                            type = res.createElement(item.OnboardingPopup, {
                                isFlipped : this._isFlipped,
                                styles : styles,
                                /**
                                 * @return {?}
                                 */
                                openOnboardingDialog : function() {
                                    return self._openDialog();
                                },
                                /**
                                 * @return {?}
                                 */
                                remove : function() {
                                    return self.hide();
                                }
                            });
                            break;
                        case "disable":
                            type = res.createElement(data.DisablePopup, {
                                domain : domain,
                                styles : styles,
                                /**
                                 * @return {?}
                                 */
                                remove : function() {
                                    return self.hide();
                                },
                                /**
                                 * @return {undefined}
                                 */
                                disableOnTab : function() {
                                    self.actions.disableOnTab();
                                    m.fire("disable-until-next-visit");
                                    self.remove();
                                    self._notifications.showDisableOnTab();
                                },
                                /**
                                 * @return {undefined}
                                 */
                                disableSite : function() {
                                    self.actions.toggleSite(false, domain);
                                    m.fire("checking-toggled", {
                                        enabled : false,
                                        placement : "gButton"
                                    });
                                    self.remove();
                                    self._notifications.showDisable();
                                }
                            });
                            break;
                        case "emailPerception":
                            ;
                        case "emailPerceptionFlipped":
                            type = res.createElement(input.EmailPerceptionPopup, {
                                isFlipped : this._isFlipped,
                                type : this.type,
                                styles : styles,
                                /**
                                 * @return {?}
                                 */
                                remove : function() {
                                    return self.hide();
                                },
                                /**
                                 * @param {boolean} isXML
                                 * @param {boolean} funcToCall
                                 * @return {undefined}
                                 */
                                insertGmailFeedback : function(isXML, funcToCall) {
                                    self.remove();
                                    self._insertEmailFeedback(isXML, funcToCall);
                                },
                                disableEmailPerceptionPopup : this.actions.disableEmailPerceptionPopup,
                                enableEmailPerceptionPopup : this.actions.enableEmailPerceptionPopup,
                                isFirstShown : this._showFirstTime
                            });
                            break;
                        default:
                            return void console.error("Error: unsupported type of gButton popup");
                    }
                    this._component = lang.render(type, this._container);
                }
            }, {
                key : "remove",
                /**
                 * @return {undefined}
                 */
                value : function() {
                    this.hide();
                    if (this._container) {
                        lang.unmountComponentAtNode(this._container);
                    }
                    if (this._container) {
                        if (this._container.parentNode) {
                            this._container.parentNode.removeChild(this._container);
                        }
                    }
                }
            }]), update;
        }();
        expectedHashCode.Popup = Popup;
    }, {
        "../../tracking" : 307,
        "./disable" : 195,
        "./email-perception" : 196,
        "./onboarding" : 198,
        "babel-runtime/core-js/object/assign" : 24,
        "babel-runtime/helpers/classCallCheck" : 34,
        "babel-runtime/helpers/createClass" : 35,
        "babel-runtime/helpers/defineProperty" : 36,
        "lib/dom" : 215,
        "lib/location" : 277,
        "lib/message" : 278,
        "lib/position" : 289,
        react : "react",
        "react-dom" : "react-dom"
    }],
    198 : [function(require, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} value
         * @return {?}
         */
        function parseInt(value) {
            return value && value.__esModule ? value : {
                "default" : value
            };
        }
        var one = require("babel-runtime/core-js/object/get-prototype-of");
        var column = parseInt(one);
        var json = require("babel-runtime/helpers/classCallCheck");
        var h = parseInt(json);
        var g = require("babel-runtime/helpers/createClass");
        var ret = parseInt(g);
        var text = require("babel-runtime/helpers/possibleConstructorReturn");
        var type = parseInt(text);
        var b = require("babel-runtime/helpers/inherits");
        var bp = parseInt(b);
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var dom = require("react");
        var Block = require("react-dom");
        var command = require("lib/dom");
        var child = require("lib/elements/signin/button");
        var util = require("lib/tracking");
        var args = {
            gButtonPopup : "_9d9f60-gButtonPopup",
            emailPerception : "_9d9f60-emailPerception",
            text : "_9d9f60-text",
            title : "_9d9f60-title",
            popupFooter : "_9d9f60-popupFooter",
            onboarding : "_9d9f60-onboarding",
            emailPerceptionFlipped : "_9d9f60-emailPerceptionFlipped",
            isFliped : "_9d9f60-isFliped",
            secondary : "_9d9f60-secondary",
            firstTime : "_9d9f60-firstTime",
            disable : "_9d9f60-disable",
            link : "_9d9f60-link",
            bold : "_9d9f60-bold",
            close : "_9d9f60-close"
        };
        var OnboardingPopup = function(deepDataAndEvents) {
            /**
             * @return {?}
             */
            function initialize() {
                (0, h["default"])(this, initialize);
                var me = (0, type["default"])(this, (initialize.__proto__ || (0, column["default"])(initialize)).call(this));
                return me.cancel = function() {
                    me.props.remove();
                    util.fire("onboarding-popup-cancel");
                }, me.state = {
                    styles : {}
                }, me;
            }
            return(0, bp["default"])(initialize, deepDataAndEvents), (0, ret["default"])(initialize, [{
                key : "componentDidMount",
                /**
                 * @return {undefined}
                 */
                value : function() {
                    var args = this;
                    var elem = Block.findDOMNode(this.refs.gButtonPopup);
                    /** @type {number} */
                    this._requestAnimationFrame = requestAnimationFrame(function() {
                        if (elem.style.opacity = "1", elem.style.transform) {
                            var dig = elem.style.transform.split(" ");
                            /** @type {string} */
                            dig[2] = "scale(1)";
                            elem.style.transform = dig.join(" ");
                        }
                    });
                    this.setState(function() {
                        return{
                            styles : args.props.styles
                        };
                    });
                    util.fire("onboarding-popup-show");
                }
            }, {
                key : "componentWillUnmount",
                /**
                 * @return {undefined}
                 */
                value : function() {
                    cancelAnimationFrame(this._requestAnimationFrame);
                }
            }, {
                key : "render",
                /**
                 * @return {?}
                 */
                value : function() {
                    var me = this;
                    return dom.createElement("div", {
                        ref : "gButtonPopup",
                        className : command.cs(args.gButtonPopup, args.onboarding),
                        style : this.state.styles
                    }, dom.createElement("p", {
                        className : args.title
                    }, "Grammarly is Now Active"), dom.createElement("p", {
                        className : args.text
                    }, "Want to see how it works?"), dom.createElement(child.Button, {
                        /**
                         * @return {?}
                         */
                        onClick : function() {
                            return me.props.openOnboardingDialog();
                        },
                        cls : "onboarding",
                        styles : {
                            width : "180px"
                        },
                        text : "take a quick tour"
                    }), dom.createElement("button", {
                        className : args.link,
                        onClick : this.cancel
                    }, "No, thanks"), dom.createElement("div", {
                        className : command.cs(args.popupFooter, this.props.isFlipped && args.isFliped)
                    }, "\u25b2"));
                }
            }]), initialize;
        }(dom.Component);
        expectedHashCode.OnboardingPopup = OnboardingPopup;
    }, {
        "babel-runtime/core-js/object/get-prototype-of" : 28,
        "babel-runtime/helpers/classCallCheck" : 34,
        "babel-runtime/helpers/createClass" : 35,
        "babel-runtime/helpers/inherits" : 38,
        "babel-runtime/helpers/possibleConstructorReturn" : 39,
        "lib/dom" : 215,
        "lib/elements/signin/button" : 240,
        "lib/tracking" : 307,
        react : "react",
        "react-dom" : "react-dom"
    }],
    199 : [function(require, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} type
         * @return {?}
         */
        function Event(type) {
            return type && type.__esModule ? type : {
                "default" : type
            };
        }
        var type = require("babel-runtime/helpers/classCallCheck");
        var event = Event(type);
        var selector = require("babel-runtime/helpers/createClass");
        var elem = Event(selector);
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var ret = require("lib/sites");
        var helper = require("./intersect");
        var Minimizer = function() {
            /**
             * @return {undefined}
             */
            function onTimeout() {
                (0, event["default"])(this, onTimeout);
                /**
                 * @param {Object} value
                 * @param {Object} node
                 * @return {?}
                 */
                this._check = function(value, node) {
                    return node && value !== node ? node : void 0;
                };
            }
            return(0, elem["default"])(onTimeout, [{
                key : "getStateIfChanged",
                /**
                 * @param {string} expectedHashCode
                 * @param {string} type
                 * @param {?} opt_attributes
                 * @param {boolean} recurring
                 * @param {string} dataAndEvents
                 * @param {boolean} keepData
                 * @return {?}
                 */
                value : function(expectedHashCode, type, opt_attributes, recurring, dataAndEvents, keepData) {
                    var a = expectedHashCode.minimize;
                    var b = expectedHashCode.maximize;
                    /** @type {number} */
                    var PREVENT_DURATION = 200;
                    var lastPreventedTime = dataAndEvents || 0;
                    var rreturn = type.ownerDocument;
                    var content = ret.pageStyles(rreturn).getFixesForCurrentDomain();
                    /** @type {string} */
                    var udataCur = keepData ? "maximize" : "minimize";
                    if (a || b) {
                        var h = content.forceMinimize && content.forceMinimize(recurring);
                        if (h || a && !b) {
                            return this._check(udataCur, "minimize");
                        }
                        if (!opt_attributes || !a && b) {
                            return this._check(udataCur, "maximize");
                        }
                        var condition = void 0;
                        var charset = helper.getIntersect(type, opt_attributes);
                        if (charset) {
                            if (lastPreventedTime) {
                                if (lastPreventedTime > 0) {
                                    this.textLengthWhenMinimized = lastPreventedTime;
                                    /** @type {string} */
                                    condition = "minimize";
                                }
                            }
                        }
                        var textLengthWhenMinimized = this.textLengthWhenMinimized && this.textLengthWhenMinimized - lastPreventedTime > PREVENT_DURATION;
                        var minimize = !this.textLengthWhenMinimized || (textLengthWhenMinimized || 0 === lastPreventedTime);
                        return condition = minimize ? "maximize" : "minimize", this._check(udataCur, condition);
                    }
                }
            }]), onTimeout;
        }();
        expectedHashCode.Minimizer = Minimizer;
    }, {
        "./intersect" : 201,
        "babel-runtime/helpers/classCallCheck" : 34,
        "babel-runtime/helpers/createClass" : 35,
        "lib/sites" : 294
    }],
    200 : [function(require, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} type
         * @return {?}
         */
        function create(type) {
            return type && type.__esModule ? type : {
                "default" : type
            };
        }
        var type = require("babel-runtime/helpers/classCallCheck");
        var socket = create(type);
        var selector = require("babel-runtime/helpers/createClass");
        var elem = create(selector);
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var _ = require("lodash");
        var Events = require("lib/window-events");
        var core = require("lib/util");
        var b = require("lib/dom");
        var node = require("./position");
        var Block = require("./condition");
        var newPos = function() {
            /**
             * @param {?} t
             * @param {?} allBindingsAccessor
             * @param {?} depMaps
             * @return {undefined}
             */
            function init(t, allBindingsAccessor, depMaps) {
                var sibling = t.btnEl;
                var html = t.fieldEl;
                var link = t.sourceEl;
                var w = t.custom;
                var tn = t.isTextarea;
                var input = t.initCondition;
                var self = this;
                (0, socket["default"])(this, init);
                this._onPosUpdate = allBindingsAccessor;
                this._onStateChange = depMaps;
                this.state = {
                    minimize : false,
                    maximize : true,
                    editor : null,
                    show : false
                };
                /** @type {boolean} */
                this.max = true;
                this.windowEvents = {
                    /**
                     * @return {?}
                     */
                    paste : function() {
                        return self.debouncedUpdate();
                    },
                    /**
                     * @return {?}
                     */
                    resize : function() {
                        return self.update();
                    },
                    /**
                     * @return {undefined}
                     */
                    keyup : function() {
                        if (b.isFocused(self.fieldEl)) {
                            self.debouncedUpdate();
                        }
                    }
                };
                /**
                 * @return {undefined}
                 */
                this.checkResize = function() {
                    try {
                        if (self.position) {
                            var e = self.position.resize();
                            if (e) {
                                self.debouncedUpdate();
                            }
                        }
                    } catch (expectedHashCode) {
                        console.error(expectedHashCode);
                        core.cancelInterval(self.checkResize);
                    }
                };
                this.debouncedUpdate = _.debounce(function() {
                    return self.update();
                }, 50);
                /**
                 * @return {undefined}
                 */
                this.update = function() {
                    if (self.state.show && self.position) {
                        self._onPosUpdate({
                            visibility : "hidden"
                        });
                        self._onPosUpdate(self.position.get(self.max));
                        var el = self.state.editor;
                        if (el) {
                            var r20 = el.ghostarea ? el.ghostarea.gh.clone.firstChild : self.fieldEl;
                            var firstLength = el.getText().trim().length;
                            var def = self.minimizer && self.minimizer.getStateIfChanged(self.state, self.btnEl, r20, self.fieldEl, firstLength, self.max);
                            if ("undefined" !== typeof def) {
                                /** @type {boolean} */
                                self.max = "maximize" === def;
                                self._onStateChange();
                                self.update();
                            }
                        }
                    }
                };
                /**
                 * @return {undefined}
                 */
                this.remove = function() {
                    self.listeners("off");
                    /** @type {null} */
                    self.minimizer = null;
                    if (self.position) {
                        self.position.remove();
                    }
                    /** @type {null} */
                    self.position = null;
                };
                this.fieldEl = html;
                this.btnEl = sibling;
                this.max = input;
                /** @type {boolean} */
                this.state.minimize = !input;
                this.state.maximize = input;
                this.position = node.createPositioner(sibling, link, w, tn);
                this.minimizer = new Block.Minimizer;
                this.listeners();
            }
            return(0, elem["default"])(init, [{
                key : "set",
                /**
                 * @param {string} expectedHashCode
                 * @param {string} type
                 * @return {undefined}
                 */
                value : function(expectedHashCode, type) {
                    /** @type {string} */
                    this.state[expectedHashCode] = type;
                    this.update();
                }
            }, {
                key : "listeners",
                /**
                 * @return {undefined}
                 */
                value : function() {
                    var f = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "on";
                    if ("on" === f) {
                        Events.on(this.windowEvents, null, true);
                        b.on.call(this.fieldEl, "scroll", this.debouncedUpdate);
                        core.interval(this.checkResize, 200);
                    } else {
                        Events.off(this.windowEvents, null, true);
                        b.off.call(this.fieldEl, "scroll", this.debouncedUpdate);
                        core.cancelInterval(this.checkResize);
                    }
                }
            }]), init;
        }();
        expectedHashCode.Pos = newPos;
    }, {
        "./condition" : 199,
        "./position" : 202,
        "babel-runtime/helpers/classCallCheck" : 34,
        "babel-runtime/helpers/createClass" : 35,
        "lib/dom" : 215,
        "lib/util" : 322,
        "lib/window-events" : 323,
        lodash : "lodash"
    }],
    201 : [function(proceed, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} value
         * @return {?}
         */
        function lookupIterator(value) {
            return value && value.__esModule ? value : {
                "default" : value
            };
        }
        /**
         * @param {?} props
         * @param {string} clazz
         * @return {undefined}
         */
        function createElement(props, clazz) {
            /** @type {Element} */
            var node = document.createElement("div");
            /** @type {string} */
            node.className = clazz;
            /** @type {string} */
            node.style.top = props.top + "px";
            /** @type {string} */
            node.style.left = props.left + "px";
            /** @type {string} */
            node.style.height = props.height + "px";
            /** @type {string} */
            node.style.width = props.width + "px";
            /** @type {string} */
            node.style.position = "absolute";
            /** @type {string} */
            node.style.border = "1px dashed red";
            /** @type {string} */
            node.style.zIndex = "1000000";
            /** @type {string} */
            node.style.pointerEvents = "none";
            document.body.appendChild(node);
        }
        /**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        function render(a, b) {
            return a.left + a.width > b.left && (a.bottom > b.top && a.bottom < b.bottom || a.top < b.bottom && a.top > b.top);
        }
        /**
         * @param {Array} key
         * @param {?} options
         * @return {?}
         */
        function init(key, options) {
            /** @type {number} */
            var scrollTop = document.body.scrollTop;
            return propertyIsEnumerable && (0, iterator["default"])(document.querySelectorAll(".gr-evade")).forEach(function(t) {
                return t.parentElement && t.parentElement.removeChild(t);
            }), key.map(function(rect) {
                return{
                    top : rect.top + scrollTop,
                    bottom : rect.bottom + scrollTop,
                    left : rect.left,
                    width : rect.width,
                    height : rect.height
                };
            }).some(function(value) {
                return propertyIsEnumerable && createElement(value, "gr-evade"), render(value, options);
            });
        }
        /**
         * @param {Element} t
         * @param {HTMLElement} container
         * @return {?}
         */
        function update(t, container) {
            var distanceAway = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0;
            var layout = t.getBoundingClientRect();
            if (!layout) {
                return false;
            }
            layout = {
                top : layout.top + document.body.scrollTop - bounce + distanceAway,
                bottom : layout.bottom + document.body.scrollTop + bounce + distanceAway,
                left : layout.left - bounce + distanceAway,
                width : layout.width,
                height : layout.height
            };
            /** @type {(Range|null)} */
            var rng = document.createRange();
            rng.selectNodeContents(container);
            var width = container.clientWidth;
            var camelKey = (0, iterator["default"])(rng.getClientRects()).filter(function(q) {
                var l = q.width;
                return l < width;
            });
            return init(camelKey, layout);
        }
        var value = proceed("babel-runtime/core-js/array/from");
        var iterator = lookupIterator(value);
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        /** @type {boolean} */
        var propertyIsEnumerable = false;
        /** @type {number} */
        var bounce = 2;
        /** @type {function (Element, HTMLElement): ?} */
        expectedHashCode.getIntersect = update;
    }, {
        "babel-runtime/core-js/array/from" : 19
    }],
    202 : [function($, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} type
         * @return {?}
         */
        function String(type) {
            return type && type.__esModule ? type : {
                "default" : type
            };
        }
        /**
         * @param {string} expectedHashCode
         * @param {Object} _element
         * @return {?}
         */
        function create(expectedHashCode, _element) {
            /**
             * @return {?}
             */
            function resize() {
                var scrollPosition = self.getPos(_element, void 0);
                /** @type {boolean} */
                var n = scrollPosition.x !== roundedScrollPosition.x || scrollPosition.y !== roundedScrollPosition.y;
                return!(target.clientWidth === _element.clientWidth && (target.clientHeight === _element.clientHeight && !n)) && (roundedScrollPosition = scrollPosition, true);
            }
            /**
             * @return {undefined}
             */
            function update() {
                if (!E) {
                    target = (0, keys["default"])({
                        offsetHeight : _element.offsetHeight,
                        clientWidth : _element.clientWidth,
                        clientHeight : _element.clientHeight
                    }, proto.compStyle(_element, "border-bottom-width", "border-right-width", "resize", "padding-top", "padding-bottom", "overflowX", "overflow", "padding-right"), self.getAbsRect(_element));
                    target.canBeResized = ["both", "horizontal", "vertical"].includes(target.resize);
                    var iframeXY = self.getAbsRect(expectedHashCode);
                    var left = iframeXY.left;
                    var top = iframeXY.top;
                    target.left += openElement - left;
                    target.top += old - top;
                    if (!h) {
                        if (!("scroll" === target.overflowX)) {
                            if (!("scroll" === target.overflow)) {
                                /** @type {number} */
                                target.height = Math.max(target.height, target.offsetHeight);
                            }
                        }
                    }
                }
            }
            /**
             * @param {?} dataAndEvents
             * @return {?}
             */
            function clone(dataAndEvents) {
                if (dataAndEvents) {
                    return 0;
                }
                /** @type {number} */
                var charCodeToReplace = parseInt(target["padding-right"], 10);
                return charCodeToReplace > 0 ? -charCodeToReplace / 2 + 2 : -5;
            }
            /**
             * @param {boolean} dataAndEvents
             * @param {boolean} el
             * @return {?}
             */
            function create(dataAndEvents, el) {
                /** @type {number} */
                var bottom = dataAndEvents ? y1 : y2;
                return dataAndEvents ? el ? (bottom - target.height) / 2 : -8 : 0;
            }
            /**
             * @return {?}
             */
            function func() {
                var dataAndEvents = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
                var extraStyle = {
                    visibility : ""
                };
                if (m) {
                    return(0, keys["default"])(extraStyle, currentView.btnCustomStyles ? currentView.btnCustomStyles(dataAndEvents, _element) : {});
                }
                update();
                /** @type {number} */
                var end = !dataAndEvents && target.canBeResized ? -10 : 0;
                /** @type {boolean} */
                var failuresLink = target.clientHeight < scrollTop;
                var article = create(dataAndEvents, failuresLink) + clone(dataAndEvents);
                /** @type {number} */
                var type = dataAndEvents || failuresLink ? 0 : -7;
                /** @type {number} */
                var bottom = dataAndEvents ? y1 : y2;
                var tagSynonym = currentView.btnDiff ? currentView.btnDiff(_element) : [0, 0];
                var def = (0, h["default"])(tagSynonym, 2);
                var val = def[0];
                var name = def[1];
                var element = target.left + target.width - parseInt(target["border-right-width"], 10) - bottom + article + val;
                var expr = target.top + target.height - parseInt(target["border-bottom-width"], 10) - bottom + article + type + name + end;
                return element === openElement && expr === old ? extraStyle : ((0, keys["default"])(extraStyle, parsed ? (0, result["default"])({}, parsed, "translate(" + element + "px, " + expr + "px)") : {}), E = true, openElement = element, old = expr, extraStyle);
            }
            /**
             * @return {undefined}
             */
            function off() {
                proto.off.call(expectedHashCode, cycle, attributes);
            }
            var m = arguments.length > 2 && (void 0 !== arguments[2] && arguments[2]);
            var h = arguments.length > 3 && (void 0 !== arguments[3] && arguments[3]);
            /** @type {number} */
            var scrollTop = 25;
            var cycle = proto.transitionEndEventName();
            /** @type {number} */
            var y1 = 22;
            /** @type {number} */
            var y2 = 8;
            var html = expectedHashCode.ownerDocument;
            var parsed = proto.transformProp(html);
            var currentView = contents.pageStyles(html).getFixesForCurrentDomain();
            /** @type {boolean} */
            var E = false;
            var roundedScrollPosition = self.getPos(_element, void 0);
            var target = void 0;
            /** @type {number} */
            var openElement = 0;
            /** @type {number} */
            var old = 0;
            /**
             * @return {undefined}
             */
            var attributes = function() {
                /** @type {boolean} */
                E = false;
                update();
            };
            return proto.on.call(expectedHashCode, cycle, attributes), update(), {
                /** @type {function (): ?} */
                get : func,
                /** @type {function (): ?} */
                resize : resize,
                /** @type {function (): undefined} */
                remove : off
            };
        }
        var message = $("babel-runtime/helpers/defineProperty");
        var result = String(message);
        var html = $("babel-runtime/helpers/slicedToArray");
        var h = String(html);
        var obj = $("babel-runtime/core-js/object/assign");
        var keys = String(obj);
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var contents = $("lib/sites");
        var self = $("lib/position");
        var proto = $("lib/dom");
        /** @type {function (string, Object): ?} */
        expectedHashCode.createPositioner = create;
    }, {
        "babel-runtime/core-js/object/assign" : 24,
        "babel-runtime/helpers/defineProperty" : 36,
        "babel-runtime/helpers/slicedToArray" : 40,
        "lib/dom" : 215,
        "lib/position" : 289,
        "lib/sites" : 294
    }],
    203 : [function(require, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} d
         * @return {?}
         */
        function messageHandler(d) {
            return d && d.__esModule ? d : {
                "default" : d
            };
        }
        /**
         * @return {?}
         */
        function exports() {
            /**
             * @param {Node} elem
             * @param {HTMLElement} a
             * @return {?}
             */
            function handler(elem, a) {
                var rhtml = dom.pageStyles(elem.ownerDocument).getFixesForCurrentDomain();
                var err = rhtml.fieldStateForDomain && rhtml.fieldStateForDomain(elem);
                if (err) {
                    return err;
                }
                var forward = a && "IFRAME" === a.tagName;
                var e = forward ? a : elem;
                /** @type {Array.<*>} */
                var parts = [e.getAttribute("id") || "", e.getAttribute("name") || ""].filter(Boolean);
                return parts.length || parts.push(done(e)), forward && parts.push(a.ownerDocument.location.host || ""), parts.join(":");
            }
            /**
             * @param {Object} arg
             * @param {?} total
             * @return {?}
             */
            function done(arg, total) {
                return arg && (arg.id && !total) ? '//*[@id="' + arg.id + '"]' : add(arg);
            }
            /**
             * @param {Object} node
             * @return {?}
             */
            function add(node) {
                /** @type {Array} */
                var paths = [];
                for (;node && 1 === node.nodeType;node = node.parentNode) {
                    /** @type {number} */
                    var index = 0;
                    var tmp = node.previousSibling;
                    for (;tmp;tmp = tmp.previousSibling) {
                        if (tmp.nodeType !== Node.DOCUMENT_TYPE_NODE) {
                            if (tmp.nodeName === node.nodeName) {
                                ++index;
                            }
                        }
                    }
                    var tagName = node.nodeName.toLowerCase();
                    /** @type {string} */
                    var pathIndex = index ? "[" + (index + 1) + "]" : "";
                    paths.splice(0, 0, tagName + pathIndex);
                }
                return paths.length ? "/" + paths.join("/") : null;
            }
            /**
             * @param {Node} text
             * @param {undefined} value
             * @return {?}
             */
            function attr(text, value) {
                var key = handler(text, value);
                return escapes[key];
            }
            /**
             * @param {Node} text
             * @param {undefined} context
             * @param {boolean} event
             * @return {undefined}
             */
            function render(text, context, event) {
                var match = handler(text, context);
                if (escapes[match] !== event) {
                    template((0, conf["default"])({}, match, event));
                }
            }
            var escapes = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
            var template = arguments[1];
            return{
                /** @type {function (Node, HTMLElement): ?} */
                getSelector : handler,
                /** @type {function (Node, undefined): ?} */
                isFieldDisabled : attr,
                /** @type {function (Node, undefined, boolean): undefined} */
                changeFieldState : render
            };
        }
        var data = require("babel-runtime/helpers/defineProperty");
        var conf = messageHandler(data);
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var dom = require("../sites");
        /** @type {function (): ?} */
        expectedHashCode.State = exports;
    }, {
        "../sites" : 294,
        "babel-runtime/helpers/defineProperty" : 36
    }],
    204 : [function(require, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} value
         * @return {?}
         */
        function $(value) {
            return value && value.__esModule ? value : {
                "default" : value
            };
        }
        var nodes = require("babel-runtime/helpers/defineProperty");
        var result = $(nodes);
        var path = require("babel-runtime/core-js/object/get-prototype-of");
        var type = $(path);
        var selector = require("babel-runtime/helpers/classCallCheck");
        var elem = $(selector);
        var one = require("babel-runtime/helpers/createClass");
        var column = $(one);
        var header = require("babel-runtime/helpers/possibleConstructorReturn");
        var opts = $(header);
        var items = require("babel-runtime/helpers/inherits");
        var option = $(items);
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var V = require("lodash");
        var dom = require("react");
        var command = require("../dom");
        var assert = require("../util");
        var self = {
            textarea_btn : "_e725ae-textarea_btn",
            status : "_e725ae-status",
            field_hovered : "_e725ae-field_hovered",
            btn_text : "_e725ae-btn_text",
            not_focused : "_e725ae-not_focused",
            errors_100 : "_e725ae-errors_100",
            anonymous : "_e725ae-anonymous",
            show : "_e725ae-show",
            errors : "_e725ae-errors",
            checking : "_e725ae-checking",
            has_errors : "_e725ae-has_errors",
            disabled : "_e725ae-disabled",
            transform_wrap : "_e725ae-transform_wrap",
            offline : "_e725ae-offline",
            plus_only : "_e725ae-plus_only",
            minimized : "_e725ae-minimized",
            hovered : "_e725ae-hovered",
            minimize_transition : "_e725ae-minimize_transition"
        };
        var ButtonComponent = function(deepDataAndEvents) {
            /**
             * @return {?}
             */
            function value() {
                return(0, elem["default"])(this, value), (0, opts["default"])(this, (value.__proto__ || (0, type["default"])(value)).apply(this, arguments));
            }
            return(0, option["default"])(value, deepDataAndEvents), (0, column["default"])(value, [{
                key : "render",
                /**
                 * @return {?}
                 */
                value : function() {
                    var rreturn;
                    var me = this;
                    var options = this.props.state;
                    var which = options.anonymous;
                    var async = options.premium;
                    var r20 = options.errors.critical;
                    /** @type {boolean} */
                    var restoreScript = r20 > 0 && !options.checking;
                    /** @type {boolean} */
                    var udataCur = !options.enabled;
                    var stackStartFunction = options.offline;
                    var cls = V([self.textarea_btn]).push(command.cs((rreturn = {}, (0, result["default"])(rreturn, self.show, options.show), (0, result["default"])(rreturn, self.minimized, options.minimized), (0, result["default"])(rreturn, self.minimize_transition, options.wasMinimized), (0, result["default"])(rreturn, self.errors, restoreScript), (0, result["default"])(rreturn, self.has_errors, r20 > 0), (0, result["default"])(rreturn, self.errors_100, r20 > 99), (0, result["default"])(rreturn, self.offline,
                        stackStartFunction), (0, result["default"])(rreturn, self.checking, options.checking && (!stackStartFunction && !udataCur)), (0, result["default"])(rreturn, self.disabled, udataCur), (0, result["default"])(rreturn, self.plus_only, async && (!restoreScript && options.errors.plus > 0)), (0, result["default"])(rreturn, self.anonymous, which), (0, result["default"])(rreturn, self.hovered, options.hovered), (0, result["default"])(rreturn, self.field_hovered, options.isFieldHovered), (0, result["default"])(rreturn,
                        self.not_focused, !options.fieldWasFocused), rreturn))).join(" ");
                    var gstyle = command.camelizeAttrs(this.props.inlineStyle);
                    var MSG_VISUAL_EDITOR = restoreScript && r20 ? r20 : "\u00a0";
                    /** @type {string} */
                    var MSG_CLOSURE_CUSTOM_COLOR_BUTTON = "Found " + r20 + " " + assert.declension(r20, ["error", "errors"]) + " in text";
                    return r20 || (MSG_CLOSURE_CUSTOM_COLOR_BUTTON = "Protected by Grammarly"), dom.createElement("div", {
                        /**
                         * @param {string} expectedHashCode
                         * @return {?}
                         */
                        onClick : function(expectedHashCode) {
                            return me.props.onViewClick(expectedHashCode);
                        },
                        style : gstyle,
                        className : cls
                    }, dom.createElement("div", {
                        className : self.transform_wrap
                    }, dom.createElement("div", {
                        title : MSG_CLOSURE_CUSTOM_COLOR_BUTTON,
                        className : self.status
                    }, MSG_VISUAL_EDITOR)));
                }
            }]), value;
        }(dom.Component);
        expectedHashCode.ButtonComponent = ButtonComponent;
    }, {
        "../dom" : 215,
        "../util" : 322,
        "babel-runtime/core-js/object/get-prototype-of" : 28,
        "babel-runtime/helpers/classCallCheck" : 34,
        "babel-runtime/helpers/createClass" : 35,
        "babel-runtime/helpers/defineProperty" : 36,
        "babel-runtime/helpers/inherits" : 38,
        "babel-runtime/helpers/possibleConstructorReturn" : 39,
        lodash : "lodash",
        react : "react"
    }],
    205 : [function(require, dataAndEvents, expectedHashCode) {
        /**
         * @return {?}
         */
        function fix() {
            return helper.isFacebookSite() ? Block.facebookRewriteFunction : helper.isJiraSite() ? inspect.jiraRewriteFunction : helper.isBlackboardSite() ? nodes.blackboardRewriteFunction : null;
        }
        /**
         * @return {undefined}
         */
        function handler() {
            var restoreScript = fix();
            if (restoreScript) {
                update(document, restoreScript, []);
            }
        }
        /**
         * @param {Document} doc
         * @param {?} callback
         * @param {Array} time
         * @return {?}
         */
        function update(doc, callback, time) {
            var scriptEl = doc.createElement("script");
            time = time || [];
            var o = callback.toString();
            var i = time.join(",");
            return scriptEl.innerHTML = "(function(){(" + o + ")(" + i + ") })()", doc.documentElement.appendChild(scriptEl), scriptEl;
        }
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var helper = require("lib/location");
        var Block = require("./scripts/facebook");
        var inspect = require("./scripts/jira");
        var nodes = require("./scripts/blackboard");
        /** @type {function (): ?} */
        expectedHashCode.getClientScriptFunction = fix;
        /** @type {function (): undefined} */
        expectedHashCode.injectClientScriptIfNeeded = handler;
        /** @type {function (Document, ?, Array): ?} */
        expectedHashCode.addScript = update;
    }, {
        "./scripts/blackboard" : 207,
        "./scripts/facebook" : 208,
        "./scripts/jira" : 210,
        "lib/location" : 277
    }],
    206 : [function(require, dataAndEvents, expectedHashCode) {
        /**
         * @param {Node} elem
         * @return {?}
         */
        function handler(elem) {
            if ("TEXTAREA" !== elem.tagName) {
                try {
                    var d = elem.ownerDocument;
                    var n = filter.sanitize(elem.getAttribute("data-gramm_id"));
                    /** @type {string} */
                    var comment = "document.querySelector(\"[data-gramm_id='" + n + "']\")";
                    return assert.addScript(d, expect.rewriteInnerHTML, [comment]);
                } catch (reply) {
                    return void console.log("error rewrite " + reply);
                }
            }
        }
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var filter = require("dompurify");
        var assert = require("./index");
        var expect = require("./scripts/inner-html");
        /** @type {function (Node): ?} */
        expectedHashCode.rewriteInnerHTML = handler;
    }, {
        "./index" : 205,
        "./scripts/inner-html" : 209,
        dompurify : "dompurify"
    }],
    207 : [function(dataAndEvents, deepDataAndEvents, expectedHashCode) {
        /**
         * @return {undefined}
         */
        function init() {
            /**
             * @param {Object} el
             * @param {Function} callback
             * @return {?}
             */
            function next(el, callback) {
                var n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 10;
                if (el) {
                    for (;el && (el !== document.body && (!callback(el) && n > 0));) {
                        el = el.parentElement;
                        n--;
                    }
                    return el && callback(el);
                }
            }
            /**
             * @param {Object} e
             * @return {?}
             */
            function fn(e) {
                return next(e, function(horizontalSlide) {
                    return horizontalSlide.classList && horizontalSlide.classList.contains("editor-element");
                });
            }
            /**
             * @param {Object} el
             * @return {?}
             */
            function match(el) {
                return "function" === typeof el.matches && el.matches("grammarly-card, grammarly-card *, .gr-top-zero, .gr-top-zero *");
            }
            /**
             * @param {Element} elements
             * @param {Object} el
             * @return {undefined}
             */
            function hide(elements, el) {
                var login = el && el.getAttribute("data-action");
                if ("editor" !== login) {
                    if ("login" !== login) {
                        elements.focus();
                    }
                }
            }
            /**
             * @param {Object} e
             * @return {undefined}
             */
            function handleEvent(e) {
                var el = e.target;
                var failuresLink = e.relatedTarget || (e.explicitOriginalTarget || document.elementFromPoint(clientX, clientY));
                if (failuresLink) {
                    if (el) {
                        if (fn(el)) {
                            if (match(failuresLink)) {
                                e.stopImmediatePropagation();
                                hide(el, failuresLink);
                            }
                        }
                    }
                }
            }
            /** @type {number} */
            var clientX = 0;
            /** @type {number} */
            var clientY = 0;
            document.addEventListener("blur", handleEvent, true);
            document.addEventListener("DOMContentLoaded", function() {
                document.addEventListener("mousemove", function(event) {
                    /** @type {number} */
                    clientX = event.clientX;
                    /** @type {number} */
                    clientY = event.clientY;
                }, true);
            });
        }
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        /** @type {function (): undefined} */
        expectedHashCode.blackboardRewriteFunction = init;
    }, {}],
    208 : [function(dataAndEvents, deepDataAndEvents, expectedHashCode) {
        /**
         * @return {undefined}
         */
        function init() {
            /**
             * @param {?} attrs
             * @return {?}
             */
            function compile(attrs) {
                var e = {
                    target : document.activeElement,
                    _inherits_from_prototype : true,
                    defaultPrevented : false,
                    /**
                     * @return {undefined}
                     */
                    preventDefault : function() {
                    }
                };
                var attr;
                for (attr in attrs) {
                    e[attr] = attrs[attr];
                }
                return e;
            }
            /**
             * @param {string} eventName
             * @param {?} error
             * @return {undefined}
             */
            function listen(eventName, error) {
                var r = c[eventName];
                if (r) {
                    r.forEach(function(callback) {
                        callback(error);
                    });
                }
            }
            var c = {};
            document.addEventListener("document-paste-activeElement-gr", function(err) {
                listen("paste", compile({
                    clipboardData : {
                        /**
                         * @return {?}
                         */
                        getData : function() {
                            return err.detail || "";
                        },
                        items : ["text/plain"]
                    }
                }));
            });
            document.addEventListener("document-mousedown-mouseup-activeElement-gr", function() {
                listen("mousedown", compile({
                    type : "mousedown"
                }));
                listen("mouseup", compile({
                    type : "mouseup"
                }));
            });
            document.addEventListener("document-backspace-activeElement-gr", function() {
                listen("keydown", compile({
                    keyCode : 8,
                    which : 8,
                    charCode : 0,
                    type : "keydown"
                }));
            });
            var getObservers = document.addEventListener.bind(document);
            /**
             * @param {string} eventName
             * @param {(EventListener|function ((Event|null)): (boolean|undefined)|null)} listener
             * @param {boolean} recurring
             * @return {undefined}
             */
            document.addEventListener = function(eventName, listener, recurring) {
                var value = c[eventName] || [];
                value.push(listener);
                c[eventName] = value;
                getObservers(eventName, listener, recurring);
            };
        }
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        /** @type {function (): undefined} */
        expectedHashCode.facebookRewriteFunction = init;
    }, {}],
    209 : [function(dataAndEvents, deepDataAndEvents, expectedHashCode) {
        /**
         * @param {string} expectedHashCode
         * @return {undefined}
         */
        function promise(expectedHashCode) {
            /**
             * @param {Element} newNode
             * @return {undefined}
             */
            function replaceWith(newNode) {
                if (newNode.parentNode) {
                    if (newNode.childNodes.length > 1) {
                        /** @type {DocumentFragment} */
                        var docFrag = document.createDocumentFragment();
                        for (;newNode.childNodes.length > 0;) {
                            docFrag.appendChild(newNode.childNodes[0]);
                        }
                        newNode.parentNode.replaceChild(docFrag, newNode);
                    } else {
                        if (newNode.firstChild) {
                            newNode.parentNode.replaceChild(newNode.firstChild, newNode);
                        } else {
                            newNode.parentNode.removeChild(newNode);
                        }
                    }
                }
            }
            /**
             * @param {Element} context
             * @return {undefined}
             */
            function getAll(context) {
                if (context) {
                    try {
                        var classNames = context.querySelectorAll(".gr_");
                        var cnl = classNames.length;
                        /** @type {number} */
                        var x = 0;
                        for (;x < cnl;x++) {
                            replaceWith(classNames[x]);
                        }
                    } catch (i) {
                    }
                }
            }
            /**
             * @param {string} element
             * @return {undefined}
             */
            function resolve(element) {
                try {
                    Object.defineProperty(element, "innerHTML", {
                        /**
                         * @return {?}
                         */
                        get : function() {
                            try {
                                var range = element.ownerDocument.createRange();
                                range.selectNodeContents(element);
                                var label = range.cloneContents();
                                /** @type {Element} */
                                var clone = document.createElement("div");
                                return clone.appendChild(label), getAll(clone), clone.innerHTML;
                            } catch (i) {
                                return "";
                            }
                        },
                        /**
                         * @param {string} expectedHashCode
                         * @return {undefined}
                         */
                        set : function(expectedHashCode) {
                            try {
                                var range = element.ownerDocument.createRange();
                                range.selectNodeContents(element);
                                range.deleteContents();
                                var clone = range.createContextualFragment(expectedHashCode);
                                element.appendChild(clone);
                            } catch (o) {
                            }
                        }
                    });
                } catch (t) {
                }
            }
            if (expectedHashCode) {
                var cloneNode = expectedHashCode.cloneNode;
                /**
                 * @param {string} cycle
                 * @return {?}
                 */
                expectedHashCode.cloneNode = function(cycle) {
                    var clone = cloneNode.call(expectedHashCode, cycle);
                    if (expectedHashCode.classList.contains("mceContentBody")) {
                        clone.innerHTML = expectedHashCode.innerHTML;
                        getAll(clone);
                    } else {
                        try {
                            resolve(clone);
                        } catch (a) {
                        }
                    }
                    return clone;
                };
                resolve(expectedHashCode);
            }
        }
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        /** @type {function (string): undefined} */
        expectedHashCode.rewriteInnerHTML = promise;
    }, {}],
    210 : [function(dataAndEvents, deepDataAndEvents, expectedHashCode) {
        /**
         * @return {undefined}
         */
        function initialize() {
            /**
             * @param {string} extra
             * @return {undefined}
             */
            function trigger(extra) {
                var detail = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
                /** @type {(Event|null)} */
                var StoreEvent = document.createEvent("CustomEvent");
                StoreEvent.initCustomEvent(extra + "-gr", true, true, detail);
                document.dispatchEvent(StoreEvent);
            }
            /**
             * @param {Object} el
             * @param {Function} callback
             * @return {?}
             */
            function close(el, callback) {
                var n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 10;
                if (el) {
                    for (;el && (el !== document.body && (!callback(el) && n > 0));) {
                        el = el.parentElement;
                        n--;
                    }
                    return el && callback(el);
                }
            }
            /**
             * @param {Object} obj
             * @return {?}
             */
            function inspect(obj) {
                return close(obj, function(horizontalSlide) {
                    return horizontalSlide.classList && (horizontalSlide.classList.contains("inline-edit-fields") || horizontalSlide.classList.contains("editable-field"));
                });
            }
            /**
             * @param {Object} b
             * @return {?}
             */
            function find(b) {
                return "function" === typeof b.matches && b.matches("grammarly-card, grammarly-card *,.gr-top-zero, .gr-top-zero *,[class*=-gButtonPopup], [class*=-gButtonPopup] *,[class*=-onboardingDialog], [class*=-onboardingDialog] *");
            }
            /**
             * @param {Element} item
             * @param {Object} b
             * @return {undefined}
             */
            function hide(item, b) {
                var bup = b && b.getAttribute("data-action");
                if ("editor" !== bup) {
                    if ("login" !== bup) {
                        item.focus();
                    }
                }
            }
            /**
             * @param {Object} e
             * @return {undefined}
             */
            function handler(e) {
                var target = e.target;
                var oldconfig = e.relatedTarget || (e.explicitOriginalTarget || document.elementFromPoint(clientX, clientY));
                if (oldconfig) {
                    if (target) {
                        if (inspect(target)) {
                            if (find(oldconfig)) {
                                e.stopImmediatePropagation();
                                hide(target, oldconfig);
                            }
                        }
                    }
                }
            }
            /** @type {number} */
            var clientX = 0;
            /** @type {number} */
            var clientY = 0;
            document.addEventListener("blur", handler, true);
            document.addEventListener("DOMContentLoaded", function() {
                /**
                 * @return {?}
                 */
                function render() {
                    return "jira" === document.body.id && document.body.getAttribute("data-version") || document.querySelector("input[type=hidden][title=JiraVersion]");
                }
                if (render()) {
                    trigger("jira-inline-support", {
                        activated : true
                    });
                    document.addEventListener("mousemove", function(event) {
                        /** @type {number} */
                        clientX = event.clientX;
                        /** @type {number} */
                        clientY = event.clientY;
                    }, true);
                } else {
                    trigger("jira-inline-support", {
                        activated : false
                    });
                    document.removeEventListener("blur", handler, true);
                }
            });
        }
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        /** @type {function (): undefined} */
        expectedHashCode.jiraRewriteFunction = initialize;
    }, {}],
    211 : [function($, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} value
         * @return {?}
         */
        function h(value) {
            return value && value.__esModule ? value : {
                "default" : value
            };
        }
        var selector = $("babel-runtime/helpers/toConsumableArray");
        var elem = h(selector);
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var link = $("spark-md5");
        var sandbox = $("config");
        var self = $("./newConfig");
        expectedHashCode.isTestsMode = self.isTestsMode;
        expectedHashCode.getVersion = self.getVersion;
        expectedHashCode.getUuid = self.getUuid;
        expectedHashCode.ENV = self.ENV;
        expectedHashCode.URLS = self.URLS;
        expectedHashCode.GRAMMARLY_DOMAIN = self.GRAMMARLY_DOMAIN;
        expectedHashCode.appName = self.appName;
        expectedHashCode.gnarAppName = self.gnarAppName;
        expectedHashCode.GNAR = sandbox.getGlobal().appConfig.gnar;
        /** @type {Array} */
        expectedHashCode.news = ["The G logo gets out of the way when you're typing", "Switch between American and British English", "Quickly disable checking in certain types of text fields", "A fully redesigned and improved interface"];
        expectedHashCode.newsId = expectedHashCode.news.length && link.hash(expectedHashCode.news.join("\n"));
        /** @type {Array} */
        expectedHashCode.userFields = ["id", "email", "firstName", "anonymous", "type", "subscriptionFree", "experiments", "isTest", "premium", "settings", "registrationDate", "mimic", "groups", "extensionInstallDate", "fixed_errors", "referral"];
        expectedHashCode.userFields.push("token");
        /** @type {string} */
        expectedHashCode.nextVerClass = "gr_ver_2";
        /** @type {Array} */
        expectedHashCode.grammarlyAttrs = ["data-gramm_editor", "data-gramm", "data-gramm_id", "gramm_editor"];
        /** @type {Array} */
        expectedHashCode.restrictedAttrs = [].concat((0, elem["default"])(expectedHashCode.grammarlyAttrs), ["readonly", "disabled"]);
        /** @type {Array} */
        expectedHashCode.customFieldsRestrictedAttrs = ["pm-container", ["class", "ProseMirror"], "data-synchrony", ["data-gramm", "false"], ["class", "redactor-layer"], ["class", "redactor-editor"], ["class", "redactor_box"], ["aria-label", "Search Facebook"]];
        /** @type {Array} */
        expectedHashCode.allRestrictedAttrs = [].concat((0, elem["default"])(expectedHashCode.restrictedAttrs), (0, elem["default"])(expectedHashCode.customFieldsRestrictedAttrs));
        /** @type {string} */
        expectedHashCode.restrictedParentAttrs = "[data-reactid]";
        /** @type {Array} */
        expectedHashCode.externalEvents = ["changed-user", "changed-plan", "changed-dialect", "cleanup", "editor-fix", "enable-email-perception"];
        /** @type {boolean} */
        expectedHashCode.development = "127.0.0.1:3117" === document.location.host;
    }, {
        "./newConfig" : 279,
        "babel-runtime/helpers/toConsumableArray" : 41,
        config : 169,
        "spark-md5" : "spark-md5"
    }],
    212 : [function(require, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} type
         * @return {?}
         */
        function Event(type) {
            return type && type.__esModule ? type : {
                "default" : type
            };
        }
        /**
         * @return {undefined}
         */
        function subscribe() {
            var console = {
                log : config._f
            };
            methods.forEach(function(name) {
                console[name] = old[name];
            });
            scope.console = console;
        }
        /**
         * @return {undefined}
         */
        function bind() {
            nodes.on("bg-log", function(expectation) {
                var expectedHashCode;
                (expectedHashCode = console)[expectation.method].apply(expectedHashCode, ["BG LOG"].concat((0, c["default"])(expectation.args)));
            });
        }
        /**
         * @return {undefined}
         */
        function log() {
            bind();
            var console = {};
            methods.concat("log").forEach(function(name) {
                /**
                 * @return {undefined}
                 */
                console[name] = function() {
                    /** @type {number} */
                    var expectedHashCode = arguments.length;
                    /** @type {Array} */
                    var args = Array(expectedHashCode);
                    /** @type {number} */
                    var $_i = 0;
                    for (;$_i < expectedHashCode;$_i++) {
                        args[$_i] = arguments[$_i];
                    }
                    try {
                        canvasPath.push({
                            method : name,
                            args : args
                        });
                        old[name]((0, event["default"])(args));
                    } catch (o) {
                    }
                };
            });
            scope.console = console;
        }
        /**
         * @return {?}
         */
        function e() {
            /** @type {Array} */
            var e = canvasPath.concat();
            return canvasPath.length = 0, e;
        }
        var type = require("babel-runtime/core-js/json/stringify");
        var event = Event(type);
        var complete = require("babel-runtime/helpers/toConsumableArray");
        var c = Event(complete);
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var config = require("./util");
        var nodes = require("./message");
        /** @type {Array} */
        var methods = ["info", "warn", "error", "time", "timeEnd", "debug"];
        /** @type {Window} */
        var scope = window;
        /** @type {(Console|null)} */
        var old = console;
        /** @type {function (): undefined} */
        expectedHashCode.disableConsoleLog = subscribe;
        /** @type {Array} */
        var canvasPath = [];
        /** @type {function (): undefined} */
        expectedHashCode.setSeleniumCompatibility = log;
        /** @type {function (): ?} */
        expectedHashCode.flushLog = e;
    }, {
        "./message" : 278,
        "./util" : 322,
        "babel-runtime/core-js/json/stringify" : 22,
        "babel-runtime/helpers/toConsumableArray" : 41
    }],
    213 : [function(require, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} value
         * @return {?}
         */
        function walk(value) {
            return value && value.__esModule ? value : {
                "default" : value
            };
        }
        var ctor = require("babel-runtime/core-js/symbol");
        var t = walk(ctor);
        var nodes = require("babel-runtime/core-js/object/assign");
        var result = walk(nodes);
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var dojo = require("./dom");
        var event = require("./util");
        var element = require("./position");
        var flag = require("emitter");
        var dom = require("react");
        var common = require("./tracking");
        var should = require("react-dom");
        var filter = require("dompurify");
        var suite = require("./window-events");
        var defaults = require("./elements/tooltip");
        var child = require("./inline-cards/icons");
        var self = {
            container : "_c4f153-container",
            flip : "_c4f153-flip",
            flipSyn : "_c4f153-flipSyn",
            card : "_c4f153-card",
            bigTitle : "_c4f153-bigTitle",
            unknownWordTitle : "_c4f153-unknownWordTitle",
            btnDictLabelWithIcon : "_c4f153-btnDictLabelWithIcon",
            explanation : "_c4f153-explanation",
            replacement : "_c4f153-replacement",
            maxWidthReached : "_c4f153-maxWidthReached",
            item : "_c4f153-item",
            logoIcon : "_c4f153-logoIcon",
            ignoreIcon : "_c4f153-ignoreIcon",
            undoIcon : "_c4f153-undoIcon",
            dictionaryIcon : "_c4f153-dictionaryIcon",
            wikiIcon : "_c4f153-wikiIcon",
            footer : "_c4f153-footer",
            footerButton : "_c4f153-footerButton",
            btnIgnore : "_c4f153-btnIgnore",
            icon : "_c4f153-icon",
            btnLogo : "_c4f153-btnLogo",
            btnPersonalize : "_c4f153-btnPersonalize",
            personalizeMessage : "_c4f153-personalizeMessage",
            attn : "_c4f153-attn",
            cardAddedToDict : "_c4f153-cardAddedToDict",
            addedToDictTitle : "_c4f153-addedToDictTitle",
            dictionaryDescription : "_c4f153-dictionaryDescription",
            undo : "_c4f153-undo",
            dictLink : "_c4f153-dictLink",
            dictionaryAddedIcon : "_c4f153-dictionaryAddedIcon",
            synTitle : "_c4f153-synTitle",
            synList : "_c4f153-synList",
            synListSingle : "_c4f153-synListSingle",
            synListTitle : "_c4f153-synListTitle",
            synListNumber : "_c4f153-synListNumber",
            synSubitems : "_c4f153-synSubitems",
            synItem : "_c4f153-synItem",
            dict : "_c4f153-dict",
            dictContent : "_c4f153-dictContent",
            dictItemCounter : "_c4f153-dictItemCounter",
            dictItem : "_c4f153-dictItem",
            qualifier : "_c4f153-qualifier",
            dictFooterItem : "_c4f153-dictFooterItem",
            wikiLink : "_c4f153-wikiLink",
            wiki : "_c4f153-wiki",
            gr__tooltip_empty : "gr__tooltip_empty",
            gr__tooltip : "gr__tooltip",
            "gr-notfound-tooltip" : "gr-notfound-tooltip",
            "gr__tooltip-content" : "gr__tooltip-content",
            "gr__tooltip-logo" : "gr__tooltip-logo",
            gr__flipped : "gr__flipped"
        };
        expectedHashCode.DictionaryCard = dom.createClass({
            displayName : "DictionaryCard",
            /**
             * @return {?}
             */
            getDefaultProps : function() {
                return{
                    pos : {
                        rect : {
                            top : 0,
                            left : 0,
                            width : 0
                        },
                        sourceRect : {
                            width : 0
                        },
                        delta : {
                            right : 0
                        },
                        className : "",
                        visible : false
                    },
                    data : void 0,
                    visible : false
                };
            },
            /**
             * @return {?}
             */
            render : function() {
                var style = {};
                var obj = this.props.pos;
                style.top = obj.rect.top;
                style.left = obj.rect.left;
                /** @type {string} */
                style.visibility = this.props.visible ? "" : "hidden";
                var data = this.props.data;
                return dom.createElement("div", {
                    className : self.container,
                    style : style
                }, dom.createElement("div", {
                    tabIndex : -1,
                    className : dojo.cs(self.card, self.dict, obj.rect.flip && self.flip)
                }, dom.createElement("div", {
                    className : self.dictContent
                }, data.defs.map(function(requestUrl, subKey) {
                    var str = requestUrl.replace(/^([:,]\s)/, "");
                    return str = str[0].toUpperCase() + str.substring(1, str.length), dom.createElement("div", {
                        key : subKey,
                        className : dojo.cs(1 === data.defs.length ? self.dictSingle : self.dictItem)
                    }, data.defs.length > 1 && dom.createElement("span", {
                        className : self.dictItemCounter
                    }, subKey + 1, ". "), dom.createElement("span", {
                        dangerouslySetInnerHTML : {
                            __html : filter.sanitize(str)
                        }
                    }));
                })), dom.createElement("div", {
                    className : self.footer
                }, data.url && ("wiki" === data.origin && dom.createElement("div", {
                    className : dojo.cs(self.item, self.wiki)
                }, dom.createElement("a", {
                    href : encodeURI(data.url),
                    target : "_blank",
                    className : self.wikiLink
                }, dom.createElement(child.WikiIcon, {
                    className : dojo.cs(self.icon, self.wikiIcon)
                }), " More on Wikipedia"))), dom.createElement("div", {
                    className : dojo.cs(self.item, self.dictFooterItem)
                }, dom.createElement(child.LogoIcon, {
                    className : dojo.cs(self.icon, self.logoIcon)
                }), " Definitions by Grammarly"))));
            }
        });
        var Card = (0, result["default"])(function() {
            /**
             * @param {?} str
             * @return {?}
             */
            function initialize(str) {
                container.innerHTML = filter.sanitize(str);
                var wrap = container.querySelector("span.qualifier");
                return wrap ? (wrap.innerHTML = wrap.innerHTML.replace("(", "").replace(")", ""), wrap.className = self.qualifier, container.innerHTML) : str;
            }
            /**
             * @param {string} text
             * @return {?}
             */
            function trim(text) {
                return text.replace(/&lt;(sup|sub)&gt;(.*?)&lt;(\/sup|\/sub)&gt;/, "<$1>$2<$3>").replace(/&amp;(?=\w{1,8};)/, "&");
            }
            /**
             * @param {Object} type
             * @param {Object} player
             * @return {undefined}
             */
            function init(type, player) {
                var activeClassName = {
                    ownerDocument : doc,
                    /**
                     * @return {?}
                     */
                    getBoundingClientRect : function() {
                        return player.pos;
                    },
                    /**
                     * @return {?}
                     */
                    getClientRects : function() {
                        return[player.pos];
                    }
                };
                if (data = type, data.defs && data.defs.length) {
                    var offset = element.getAbsRect(activeClassName);
                    data.title = player.el.toString();
                    data.defs = data.defs.splice(0, 3).map(initialize).map(trim);
                    e = inject(false);
                    node = should.findDOMNode(e.component);
                    pos = element.posToRect(node, offset);
                    inject();
                } else {
                    button.enable();
                    button.show({
                        posEl : player.el,
                        text : "No definition found"
                    });
                }
                suite.on(cycle, null, true);
                common.logger.dictCardShowAction();
            }
            /**
             * @return {?}
             */
            function inject() {
                var visible = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
                return dojo.renderReactWithParent(dom.createElement(expectedHashCode.DictionaryCard, {
                    pos : pos,
                    data : data,
                    visible : visible
                }), doc.documentElement, failuresLink, "grammarly-card");
            }
            /**
             * @return {undefined}
             */
            function hide() {
                if (e) {
                    e.remove();
                }
                suite.off(cycle, null, true);
                obj.emit("hide");
                button.disable();
                button.hide();
                /** @type {null} */
                e = null;
                common.logger.dictCardHideAction();
            }
            /**
             * @param {string} expectedHashCode
             * @return {undefined}
             */
            function handler(expectedHashCode) {
                if (27 === event.keyCode(expectedHashCode)) {
                    hide();
                }
            }
            /**
             * @param {(Object|string)} evt
             * @return {undefined}
             */
            function callback(evt) {
                if ("dictionary-card" !== document.body.className) {
                    if (!dojo.inEl(evt.target, node)) {
                        hide();
                    }
                }
            }
            var doc = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : document;
            var container = doc.createElement("div");
            var failuresLink = (0, t["default"])("DictionaryCard");
            var button = defaults.createTooltip({
                cls : dojo.cs("gr-notfound-tooltip", self.gr__tooltip_empty),
                enabled : false,
                doc : doc
            });
            var e = void 0;
            var node = void 0;
            var data = void 0;
            var pos = void 0;
            var cycle = {
                /** @type {function ((Object|string)): undefined} */
                click : callback,
                /** @type {function (string): undefined} */
                keydown : handler,
                /** @type {function (): undefined} */
                scroll : hide,
                /** @type {function (): undefined} */
                resize : hide
            };
            var obj = flag({
                /** @type {function (Object, Object): undefined} */
                show : init,
                /** @type {function (): undefined} */
                hide : hide,
                /** @type {function (string): ?} */
                unescapeSuperscript : trim
            });
            return obj;
        }, {
            component : expectedHashCode.DictionaryCard
        });
        expectedHashCode.Card = Card;
    }, {
        "./dom" : 215,
        "./elements/tooltip" : 247,
        "./inline-cards/icons" : 266,
        "./position" : 289,
        "./tracking" : 307,
        "./util" : 322,
        "./window-events" : 323,
        "babel-runtime/core-js/object/assign" : 24,
        "babel-runtime/core-js/symbol" : 32,
        dompurify : "dompurify",
        emitter : "emitter",
        react : "react",
        "react-dom" : "react-dom"
    }],
    214 : [function(require, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} type
         * @return {?}
         */
        function $(type) {
            return type && type.__esModule ? type : {
                "default" : type
            };
        }
        /**
         * @param {Object} event
         * @return {?}
         */
        function success(event) {
            /**
             * @return {undefined}
             */
            function clear() {
                if (elem) {
                    elem.release();
                }
                /** @type {null} */
                elem = null;
                /** @type {null} */
                doneResults = null;
            }
            /**
             * @param {Object} data
             * @return {?}
             */
            function setup(data) {
                return setup(this, void 0, void 0, result["default"].mark(function end() {
                    var templateName;
                    var e;
                    return result["default"].wrap(function(self) {
                        for (;;) {
                            switch(self.prev = self.next) {
                                case 0:
                                    if (templateName = !!data.el.startContainer && utils.matchesSelector(data.el.startContainer.parentNode, ".gr-grammar-card, .gr-grammar-card *, .gr-dictionary-card, .gr-dictionary-card *"), !templateName || template) {
                                        /** @type {number} */
                                        self.next = 3;
                                        break;
                                    }
                                    return self.abrupt("return");
                                case 3:
                                    return keyframe = "gr-selection-anim-dict " + Block.nextVerClass, me.animate(data.el, keyframe), doneResults = data, e = {}, self.prev = 7, self.next = 10, app.fetch(Block.URLS.dictionary, {
                                        data : (0, update["default"])({}, data.data)
                                    });
                                case 10:
                                    if (e = self.sent, doneResults === data) {
                                        /** @type {number} */
                                        self.next = 13;
                                        break;
                                    }
                                    return self.abrupt("return");
                                case 13:
                                    /** @type {number} */
                                    self.next = 18;
                                    break;
                                case 15:
                                    /** @type {number} */
                                    self.prev = 15;
                                    self.t0 = self["catch"](7);
                                    common.logger.fetchDefinitionsFail();
                                case 18:
                                    me.complete();
                                    el.show(e, data);
                                    if (templateName) {
                                        me.remove();
                                    }
                                    ;
                                case 21:
                                    ;
                                case "end":
                                    return self.stop();
                            }
                        }
                    }, end, this, [[7, 15]]);
                }));
            }
            var doc = event.doc;
            var template = event.cardInspection;
            var me = new core.SelectionAnimator(doc);
            var el = should.Card(doc);
            var doneResults = void 0;
            var elem = new dom.SelectionElement(doc, setup, me.remove);
            var keyframe = void 0;
            return el.on("hide", me.remove), assert({
                /** @type {function (): undefined} */
                clear : clear
            });
        }
        var nodes = require("babel-runtime/regenerator");
        var result = $(nodes);
        var helper = require("babel-runtime/core-js/object/assign");
        var update = $(helper);
        var selector = require("babel-runtime/core-js/promise");
        var elem = $(selector);
        /**
         * @param {string} expectedHashCode
         * @param {Array} args
         * @param {(Element|string)} opt_attributes
         * @param {Text} fn
         * @return {?}
         */
        var setup = function(expectedHashCode, args, opt_attributes, fn) {
            return new (opt_attributes || (opt_attributes = elem["default"]))(function(success, done) {
                /**
                 * @param {string} expectedHashCode
                 * @return {undefined}
                 */
                function handler(expectedHashCode) {
                    try {
                        next(fn.next(expectedHashCode));
                    } catch (err) {
                        done(err);
                    }
                }
                /**
                 * @param {?} data
                 * @return {undefined}
                 */
                function loop(data) {
                    try {
                        next(fn["throw"](data));
                    } catch (err) {
                        done(err);
                    }
                }
                /**
                 * @param {Object} event
                 * @return {undefined}
                 */
                function next(event) {
                    if (event.done) {
                        success(event.value);
                    } else {
                        (new opt_attributes(function(f) {
                            f(event.value);
                        })).then(handler, loop);
                    }
                }
                next((fn = fn.apply(expectedHashCode, args || [])).next());
            });
        };
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var assert = require("emitter");
        var common = require("./tracking");
        var app = require("./request");
        var dom = require("./selection");
        var utils = require("./dom");
        var Block = require("./config");
        var should = require("./dictionary-card");
        var core = require("./selection-animator");
        /** @type {function (Object): ?} */
        expectedHashCode.dictionary = success;
    }, {
        "./config" : 211,
        "./dictionary-card" : 213,
        "./dom" : 215,
        "./request" : 291,
        "./selection" : 293,
        "./selection-animator" : 292,
        "./tracking" : 307,
        "babel-runtime/core-js/object/assign" : 24,
        "babel-runtime/core-js/promise" : 31,
        "babel-runtime/regenerator" : 43,
        emitter : "emitter"
    }],
    215 : [function(require, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} node
         * @return {?}
         */
        function walk(node) {
            return node && node.__esModule ? node : {
                "default" : node
            };
        }
        /**
         * @param {string} js
         * @param {(Function|string)} root
         * @return {?}
         */
        function highlight(js, root) {
            var tempDiv = (root || document).createElement("div");
            return tempDiv.innerHTML = filter.sanitize(js.trim()), tempDiv.firstElementChild;
        }
        /**
         * @param {Object} type
         * @param {HTMLElement} global
         * @param {string} el
         * @return {?}
         */
        function init(type, global, el) {
            var name = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : "div";
            /** @type {HTMLElement} */
            var root = global;
            var self = root[el] = root[el] || {};
            if (!self.el) {
                self.el = root.ownerDocument.createElement(name);
                root.appendChild(self.el);
            }
            var o = t.render(type, self.el);
            return null === self.remove && (self.remove = function() {
                delete root[el];
                root.removeChild(self.el);
                t.unmountComponentAtNode(self.el);
            }), {
                component : o,
                remove : self.remove.bind(self),
                el : self.el
            };
        }
        /**
         * @param {number} e
         * @param {number} id
         * @return {?}
         */
        function enter(e, id) {
            var padLength = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 1E3;
            /** @type {number} */
            var i = 0;
            /** @type {number} */
            var a = e;
            for (;a.parentNode && i < padLength;) {
                if ("string" !== typeof id && id === a) {
                    return true;
                }
                if (a.id === id || a === id) {
                    return true;
                }
                a = a.parentNode;
            }
            return false;
        }
        /**
         * @param {?} node
         * @param {string} selector
         * @return {?}
         */
        function hasClass(node, selector) {
            return!(!node || void 0 === node.className) && node.classList.contains(selector);
        }
        /**
         * @param {?} node
         * @param {Object} attributes
         * @return {?}
         */
        function make(node, attributes) {
            if (node && node.classList) {
                return node.classList.remove(attributes);
            }
        }
        /**
         * @param {?} element
         * @param {string} name
         * @return {?}
         */
        function addClass(element, name) {
            if (element) {
                if (name.indexOf(" ") === -1) {
                    return element.classList.add(name);
                }
                var codeSegments = name.split(" ");
                /** @type {number} */
                var i = 0;
                for (;i < codeSegments.length;i++) {
                    element.classList.add(codeSegments[i]);
                }
            }
        }
        /**
         * @param {?} el
         * @param {boolean} id
         * @param {string} str
         * @return {undefined}
         */
        function text(el, id, str) {
            if (id) {
                addClass(el, str);
            } else {
                make(el, str);
            }
        }
        /**
         * @param {Node} node
         * @param {string} selector
         * @return {?}
         */
        function query(node, selector) {
            var pn = node.parentNode;
            for (;null !== pn;) {
                if (matchesSelector(pn, selector)) {
                    return pn;
                }
                pn = pn.parentNode;
            }
            return false;
        }
        /**
         * @param {Node} element
         * @return {?}
         */
        function getOffsetParent(element) {
            var parent = element.parentNode;
            for (;null !== parent;) {
                if (getContentEditable(parent)) {
                    return parent;
                }
                parent = parent.parentNode;
            }
            return false;
        }
        /**
         * @param {?} node
         * @return {?}
         */
        function getContentEditable(node) {
            return "true" === node.contentEditable || "plaintext-only" === node.contentEditable;
        }
        /**
         * @param {string} expectedHashCode
         * @param {string} node
         * @return {?}
         */
        function matchesSelector(expectedHashCode, node) {
            if (!expectedHashCode) {
                return false;
            }
            var reader = expectedHashCode.matches || (expectedHashCode.msMatchesSelector || (expectedHashCode.matchesSelector || (expectedHashCode.webkitMatchesSelector || expectedHashCode.mozMatchesSelector)));
            return!!reader && reader.apply(expectedHashCode, [node]);
        }
        /**
         * @param {number} el
         * @return {?}
         */
        function addOffset(el) {
            return document.activeElement && "IFRAME" === document.activeElement.tagName ? el === el.ownerDocument.activeElement : document.activeElement && "BODY" === document.activeElement.tagName ? el === document.activeElement : el === document.activeElement;
        }
        /**
         * @param {string} expectedHashCode
         * @param {string} type
         * @param {?} opt_attributes
         * @param {boolean} recurring
         * @return {?}
         */
        function initialize(expectedHashCode, type, opt_attributes, recurring) {
            var bubble = arguments.length > 4 && (void 0 !== arguments[4] && arguments[4]);
            if (null !== expectedHashCode) {
                /** @type {string} */
                var el = expectedHashCode;
                if ("string" !== typeof type) {
                    return _.each(type, function(attributes, cycle) {
                        initialize(el, cycle, attributes, recurring);
                    });
                }
                if (opt_attributes) {
                    var dd = el[id] || [];
                    return el[id] = dd, recurring ? (el[id] = dd.filter(function(o) {
                        return!(o.event === type && o.cb === opt_attributes);
                    }), el.removeEventListener(type, opt_attributes, bubble)) : (dd.push({
                        event : type,
                        cb : opt_attributes
                    }), el.addEventListener(type, opt_attributes, bubble)), {
                        el : el,
                        event : type,
                        cb : opt_attributes,
                        bubble : bubble
                    };
                }
            }
        }
        /**
         * @param {?} element
         * @param {string} cycle
         * @param {Function} attributes
         * @param {boolean} node
         * @return {undefined}
         */
        function constructor(element, cycle, attributes, node) {
            var expectedHashCode = element;
            if (cycle || null === expectedHashCode[id]) {
                initialize(expectedHashCode, cycle, attributes, true, node);
            } else {
                expectedHashCode[id].forEach(function(handler) {
                    return constructor(expectedHashCode, handler.event, handler.cb, handler.bubble);
                });
            }
        }
        /**
         * @param {string} type
         * @param {Function} opt_attributes
         * @param {boolean} recurring
         * @return {?}
         */
        function setup(type, opt_attributes, recurring) {
            var expectedHashCode = this;
            return this.addEventListener(type, opt_attributes, recurring), {
                /**
                 * @return {?}
                 */
                off : function() {
                    return removeEvent.apply(expectedHashCode, [type, opt_attributes, recurring]);
                }
            };
        }
        /**
         * @param {string} type
         * @param {Function} opt_attributes
         * @param {boolean} deepDataAndEvents
         * @return {undefined}
         */
        function removeEvent(type, opt_attributes, deepDataAndEvents) {
            this.removeEventListener(type, opt_attributes, deepDataAndEvents);
        }
        /**
         * @param {string} cycle
         * @param {Function} opt_attributes
         * @return {undefined}
         */
        function once(cycle, opt_attributes) {
            var expectedHashCode = this;
            /**
             * @param {?} currentValue
             * @return {undefined}
             */
            var attributes = function attributes(currentValue) {
                opt_attributes(currentValue);
                removeEvent.call(expectedHashCode, cycle, attributes);
            };
            setup.call(this, cycle, attributes);
        }
        /**
         * @param {string} type
         * @param {Function} opt_attributes
         * @return {undefined}
         */
        function trigger(type, opt_attributes) {
            /** @type {(Event|null)} */
            var event = document.createEvent("CustomEvent");
            event.initCustomEvent(type, true, true, opt_attributes);
            this.dispatchEvent(event);
        }
        /**
         * @param {Element} node
         * @return {?}
         */
        function find_text_nodes_helper(node) {
            var style = getComputedStyle(node, void 0);
            return "none" !== style.getPropertyValue("display") && ("hidden" !== style.getPropertyValue("visibility") && node.clientHeight > 0);
        }
        /**
         * @return {?}
         */
        function get() {
            /** @type {number} */
            var expectedHashCode = arguments.length;
            /** @type {Array} */
            var args = Array(expectedHashCode);
            /** @type {number} */
            var $_i = 0;
            for (;$_i < expectedHashCode;$_i++) {
                args[$_i] = arguments[$_i];
            }
            return args.reduce(function(flat, el) {
                return flat.concat(_.isObject(el) ? (0, type["default"])(el).filter(function(methodname) {
                    return el[methodname];
                }) : el);
            }, []).filter(function(retval) {
                return Boolean(retval);
            }).join(" ");
        }
        /**
         * @param {string} name
         * @param {number} value
         * @return {?}
         */
        function maybeAddPx(name, value) {
            return "number" !== typeof value || cssNumber[dasherize(name)] ? value : value + "px";
        }
        /**
         * @param {string} str
         * @return {?}
         */
        function camelize(str) {
            return str.replace(/-+(.)?/g, function(dataAndEvents, chr) {
                return chr ? chr.toUpperCase() : "";
            });
        }
        /**
         * @param {?} str
         * @return {?}
         */
        function encode(str) {
            return _.transform(str, function(computed, dataAndEvents, property) {
                return computed[camelize(property)] = dataAndEvents;
            });
        }
        /**
         * @param {string} str
         * @return {?}
         */
        function dasherize(str) {
            return str.replace(/::/g, "/").replace(/([A-Z]+)([A-Z][a-z])/g, "$1_$2").replace(/([a-z\d])([A-Z])/g, "$1_$2").replace(/_/g, "-").toLowerCase();
        }
        /**
         * @param {Object} element
         * @param {string} expectedHashCode
         * @param {boolean} value
         * @return {?}
         */
        function css(element, expectedHashCode, value) {
            if (arguments.length < 3) {
                /** @type {Object} */
                var el = element;
                if (!el) {
                    return;
                }
                var computed = getComputedStyle(el, "");
                if ("string" === typeof expectedHashCode) {
                    return el.style[camelize(expectedHashCode)] || computed.getPropertyValue(expectedHashCode);
                }
                if (_.isArray(expectedHashCode)) {
                    var ret = {};
                    return _.each(expectedHashCode, function(prop, dataAndEvents) {
                        ret[camelize(prop)] = el.style[camelize(prop)] || computed.getPropertyValue(prop);
                    }), ret;
                }
            }
            /** @type {string} */
            var cssText = "";
            if (_.isString(expectedHashCode)) {
                if (value || 0 === value) {
                    /** @type {string} */
                    cssText = dasherize(expectedHashCode) + ":" + maybeAddPx(expectedHashCode, value);
                } else {
                    element.style.removeProperty(dasherize(expectedHashCode));
                }
            } else {
                /** @type {string} */
                expectedHashCode = expectedHashCode;
                var key;
                for (key in expectedHashCode) {
                    if (expectedHashCode[key] || 0 === expectedHashCode[key]) {
                        cssText += dasherize(key) + ":" + maybeAddPx(key, expectedHashCode[key]) + ";";
                    } else {
                        element.style.removeProperty(dasherize(key));
                    }
                }
            }
            return element.style.cssText += ";" + cssText;
        }
        /**
         * @param {boolean} element
         * @param {string} cb
         * @return {?}
         */
        function on(element, cb) {
            if (cb && element) {
                var width = css(element, (0, type["default"])(cb));
                return css(element, cb), function() {
                    return css(element, width);
                };
            }
        }
        /**
         * @param {Node} node
         * @param {string} tagName
         * @return {?}
         */
        function visit(node, tagName) {
            var pn = node.parentNode;
            for (;null !== pn;) {
                if (pn.tagName === tagName) {
                    return pn;
                }
                pn = pn.parentNode;
            }
            return null;
        }
        /**
         * @param {Node} block
         * @param {string} key
         * @param {string} value
         * @return {?}
         */
        function add(block, key, value) {
            var element = block.parentNode;
            for (;null !== element;) {
                if (element.dataset && (element.dataset[key] && element.dataset[key] === value)) {
                    return element;
                }
                element = element.parentNode;
            }
        }
        /**
         * @param {Element} el
         * @param {string} selector
         * @return {?}
         */
        function is(el, selector) {
            return hasClass(el, selector) ? el : fn(el, selector);
        }
        /**
         * @param {Element} el
         * @param {string} sel
         * @return {?}
         */
        function fn(el, sel) {
            var parent = el.parentNode;
            for (;null !== parent;) {
                if (hasClass(parent, sel)) {
                    return parent;
                }
                parent = parent.parentNode;
            }
            return false;
        }
        /**
         * @param {Object} parent
         * @param {string} className
         * @return {?}
         */
        function set(parent, className) {
            if (!parent) {
                return false;
            }
            /** @type {Object} */
            var node = parent;
            for (;node.parentNode;) {
                if (hasClass(node, className)) {
                    return node;
                }
                node = node.parentNode;
            }
            return false;
        }
        /**
         * @return {?}
         */
        function _forEach() {
            var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 1;
            return e ? _forEach.call(this.parentNode, --e) : this;
        }
        /**
         * @param {number} dataAndEvents
         * @param {number} a
         * @return {?}
         */
        function clone(dataAndEvents, a) {
            if (!dataAndEvents) {
                return false;
            }
            /** @type {number} */
            var b = dataAndEvents;
            for (;b.parentNode;) {
                if (a === b.parentNode) {
                    return b;
                }
                b = b.parentNode;
            }
            return false;
        }
        /**
         * @param {?} elem
         * @param {Element} node
         * @return {undefined}
         */
        function next(elem, node) {
            var parent = node.parentNode;
            if (null === parent) {
                throw new util.AssertionError("Expected non-null parent");
            }
            if (parent.lastChild === node) {
                parent.appendChild(elem);
            } else {
                parent.insertBefore(elem, node.nextSibling);
            }
        }
        /**
         * @param {?} b
         * @param {Node} target
         * @return {undefined}
         */
        function insertBefore(b, target) {
            util.assertNonNull(target.parentNode, "parent node").insertBefore(b, target);
        }
        /**
         * @param {?} element
         * @param {(Function|string)} doc
         * @return {?}
         */
        function push(element, doc) {
            doc = doc || document;
            var target = element;
            for (;target;) {
                if (target === doc) {
                    return true;
                }
                target = target.parentNode;
            }
            return false;
        }
        /**
         * @param {Object} event
         * @return {undefined}
         */
        function simulateKeyEvent(event) {
            var evt = void 0;
            var win = void 0;
            var attributes = {
                ctrl : false,
                meta : false,
                shift : false,
                alt : false
            };
            var e = _.extend(attributes, event);
            try {
                evt = e.el.ownerDocument.createEvent("KeyEvents");
                win = e.el.ownerDocument.defaultView;
                evt.initKeyEvent(e.type, true, true, win, e.ctrl, e.alt, e.shift, e.meta, 0, 0);
            } catch (i) {
                evt = e.el.ownerDocument.createEvent("UIEvents");
                evt.initUIEvent.bind(evt)(void 0, true, true, window, 1);
                /** @type {number} */
                evt.keyCode = 0;
                /** @type {number} */
                evt.which = 0;
                /** @type {number} */
                evt.charCode = 0;
                evt.ctrlKey = e.ctrl;
                evt.altKey = e.alt;
                evt.shiftKey = e.shift;
                evt.metaKey = e.meta;
            }
            e.el.dispatchEvent(evt);
        }
        /**
         * @param {Object} value
         * @return {?}
         */
        function isPageHidden(value) {
            return "undefined" !== typeof value.hidden ? value.hidden : "undefined" !== typeof value.mozHidden ? value.mozHidden : "undefined" !== typeof value.webkitHidden ? value.webkitHidden : "undefined" !== typeof value.msHidden && value.msHidden;
        }
        /**
         * @param {Object} o
         * @return {?}
         */
        function _pageVisibility(o) {
            return "undefined" !== typeof o.hidden ? "visibilitychange" : "undefined" !== typeof o.mozHidden ? "mozvisibilitychange" : "undefined" !== typeof o.webkitHidden ? "webkitvisibilitychange" : "undefined" !== typeof o.msHidden && "msvisibilitychange";
        }
        /**
         * @return {?}
         */
        function transform() {
            var target = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : document;
            return "undefined" !== typeof target.body.style.transform ? "transform" : "undefined" !== typeof target.body.style.WebkitTransform ? "WebkitTransform" : "undefined" !== typeof target.body.style.MozTransform ? "MozTransform" : void 0;
        }
        /**
         * @param {?} doc
         * @return {?}
         */
        function update(doc) {
            return doc.getSelection() || {};
        }
        /**
         * @param {Node} element
         * @return {?}
         */
        function style(element) {
            if (element) {
                var doc = element.ownerDocument;
                if (doc) {
                    var parent = doc.defaultView || window;
                    if (parent) {
                        var classes = parent.getComputedStyle(element, void 0);
                        if (classes) {
                            /** @type {number} */
                            var len = arguments.length;
                            /** @type {Array} */
                            var args = Array(len > 1 ? len - 1 : 0);
                            /** @type {number} */
                            var i = 1;
                            for (;i < len;i++) {
                                args[i - 1] = arguments[i];
                            }
                            return 1 === args.length ? classes.getPropertyValue(args[0]) : args.reduce(function(deepDataAndEvents, prop) {
                                return(0, result["default"])({}, deepDataAndEvents, (0, ret["default"])({}, prop, classes.getPropertyValue(prop)));
                            }, {});
                        }
                    }
                }
            }
        }
        /**
         * @param {string} str
         * @return {?}
         */
        function rethrow(str) {
            return str.split(" ").map(function(dataAndEvents) {
                return "." !== dataAndEvents[0] ? "." + dataAndEvents : dataAndEvents;
            }).join("").trim();
        }
        /**
         * @param {string} paths
         * @return {?}
         */
        function flatten(paths) {
            /** @type {number} */
            var len = arguments.length;
            /** @type {Array} */
            var args = Array(len > 1 ? len - 1 : 0);
            /** @type {number} */
            var i = 1;
            for (;i < len;i++) {
                args[i - 1] = arguments[i];
            }
            if (args.length > 0) {
                /** @type {Array} */
                var rulesets = [];
                return rulesets.push(flatten(paths)), args.forEach(function(paths) {
                    return rulesets.push(flatten(paths));
                }), rulesets.join(", ");
            }
            return paths = paths.split(", ").map(function(dataAndEvents) {
                return "." !== dataAndEvents[0] ? "." + dataAndEvents : dataAndEvents;
            }).join(", ").trim(), paths + ", " + paths + " *";
        }
        /**
         * @return {?}
         */
        function getBrowser() {
            /** @type {Element} */
            var el = document.createElement("fakeelement");
            var testSource = {
                animation : "animationend",
                MozAnimation : "animationend",
                WebkitAnimation : "webkitAnimationEnd"
            };
            var name;
            for (name in testSource) {
                if (void 0 !== el.style[name]) {
                    return testSource[name];
                }
            }
        }
        /**
         * @return {?}
         */
        function getTransitionEvent() {
            /** @type {Element} */
            var el = document.createElement("fakeelement");
            var transitions = {
                transition : "transitionend",
                MozTransition : "transitionend",
                WebkitTransition : "webkitTransitionEnd"
            };
            var t;
            for (t in transitions) {
                if (transitions.hasOwnProperty(t) && void 0 !== el.style[t]) {
                    return transitions[t];
                }
            }
        }
        /**
         * @param {Document} d
         * @return {undefined}
         */
        function load(d) {
            if ("undefined" !== typeof window.GR_INLINE_STYLES) {
                var target = d.createElement("style");
                target.innerHTML = window.GR_INLINE_STYLES;
                try {
                    d.querySelector("head").appendChild(target);
                } catch (cycle) {
                    console.log("can't append style", cycle);
                }
            }
        }
        /**
         * @param {Element} element
         * @param {string} value
         * @return {undefined}
         */
        function hidePlaceholder(element, value) {
            element.setAttribute("data-gramm_id", value);
            element.setAttribute("data-gramm", "true");
        }
        /**
         * @param {string} name
         * @return {undefined}
         */
        function dispatchEvent(name) {
            var detail = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
            /** @type {(Event|null)} */
            var e = document.createEvent("CustomEvent");
            e.initCustomEvent(name + "-gr", true, true, detail);
            document.dispatchEvent(e);
        }
        /**
         * @param {?} n
         * @param {?} range
         * @return {undefined}
         */
        function removeRangeManually(n, range) {
            var selection = n.getSelection();
            selection.removeAllRanges();
            selection.addRange(range);
        }
        /**
         * @param {Object} sel
         * @param {Object} selection
         * @return {undefined}
         */
        function select(sel, selection) {
            var range = sel.createRange();
            range.setStart(selection.anchorNode, selection.anchorOffset);
            range.setEnd(selection.focusNode, selection.focusOffset);
            removeRangeManually(sel, range);
        }
        /**
         * @param {Object} el
         * @param {string} selector
         * @return {?}
         */
        function $$(el, selector) {
            return null === el ? null : matchesSelector(el, selector) ? el : el.querySelector(selector) || $$(el.parentElement, selector);
        }
        var ast = require("babel-runtime/helpers/defineProperty");
        var ret = walk(ast);
        var nodes = require("babel-runtime/core-js/object/assign");
        var result = walk(nodes);
        var tree = require("babel-runtime/core-js/object/keys");
        var type = walk(tree);
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var t = require("react-dom");
        var _ = require("lodash");
        var handler = require("./util");
        var util = require("stdlib");
        var filter = require("dompurify");
        /** @type {function (string, (Function|string)): ?} */
        expectedHashCode.createEl = highlight;
        /** @type {function (Object, HTMLElement, string): ?} */
        expectedHashCode.renderReactWithParent = init;
        /** @type {function (number, number): ?} */
        expectedHashCode.inEl = enter;
        /** @type {function (?, string): ?} */
        expectedHashCode.hasClass = hasClass;
        /** @type {function (?, Object): ?} */
        expectedHashCode.removeClass = make;
        /** @type {function (?, string): ?} */
        expectedHashCode.addClass = addClass;
        /** @type {function (?, boolean, string): undefined} */
        expectedHashCode.toggleClass = text;
        /** @type {function (Node, string): ?} */
        expectedHashCode.getParentBySel = query;
        /** @type {function (Node): ?} */
        expectedHashCode.parentIsContentEditable = getOffsetParent;
        /** @type {function (?): ?} */
        expectedHashCode.isContentEditable = getContentEditable;
        /** @type {function (string, string): ?} */
        expectedHashCode.matchesSelector = matchesSelector;
        /** @type {function (number): ?} */
        expectedHashCode.isFocused = addOffset;
        var id = handler.guid();
        /** @type {function (string, string, ?, boolean): ?} */
        expectedHashCode.listen = initialize;
        /** @type {function (?, string, Function, boolean): undefined} */
        expectedHashCode.unlisten = constructor;
        /** @type {function (string, Function, boolean): ?} */
        expectedHashCode.on = setup;
        /** @type {function (string, Function, boolean): undefined} */
        expectedHashCode.off = removeEvent;
        /** @type {function (string, Function): undefined} */
        expectedHashCode.once = once;
        /** @type {function (string, Function): undefined} */
        expectedHashCode.emit = trigger;
        /** @type {function (Element): ?} */
        expectedHashCode.isVisible = find_text_nodes_helper;
        /** @type {function (): ?} */
        expectedHashCode.cs = get;
        var cssNumber = {
            "column-count" : 1,
            columns : 1,
            "font-weight" : 1,
            "line-height" : 1,
            opacity : 1,
            "z-index" : 1,
            zoom : 1
        };
        /** @type {function (string, number): ?} */
        expectedHashCode.maybeAddPx = maybeAddPx;
        /** @type {function (string): ?} */
        expectedHashCode.camelize = camelize;
        /** @type {function (?): ?} */
        expectedHashCode.camelizeAttrs = encode;
        /** @type {function (string): ?} */
        expectedHashCode.dasherize = dasherize;
        /** @type {function (Object, string, boolean): ?} */
        expectedHashCode.css = css;
        /** @type {function (boolean, string): ?} */
        expectedHashCode.setCustomCss = on;
        /** @type {function (Node, string): ?} */
        expectedHashCode.getParentByTag = visit;
        /** @type {function (Node, string, string): ?} */
        expectedHashCode.getParentByData = add;
        /** @type {function (Element, string): ?} */
        expectedHashCode.resolveEl = is;
        /** @type {function (Element, string): ?} */
        expectedHashCode.getParent = fn;
        /** @type {function (Object, string): ?} */
        expectedHashCode.parentHasClass = set;
        /** @type {function (): ?} */
        expectedHashCode.getParentByDepth = _forEach;
        /** @type {function (number, number): ?} */
        expectedHashCode.isParent = clone;
        /** @type {function (?, Element): undefined} */
        expectedHashCode.insertAfter = next;
        /** @type {function (?, Node): undefined} */
        expectedHashCode.insertBefore = insertBefore;
        /** @type {function (?, (Function|string)): ?} */
        expectedHashCode.elementInDocument = push;
        /** @type {function (Object): undefined} */
        expectedHashCode.runKeyEvent = simulateKeyEvent;
        /** @type {function (Object): ?} */
        expectedHashCode.docHidden = isPageHidden;
        /** @type {function (Object): ?} */
        expectedHashCode.visibilityEvent = _pageVisibility;
        /** @type {function (): ?} */
        expectedHashCode.transformProp = transform;
        /** @type {function (?): ?} */
        expectedHashCode.getDocSelection = update;
        /** @type {function (Node): ?} */
        expectedHashCode.compStyle = style;
        /** @type {function (string): ?} */
        expectedHashCode.classSelector = rethrow;
        /** @type {function (string): ?} */
        expectedHashCode.selectorAll = flatten;
        /** @type {function (): ?} */
        expectedHashCode.whichAnimationEndEvent = getBrowser;
        /** @type {function (): ?} */
        expectedHashCode.transitionEndEventName = getTransitionEvent;
        /** @type {function (Document): undefined} */
        expectedHashCode.addIframeCss = load;
        /** @type {function (Element, string): undefined} */
        expectedHashCode.setGRAttributes = hidePlaceholder;
        /** @type {function (string): undefined} */
        expectedHashCode.emitDomEvent = dispatchEvent;
        /** @type {function (?, ?): undefined} */
        expectedHashCode.addRange = removeRangeManually;
        /** @type {function (Object, Object): undefined} */
        expectedHashCode.setDomRange = select;
        /** @type {function (Object, string): ?} */
        expectedHashCode.closestEl = $$;
    }, {
        "./util" : 322,
        "babel-runtime/core-js/object/assign" : 24,
        "babel-runtime/core-js/object/keys" : 29,
        "babel-runtime/helpers/defineProperty" : 36,
        dompurify : "dompurify",
        lodash : "lodash",
        "react-dom" : "react-dom",
        stdlib : 328
    }],
    216 : [function(require, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} type
         * @return {?}
         */
        function String(type) {
            return type && type.__esModule ? type : {
                "default" : type
            };
        }
        /**
         * @param {Object} options
         * @param {?} aSourceContent
         * @return {?}
         */
        function init(options, aSourceContent) {
            /**
             * @return {undefined}
             */
            function init() {
                var f = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "on";
                var cycle = $.visibilityEvent(doc);
                if ("on" === f) {
                    module.on("beforeunload", next);
                    element.on("editor-set-state", stop);
                    element.on("dialog-closed", done);
                    element.on("focus-editor", action);
                    element.on("after-refresh-dialog", onClick);
                    self.on("track", item.track);
                    self.on("fix", once);
                    self.on("serviceState", success);
                    self.on("addedSynonym", focus);
                    self.on("afterReplace", handler);
                    if (self.dom) {
                        self.dom.on("badCursorPositionRetryFail", common.logger.cursorJump);
                        self.dom.on("badCursorPosition", common.logger.badCursorPosition);
                    }
                    self.on("iframe-mousemove", noop);
                    close(true);
                    if (cycle) {
                        $.listen(doc, cycle, attributes);
                    }
                    $.listen(doc, "grammarly:reset", opt_attributes);
                    if (be) {
                        $.listen(doc.documentElement, "mousemove", gl);
                    }
                    if (data.card) {
                        data.card.on("show", select);
                        data.card.on("hide", onerror);
                        data.card.on("toeditor", load);
                        data.card.on("addtodict", onChange);
                    }
                } else {
                    module.off("beforeunload", next);
                    element.off("editor-set-state", stop);
                    element.off("dialog-closed", done);
                    element.off("focus-editor", action);
                    element.off("after-refresh-dialog", onClick);
                    self.off("track", item.track);
                    self.off("fix", once);
                    self.off("serviceState", success);
                    self.off("addedSynonym", focus);
                    self.off("afterReplace", handler);
                    if (self.dom) {
                        self.dom.off("badCursorPositionRetryFail", common.logger.cursorJump);
                        self.dom.off("badCursorPosition", common.logger.badCursorPosition);
                    }
                    self.off("iframe-mousemove", noop);
                    close(true);
                    if (cycle) {
                        $.unlisten(doc, cycle, attributes);
                    }
                    $.unlisten(doc, "grammarly:reset", opt_attributes);
                    if (be) {
                        $.unlisten(doc.documentElement, "mousemove", gl);
                    }
                    if (data.card) {
                        data.card.off("show", select);
                        data.card.off("hide", onerror);
                        data.card.off("toeditor", load);
                        data.card.off("addtodict", onChange);
                    }
                }
            }
            /**
             * @return {undefined}
             */
            function run() {
                player.timers.start(docId + "run");
                init("on");
                testFn();
                node = Block.rewriteInnerHTML(expectedHashCode);
                if (self.getText()) {
                    self.emit("sending", void 0);
                }
                hide(p.enabledDefs);
                if (event) {
                    toggle();
                }
            }
            /**
             * @param {Object} args
             * @return {undefined}
             */
            function send(args) {
                var name = args.user;
                var p = args.page;
                var cb = callback;
                callback = p.dialectStrong || p.dialectWeak;
                close();
                i = name.anonymous;
                hide(p.enabledDefs);
                if (cb !== callback) {
                    self.hardReset();
                }
            }
            /**
             * @param {boolean} dataAndEvents
             * @return {undefined}
             */
            function close(dataAndEvents) {
                if (callback || defaultCompare) {
                    if (defaultCompare) {
                        if (callback || dataAndEvents) {
                            self.off("finished", error);
                        }
                    }
                } else {
                    /** @type {boolean} */
                    defaultCompare = true;
                    self.on("finished", error);
                }
            }
            /**
             * @param {Object} token
             * @return {?}
             */
            function handler(token) {
                if (Array.isArray(p.afterReplaceEvents)) {
                    p.afterReplaceEvents.forEach(function(cycle) {
                        return $.emit.call(expectedHashCode, cycle);
                    });
                }
                try {
                    /** @type {(Event|null)} */
                    var onInput = document.createEvent("HTMLEvents");
                    onInput.initEvent("input", false, true);
                    self.el.dispatchEvent(onInput);
                } catch (t) {
                }
                return token && token.remove();
            }
            /**
             * @param {Function} attributes
             * @return {undefined}
             */
            function gl(attributes) {
                self.emit("iframe-mousemove", attributes);
            }
            /**
             * @param {Object} options
             * @return {undefined}
             */
            function error(options) {
                var data = options.dialect;
                if (data) {
                    if ("undefined" !== data) {
                        compiled(data);
                        callback = data;
                        close();
                    }
                }
            }
            /**
             * @param {Object} attributes
             * @return {undefined}
             */
            function pause(attributes) {
                if (attributes) {
                    self.setState(attributes);
                }
                self.api.ws.reconnect();
            }
            /**
             * @param {string} id
             * @return {undefined}
             */
            function select(id) {
                var obj = self.matches.byId(id);
                if (obj) {
                    self.emit("context", void 0);
                    obj.editorId = self.id;
                    obj.select();
                    if (data.card) {
                        data.card.setData(obj, self.editorType);
                    }
                }
            }
            /**
             * @return {undefined}
             */
            function onerror() {
                show();
            }
            /**
             * @param {number} i
             * @return {undefined}
             */
            function load(i) {
                if (i === self.id) {
                    self.showDialog({
                        caller : "card"
                    });
                    player.timers.start("open_editor");
                }
            }
            /**
             * @param {string} component
             * @return {undefined}
             */
            function onChange(component) {
                if (!(component.match && component.match.editorId !== self.id)) {
                    if (i) {
                        component.hide();
                        self.showDialog({
                            caller : "card"
                        });
                    } else {
                        if (component.match) {
                            component.match.addToDict();
                        }
                    }
                }
            }
            /**
             * @param {Object} obj
             * @return {undefined}
             */
            function focus(obj) {
                obj.editorId = self.id;
                if (data.card) {
                    data.card.showSynonyms(obj);
                }
            }
            /**
             * @return {undefined}
             */
            function noop() {
                if (data.card) {
                    data.card.setOuterIframe(followingChild);
                }
            }
            /**
             * @return {undefined}
             */
            function opt_attributes() {
                console.log("reseting capi session...");
                pause();
            }
            /**
             * @param {Object} data
             * @return {?}
             */
            function success(data) {
                if ("capi" === data.type) {
                    return data.available ? void(event && plus()) : toggle();
                }
            }
            /**
             * @param {Object} msg
             * @return {undefined}
             */
            function stop(msg) {
                if (msg.editorId === self.id) {
                    self.setState(msg);
                    if (Ee) {
                        /** @type {boolean} */
                        Ee = false;
                        next();
                    }
                }
            }
            /**
             * @param {number} i
             * @return {undefined}
             */
            function done(i) {
                if (i === self.id) {
                    show();
                    if (!self.isHtmlGhost) {
                        fn();
                    }
                }
            }
            /**
             * @param {number} i
             * @return {undefined}
             */
            function action(i) {
                if (i === self.id) {
                    fn();
                }
            }
            /**
             * @return {undefined}
             */
            function fn() {
                if (self.srcEl) {
                    self.srcEl.focus();
                }
            }
            /**
             * @return {undefined}
             */
            function show() {
                if (self.selectedMatch) {
                    if (data.card) {
                        data.card.removeLoading(self.selectedMatch.getEl());
                    }
                    self.selectedMatch.deselect();
                }
            }
            /**
             * @param {Object} data
             * @return {undefined}
             */
            function onClick(data) {
                if (data.editorId === self.id) {
                    pause(data);
                }
            }
            /**
             * @return {undefined}
             */
            function toggle() {
                /** @type {boolean} */
                event = true;
                self.clearData();
                self.api.close();
                self.render();
            }
            /**
             * @return {?}
             */
            function filter() {
                return event;
            }
            /**
             * @return {undefined}
             */
            function plus() {
                /** @type {boolean} */
                event = false;
                pause();
            }
            /**
             * @return {undefined}
             */
            function remove() {
                var catcher = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
                var caller = catcher.caller;
                var item = {
                    data : self.getState(),
                    caller : caller
                };
                if (data.dialog) {
                    data.dialog.preActivate();
                }
                self.emit("show-dialog", void 0);
                $.emitDomEvent("show-dialog");
                element.emitFocusedTab("show-dialog", item);
            }
            /**
             * @return {?}
             */
            function start() {
                var textRange = expectedHashCode.ownerDocument.createRange();
                textRange.selectNodeContents(expectedHashCode);
                var gears = textRange.cloneContents();
                /** @type {Element} */
                var div = document.createElement("div");
                div.appendChild(gears);
                /** @type {NodeList} */
                var sources = div.querySelectorAll("img");
                /** @type {number} */
                var ii = sources.length;
                /** @type {number} */
                var i = 0;
                for (;i < ii;i++) {
                    sources[i].src = sources[i].src;
                }
                return div.innerHTML;
            }
            /**
             * @return {?}
             */
            function attributes() {
                return $.docHidden(doc) ? escape() : void hidden();
            }
            /**
             * @param {Function} arr
             * @return {?}
             */
            function clear(arr) {
                return event ? [] : arr.filter(function(f) {
                    return f.free && !f.hidden;
                });
            }
            /**
             * @param {string} elem
             * @return {?}
             */
            function empty(elem) {
                return!!$.matchesSelector(elem, ".b-card.Synonyms .btn-close") || !$.matchesSelector(elem, ".b-card.Synonyms, .b-card.Synonyms *");
            }
            /**
             * @return {undefined}
             */
            function escape() {
            }
            /**
             * @return {undefined}
             */
            function hidden() {
            }
            /**
             * @return {?}
             */
            function process() {
                var contextElem = self.getMatches();
                return{
                    critical : contextElem.filter(function(obj) {
                        return obj.free && obj.inDom;
                    }).length,
                    plus : contextElem.filter(function(m) {
                        return!m.free;
                    }).length
                };
            }
            /**
             * @param {?} page
             * @return {undefined}
             */
            function hide(page) {
                if (self.enabledSynonyms !== page) {
                    self.enabledSynonyms = page;
                    if (page) {
                        self.synonyms.fieldEnable();
                    } else {
                        self.synonyms.disable();
                    }
                }
            }
            /**
             * @param {Object} opt_attributes
             * @return {undefined}
             */
            function next(opt_attributes) {
                if (!we || opt_attributes) {
                    /** @type {boolean} */
                    we = true;
                    var dom = self.dom;
                    if (dom && (dom.cleanHTML && dom.cleanHTML()), init("off"), self.api.ws.emit("cleanup-socket-on-editor-remove"), self.exit(), console.log("exit"), expectedHashCode.removeAttribute && defaults.restrictedAttrs.forEach(expectedHashCode.removeAttribute.bind(expectedHashCode)), be && defaults.restrictedAttrs.forEach(self.srcEl.removeAttribute.bind(self.srcEl)), node && (node.parentNode && node.parentNode.removeChild(node)), expectedHashCode.setAttribute("spellcheck", "true"), isHtmlGhostSite.isHtmlGhostSite()) {
                        var li = expectedHashCode.parentElement && expectedHashCode.parentElement.parentElement;
                        if (li) {
                            li.removeAttribute("spellcheck");
                        }
                    }
                    self.emit("exit", void 0);
                }
            }
            var docId = (options.el || options.srcEl).getAttribute("gramm_id") || config.guid();
            var data = options.app;
            var from = options.user;
            var bench = options.actions;
            var p = options.page;
            var once = bench.incFixed;
            var compiled = bench.changeWeakDialect;
            var name = bench.saveFeedbackData;
            var htmlghost = options.editorType.htmlghost;
            var callback = p.dialectStrong || p.dialectWeak;
            var i = from.anonymous;
            var defaultCompare = void 0;
            var node = void 0;
            (0, result["default"])(options, {
                capiUrl : defaults.URLS.capi,
                createWs : aSourceContent,
                docid : docId,
                textareaWrapSelector : '[gramm_id="' + docId + '"]',
                animatorContainer : options.el.ownerDocument.documentElement,
                getAnimatorElPos : nodes.getAbsRect,
                dialect : callback,
                exposeRawMatch : true,
                /** @type {function (string): ?} */
                canRemoveSynonym : empty,
                /** @type {function (Function): ?} */
                filter : clear,
                /**
                 * @return {?}
                 */
                getContainerId : function() {
                    return element.promiseBackground("get-containerIdOrUndefined").then(function(dataAndEvents) {
                        return dataAndEvents ? dataAndEvents : p["default"].reject(void 0);
                    });
                }
            });
            var value = config.getBrowser();
            /** @type {string} */
            var tval = "extension_" + value;
            (0, result["default"])(helper.capi, {
                CLIENT_NAME : tval,
                clientVersion : defaults.getVersion(),
                extDomain : p.domain
            });
            if (htmlghost) {
                options.dom = dom.HtmlGhostDom;
            }
            /**
             * @return {?}
             */
            should.MatchPositions = function() {
                return{
                    generateMatchPositions : config._f
                };
            };
            options.matchPrefix = defaults.nextVerClass;
            var self = should.GrammarlyEditor(options);
            var expectedHashCode = self.el;
            var be = options.posSourceEl && "IFRAME" === options.posSourceEl.tagName;
            var followingChild = options.srcEl || expectedHashCode;
            var doc = expectedHashCode.ownerDocument;
            var testFn = self.run;
            /** @type {boolean} */
            var we = false;
            /** @type {boolean} */
            var event = !options.connection.online;
            /** @type {boolean} */
            var Ee = false;
            var e = new jQuery.EmailFeedback(self, docId, name);
            (0, result["default"])(self, {
                id : docId,
                srcEl : followingChild,
                camouflage : config._f,
                isHtmlGhost : htmlghost,
                /** @type {function (): undefined} */
                run : run,
                /** @type {function (): ?} */
                errorData : process,
                /** @type {function (): undefined} */
                showDialog : remove,
                /** @type {function (): ?} */
                isOffline : filter,
                /** @type {function (): undefined} */
                offline : toggle,
                /** @type {function (): undefined} */
                online : plus,
                /** @type {function (Object): undefined} */
                updateState : send,
                outerIframe : options.outerIframe,
                cleanupText : config._f,
                activate : config._f,
                toggleBtn : config._f,
                /** @type {function (Object): undefined} */
                remove : next,
                /** @type {function (Object): undefined} */
                reset : pause,
                insertGmailFeedback : e.insertGmailFeedback.bind(e),
                emailFeedbackEnabled : p.emailFeedbackEnabled,
                editorType : options.editorType.value
            });
            /** @type {function (?, string): ?} */
            var f = self.getMatchClass;
            return self.getMatchClass = function(node, obj) {
                var value = f(node, obj);
                return value += " gr_inline_cards", value += node.renderedOnce || config.isSafari() ? " gr_disable_anim_appear" : " gr_run_anim", node.renderedOnce = true, value;
            }, self.dom && (self.dom.changeSelection = config._f), self.current = self.getFiltered, self.started = false, self.el.setAttribute("data-gramm_editor", "true"), self.getHtml && (self.getHtml = start), self;
        }
        var prop = require("babel-runtime/core-js/promise");
        var p = String(prop);
        var string = require("babel-runtime/core-js/object/assign");
        var result = String(string);
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var should = require("lib/grammarly-editor");
        var helper = require("lib/grammarly-editor/capi");
        var player = require("../timers");
        var element = require("../message");
        var config = require("../util");
        var common = require("../tracking");
        var isHtmlGhostSite = (require("../benchmark"), require("lib/ghost/html-ghost-locator"));
        var nodes = require("../position");
        var Block = require("../client-script/inner-html");
        var module = require("../window-events");
        var defaults = require("../config");
        var $ = require("../dom");
        var dom = require("../ghost/html-ghost");
        var item = require("./track");
        var jQuery = require("./email-feedback");
        /** @type {function (Object, ?): ?} */
        expectedHashCode.createEditor = init;
    }, {
        "../benchmark" : 187,
        "../client-script/inner-html" : 206,
        "../config" : 211,
        "../dom" : 215,
        "../ghost/html-ghost" : 254,
        "../message" : 278,
        "../position" : 289,
        "../timers" : 301,
        "../tracking" : 307,
        "../util" : 322,
        "../window-events" : 323,
        "./email-feedback" : 217,
        "./track" : 220,
        "babel-runtime/core-js/object/assign" : 24,
        "babel-runtime/core-js/promise" : 31,
        "lib/ghost/html-ghost-locator" : 253,
        "lib/grammarly-editor" : 258,
        "lib/grammarly-editor/capi" : 255
    }],
    217 : [function(walk, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} src
         * @return {?}
         */
        function require(src) {
            return src && src.__esModule ? src : {
                "default" : src
            };
        }
        var data = walk("babel-runtime/core-js/array/from");
        var conf = require(data);
        var string = walk("babel-runtime/helpers/classCallCheck");
        var ast = require(string);
        var defaults = walk("babel-runtime/helpers/createClass");
        var config = require(defaults);
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var element = walk("../dom");
        var conditional = walk("../tracking");
        /** @type {string} */
        var cacheKey = "https://grammarly.com/email-feedback";
        /** @type {string} */
        var p = "https://s3.amazonaws.com/features-team-extension/email-feedback/email-feedback-signature.png";
        /** @type {string} */
        var column = "\n  letter-spacing: 0.5px;\n  color: #1FB8A1;\n  text-decoration: none;\n  font-weight: bold;\n  display: inline-block;\n  font-size: 13px;\n  width: 49.6%;\n  text-align: center;\n  padding: 13px 0 15px;";
        /** @type {string} */
        var h = "\n  width: 25px;\n  height: 19px;\n  margin-right: 10px;\n  vertical-align: middle;";
        /** @type {string} */
        var g = "\n  width: 335px;\n  letter-spacing: 0.2px;\n  text-align: center;\n  background: #F9FAFF;\n  border-bottom: 1px solid #E4E6F2;\n  border-radius:3px 3px 0 0;\n  font-family: HelveticaNeue-Bold;\n  font-size: 13px;\n  color: #222;\n  line-height: 16px;\n  padding: 14px 0 14px 0;\n  display: inline-block;";
        /** @type {string} */
        var name = "feedback-signature";
        var EmailFeedback = function() {
            /**
             * @param {Object} editor
             * @param {?} id
             * @param {?} contentHTML
             * @return {undefined}
             */
            function initialize(editor, id, contentHTML) {
                (0, ast["default"])(this, initialize);
                /** @type {Object} */
                this.editor = editor;
                this.id = id;
                this.saveFeedbackData = contentHTML;
                /**
                 * @param {string} callback
                 * @param {string} k
                 * @param {?} v
                 * @return {?}
                 */
                this._generateFeedbackElement = function(callback, k, v) {
                    /** @type {Element} */
                    var id = document.createElement("div");
                    /** @type {Element} */
                    var el = document.createElement("div");
                    el.classList.add(name);
                    /** @type {string} */
                    var i = '<span style="color: #E4E6F2; margin: 0 6px;"> | </span>';
                    /** @type {string} */
                    var a = "color: #1255CC; text-decoration: none;";
                    /** @type {string} */
                    var suiteView = k + "?docId=" + encodeURIComponent(v);
                    /**
                     * @param {string} val
                     * @param {string} obj
                     * @param {boolean} recurring
                     * @return {?}
                     */
                    var isBoolean = function(val, obj, recurring) {
                        /** @type {string} */
                        var r = obj + "&canBeBetter=" + encodeURIComponent(recurring ? "false" : "true");
                        return'<a style="' + a + '" href="' + r + '">' + val + "</a>";
                    };
                    return el.style.display = "inline-block", el.style.background = "#F3F5F8", el.style.padding = "12px 17px", el.style.borderRadius = "5px", el.style.border = "1px solid #E2E5EB", el.innerHTML = '<span style="margin-right: 15px;">' + callback + "</span> " + isBoolean("Yes", suiteView, true) + " " + i + " " + isBoolean("Can be better", suiteView, false), id.appendChild(document.createElement("div").appendChild(document.createElement("br"))), id.appendChild(el), id.appendChild(document.createElement("div").appendChild(document.createElement("br"))),
                        id;
                };
                /**
                 * @param {string} callback
                 * @param {string} k
                 * @param {?} v
                 * @return {?}
                 */
                this._generateFeedbackElementVer2 = function(callback, k, v) {
                    /** @type {Element} */
                    var id = document.createElement("div");
                    /** @type {Element} */
                    var el = document.createElement("div");
                    el.classList.add(name);
                    /** @type {string} */
                    var camelKey = k + "?docId=" + encodeURIComponent(v);
                    /**
                     * @param {string} data
                     * @param {string} key
                     * @param {boolean} error
                     * @return {?}
                     */
                    var dataAttr = function(data, key, error) {
                        /** @type {string} */
                        var r = key + "&canBeBetter=" + encodeURIComponent(error ? "false" : "true");
                        /** @type {string} */
                        var errorMessage = error ? "border-right: 1px solid #E4E6F2;" + column : "" + column;
                        return'<a style="' + errorMessage + '" href="' + r + '">' + data + "</a>";
                    };
                    return el.style.display = "inline-block", el.style.borderRadius = "3px 3px 0 0", el.style.border = "1px solid #E2E5EB", el.innerHTML = '<span style="' + g + '">\n      <img style="' + h + '" src="' + p + '" alt="smp"/>' + callback + "</span><br/>\n      " + dataAttr("Yes", camelKey, true) + dataAttr("Can be better", camelKey, false), id.appendChild(document.createElement("div").appendChild(document.createElement("br"))), id.appendChild(el), id.appendChild(document.createElement("div").appendChild(document.createElement("br"))),
                        id;
                };
            }
            return(0, config["default"])(initialize, [{
                key : "insertGmailFeedback",
                /**
                 * @param {string} expectedHashCode
                 * @param {string} type
                 * @return {undefined}
                 */
                value : function(expectedHashCode, type) {
                    /** @type {string} */
                    var restoreScript = "Was my message clear?";
                    var node = expectedHashCode ? this._generateFeedbackElement(restoreScript, cacheKey, this.id) : this._generateFeedbackElementVer2(restoreScript, cacheKey, this.id);
                    var target = this.editor.el;
                    var base = target.querySelector(".gmail_extra") || target.querySelector(".gmail_quote");
                    if (null === base) {
                        target.appendChild(node);
                    } else {
                        target.insertBefore(node, base);
                    }
                    /** @type {MutationObserver} */
                    var observer = new MutationObserver(function(failures) {
                        return failures.forEach(function(record) {
                            if ("childList" === record.type && record.removedNodes.length > 0) {
                                /** @type {boolean} */
                                var t = (0, conf["default"])(record.removedNodes).findIndex(function(el) {
                                    return el.classList && el.classList.contains(name);
                                }) > -1;
                                if (t) {
                                    /** @type {boolean} */
                                    var n = 0 === target.querySelectorAll("." + name).length;
                                    if (n) {
                                        conditional.call("gnar.track", "askForFeedbackSignature-removed");
                                        observer.disconnect();
                                    }
                                }
                            }
                        });
                    });
                    observer.observe(node, {
                        attributes : true,
                        childList : true,
                        characterData : true
                    });
                    /** @type {KeyboardEvent} */
                    var eventType = new KeyboardEvent("keydown", {
                        bubbles : true,
                        cancelable : true,
                        key : " ",
                        shiftKey : true
                    });
                    target.dispatchEvent(eventType);
                    /** @type {boolean} */
                    this.editor.emailFeedbackEnabled = false;
                    focus();
                    var match = element.closestEl(target, 'input[name="subjectbox"]') || element.closestEl(target, 'input[placeholder="Subject"]');
                    var failureMessage = null !== match ? match.value : "";
                    this.saveFeedbackData(failureMessage, this.id);
                    conditional.call("gnar.track", "askForFeedback-button-click", {
                        textSize : this.editor.getText().length,
                        isFirstShown : type
                    });
                }
            }]), initialize;
        }();
        expectedHashCode.EmailFeedback = EmailFeedback;
    }, {
        "../dom" : 215,
        "../tracking" : 307,
        "babel-runtime/core-js/array/from" : 19,
        "babel-runtime/helpers/classCallCheck" : 34,
        "babel-runtime/helpers/createClass" : 35
    }],
    218 : [function(dataAndEvents, deepDataAndEvents, expectedHashCode) {
        /**
         * @param {Object} elem
         * @return {?}
         */
        function swap(elem) {
            return elem.hasAttribute("contenteditable") && elem.querySelector('[data-contents="true"] > [data-editor], [data-block]');
        }
        /**
         * @param {HTMLElement} element
         * @return {?}
         */
        function toggle(element) {
            return element.classList.contains("ql-editor") || element.classList.contains("ql-container");
        }
        /**
         * @param {Node} elem
         * @return {?}
         */
        function getAttr(elem) {
            return elem.className.indexOf("redactor") > -1;
        }
        /**
         * @param {Node} elem
         * @return {?}
         */
        function color(elem) {
            return elem.className.indexOf("scribe") > -1;
        }
        /**
         * @param {Node} elem
         * @return {?}
         */
        function next(elem) {
            return elem.className.indexOf("trix") > -1;
        }
        /**
         * @param {Node} val
         * @return {?}
         */
        function update(val) {
            if ("IFRAME" !== val.tagName) {
                return false;
            }
            /** @type {Node} */
            var el = val;
            return el.id.indexOf("mce") > -1 || el.contentDocument.querySelectorAll("#tinymce, .mce-content-body").length > 0;
        }
        /**
         * @param {Node} elem
         * @return {?}
         */
        function cleanUp(elem) {
            return elem.className.indexOf("cke") > -1;
        }
        /**
         * @param {HTMLElement} elem
         * @return {?}
         */
        function _hasClass(elem) {
            return elem.hasAttribute("pm-container") || elem.classList.contains("ProseMirror");
        }
        /**
         * @param {Node} node
         * @return {?}
         */
        function getNodeIndex(node) {
            return node.className.indexOf("medium-editor") > -1;
        }
        /**
         * @param {Node} elem
         * @return {?}
         */
        function callback(elem) {
            try {
                return swap(elem) ? "draftJs" : toggle(elem) ? "quill" : getAttr(elem) ? "redactor" : _hasClass(elem) ? "prosemirror" : color(elem) ? "scribe" : next(elem) ? "trix" : getNodeIndex(elem) ? "medium-editor" : update(elem) ? "tinymce" : cleanUp(elem) ? "ckeditor" : elem.hasAttribute("contenteditable") ? "contenteditable" : "TEXTAREA" === elem.tagName ? "textarea" : "IFRAME" === elem.tagName ? "iframe" : "unknown";
            } catch (t) {
                return;
            }
        }
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        /** @type {function (Object): ?} */
        expectedHashCode.isDraftJsField = swap;
        /** @type {function (HTMLElement): ?} */
        expectedHashCode.isQuillField = toggle;
        /** @type {function (Node): ?} */
        expectedHashCode.isRedactorField = getAttr;
        /** @type {function (Node): ?} */
        expectedHashCode.isScribeField = color;
        /** @type {function (Node): ?} */
        expectedHashCode.isTrixField = next;
        /** @type {function (Node): ?} */
        expectedHashCode.isTinyMCEField = update;
        /** @type {function (Node): ?} */
        expectedHashCode.isCKEditorField = cleanUp;
        /** @type {function (HTMLElement): ?} */
        expectedHashCode.isProseMirrorField = _hasClass;
        /** @type {function (Node): ?} */
        expectedHashCode.isMediumEditorField = getNodeIndex;
        /** @type {function (Node): ?} */
        expectedHashCode.getFieldType = callback;
    }, {}],
    219 : [function(require, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} type
         * @return {?}
         */
        function Event(type) {
            return type && type.__esModule ? type : {
                "default" : type
            };
        }
        /**
         * @param {Object} self
         * @return {?}
         */
        function update(self) {
            var r20;
            var data = self.app;
            var FUNCTION = self.type;
            var doc = self.doc;
            var iframe = self.field;
            var vars = self.connection;
            var page = self.page;
            var userInfo = self.user;
            var actions = self.actions;
            var orig = self.createSocket;
            return data.elements = data.elements || res.initElements({
                app : data,
                doc : doc,
                user : userInfo,
                actions : actions,
                page : page
            }), "iframe" === FUNCTION ? init(data, iframe, vars, page, userInfo, actions, orig) : render(data, iframe, (r20 = {}, (0, event["default"])(r20, FUNCTION, true), (0, event["default"])(r20, "value", FUNCTION), r20), vars, page, userInfo, actions, orig);
        }
        /**
         * @param {Element} node
         * @param {string} b
         * @return {undefined}
         */
        function success(node, b) {
            if (jQuery.setGRAttributes(node, b), node.setAttribute("spellcheck", "false"), Block.isHtmlGhostSite()) {
                var input = node.parentElement && node.parentElement.parentElement;
                if (input) {
                    input.setAttribute("spellcheck", "false");
                }
            }
        }
        /**
         * @param {Function} tick
         * @param {string} name
         * @param {Attr} delta
         * @param {Object} vars
         * @param {string} page
         * @param {Object} userInfo
         * @param {?} actions
         * @param {?} content
         * @return {?}
         */
        function render(tick, name, delta, vars, page, userInfo, actions, content) {
            /**
             * @param {string} v
             * @param {string} s
             * @return {?}
             */
            function log(v, s) {
                return success(v, s), $.createEditor({
                    id : s,
                    el : v,
                    /** @type {Function} */
                    app : tick,
                    connection : vars,
                    page : page,
                    user : userInfo,
                    actions : actions,
                    editorType : delta
                }, content);
            }
            var message = handler.guid();
            return "contenteditable" === delta.value ? log(name, message) : assert.createGhostArea(log, name, message);
        }
        /**
         * @param {Function} tick
         * @param {Element} element
         * @param {Object} params
         * @param {string} page
         * @param {Object} userInfo
         * @param {?} actions
         * @param {?} content
         * @return {?}
         */
        function init(tick, element, params, page, userInfo, actions, content) {
            var oldconfig = handler.guid();
            var doc = element.contentDocument;
            var body = doc.body;
            return success(element, oldconfig), element.setAttribute("gramm-ifr", "true"), jQuery.addIframeCss(doc), success(body, oldconfig), element.style.height = element.style.height || getComputedStyle(element).height, $.createEditor({
                el : body,
                /** @type {Function} */
                app : tick,
                connection : params,
                page : page,
                user : userInfo,
                actions : actions,
                srcEl : element,
                posSourceEl : element,
                editorType : {
                    contenteditable : true,
                    value : "contenteditable"
                }
            }, content);
        }
        var type = require("babel-runtime/helpers/defineProperty");
        var event = Event(type);
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var handler = require("../util");
        var jQuery = require("../dom");
        var res = require("../elements");
        var Block = require("lib/ghost/html-ghost-locator");
        var $ = require("./editor");
        var assert = require("../ghost/ghostarea");
        /** @type {function (Object): ?} */
        expectedHashCode.createGrammarlyEditor = update;
    }, {
        "../dom" : 215,
        "../elements" : 226,
        "../ghost/ghostarea" : 252,
        "../util" : 322,
        "./editor" : 216,
        "babel-runtime/helpers/defineProperty" : 36,
        "lib/ghost/html-ghost-locator" : 253
    }],
    220 : [function(dataAndEvents, deepDataAndEvents, expectedHashCode) {
        /**
         * @return {undefined}
         */
        function track() {
        }
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        /** @type {function (): undefined} */
        expectedHashCode.track = track;
    }, {}],
    221 : [function(require, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} name
         * @return {?}
         */
        function $(name) {
            return name && name.__esModule ? name : {
                "default" : name
            };
        }
        /**
         * @param {Array} array
         * @param {Event} event
         * @return {?}
         */
        function move(array, event) {
            if (array) {
                if (!array.length) {
                    return array;
                }
                if (1 === array.length || !event) {
                    return array[0];
                }
                var mouseX = event.pageX || event.clientX;
                var mouseY = event.pageY || event.clientY;
                var deep = void 0;
                return array.forEach(function(target) {
                    var top = target.top;
                    var left = target.left;
                    var width = target.width;
                    var height = target.height;
                    if (mouseY >= top) {
                        if (mouseY <= top + height) {
                            if (mouseX >= left) {
                                if (mouseX <= left + width) {
                                    /** @type {Object} */
                                    deep = target;
                                }
                            }
                        }
                    }
                }), deep || array[0];
            }
        }
        var nodes = require("babel-runtime/core-js/object/assign");
        var panels = $(nodes);
        var helper = require("babel-runtime/core-js/symbol");
        var update = $(helper);
        var children = require("babel-runtime/core-js/object/get-prototype-of");
        var c = $(children);
        var selector = require("babel-runtime/helpers/classCallCheck");
        var elem = $(selector);
        var use = require("babel-runtime/helpers/createClass");
        var p = $(use);
        var tmpl = require("babel-runtime/helpers/possibleConstructorReturn");
        var type = $(tmpl);
        var request = require("babel-runtime/helpers/inherits");
        var ret = $(request);
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var util = require("react");
        var assert = require("react-dom");
        var which = require("emitter");
        var element = require("../timers");
        var jQuery = require("../util");
        var dom = require("../window-events");
        var g = require("../tracking");
        var fs = require("../position");
        var obj = require("../dom");
        var Block = require("./hint");
        var defaults = require("./tooltip");
        var input = require("../inline-cards");
        var options = {
            container : "_c4f153-container",
            flip : "_c4f153-flip",
            flipSyn : "_c4f153-flipSyn",
            card : "_c4f153-card",
            bigTitle : "_c4f153-bigTitle",
            unknownWordTitle : "_c4f153-unknownWordTitle",
            btnDictLabelWithIcon : "_c4f153-btnDictLabelWithIcon",
            explanation : "_c4f153-explanation",
            replacement : "_c4f153-replacement",
            maxWidthReached : "_c4f153-maxWidthReached",
            item : "_c4f153-item",
            logoIcon : "_c4f153-logoIcon",
            ignoreIcon : "_c4f153-ignoreIcon",
            undoIcon : "_c4f153-undoIcon",
            dictionaryIcon : "_c4f153-dictionaryIcon",
            wikiIcon : "_c4f153-wikiIcon",
            footer : "_c4f153-footer",
            footerButton : "_c4f153-footerButton",
            btnIgnore : "_c4f153-btnIgnore",
            icon : "_c4f153-icon",
            btnLogo : "_c4f153-btnLogo",
            btnPersonalize : "_c4f153-btnPersonalize",
            personalizeMessage : "_c4f153-personalizeMessage",
            attn : "_c4f153-attn",
            cardAddedToDict : "_c4f153-cardAddedToDict",
            addedToDictTitle : "_c4f153-addedToDictTitle",
            dictionaryDescription : "_c4f153-dictionaryDescription",
            undo : "_c4f153-undo",
            dictLink : "_c4f153-dictLink",
            dictionaryAddedIcon : "_c4f153-dictionaryAddedIcon",
            synTitle : "_c4f153-synTitle",
            synList : "_c4f153-synList",
            synListSingle : "_c4f153-synListSingle",
            synListTitle : "_c4f153-synListTitle",
            synListNumber : "_c4f153-synListNumber",
            synSubitems : "_c4f153-synSubitems",
            synItem : "_c4f153-synItem",
            dict : "_c4f153-dict",
            dictContent : "_c4f153-dictContent",
            dictItemCounter : "_c4f153-dictItemCounter",
            dictItem : "_c4f153-dictItem",
            qualifier : "_c4f153-qualifier",
            dictFooterItem : "_c4f153-dictFooterItem",
            wikiLink : "_c4f153-wikiLink",
            wiki : "_c4f153-wiki",
            gr__tooltip_empty : "gr__tooltip_empty",
            gr__tooltip : "gr__tooltip",
            "gr-notfound-tooltip" : "gr-notfound-tooltip",
            "gr__tooltip-content" : "gr__tooltip-content",
            "gr__tooltip-logo" : "gr__tooltip-logo",
            gr__flipped : "gr__flipped"
        };
        var that = {};
        var Card = function(deepDataAndEvents) {
            /**
             * @return {?}
             */
            function show() {
                var context = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
                var req = context.doc;
                var node = void 0 === req ? document : req;
                var value = context.domCls;
                var computed = void 0 === value ? "" : value;
                var user = context.user;
                (0, elem["default"])(this, show);
                var self = (0, type["default"])(this, (show.__proto__ || (0, c["default"])(show)).call(this));
                /** @type {boolean} */
                self._isAnonymous = false;
                /**
                 * @param {Object} msg
                 * @param {string} event
                 * @return {?}
                 */
                self.show = function(msg, event) {
                    return self.emit("show", msg.id), self.updatePos(msg, event), element.timers.start(that.id), g.logger.cardShowAction(), self;
                };
                /**
                 * @return {?}
                 */
                self.hide = function() {
                    if (that.hint.visible) {
                        /** @type {string} */
                        that.container.el.style.display = "none";
                        self.setState({
                            animate : false,
                            visible : false,
                            match : {}
                        });
                        var protoProps = that.notfound && that.notfound.isEnabled();
                        if (that.notfound.disable(), that.notfound.hide(), self.emit("hide", self.match || void 0), that.hint.currentEl && self.removeLoading(that.hint.currentEl), element.timers.stop(that.id), self.match) {
                            var syn = self.match.syn;
                            if (syn) {
                                g.logger.synonymCardHideAction(protoProps);
                            } else {
                                g.logger.cardHideAction();
                            }
                        }
                        return protoProps && g.logger.synonymCardHideAction(protoProps), self.match = null, that.container.el.style.display = "", self;
                    }
                };
                /**
                 * @return {?}
                 */
                self.animHide = function() {
                    return self.setState({
                        animate : true
                    }), obj.once.call(that.el, obj.whichAnimationEndEvent(), self.hide), self;
                };
                /**
                 * @return {undefined}
                 */
                self.openEditor = function() {
                    if (that.hint.currentEl) {
                        self.removeLoading(that.hint.currentEl);
                    }
                    self.emit("toeditor", self.match ? self.match.editorId : void 0);
                    self.hide();
                };
                /**
                 * @param {string} dataAndEvents
                 * @param {string} s
                 * @param {?} deepDataAndEvents
                 * @return {undefined}
                 */
                self.animateReplacement = function(dataAndEvents, s, deepDataAndEvents) {
                    self.emit("animateReplacement", {
                        matchId : dataAndEvents,
                        replacement : s,
                        visibleReplacement : deepDataAndEvents
                    });
                };
                /**
                 * @return {undefined}
                 */
                self.addToDict = function() {
                    self.setState({
                        addedToDict : true
                    });
                    self.emit("addtodict", {
                        match : self.match,
                        /** @type {function (): ?} */
                        hide : self.hide,
                        /** @type {function (): ?} */
                        animHide : self.animHide
                    });
                };
                /**
                 * @param {Object} e
                 * @return {?}
                 */
                self.inTarget = function(e) {
                    var target = e.target;
                    var n = e.clientX;
                    var endY = e.clientY;
                    var delta = e.detail;
                    var node = that.hint.currentEl;
                    var a = (obj.parentHasClass(target, that.cls) || obj.hasClass(target, that.cls)) && (!node || !obj.hasClass(node, "g-selection-anim"));
                    var c = self.elementsFromPoint(n, endY).some(function(target) {
                        return obj.hasClass(target, that.cls);
                    });
                    return!(!c || (!that.hint.visible || 1 !== delta)) || (a ? node && node !== target ? (that.hint.fastHide(), void self.removeLoading(node)) : (self.addLoading(target), true) : void(!that.hint.visible && (node && self.removeLoading(node))));
                };
                /**
                 * @param {?} target
                 * @return {?}
                 */
                self.addLoading = function(target) {
                    return!obj.hasClass(target, that.pCls) && obj.addClass(target, that.pCls);
                };
                /**
                 * @param {?} node
                 * @return {undefined}
                 */
                self.removeLoading = function(node) {
                    if (obj.hasClass(node, that.pCls)) {
                        obj.removeClass(node, that.pCls);
                    }
                    if (obj.hasClass(node, "g-selection-anim")) {
                        if (node.parentNode) {
                            node.parentNode.removeChild(node);
                        }
                    }
                };
                /**
                 * @param {Object} data
                 * @return {?}
                 */
                self.showSynonyms = function(data) {
                    return data.animEl && 0 !== data.animEl.getClientRects().length ? (that.hint.currentEl && self.hide(), that.hint.currentEl = data.animEl, data.synonyms && 0 === data.synonyms.meanings.length ? (that.notfound.enable(), that.notfound.show({
                        posEl : data.animEl,
                        text : "No synonyms found",
                        outerIframe : that.iframe
                    }), g.logger.synonymCardShowAction(true)) : (self.setData(data), self.updatePos(data.animEl), self.setState({
                        visible : true
                    }), g.logger.synonymCardShowAction(false)), that.hint.setVisible(true), element.timers.start(that.id), self) : self;
                };
                /**
                 * @param {Object} node
                 * @return {undefined}
                 */
                self.setOuterIframe = function(node) {
                    var root = node.contentDocument;
                    if (!!node) {
                        if (!(root && node === that.iframe)) {
                            /** @type {Object} */
                            that.iframe = node;
                            that.hint.setDocs(that.doc, root);
                        }
                    }
                };
                self._isAnonymous = user.anonymous;
                self._userType = user.type;
                var key = (0, update["default"])("GrammarCard");
                /** @type {string} */
                var cls = "gr_";
                var parent = self.render(key, node);
                var tag = assert.findDOMNode(parent.component);
                var hint = (new Block.HintImpl({
                    doc : node,
                    hint : tag,
                    hideDelay : 500,
                    /** @type {function (Object): ?} */
                    inTarget : self.inTarget,
                    cls : that.cls,
                    delay : 400,
                    /** @type {function (Object, string): ?} */
                    onshow : self.show,
                    /** @type {function (): ?} */
                    onhide : self.hide
                })).bind();
                return that = {
                    id : key,
                    notfound : defaults.createTooltip({
                        cls : obj.cs("gr-notfound-tooltip", options.gr__tooltip_empty),
                        enabled : false,
                        doc : node
                    }),
                    windowEvents : {
                        /** @type {function (): ?} */
                        keydown : self.hide,
                        /** @type {function (): ?} */
                        scroll : self.hide,
                        /** @type {function (): ?} */
                        resize : self.hide
                    },
                    doc : node,
                    domCls : computed,
                    cls : cls,
                    pCls : "gr-progress",
                    container : parent,
                    el : tag,
                    hint : hint
                }, self.hint = hint, dom.on(that.windowEvents, null, true), self;
            }
            return(0, ret["default"])(show, deepDataAndEvents), (0, p["default"])(show, [{
                key : "updateState",
                /**
                 * @param {string} expectedHashCode
                 * @return {undefined}
                 */
                value : function(expectedHashCode) {
                    this._isAnonymous = expectedHashCode.anonymous;
                    this._userType = expectedHashCode.type;
                }
            }, {
                key : "elementsFromPoint",
                /**
                 * @param {string} expectedHashCode
                 * @param {string} type
                 * @return {?}
                 */
                value : function(expectedHashCode, type) {
                    return expectedHashCode && type ? that.doc.elementsFromPoint ? that.doc.elementsFromPoint(expectedHashCode, type) : [that.doc.elementFromPoint(expectedHashCode, type)] : [];
                }
            }, {
                key : "setState",
                /**
                 * @param {string} expectedHashCode
                 * @return {undefined}
                 */
                value : function(expectedHashCode) {
                    that.container.component.setState(expectedHashCode);
                }
            }, {
                key : "setData",
                /**
                 * @param {string} expectedHashCode
                 * @param {string} type
                 * @return {?}
                 */
                value : function(expectedHashCode, type) {
                    return expectedHashCode ? (this.setState({
                        match : expectedHashCode,
                        visible : true,
                        addedToDict : false
                    }), this.match = expectedHashCode, this._editorType = type, this) : this;
                }
            }, {
                key : "updatePos",
                /**
                 * @param {string} expectedHashCode
                 * @param {string} type
                 * @return {?}
                 */
                value : function(expectedHashCode, type) {
                    if (null === expectedHashCode.parentNode) {
                        if (!expectedHashCode.id) {
                            return void this.hide();
                        }
                        var currentEl = that.doc.querySelector(".gr_" + expectedHashCode.id);
                        if (!currentEl) {
                            return void this.hide();
                        }
                        that.hint.currentEl = expectedHashCode = currentEl;
                    }
                    var result = fs.getAllAbsRects(expectedHashCode, that.iframe);
                    var e = (0, panels["default"])(fs.posToRect(that.el, move(result, type)), {
                        width : that.el.clientWidth,
                        height : that.el.clientHeight
                    });
                    if (e.rect.flip) {
                        e.rect.top = e.rect.top + that.el.clientHeight;
                    }
                    g.call("gnar.track", "cardOpened", {
                        direction : e.rect.flip ? "top" : "bottom",
                        pixelsToBottom : Math.round(e.height + e.delta.bottom),
                        cardHeight : e.height,
                        ratio : 1 + Math.round(10 * e.delta.bottom / e.height) / 10
                    });
                    this.setState({
                        pos : e
                    });
                }
            }, {
                key : "render",
                /**
                 * @param {string} expectedHashCode
                 * @param {string} type
                 * @return {?}
                 */
                value : function(expectedHashCode, type) {
                    var that = this;
                    var attributes = {
                        /**
                         * @return {?}
                         */
                        isAnonymous : function() {
                            return that._isAnonymous;
                        },
                        /**
                         * @return {?}
                         */
                        getUserType : function() {
                            return that._userType;
                        },
                        /**
                         * @return {?}
                         */
                        getEditorType : function() {
                            return that._editorType;
                        },
                        hide : this.hide,
                        openEditor : this.openEditor,
                        animateReplacement : this.animateReplacement,
                        addToDict : this.addToDict
                    };
                    return obj.renderReactWithParent(util.createElement(input.PositionedCard, attributes), type.documentElement, expectedHashCode, "grammarly-card");
                }
            }, {
                key : "remove",
                /**
                 * @return {undefined}
                 */
                value : function() {
                    that.hint.unbind();
                    dom.off(that.windowEvents, null, true);
                    that.container.remove();
                }
            }]), show;
        }(jQuery.createClass(which));
        expectedHashCode.Card = Card;
    }, {
        "../dom" : 215,
        "../inline-cards" : 267,
        "../position" : 289,
        "../timers" : 301,
        "../tracking" : 307,
        "../util" : 322,
        "../window-events" : 323,
        "./hint" : 224,
        "./tooltip" : 247,
        "babel-runtime/core-js/object/assign" : 24,
        "babel-runtime/core-js/object/get-prototype-of" : 28,
        "babel-runtime/core-js/symbol" : 32,
        "babel-runtime/helpers/classCallCheck" : 34,
        "babel-runtime/helpers/createClass" : 35,
        "babel-runtime/helpers/inherits" : 38,
        "babel-runtime/helpers/possibleConstructorReturn" : 39,
        emitter : "emitter",
        react : "react",
        "react-dom" : "react-dom"
    }],
    222 : [function(require, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} parent
         * @return {?}
         */
        function create(parent) {
            return parent && parent.__esModule ? parent : {
                "default" : parent
            };
        }
        /**
         * @param {Object} data
         * @return {?}
         */
        function init(data) {
            /**
             * @param {?} args
             * @param {?} parent
             * @return {undefined}
             */
            function parse(args, parent) {
                /** @type {boolean} */
                var n = value.anonymous === false && (args.anonymous === false && value.premium !== args.premium);
                /** @type {boolean} */
                var r = node !== parent.dialectStrong;
                value = args;
                node = parent.dialectStrong;
                if (result) {
                    result.updateUser(args);
                }
                if (n) {
                    obj.refresh();
                }
                if (r) {
                    obj.send({
                        action : "hard-reset"
                    });
                }
            }
            /**
             * @param {string} base
             * @return {undefined}
             */
            function log(base) {
                /** @type {boolean} */
                var on = "off" === base;
                self.toggleClass(doc.body, on, "gr-disable-scroll");
                self.toggleClass(doc.documentElement, on, "gr-disable-scroll");
            }
            /**
             * @return {undefined}
             */
            function gl() {
                if (res) {
                    if (!value.anonymous) {
                        render();
                    }
                }
            }
            /**
             * @param {Object} user
             * @return {?}
             */
            function register(user) {
                return new Block.OnboardingDialog({
                    doc : doc,
                    user : user,
                    saveAnonymousProps : channel
                });
            }
            /**
             * @param {Object} entity
             * @param {string} pos
             * @return {?}
             */
            function add(entity, pos) {
                return new nodes.SigninDialog({
                    doc : doc,
                    user : entity,
                    placement : pos
                });
            }
            /**
             * @param {string} element
             * @return {undefined}
             */
            function ready(element) {
                log("off");
                target = register(value);
                target.one("hide", function() {
                    log("on");
                    that.emitFocusedTab("focus-editor", element);
                });
            }
            /**
             * @param {string} event
             * @param {Object} arg
             * @return {undefined}
             */
            function stop(event, arg) {
                log("off");
                result = add(arg, event);
                result.one("hide", function() {
                    log("on");
                    that.emitFocusedTab("focus-editor", res.editorId);
                    $.logger.signinClose(jQuery.timers.stop(e));
                });
                $.logger.signinOpen();
                $.fire("login-attempt", event);
            }
            /**
             * @return {undefined}
             */
            function create() {
                /** @type {boolean} */
                X = true;
                expectedHashCode = doc.querySelector(path);
                if (!expectedHashCode) {
                    expectedHashCode = dialog.findDOMNode(self.renderReactWithParent(dom.createElement(element, null), doc.documentElement, event.guid()).component);
                }
                src = expectedHashCode.querySelector(callback("back"));
            }
            /**
             * @return {?}
             */
            function resize() {
                var cur = {
                    "mail.google.com" : "Gmail",
                    "facebook.com" : "Facebook",
                    "twitter.com" : "Twitter"
                };
                var ontype = url.getDomain();
                return "Back to " + (ontype && cur[ontype] || document.title);
            }
            /**
             * @param {?} event
             * @return {undefined}
             */
            function opt_attributes(event) {
                event.stopPropagation();
                start();
            }
            /**
             * @return {undefined}
             */
            function onComplete() {
                that.emitFocusedTab("dialog-closed", res.editorId);
            }
            /**
             * @return {?}
             */
            function render() {
                if (Y) {
                    /** @type {string} */
                    obj.el.style.background = "";
                    var err = error;
                    return error = function(textStatus) {
                        error = err;
                        obj.refresh();
                        that.emitFocusedTab("after-refresh-dialog", textStatus);
                    }, void start();
                }
                obj.refresh();
            }
            /**
             * @param {boolean} recurring
             * @return {undefined}
             */
            function parent(recurring) {
                that.emitBackground(request.MessageTypes.iframeMode, {
                    iframeMode : recurring,
                    id : res.socketId
                });
            }
            /**
             * @return {undefined}
             */
            function clickRow() {
                if (!value.anonymous) {
                    obj.activate();
                }
            }
            /**
             * @param {Object} data
             * @return {?}
             */
            function done(data) {
                var node = data.data;
                var me = data.caller;
                var method = data.isOnboarding;
                var activeClassName = data.editorId;
                return jQuery.timers.start(e), res = node, method ? ready(activeClassName) : value.anonymous ? stop(me, value) : (obj.activate(), void initialize(node));
            }
            /**
             * @param {Object} params
             * @return {undefined}
             */
            function initialize(params) {
                if (!X) {
                    create();
                }
                /** @type {string} */
                expectedHashCode.style.opacity = "0";
                self.addClass(expectedHashCode, "gr-_show");
                var str = _.extend({
                    favicon : url.getFavicon(),
                    page : resize()
                }, params);
                obj.send(str);
                parent(true);
                setTimeout(function() {
                    return expectedHashCode.style.opacity = "1";
                }, 100);
                log("off");
                self.listen(doc.body, "keydown", attributes, false);
                self.listen(src, "click", opt_attributes, false);
                self.listen(expectedHashCode, "click", opt_attributes, false);
                /** @type {boolean} */
                Y = true;
            }
            /**
             * @param {Object} data
             * @return {undefined}
             */
            function init(data) {
                var action = data.action;
                if ("edit" === action) {
                    error(data);
                }
                if ("close" === action) {
                    start();
                }
                if ("initialized" === action) {
                    fn(data);
                    setTimeout(function() {
                        return obj.el.style.background = "transparent";
                    }, 300);
                }
                if ("socket" === action) {
                    that.emitBackground(request.MessageTypes.client, data);
                }
                if ("setSettings" === action) {
                    filter(data.data);
                }
                if ("tracking" === action) {
                    if (data.method) {
                        $.call(data.method, data.param, data.props);
                    }
                }
                if ("popup-editor-fix" === action) {
                    app();
                }
                if ("open-url" === action) {
                    $.fire("hook-clicked", data.placement);
                    that.emitBackground("open-url", data.url);
                }
            }
            /**
             * @param {Object} req
             * @param {?} filter
             * @return {undefined}
             */
            function handler(req, filter) {
                if (res) {
                    if (req.socketId === res.socketId) {
                        filter("ok");
                        /** @type {string} */
                        req.action = "socket";
                        obj.send(req);
                    }
                }
            }
            /**
             * @param {Object} response
             * @return {undefined}
             */
            function fn(response) {
                /** @type {string} */
                var prevValue = "Premium" === response.userType ? "freemium-plus" : "freemium";
                doc.documentElement.setAttribute("data-type", prevValue);
            }
            /**
             * @return {undefined}
             */
            function start() {
                if (Y) {
                    /** @type {boolean} */
                    Y = false;
                    log("on");
                    /** @type {string} */
                    expectedHashCode.style.opacity = "0";
                    self.removeClass(expectedHashCode, "gr-_show");
                    self.removeClass(expectedHashCode, value);
                    self.unlisten(doc.body, "keydown", attributes, false);
                    self.unlisten(src, "click", opt_attributes, false);
                    self.unlisten(expectedHashCode, "click", opt_attributes, false);
                    obj.send({
                        action : "hide"
                    });
                    parent(false);
                    onComplete();
                }
            }
            /**
             * @return {undefined}
             */
            function remove() {
                if (window === window.top) {
                    that.off("show-dialog", done);
                    that.off("hide-dialog", start);
                    that.off("reset", gl);
                    that.off(request.MessageTypes.serverIframe, handler);
                }
                obj.deactivate();
                obj.off("message", init);
                var tabPage = expectedHashCode && expectedHashCode.parentNode;
                if (tabPage) {
                    if (tabPage.parentNode) {
                        tabPage.parentNode.removeChild(tabPage);
                    }
                }
            }
            /**
             * @param {Object} evt
             * @return {?}
             */
            function attributes(evt) {
                if (event.keyCode(evt) === event.ESC_KEY && Y) {
                    return evt.stopPropagation(), evt.preventDefault(), start();
                }
            }
            var doc = data.doc;
            var obj = data.iframe;
            var value = data.user;
            var page = data.page;
            var config = data.actions;
            var filter = config.updateSettings;
            var app = config.incFixed;
            var channel = config.saveAnonymousProps;
            /** @type {string} */
            var e = "Dialog";
            /** @type {boolean} */
            var Y = false;
            var expectedHashCode = void 0;
            var src = void 0;
            var X = void 0;
            var res = void 0;
            var result = void 0;
            var target = void 0;
            var node = page && page.dialectStrong;
            var defaults = {
                /** @type {function (Object): ?} */
                show : done,
                /** @type {function (): undefined} */
                hide : start,
                /** @type {function (?, ?): undefined} */
                updateState : parse,
                /** @type {function (): undefined} */
                preActivate : clickRow,
                /** @type {function (): undefined} */
                render : create,
                /** @type {function (Object, string): ?} */
                getSignin : add,
                /** @type {function (): undefined} */
                remove : remove,
                /** @type {function (): ?} */
                refresh : render
            };
            if (obj) {
                obj.on("message", init);
            }
            if (window === window.top) {
                that.on("show-dialog", done);
                that.on("hide-dialog", start);
                that.on("reset", gl);
                that.on(request.MessageTypes.serverIframe, handler);
            }
            /**
             * @param {string} textStatus
             * @return {undefined}
             */
            var error = function(textStatus) {
                that.emitFocusedTab("editor-set-state", textStatus);
            };
            return defaults;
        }
        var data = require("babel-runtime/core-js/object/get-prototype-of");
        var conf = create(data);
        var type = require("babel-runtime/helpers/classCallCheck");
        var model = create(type);
        var selector = require("babel-runtime/helpers/createClass");
        var elem = create(selector);
        var target = require("babel-runtime/helpers/possibleConstructorReturn");
        var socket = create(target);
        var tag = require("babel-runtime/helpers/inherits");
        var el = create(tag);
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var _ = require("lodash");
        var dom = require("react");
        var dialog = require("react-dom");
        var child = require("./iframe");
        var nodes = require("./signin-dialog");
        var Block = require("./onboarding-dialog");
        var event = require("../util");
        var that = require("../message");
        var jQuery = require("../timers");
        var $ = require("../tracking");
        var url = require("../location");
        var self = require("../dom");
        var request = require("universal/shared/socket");
        /** @type {string} */
        var name = "gr_-editor";
        /** @type {string} */
        var value = "gr-iframe-first-load";
        /** @type {string} */
        var path = "." + name;
        /**
         * @param {string} key
         * @return {?}
         */
        var callback = function(key) {
            return "." + name + "_" + key;
        };
        /**
         * @param {string} val
         * @return {?}
         */
        var number = function(val) {
            return name + "_" + val;
        };
        var element = function(deepDataAndEvents) {
            /**
             * @return {?}
             */
            function value() {
                return(0, model["default"])(this, value), (0, socket["default"])(this, (value.__proto__ || (0, conf["default"])(value)).apply(this, arguments));
            }
            return(0, el["default"])(value, deepDataAndEvents), (0, elem["default"])(value, [{
                key : "render",
                /**
                 * @return {?}
                 */
                value : function() {
                    /** @type {string} */
                    var tval = name + " " + value;
                    return dom.createElement("div", {
                        className : tval,
                        style : {
                            display : "none"
                        }
                    }, dom.createElement("div", {
                        className : number("back")
                    }), dom.createElement(child.IframeComponent, null));
                }
            }]), value;
        }(dom.Component);
        expectedHashCode.DialogComponent = element;
        /** @type {function (Object): ?} */
        expectedHashCode.Dialog = init;
    }, {
        "../dom" : 215,
        "../location" : 277,
        "../message" : 278,
        "../timers" : 301,
        "../tracking" : 307,
        "../util" : 322,
        "./iframe" : 225,
        "./onboarding-dialog" : 229,
        "./signin-dialog" : 238,
        "babel-runtime/core-js/object/get-prototype-of" : 28,
        "babel-runtime/helpers/classCallCheck" : 34,
        "babel-runtime/helpers/createClass" : 35,
        "babel-runtime/helpers/inherits" : 38,
        "babel-runtime/helpers/possibleConstructorReturn" : 39,
        lodash : "lodash",
        react : "react",
        "react-dom" : "react-dom",
        "universal/shared/socket" : 345
    }],
    223 : [function(require, dataAndEvents, expectedHashCode) {
        /**
         * @param {Object} params
         * @return {?}
         */
        function initialize(params) {
            /**
             * @param {Event} ev
             * @return {undefined}
             */
            function attributes(ev) {
                if (self.hasClass(ev.target, "fr-reload-tab")) {
                    common.logger.tabReloadClick();
                    setTimeout(function() {
                        return window.location.reload(true);
                    }, 200);
                }
            }
            var el = params.el;
            var expectedHashCode = params.win;
            var len = params.outerIframe;
            var selfObj = $.createTooltip({
                posEl : el,
                html : "<span class='fr-tooltip-title'>Cannot connect to Grammarly.</span> Please <span class='fr-reload-tab'>reload</span> the browser tab and check your internet connection. <span class='fr-dialog-br'></span>Don't lose your work! Copy any unsaved text before you reload the tab.",
                doc : el.ownerDocument,
                cls : "fr-btn-offline-tooltip",
                outerIframe : len,
                enabled : false
            });
            self.listen(expectedHashCode, "click", attributes);
            /** @type {function (): undefined} */
            var _remove = selfObj.remove;
            return selfObj.remove = function() {
                _remove();
                self.unlisten(expectedHashCode, "click", attributes);
            }, selfObj;
        }
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var $ = require("./tooltip");
        var self = require("../dom");
        var common = require("../tracking");
        /** @type {function (Object): ?} */
        expectedHashCode.createErrorTooltip = initialize;
    }, {
        "../dom" : 215,
        "../tracking" : 307,
        "./tooltip" : 247
    }],
    224 : [function(require, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} value
         * @return {?}
         */
        function extend(value) {
            return value && value.__esModule ? value : {
                "default" : value
            };
        }
        var tagName = require("babel-runtime/core-js/object/assign");
        var e = extend(tagName);
        var Node = require("babel-runtime/helpers/classCallCheck");
        var oldconfig = extend(Node);
        var data = require("babel-runtime/helpers/createClass");
        var conf = extend(data);
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var config = require("../util");
        var $ = require("../dom");
        var HintImpl = function() {
            /**
             * @param {?} opt_handler
             * @return {undefined}
             */
            function init(opt_handler) {
                var self = this;
                (0, oldconfig["default"])(this, init);
                /** @type {number} */
                this.hideDelay = 10;
                /**
                 * @param {boolean} arg
                 * @param {Object} stream
                 * @return {undefined}
                 */
                this.onshow = function(arg, stream) {
                };
                this.onhide = config._f;
                /**
                 * @param {Object} e
                 * @param {boolean} recurring
                 * @return {undefined}
                 */
                this.onmousemove = function(e, recurring) {
                };
                /**
                 * @param {Object} v
                 * @return {undefined}
                 */
                this.onInnerMouseMove = function(v) {
                };
                /**
                 * @param {Object} e
                 * @return {?}
                 */
                this.inTarget = function(e) {
                    var li = e.target;
                    var r = $.parentHasClass(li, self.cls) || $.hasClass(li, self.cls);
                    if (r) {
                        return!self.currentEl || (self.currentEl === li || void self.fastHide());
                    }
                };
                /**
                 * @param {Object} recurring
                 * @return {?}
                 */
                this.bind = function(recurring) {
                    var expectedHashCode = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : self.doc;
                    return self.doc2 && (self.doc2 !== expectedHashCode && self.bind(recurring, self.doc2)), $.listen(expectedHashCode.body, "resize", self.fastHide, recurring), $.listen(expectedHashCode, {
                        gramMouse : self.mousemove,
                        mousemove : self.mousemove,
                        scroll : self.fastHide
                    }, config._f, recurring), $.listen(expectedHashCode, "click", self.click, recurring, true), $.listen(self.hint, "mousemove", self.innerMouseMove, recurring), self;
                };
                /**
                 * @param {HTMLDocument} date
                 * @param {?} logger
                 * @return {undefined}
                 */
                this.setDocs = function(date, logger) {
                    self.unbind();
                    (0, e["default"])(self, {
                        doc : date,
                        doc2 : logger
                    });
                    self.bind();
                };
                /**
                 * @param {?} callback
                 * @return {?}
                 */
                this.unbind = function(callback) {
                    return self.bind(true, callback);
                };
                /**
                 * @return {undefined}
                 */
                this.fastHide = function() {
                    self.onhide();
                    self.cancelTimeout("show");
                    self.cancelTimeout("hide");
                    /** @type {boolean} */
                    self.visible = false;
                    /** @type {null} */
                    self.currentEl = null;
                };
                /**
                 * @param {Object} event
                 * @return {undefined}
                 */
                this.innerMouseMove = function(event) {
                    self.onInnerMouseMove(event);
                    event.preventDefault();
                    event.stopPropagation();
                    self.cancelTimeout("hide");
                };
                /**
                 * @param {Object} e
                 * @return {?}
                 */
                this.click = function(e) {
                    return!self.elInHint(e.target) && (!self.inTarget(e) && self.fastHide());
                };
                /**
                 * @param {number} name
                 * @return {?}
                 */
                this.elInHint = function(name) {
                    return name && ($.inEl(name, self.hint) || name === self.hint);
                };
                /**
                 * @param {Object} e
                 * @return {?}
                 */
                this.mousemove = function(e) {
                    var t = e.target;
                    if ("IFRAME" !== t.tagName) {
                        if (e.detail && e.detail.id) {
                            /** @type {(Element|null)} */
                            var localize = document.querySelector("[data-gr-id='" + e.detail.id + "']");
                            if (localize) {
                                /** @type {Element} */
                                t = localize;
                                e = {
                                    target : t,
                                    clientX : e.detail.e.clientX,
                                    clientY : e.detail.e.clientY
                                };
                            }
                        }
                        if (config.isSafari() && "mousemove" === e.type) {
                            if (e.ctrlKey || (e.altKey || (e.shiftKey || e.metaKey))) {
                                return self.mouseMoveCoordinates = e.x + "-" + e.y;
                            }
                            if (self.mouseMoveCoordinates === e.x + "-" + e.y) {
                                return;
                            }
                        }
                        if (self.elInHint(t)) {
                            return self.onmousemove(e, true), self.cancelTimeout("show"), void self.cancelTimeout("hide");
                        }
                        if (!self.inTarget(e)) {
                            return self.onmousemove(e, false), void(self.visible ? self.hide() : self.cancelTimeout("show"));
                        }
                        self.onmousemove(e, true);
                        if (!self.visible) {
                            self.show(e, t);
                            self.cancelTimeout("hide");
                            self.currentEl = t;
                        }
                    }
                };
                /**
                 * @param {Object} e
                 * @param {Object} d
                 * @return {?}
                 */
                this.show = function(e, d) {
                    return self.showTimeout ? self : (self.cancelTimeout("hide"), self.showTimeout = setTimeout(function() {
                        self.cancelTimeout("show");
                        if (self.elInHint(d) || self.inTarget(e)) {
                            /** @type {boolean} */
                            self.visible = true;
                            self.onshow(d, {
                                pageX : e.pageX,
                                pageY : e.pageY,
                                clientX : e.clientX,
                                clientY : e.clientY
                            });
                        }
                    }, self.delay), self);
                };
                /**
                 * @return {?}
                 */
                this.hide = function() {
                    return self.hideTimeout ? self : (self.hideTimeout = setTimeout(function() {
                        self.onhide();
                        /** @type {boolean} */
                        self.visible = false;
                        /** @type {null} */
                        self.currentEl = null;
                    }, self.hideDelay), self);
                };
                (0, e["default"])(this, opt_handler);
            }
            return(0, conf["default"])(init, [{
                key : "cancelTimeout",
                /**
                 * @param {string} expectedHashCode
                 * @return {undefined}
                 */
                value : function(expectedHashCode) {
                    if ("show" === expectedHashCode && this.showTimeout) {
                        clearTimeout(this.showTimeout);
                        /** @type {null} */
                        this.showTimeout = null;
                    } else {
                        if ("hide" === expectedHashCode) {
                            if (this.hideTimeout) {
                                clearTimeout(this.hideTimeout);
                                /** @type {null} */
                                this.hideTimeout = null;
                            }
                        }
                    }
                }
            }, {
                key : "setVisible",
                /**
                 * @param {string} expectedHashCode
                 * @return {undefined}
                 */
                value : function(expectedHashCode) {
                    /** @type {string} */
                    this.visible = expectedHashCode;
                    this.cancelTimeout("hide");
                }
            }]), init;
        }();
        expectedHashCode.HintImpl = HintImpl;
    }, {
        "../dom" : 215,
        "../util" : 322,
        "babel-runtime/core-js/object/assign" : 24,
        "babel-runtime/helpers/classCallCheck" : 34,
        "babel-runtime/helpers/createClass" : 35
    }],
    225 : [function(require, dataAndEvents, me) {
        /**
         * @param {Object} result
         * @return {?}
         */
        function create(result) {
            /**
             * @param {Object} args
             * @return {undefined}
             */
            function start(args) {
                /** @type {Object} */
                name = args;
            }
            /**
             * @return {undefined}
             */
            function link() {
                /**
                 * @return {undefined}
                 */
                function initialize() {
                    if (expectedHashCode || (expectedHashCode = ctx.querySelector(me.selector), output.el = expectedHashCode, expectedHashCode)) {
                        self.listen(window.top, "message", attributes, false);
                        if (config.isEdge()) {
                            if (!expectedHashCode.src) {
                                initialize(e);
                            }
                        } else {
                            if (!expectedHashCode.srcdoc) {
                                walk(e);
                            }
                        }
                        self.addClass(expectedHashCode, "gr-freemium-ifr");
                        /** @type {boolean} */
                        activated = true;
                        /** @type {boolean} */
                        output.activated = activated;
                    }
                }
                var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : config._f;
                if (!activated) {
                    initialize();
                }
            }
            /**
             * @return {undefined}
             */
            function initialize() {
                var attributes = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : config._f;
                expectedHashCode.setAttribute("src", nodes.URLS.popupUrl);
                self.once.call(expectedHashCode, "load", attributes);
            }
            /**
             * @return {undefined}
             */
            function walk() {
                var readFileSync = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : config._f;
                var initialValue = window.GR_INLINE_POPUP || "";
                expectedHashCode.setAttribute("srcdoc", initialValue);
                self.once.call(expectedHashCode, "load", function() {
                    try {
                        if (window.ACTIVATE_GR_POPUP) {
                            window.ACTIVATE_GR_POPUP(expectedHashCode.contentWindow, expectedHashCode.contentDocument, Block);
                        }
                        readFileSync();
                    } catch (cycle) {
                        console.error("Cannot activate popup", cycle);
                        common.logger.popupLoadError(cycle && cycle.message, cycle && cycle.name);
                    }
                });
            }
            /**
             * @return {undefined}
             */
            function refresh() {
                var lastScope = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : config._f;
                if (expectedHashCode) {
                    url();
                } else {
                    link(lastScope);
                }
            }
            /**
             * @param {string} obj
             * @param {boolean} selector
             * @return {?}
             */
            function setup(obj, selector) {
                return data || selector ? void callback(obj) : ary.push(obj);
            }
            /**
             * @param {string} event
             * @return {undefined}
             */
            function callback(event) {
                /** @type {boolean} */
                event.grammarly = true;
                try {
                    expectedHashCode.contentWindow.postMessage(event, "*");
                } catch (cycle) {
                    console.error("iframe send error", cycle);
                }
            }
            /**
             * @param {MessageEvent} el
             * @return {?}
             */
            function attributes(el) {
                var attributes = el.data;
                if (attributes && attributes.grammarly) {
                    var action = attributes.action;
                    if ("user" === action) {
                        return url();
                    }
                    if (data = true, "initialized" === action && ary) {
                        api.timers.stop("open_editor");
                        ary.forEach(function(str) {
                            return output.send(str);
                        });
                    }
                    api.timers.stop("open_editor");
                    if ("accepted" === action) {
                        /** @type {Array} */
                        ary = [];
                    }
                    output.emit("message", attributes);
                }
            }
            /**
             * @return {undefined}
             */
            function init() {
                self.unlisten(window.top, "message", attributes, false);
            }
            /**
             * @return {undefined}
             */
            function url() {
                callback({
                    action : "user",
                    user : name
                });
            }
            var ctx = result.doc;
            var name = result.user;
            var expectedHashCode = void 0;
            var activated = void 0;
            /** @type {Array} */
            var ary = [];
            /** @type {boolean} */
            var data = false;
            var output = emitter({
                /** @type {function (): undefined} */
                activate : link,
                /** @type {function (): undefined} */
                refresh : refresh,
                /** @type {function (string, boolean): ?} */
                send : setup,
                selector : me.selector,
                baseCls : me.baseCls,
                /** @type {function (Object): undefined} */
                updateState : start,
                /** @type {function (): undefined} */
                deactivate : init
            });
            return output;
        }
        Object.defineProperty(me, "__esModule", {
            value : true
        });
        var dom = require("react");
        var emitter = require("emitter");
        var Block = require("dompurify");
        var config = require("../util");
        var api = require("../timers");
        var common = require("../tracking");
        var self = require("../dom");
        var nodes = require("lib/config");
        /** @type {string} */
        me.baseCls = "gr_-ifr";
        /** @type {string} */
        me.selector = "." + me.baseCls;
        /**
         * @return {?}
         */
        me.IframeComponent = function() {
            return dom.createElement("iframe", {
                className : me.baseCls + " gr-_dialog-content"
            });
        };
        /** @type {function (Object): ?} */
        me.iFrame = create;
    }, {
        "../dom" : 215,
        "../timers" : 301,
        "../tracking" : 307,
        "../util" : 322,
        dompurify : "dompurify",
        emitter : "emitter",
        "lib/config" : 211,
        react : "react"
    }],
    226 : [function(require, dataAndEvents, expectedHashCode) {
        /**
         * @param {Object} options
         * @return {?}
         */
        function init(options) {
            /**
             * @param {Object} options
             * @return {undefined}
             */
            function load(options) {
                var pending = options.user;
                var page = options.page;
                if (self.iframe) {
                    self.iframe.updateState(pending);
                }
                if (self.dialog) {
                    self.dialog.updateState(pending, page);
                }
                if (self.card) {
                    self.card.updateState(pending);
                }
            }
            /**
             * @return {undefined}
             */
            function clear() {
                if (self.iframe) {
                    self.iframe.deactivate();
                }
                if (self.dialog) {
                    self.dialog.remove();
                }
                if (self.card) {
                    self.card.remove();
                }
                /** @type {null} */
                self.iframe = null;
                /** @type {null} */
                self.dialog = null;
                /** @type {null} */
                self.card = null;
            }
            var self = options.app;
            var d = options.doc;
            var doc = void 0 === d ? document : d;
            var user = options.user;
            var page = options.page;
            var actions = options.actions;
            var iframe = self.iframe = db.iFrame({
                doc : doc,
                user : user
            });
            return self.dialog = $.Dialog({
                doc : doc,
                iframe : iframe,
                user : user,
                actions : actions,
                page : page
            }), self.dialog.render(), self.card = new Block.Card({
                doc : doc,
                user : user
            }), self.notifications = new nodes.Notifications({
                doc : doc,
                actions : actions
            }), {
                /** @type {function (): undefined} */
                clear : clear,
                /** @type {function (Object): undefined} */
                updateState : load
            };
        }
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var db = require("./iframe");
        var $ = require("./dialog");
        var Block = require("./card");
        var nodes = require("./notifications");
        /** @type {function (Object): ?} */
        expectedHashCode.initElements = init;
    }, {
        "./card" : 221,
        "./dialog" : 222,
        "./iframe" : 225,
        "./notifications" : 228
    }],
    227 : [function(require, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} value
         * @return {?}
         */
        function parseInt(value) {
            return value && value.__esModule ? value : {
                "default" : value
            };
        }
        var nodes = require("babel-runtime/core-js/object/get-prototype-of");
        var result = parseInt(nodes);
        var b = require("babel-runtime/helpers/classCallCheck");
        var bp = parseInt(b);
        var g = require("babel-runtime/helpers/createClass");
        var ret = parseInt(g);
        var one = require("babel-runtime/helpers/possibleConstructorReturn");
        var column = parseInt(one);
        var prop = require("babel-runtime/helpers/inherits");
        var p = parseInt(prop);
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var dom = require("react");
        var Block = require("react-dom");
        var $ = require("lib/dom");
        var helper = require("lib/tracking");
        var self = {
            notification : "_988ad5-notification",
            title : "_988ad5-title",
            reminder : "_988ad5-reminder",
            text : "_988ad5-text",
            disableOnTab : "_988ad5-disableOnTab",
            disable : "_988ad5-disable",
            bold : "_988ad5-bold",
            action : "_988ad5-action",
            secondary : "_988ad5-secondary",
            close : "_988ad5-close"
        };
        /** @type {number} */
        var backoff = 3E3;
        /** @type {number} */
        var DELAY_AFTER_ANIMATION_BEGINS_BEFORE_CLOSE = 500;
        var actions = {
            disable : {
                title : "Grammarly is now turned off on ",
                text : "The extension will remain disabled on this website until you enable it from the toolbar icon."
            },
            disableOnTab : {
                title : "Grammarly is temporarily disabled on ",
                text : "We will be here next time you visit this website. You can enable it from the toolbar icon."
            },
            reminder : {
                title : "Your writing is still not being checked on ",
                text : "Are you communicating at your best? Switch the extension back on and be confident about your writing."
            }
        };
        var NotificationComponent = function(deepDataAndEvents) {
            /**
             * @return {?}
             */
            function initialize() {
                (0, bp["default"])(this, initialize);
                var self = (0, column["default"])(this, (initialize.__proto__ || (0, result["default"])(initialize)).call(this));
                return self.onMouseEnter = function() {
                    clearTimeout(self._hideTimeout);
                }, self.onMouseLeave = function() {
                    /** @type {number} */
                    self._hideTimeout = setTimeout(self.cancel, DELAY_AFTER_ANIMATION_BEGINS_BEFORE_CLOSE);
                }, self.cancel = function() {
                    if (self._node) {
                        /** @type {string} */
                        self._node.style.opacity = "0";
                        self._node.addEventListener("transitionend", function() {
                            self.props.remove();
                        }, false);
                    } else {
                        self.props.remove();
                    }
                }, self.state = {
                    styles : {}
                }, self;
            }
            return(0, p["default"])(initialize, deepDataAndEvents), (0, ret["default"])(initialize, [{
                key : "componentDidMount",
                /**
                 * @return {undefined}
                 */
                value : function() {
                    var args = this;
                    var el = Block.findDOMNode(this.refs.gNotification);
                    el.style.setProperty("transition", "none", "important");
                    /** @type {number} */
                    this._requestAnimationFrame = requestAnimationFrame(function() {
                        el.style.setProperty("transition", "opacity 0.35s cubic-bezier(0.255,0.89,0.25,1.135),transform 0.35s cubic-bezier(0.255,0.89,0.25,1.135)", "important");
                        requestAnimationFrame(function() {
                            if (el.style.opacity = "1", el.style.transform) {
                                var octalLiteral = el.style.transform.split("(")[1].split(")")[0].split(",");
                                /** @type {number} */
                                var charCodeToReplace = parseInt(octalLiteral[0], 10);
                                /** @type {number} */
                                var top = parseInt(octalLiteral[1], 10);
                                /** @type {string} */
                                el.style.transform = "translate(" + charCodeToReplace + "px, " + (top + el.clientHeight) + "px)";
                            }
                        });
                    });
                    this._node = el;
                    this.setState(function() {
                        return{
                            styles : args.props.styles
                        };
                    });
                    /** @type {number} */
                    this._hideTimeout = setTimeout(this.cancel, backoff);
                }
            }, {
                key : "componentWillUnmount",
                /**
                 * @return {undefined}
                 */
                value : function() {
                    cancelAnimationFrame(this._requestAnimationFrame);
                }
            }, {
                key : "renderButtons",
                /**
                 * @return {?}
                 */
                value : function() {
                    var item = this;
                    switch(this.props.type) {
                        case "disable":
                            return dom.createElement("div", null, dom.createElement("button", {
                                className : self.action,
                                onClick : this.cancel
                            }, "Got it"), dom.createElement("button", {
                                className : $.cs(self.action, self.secondary),
                                onClick : this.props.enableOnDomain
                            }, "Enable now"));
                        case "disableOnTab":
                            return dom.createElement("button", {
                                className : self.action,
                                onClick : this.cancel
                            }, "Got it");
                        case "reminder":
                            return dom.createElement("div", null, dom.createElement("button", {
                                className : self.action,
                                onClick : this.props.enableOnDomain
                            }, "Enable Grammarly"), dom.createElement("button", {
                                className : $.cs(self.action, self.secondary),
                                /**
                                 * @return {undefined}
                                 */
                                onClick : function() {
                                    helper.call("gnar.track", "disableReminderDismiss");
                                    item.cancel();
                                }
                            }, "Keep disabled"));
                        default:
                            return;
                    }
                }
            }, {
                key : "render",
                /**
                 * @return {?}
                 */
                value : function() {
                    var post = actions[this.props.type];
                    var content = post.text;
                    var title = post.title;
                    return dom.createElement("div", {
                        ref : "gNotification",
                        className : $.cs(self.notification, self[this.props.type]),
                        style : this.state.styles,
                        onMouseEnter : this.onMouseEnter,
                        onMouseLeave : this.onMouseLeave
                    }, dom.createElement("p", {
                        className : self.title
                    }, title + this.props.domain), dom.createElement("p", {
                        className : self.text
                    }, content), this.renderButtons(), dom.createElement("button", {
                        className : self.close,
                        onClick : this.cancel
                    }));
                }
            }]), initialize;
        }(dom.Component);
        expectedHashCode.NotificationComponent = NotificationComponent;
    }, {
        "babel-runtime/core-js/object/get-prototype-of" : 28,
        "babel-runtime/helpers/classCallCheck" : 34,
        "babel-runtime/helpers/createClass" : 35,
        "babel-runtime/helpers/inherits" : 38,
        "babel-runtime/helpers/possibleConstructorReturn" : 39,
        "lib/dom" : 215,
        "lib/tracking" : 307,
        react : "react",
        "react-dom" : "react-dom"
    }],
    228 : [function(require, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} parent
         * @return {?}
         */
        function $(parent) {
            return parent && parent.__esModule ? parent : {
                "default" : parent
            };
        }
        var target = require("babel-runtime/helpers/defineProperty");
        var type = $(target);
        var path = require("babel-runtime/core-js/object/assign");
        var p = $(path);
        var child = require("babel-runtime/helpers/classCallCheck");
        var item = $(child);
        var selector = require("babel-runtime/helpers/createClass");
        var elem = $(selector);
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var util = require("react");
        var lang = require("react-dom");
        var url = require("lib/location");
        var Event = require("lib/dom");
        var input = require("./components");
        var _self = require("../../tracking");
        /** @type {number} */
        var a = 160;
        /** @type {number} */
        var YY_START = -10;
        /** @type {number} */
        var l = 15;
        var Notifications = function() {
            /**
             * @param {Object} context
             * @return {undefined}
             */
            function close(context) {
                var that = this;
                var doc = context.doc;
                var actions = context.actions;
                (0, item["default"])(this, close);
                /**
                 * @return {?}
                 */
                this._getStyles = function() {
                    var r20 = Event.transformProp(that._doc);
                    /** @type {number} */
                    var YYSTATE = YY_START;
                    /** @type {number} */
                    var e = l - a;
                    return(0, p["default"])({}, (0, type["default"])({}, r20, "translate(" + YYSTATE + "px, " + e + "px)"));
                };
                /**
                 * @return {undefined}
                 */
                this._windowResize = function() {
                    var styles = that._getStyles();
                    that._component.setState(function() {
                        return{
                            styles : styles
                        };
                    });
                };
                this._doc = doc;
                this.actions = actions;
            }
            return(0, elem["default"])(close, [{
                key : "_checkContainer",
                /**
                 * @return {undefined}
                 */
                value : function() {
                    if (!this._container) {
                        this._container = this._doc.createElement("g-notifications");
                        this._doc.documentElement.appendChild(this._container);
                    }
                }
            }, {
                key : "showDisable",
                /**
                 * @return {undefined}
                 */
                value : function() {
                    this._show("disable");
                }
            }, {
                key : "showDisableOnTab",
                /**
                 * @return {undefined}
                 */
                value : function() {
                    this._show("disableOnTab");
                }
            }, {
                key : "showReminder",
                /**
                 * @return {undefined}
                 */
                value : function() {
                    this._show("reminder");
                    _self.call("gnar.track", "disableReminderShown");
                }
            }, {
                key : "_show",
                /**
                 * @param {string} expectedHashCode
                 * @return {undefined}
                 */
                value : function(expectedHashCode) {
                    this._render(expectedHashCode);
                    /** @type {boolean} */
                    this.isActive = true;
                    Event.listen(window, "resize", this._windowResize, false);
                    _self.logger.notificationShown(expectedHashCode);
                }
            }, {
                key : "hide",
                /**
                 * @param {string} expectedHashCode
                 * @return {undefined}
                 */
                value : function(expectedHashCode) {
                    /** @type {boolean} */
                    this.isActive = false;
                    if (this._container) {
                        lang.unmountComponentAtNode(this._container);
                    }
                    Event.unlisten(window, "resize", this._windowResize, false);
                    if (void 0 !== expectedHashCode) {
                        _self.logger.notificationHide(expectedHashCode);
                    }
                }
            }, {
                key : "_render",
                /**
                 * @param {string} expectedHashCode
                 * @return {undefined}
                 */
                value : function(expectedHashCode) {
                    var file = this;
                    this._checkContainer();
                    var styles = this._getStyles();
                    var domain = url.getDomain();
                    var type = util.createElement(input.NotificationComponent, {
                        /**
                         * @return {undefined}
                         */
                        enableOnDomain : function() {
                            file.actions.toggleSite(true, domain);
                            file.remove(expectedHashCode);
                            _self.fire("checking-toggled", {
                                enabled : true,
                                placement : "reminder" === expectedHashCode ? "reminder" : "notification"
                            });
                        },
                        styles : styles,
                        /**
                         * @return {?}
                         */
                        remove : function() {
                            return file.remove(expectedHashCode);
                        },
                        type : expectedHashCode,
                        domain : domain
                    });
                    this._component = lang.render(type, this._container);
                }
            }, {
                key : "remove",
                /**
                 * @param {string} expectedHashCode
                 * @return {undefined}
                 */
                value : function(expectedHashCode) {
                    this.hide(expectedHashCode);
                    if (this._container) {
                        lang.unmountComponentAtNode(this._container);
                    }
                    if (this._container) {
                        if (this._container.parentNode) {
                            this._container.parentNode.removeChild(this._container);
                        }
                    }
                }
            }]), close;
        }();
        expectedHashCode.Notifications = Notifications;
    }, {
        "../../tracking" : 307,
        "./components" : 227,
        "babel-runtime/core-js/object/assign" : 24,
        "babel-runtime/helpers/classCallCheck" : 34,
        "babel-runtime/helpers/createClass" : 35,
        "babel-runtime/helpers/defineProperty" : 36,
        "lib/dom" : 215,
        "lib/location" : 277,
        react : "react",
        "react-dom" : "react-dom"
    }],
    229 : [function(require, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} type
         * @return {?}
         */
        function parseInt(type) {
            return type && type.__esModule ? type : {
                "default" : type
            };
        }
        var c = require("babel-runtime/core-js/object/get-prototype-of");
        var h = parseInt(c);
        var nodes = require("babel-runtime/helpers/classCallCheck");
        var result = parseInt(nodes);
        var text = require("babel-runtime/helpers/createClass");
        var type = parseInt(text);
        var b = require("babel-runtime/helpers/possibleConstructorReturn");
        var bp = parseInt(b);
        var which = require("babel-runtime/helpers/inherits");
        var keys = parseInt(which);
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var helper = require("react");
        var lang = require("react-dom");
        var event = require("lib/util");
        var handler = require("lib/dom");
        var child = require("./onboarding-dialog");
        var template = require("emitter");
        var OnboardingDialog = function(deepDataAndEvents) {
            /**
             * @param {Object} opts
             * @return {?}
             */
            function create(opts) {
                var doc = opts.doc;
                var container = opts.container;
                var username = opts.user;
                var timeout = opts.saveAnonymousProps;
                (0, result["default"])(this, create);
                var self = (0, bp["default"])(this, (create.__proto__ || (0, h["default"])(create)).call(this));
                return self.updateUser = function(data) {
                    self.user = data;
                    self.render();
                }, self.onKey = function(evt) {
                    if (event.keyCode(evt) === event.ESC_KEY) {
                        if (self.dialogComponent) {
                            self.dialogComponent.onClose();
                        }
                    }
                }, self.onClose = function() {
                    self.emit("hide");
                    self.remove();
                }, self.doc = doc, self.user = username, self.saveAnonymousProps = timeout, container && (self.container = container), self.render(), self;
            }
            return(0, keys["default"])(create, deepDataAndEvents), (0, type["default"])(create, [{
                key : "checkContainer",
                /**
                 * @return {undefined}
                 */
                value : function() {
                    if (!this.container) {
                        this.container = this.doc.createElement("onboarding_dialog");
                        this.doc.documentElement.appendChild(this.container);
                        handler.listen(this.doc.defaultView, "keydown", this.onKey, false);
                    }
                }
            }, {
                key : "render",
                /**
                 * @return {undefined}
                 */
                value : function() {
                    var item = this.user;
                    this.checkContainer();
                    this.dialogComponent = lang.render(helper.createElement(child.OnboardingDialogComponent, {
                        username : item && item.firstName || "",
                        isAnonymous : !item || item.anonymous,
                        saveAnonymousProps : this.saveAnonymousProps,
                        onClose : this.onClose
                    }), this.container);
                }
            }, {
                key : "remove",
                /**
                 * @return {undefined}
                 */
                value : function() {
                    handler.unlisten(this.doc.defaultView, "keydown", this.onKey, false);
                    if (this.container) {
                        lang.unmountComponentAtNode(this.container);
                    }
                    if (this.container.parentNode) {
                        this.container.parentNode.removeChild(this.container);
                    }
                }
            }]), create;
        }(event.createClass(template));
        expectedHashCode.OnboardingDialog = OnboardingDialog;
    }, {
        "./onboarding-dialog" : 230,
        "babel-runtime/core-js/object/get-prototype-of" : 28,
        "babel-runtime/helpers/classCallCheck" : 34,
        "babel-runtime/helpers/createClass" : 35,
        "babel-runtime/helpers/inherits" : 38,
        "babel-runtime/helpers/possibleConstructorReturn" : 39,
        emitter : "emitter",
        "lib/dom" : 215,
        "lib/util" : 322,
        react : "react",
        "react-dom" : "react-dom"
    }],
    230 : [function(require, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} type
         * @return {?}
         */
        function $(type) {
            return type && type.__esModule ? type : {
                "default" : type
            };
        }
        var ready = require("babel-runtime/helpers/defineProperty");
        var ret = $(ready);
        var nodes = require("babel-runtime/core-js/object/get-prototype-of");
        var result = $(nodes);
        var selector = require("babel-runtime/helpers/classCallCheck");
        var elem = $(selector);
        var helper = require("babel-runtime/helpers/createClass");
        var update = $(helper);
        var use = require("babel-runtime/helpers/possibleConstructorReturn");
        var p = $(use);
        var c = require("babel-runtime/helpers/inherits");
        var h = $(c);
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var dom = require("react");
        var Block = require("react-dom");
        var fs = require("lib/util");
        var command = require("lib/dom");
        var child = require("../onboarding");
        var util = require("lib/tracking");
        var data = {
            onboardingDialog : "_9375ba-onboardingDialog",
            viewContainer : "_9375ba-viewContainer",
            view : "_9375ba-view",
            windows : "_9375ba-windows",
            footer : "_9375ba-footer",
            hide : "_9375ba-hide",
            content : "_9375ba-content",
            btnClose : "_9375ba-btnClose"
        };
        var OnboardingDialogComponent = function(deepDataAndEvents) {
            /**
             * @return {?}
             */
            function value() {
                (0, elem["default"])(this, value);
                var self = (0, p["default"])(this, (value.__proto__ || (0, result["default"])(value)).apply(this, arguments));
                return self.state = {
                    hide : false
                }, self.onClose = function(expectedHashCode) {
                    if (expectedHashCode) {
                        expectedHashCode.stopPropagation();
                    }
                    self.setState({
                        hide : true
                    });
                    var newNode = Block.findDOMNode(self.refs["onboarding-dialog-el"]);
                    var test = self.refs.onboarding;
                    if (void 0 !== test) {
                        if (test.state.stepIndex === test.steps.length - 1) {
                            util.fire("onboardingTutorialLetsWrite-button-click");
                        }
                    }
                    if (newNode) {
                        newNode.addEventListener("animationend", function() {
                            return self.props.onClose();
                        });
                    }
                }, self;
            }
            return(0, h["default"])(value, deepDataAndEvents), (0, update["default"])(value, [{
                key : "render",
                /**
                 * @return {?}
                 */
                value : function() {
                    var r20;
                    var cls = command.cs((r20 = {}, (0, ret["default"])(r20, data.onboardingDialog, true), (0, ret["default"])(r20, data.hide, this.state.hide), (0, ret["default"])(r20, data.windows, fs.isWindows()), r20));
                    return dom.createElement("div", {
                        ref : "onboarding-dialog-el",
                        className : cls
                    }, dom.createElement("div", {
                        className : data.content
                    }, dom.createElement("div", {
                        className : data.viewContainer
                    }, dom.createElement(child.Onboarding, {
                        ref : "onboarding",
                        isAnonymous : this.props.isAnonymous,
                        onClose : this.onClose,
                        saveAnonymousProps : this.props.saveAnonymousProps
                    }))), dom.createElement("div", {
                        className : data.btnClose,
                        onClick : this.onClose
                    }));
                }
            }]), value;
        }(dom.Component);
        expectedHashCode.OnboardingDialogComponent = OnboardingDialogComponent;
    }, {
        "../onboarding" : 232,
        "babel-runtime/core-js/object/get-prototype-of" : 28,
        "babel-runtime/helpers/classCallCheck" : 34,
        "babel-runtime/helpers/createClass" : 35,
        "babel-runtime/helpers/defineProperty" : 36,
        "babel-runtime/helpers/inherits" : 38,
        "babel-runtime/helpers/possibleConstructorReturn" : 39,
        "lib/dom" : 215,
        "lib/tracking" : 307,
        "lib/util" : 322,
        react : "react",
        "react-dom" : "react-dom"
    }],
    231 : [function(require, dataAndEvents, expectedHashCode) {
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var dom = require("react");
        var o = {
            start : "_2333f7-start",
            info : "_2333f7-info",
            finish : "_2333f7-finish",
            startVideo : "_2333f7-startVideo",
            infoVideo : "_2333f7-infoVideo",
            finishVideo : "_2333f7-finishVideo",
            step : "_2333f7-step",
            content : "_2333f7-content",
            title : "_2333f7-title",
            text : "_2333f7-text",
            button : "_2333f7-button",
            inactive : "_2333f7-inactive",
            link : "_2333f7-link",
            personalize : "_2333f7-personalize",
            registration : "_2333f7-registration",
            progress : "_2333f7-progress",
            bar : "_2333f7-bar",
            progressValue : "_2333f7-progressValue",
            barValue : "_2333f7-barValue",
            grid : "_2333f7-grid",
            item : "_2333f7-item",
            name : "_2333f7-name",
            description : "_2333f7-description",
            footer : "_2333f7-footer",
            skipSettings : "_2333f7-skipSettings",
            slider : "_2333f7-slider",
            sliderItem : "_2333f7-sliderItem",
            sliderActive : "_2333f7-sliderActive",
            placeholder : "_2333f7-placeholder"
        };
        /**
         * @param {Object} p
         * @return {?}
         */
        expectedHashCode.FinishStep = function(p) {
            var pl = p.onClose;
            return dom.createElement("div", {
                className : o.step
            }, dom.createElement("div", {
                className : o.content
            }, dom.createElement("div", {
                className : o.title
            }, "You\u2019re fully protected!"), dom.createElement("div", {
                className : o.text
            }, "Now, whenever you see the green Grammarly logo, it means that Grammarly has not found any mistakes. Happy writing!"), dom.createElement("button", {
                className : o.button,
                /**
                 * @return {?}
                 */
                onClick : function() {
                    return pl();
                }
            }, "let's write")));
        };
    }, {
        react : "react"
    }],
    232 : [function(require, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} type
         * @return {?}
         */
        function $(type) {
            return type && type.__esModule ? type : {
                "default" : type
            };
        }
        var selector = require("babel-runtime/core-js/object/get-prototype-of");
        var elem = $(selector);
        var nodes = require("babel-runtime/helpers/classCallCheck");
        var result = $(nodes);
        var helper = require("babel-runtime/helpers/createClass");
        var update = $(helper);
        var c = require("babel-runtime/helpers/possibleConstructorReturn");
        var h = $(c);
        var use = require("babel-runtime/helpers/inherits");
        var p = $(use);
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var dom = require("react");
        var child = require("./start");
        var data = require("./info");
        var o = require("./finish");
        var node = require("./personalize");
        var options = require("./registration");
        var _self = require("lib/tracking");
        var args = require("lib/dom");
        var obj = {
            start : "_2333f7-start",
            info : "_2333f7-info",
            finish : "_2333f7-finish",
            startVideo : "_2333f7-startVideo",
            infoVideo : "_2333f7-infoVideo",
            finishVideo : "_2333f7-finishVideo",
            step : "_2333f7-step",
            content : "_2333f7-content",
            title : "_2333f7-title",
            text : "_2333f7-text",
            button : "_2333f7-button",
            inactive : "_2333f7-inactive",
            link : "_2333f7-link",
            personalize : "_2333f7-personalize",
            registration : "_2333f7-registration",
            progress : "_2333f7-progress",
            bar : "_2333f7-bar",
            progressValue : "_2333f7-progressValue",
            barValue : "_2333f7-barValue",
            grid : "_2333f7-grid",
            item : "_2333f7-item",
            name : "_2333f7-name",
            description : "_2333f7-description",
            footer : "_2333f7-footer",
            skipSettings : "_2333f7-skipSettings",
            slider : "_2333f7-slider",
            sliderItem : "_2333f7-sliderItem",
            sliderActive : "_2333f7-sliderActive",
            placeholder : "_2333f7-placeholder"
        };
        var Onboarding = function(deepDataAndEvents) {
            /**
             * @return {?}
             */
            function initialize() {
                (0, result["default"])(this, initialize);
                var self = (0, h["default"])(this, (initialize.__proto__ || (0, elem["default"])(initialize)).call(this));
                return self.transforms = ["0", "18px", "36px", "36px", "54px"], self.classes = ["start", "info", "personolize", "registration", "finish"], self.nextStep = function() {
                    self.setState({
                        stepIndex : self.state.stepIndex + 1
                    });
                }, self.lastStep = function() {
                    self.setState({
                        stepIndex : self.steps.length - 1
                    });
                }, self.videoLoaded = function() {
                    clearTimeout(self.placeholderTimeout);
                    _self.logger.onboardingVideoLoaded();
                }, self.state = {
                    stepIndex : 0,
                    placeholder : false
                }, self;
            }
            return(0, p["default"])(initialize, deepDataAndEvents), (0, update["default"])(initialize, [{
                key : "componentWillMount",
                /**
                 * @return {undefined}
                 */
                value : function() {
                    var self = this;
                    /** @type {Array} */
                    this.steps = [dom.createElement(child.StartStep, {
                        nextStep : this.nextStep
                    }), dom.createElement(data.InfoStep, {
                        nextStep : this.nextStep,
                        lastStep : this.lastStep
                    }), dom.createElement(node.PersonalizeStep, {
                        nextStep : this.props.isAnonymous ? this.nextStep : this.lastStep,
                        lastStep : this.lastStep,
                        saveAnonymousProps : this.props.saveAnonymousProps
                    }), dom.createElement(options.RegistrationStep, {
                        nextStep : this.nextStep,
                        lastStep : this.lastStep
                    }), dom.createElement(o.FinishStep, {
                        nextStep : this.nextStep,
                        onClose : this.props.onClose
                    })];
                    /** @type {number} */
                    this.placeholderTimeout = setTimeout(function() {
                        self.setState({
                            stepIndex : self.state.stepIndex,
                            placeholder : true
                        });
                    }, 1500);
                }
            }, {
                key : "componentWillUnmount",
                /**
                 * @return {undefined}
                 */
                value : function() {
                    clearTimeout(this.placeholderTimeout);
                }
            }, {
                key : "componentDidMount",
                /**
                 * @return {undefined}
                 */
                value : function() {
                    _self.fire("onboardingTutorial-popup-show");
                }
            }, {
                key : "render",
                /**
                 * @return {?}
                 */
                value : function() {
                    var gstyle = {
                        transform : "translateX(" + this.transforms[this.state.stepIndex] + ")"
                    };
                    var cls = args.cs(obj[this.classes[this.state.stepIndex]], this.state.placeholder && obj.placeholder);
                    return dom.createElement("div", {
                        className : cls
                    }, dom.createElement("video", {
                        className : obj.startVideo,
                        autoPlay : true,
                        loop : true,
                        preload : "auto",
                        onLoadedData : this.videoLoaded
                    }, dom.createElement("source", {
                        src : "https://s3.amazonaws.com/features-team-extension/onboarding/1cards.mp4",
                        type : "video/mp4"
                    })), dom.createElement("video", {
                        className : obj.infoVideo,
                        autoPlay : true,
                        loop : true,
                        preload : "auto"
                    }, dom.createElement("source", {
                        src : "https://s3.amazonaws.com/features-team-extension/onboarding/2personalization.mp4",
                        type : "video/mp4"
                    })), dom.createElement("video", {
                        className : obj.finishVideo,
                        autoPlay : true,
                        loop : true,
                        preload : "auto"
                    }, dom.createElement("source", {
                        src : "https://s3.amazonaws.com/features-team-extension/onboarding/3gbutton.mp4",
                        type : "video/mp4"
                    })), this.steps[this.state.stepIndex] || null, dom.createElement("div", {
                        className : obj.slider
                    }, dom.createElement("div", {
                        className : obj.sliderActive,
                        style : gstyle
                    }), dom.createElement("div", {
                        className : obj.sliderItem
                    }), dom.createElement("div", {
                        className : obj.sliderItem
                    }), dom.createElement("div", {
                        className : obj.sliderItem
                    }), dom.createElement("div", {
                        className : obj.sliderItem
                    })));
                }
            }]), initialize;
        }(dom.Component);
        expectedHashCode.Onboarding = Onboarding;
    }, {
        "./finish" : 231,
        "./info" : 233,
        "./personalize" : 234,
        "./registration" : 235,
        "./start" : 237,
        "babel-runtime/core-js/object/get-prototype-of" : 28,
        "babel-runtime/helpers/classCallCheck" : 34,
        "babel-runtime/helpers/createClass" : 35,
        "babel-runtime/helpers/inherits" : 38,
        "babel-runtime/helpers/possibleConstructorReturn" : 39,
        "lib/dom" : 215,
        "lib/tracking" : 307,
        react : "react"
    }],
    233 : [function(require, dataAndEvents, expectedHashCode) {
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var dom = require("react");
        var o = {
            start : "_2333f7-start",
            info : "_2333f7-info",
            finish : "_2333f7-finish",
            startVideo : "_2333f7-startVideo",
            infoVideo : "_2333f7-infoVideo",
            finishVideo : "_2333f7-finishVideo",
            step : "_2333f7-step",
            content : "_2333f7-content",
            title : "_2333f7-title",
            text : "_2333f7-text",
            button : "_2333f7-button",
            inactive : "_2333f7-inactive",
            link : "_2333f7-link",
            personalize : "_2333f7-personalize",
            registration : "_2333f7-registration",
            progress : "_2333f7-progress",
            bar : "_2333f7-bar",
            progressValue : "_2333f7-progressValue",
            barValue : "_2333f7-barValue",
            grid : "_2333f7-grid",
            item : "_2333f7-item",
            name : "_2333f7-name",
            description : "_2333f7-description",
            footer : "_2333f7-footer",
            skipSettings : "_2333f7-skipSettings",
            slider : "_2333f7-slider",
            sliderItem : "_2333f7-sliderItem",
            sliderActive : "_2333f7-sliderActive",
            placeholder : "_2333f7-placeholder"
        };
        var util = require("lib/tracking");
        /**
         * @param {?} context
         * @return {?}
         */
        expectedHashCode.InfoStep = function(context) {
            var attr = context.nextStep;
            var j = context.lastStep;
            return dom.createElement("div", {
                className : o.step
            }, dom.createElement("div", {
                className : o.content
            }, dom.createElement("div", {
                className : o.title
            }, "Personalize Grammarly ", dom.createElement("br", null), " for More Relevant Checking"), dom.createElement("div", {
                className : o.text
            }, "Write more effectively by letting Grammarly", dom.createElement("br", null), " know a little bit about your preferences."), dom.createElement("button", {
                className : o.button,
                /**
                 * @return {undefined}
                 */
                onClick : function() {
                    attr();
                    util.fire("onboardingTutorialPersonalize-button-click");
                }
            }, "personalize"), dom.createElement("button", {
                className : o.link,
                /**
                 * @return {?}
                 */
                onClick : function() {
                    return j();
                }
            }, "skip")));
        };
    }, {
        "lib/tracking" : 307,
        react : "react"
    }],
    234 : [function(require, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} value
         * @return {?}
         */
        function parseInt(value) {
            return value && value.__esModule ? value : {
                "default" : value
            };
        }
        var b = require("babel-runtime/core-js/object/keys");
        var bp = parseInt(b);
        var nodes = require("babel-runtime/helpers/defineProperty");
        var result = parseInt(nodes);
        var m = require("babel-runtime/core-js/object/assign");
        var row = parseInt(m);
        var val = require("babel-runtime/core-js/object/get-prototype-of");
        var type = parseInt(val);
        var text = require("babel-runtime/helpers/classCallCheck");
        var code = parseInt(text);
        var index = require("babel-runtime/helpers/createClass");
        var h = parseInt(index);
        var g = require("babel-runtime/helpers/possibleConstructorReturn");
        var ret = parseInt(g);
        var one = require("babel-runtime/helpers/inherits");
        var column = parseInt(one);
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var dom = require("react");
        var child = require("./select");
        var $ = require("lib/dom");
        var util = require("lib/tracking");
        var start = require("lib/util");
        var data = {
            start : "_2333f7-start",
            info : "_2333f7-info",
            finish : "_2333f7-finish",
            startVideo : "_2333f7-startVideo",
            infoVideo : "_2333f7-infoVideo",
            finishVideo : "_2333f7-finishVideo",
            step : "_2333f7-step",
            content : "_2333f7-content",
            title : "_2333f7-title",
            text : "_2333f7-text",
            button : "_2333f7-button",
            inactive : "_2333f7-inactive",
            link : "_2333f7-link",
            personalize : "_2333f7-personalize",
            registration : "_2333f7-registration",
            progress : "_2333f7-progress",
            bar : "_2333f7-bar",
            progressValue : "_2333f7-progressValue",
            barValue : "_2333f7-barValue",
            grid : "_2333f7-grid",
            item : "_2333f7-item",
            name : "_2333f7-name",
            description : "_2333f7-description",
            footer : "_2333f7-footer",
            skipSettings : "_2333f7-skipSettings",
            slider : "_2333f7-slider",
            sliderItem : "_2333f7-sliderItem",
            sliderActive : "_2333f7-sliderActive",
            placeholder : "_2333f7-placeholder"
        };
        /** @type {Array} */
        var parameters = [{
            val : "work",
            title : "WORK"
        }, {
            val : "school",
            title : "SCHOOL"
        }, {
            val : "otherProjects",
            title : "OTHER PROJECTS"
        }];
        /** @type {Array} */
        var select2States = [{
            val : "american",
            title : "AMERICAN ENGLISH"
        }, {
            val : "british",
            title : "BRITISH ENGLISH"
        }];
        /** @type {Array} */
        var opts = [{
            val : "english",
            title : "ENGLISH"
        }, {
            val : "notEnglish",
            title : "NOT ENGLISH"
        }];
        /** @type {Array} */
        var usedOptions = [{
            val : "beginner",
            title : "BEGINNER"
        }, {
            val : "intermediate",
            title : "INTERMEDIATE"
        }, {
            val : "advanced",
            title : "ADVANCED"
        }];
        var PersonalizeStep = function(deepDataAndEvents) {
            /**
             * @return {?}
             */
            function create() {
                (0, code["default"])(this, create);
                var self = (0, ret["default"])(this, (create.__proto__ || (0, type["default"])(create)).call(this));
                return self.change = function(event, stop) {
                    self.setState({
                        isSaveActive : true,
                        values : (0, row["default"])(self.state.values, (0, result["default"])({}, event, stop))
                    });
                }, self.onSaveClick = function() {
                    var q = self.state;
                    var l = q.isSaveActive;
                    var vals = q.values;
                    if (l !== false) {
                        var udataCur = (0, bp["default"])(vals).reduce(function(obj, key) {
                            return vals[key] !== child.DEFAULT_SELECT_VALUE && (obj[key] = vals[key]), obj;
                        }, {});
                        self.props.saveAnonymousProps(udataCur);
                        self.props.nextStep();
                        util.fire("onboardingTutorialSave-button-click");
                        util.fire("login-attempt", "onboarding_personalization");
                    }
                }, self.state = {
                    values : {
                        writingType : child.DEFAULT_SELECT_VALUE,
                        dialectStrong : child.DEFAULT_SELECT_VALUE,
                        primaryLanguage : child.DEFAULT_SELECT_VALUE,
                        grammarSkills : child.DEFAULT_SELECT_VALUE
                    },
                    isSaveActive : false
                }, self;
            }
            return(0, column["default"])(create, deepDataAndEvents), (0, h["default"])(create, [{
                key : "componentDidMount",
                /**
                 * @return {undefined}
                 */
                value : function() {
                    if (start.isEdge() === true) {
                        this.props.nextStep();
                    }
                }
            }, {
                key : "getProgressInPercents",
                /**
                 * @return {?}
                 */
                value : function() {
                    var f = this;
                    var images = (0, bp["default"])(this.state.values);
                    var counter = images.filter(function(a) {
                        return f.state.values[a] !== child.DEFAULT_SELECT_VALUE;
                    }).length;
                    return Math.round(counter / images.length * 100);
                }
            }, {
                key : "render",
                /**
                 * @return {?}
                 */
                value : function() {
                    var me = this;
                    var MSG_TEX_EDITOR = this.getProgressInPercents();
                    var gstyle = {
                        transform : "scaleX(" + MSG_TEX_EDITOR / 100 + ")"
                    };
                    return dom.createElement("div", {
                        className : $.cs(data.step, data.personalize)
                    }, dom.createElement("div", {
                        className : data.content
                    }, dom.createElement("div", {
                        className : data.title
                    }, "Personalize"), dom.createElement("div", {
                        className : data.progress
                    }, "Your preferences are ", dom.createElement("span", {
                        className : data.progressValue
                    }, MSG_TEX_EDITOR, "%"), " custom", dom.createElement("div", {
                        className : data.bar
                    }, dom.createElement("div", {
                        className : data.barValue,
                        style : gstyle
                    }))), dom.createElement("div", {
                        className : data.grid
                    }, dom.createElement("div", {
                        "data-name" : "writingType",
                        className : data.item
                    }, dom.createElement("div", {
                        className : data.name
                    }, "Most of my writing is for"), dom.createElement(child.Select, {
                        id : "writingType",
                        options : parameters,
                        value : this.state.values.writingType,
                        onChange : this.change
                    }), dom.createElement("div", {
                        className : data.description
                    }, "Our algorithms will show corrections relevant to your writing style")), dom.createElement("div", {
                        "data-name" : "dialectStrong",
                        className : data.item
                    }, dom.createElement("div", {
                        className : data.name
                    }, "I prefer to write in"), dom.createElement(child.Select, {
                        id : "dialectStrong",
                        options : select2States,
                        value : this.state.values.dialectStrong,
                        onChange : this.change
                    }), dom.createElement("div", {
                        className : data.description
                    }, "Select which dialectical conventions we should follow")), dom.createElement("div", {
                        "data-name" : "primaryLanguage",
                        className : data.item
                    }, dom.createElement("div", {
                        className : data.name
                    }, "My primary language is"), dom.createElement(child.Select, {
                        id : "primaryLanguage",
                        options : opts,
                        value : this.state.values.primaryLanguage,
                        onChange : this.change
                    }), dom.createElement("div", {
                        className : data.description
                    }, "This setting helps us understand your needs better")), dom.createElement("div", {
                        "data-name" : "grammarSkills",
                        className : data.item
                    }, dom.createElement("div", {
                        className : data.name
                    }, "My grammar skills are"), dom.createElement(child.Select, {
                        id : "grammarSkills",
                        options : usedOptions,
                        value : this.state.values.grammarSkills,
                        onChange : this.change
                    }), dom.createElement("div", {
                        className : data.description
                    }, "Our algorithms will show corrections relevant to your writing level")))), dom.createElement("footer", {
                        className : data.footer
                    }, dom.createElement("button", {
                        className : $.cs(data.button, !this.state.isSaveActive && data.inactive),
                        /**
                         * @return {?}
                         */
                        onClick : function() {
                            return me.onSaveClick();
                        }
                    }, "save"), dom.createElement("button", {
                        className : data.link,
                        /**
                         * @return {?}
                         */
                        onClick : function() {
                            return me.props.lastStep();
                        }
                    }, "later")));
                }
            }]), create;
        }(dom.Component);
        expectedHashCode.PersonalizeStep = PersonalizeStep;
    }, {
        "./select" : 236,
        "babel-runtime/core-js/object/assign" : 24,
        "babel-runtime/core-js/object/get-prototype-of" : 28,
        "babel-runtime/core-js/object/keys" : 29,
        "babel-runtime/helpers/classCallCheck" : 34,
        "babel-runtime/helpers/createClass" : 35,
        "babel-runtime/helpers/defineProperty" : 36,
        "babel-runtime/helpers/inherits" : 38,
        "babel-runtime/helpers/possibleConstructorReturn" : 39,
        "lib/dom" : 215,
        "lib/tracking" : 307,
        "lib/util" : 322,
        react : "react"
    }],
    235 : [function(require, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} type
         * @return {?}
         */
        function parseInt(type) {
            return type && type.__esModule ? type : {
                "default" : type
            };
        }
        var text = require("babel-runtime/core-js/object/get-prototype-of");
        var type = parseInt(text);
        var nodes = require("babel-runtime/helpers/classCallCheck");
        var result = parseInt(nodes);
        var b = require("babel-runtime/helpers/createClass");
        var bp = parseInt(b);
        var c = require("babel-runtime/helpers/possibleConstructorReturn");
        var h = parseInt(c);
        var ch = require("babel-runtime/helpers/inherits");
        var p = parseInt(ch);
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var dom = require("react");
        var child = require("../signin/form");
        var $ = require("lib/dom");
        var obj = {
            start : "_2333f7-start",
            info : "_2333f7-info",
            finish : "_2333f7-finish",
            startVideo : "_2333f7-startVideo",
            infoVideo : "_2333f7-infoVideo",
            finishVideo : "_2333f7-finishVideo",
            step : "_2333f7-step",
            content : "_2333f7-content",
            title : "_2333f7-title",
            text : "_2333f7-text",
            button : "_2333f7-button",
            inactive : "_2333f7-inactive",
            link : "_2333f7-link",
            personalize : "_2333f7-personalize",
            registration : "_2333f7-registration",
            progress : "_2333f7-progress",
            bar : "_2333f7-bar",
            progressValue : "_2333f7-progressValue",
            barValue : "_2333f7-barValue",
            grid : "_2333f7-grid",
            item : "_2333f7-item",
            name : "_2333f7-name",
            description : "_2333f7-description",
            footer : "_2333f7-footer",
            skipSettings : "_2333f7-skipSettings",
            slider : "_2333f7-slider",
            sliderItem : "_2333f7-sliderItem",
            sliderActive : "_2333f7-sliderActive",
            placeholder : "_2333f7-placeholder"
        };
        var RegistrationStep = function(deepDataAndEvents) {
            /**
             * @return {?}
             */
            function value() {
                return(0, result["default"])(this, value), (0, h["default"])(this, (value.__proto__ || (0, type["default"])(value)).apply(this, arguments));
            }
            return(0, p["default"])(value, deepDataAndEvents), (0, bp["default"])(value, [{
                key : "render",
                /**
                 * @return {?}
                 */
                value : function() {
                    var me = this;
                    return dom.createElement("div", {
                        className : $.cs(obj.step, obj.registration)
                    }, dom.createElement(child.Form, {
                        ref : "login",
                        showOnboardingVersion : true,
                        username : "",
                        placement : "onboarding_personalization",
                        /**
                         * @return {?}
                         */
                        onSuccess : function() {
                            return me.props.lastStep();
                        }
                    }), dom.createElement("button", {
                        className : $.cs(obj.link, obj.skipSettings),
                        /**
                         * @return {?}
                         */
                        onClick : function() {
                            return me.props.lastStep();
                        }
                    }, "Don\u2019t save my settings"));
                }
            }]), value;
        }(dom.Component);
        expectedHashCode.RegistrationStep = RegistrationStep;
    }, {
        "../signin/form" : 243,
        "babel-runtime/core-js/object/get-prototype-of" : 28,
        "babel-runtime/helpers/classCallCheck" : 34,
        "babel-runtime/helpers/createClass" : 35,
        "babel-runtime/helpers/inherits" : 38,
        "babel-runtime/helpers/possibleConstructorReturn" : 39,
        "lib/dom" : 215,
        react : "react"
    }],
    236 : [function($sanitize, dataAndEvents, expectedHashCode) {
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var dh = $sanitize("react");
        var item = {
            selectWrap : "_ca9ab0-selectWrap"
        };
        /** @type {string} */
        expectedHashCode.DEFAULT_SELECT_VALUE = "";
        /**
         * @param {Element} elem
         * @return {?}
         */
        expectedHashCode.Select = function(elem) {
            var name = elem.id;
            var parent = elem.value;
            var options = elem.options;
            var key = elem.onChange;
            return dh.createElement("div", {
                className : item.selectWrap
            }, dh.createElement("select", {
                /**
                 * @param {Event} component
                 * @return {?}
                 */
                onChange : function(component) {
                    var p = component.target;
                    return key(name, p.value);
                },
                value : parent,
                style : {
                    color : parent === expectedHashCode.DEFAULT_SELECT_VALUE ? "#9399A7" : "#00B281"
                }
            }, parent === expectedHashCode.DEFAULT_SELECT_VALUE && dh.createElement("option", {
                key : name + "_default}",
                value : expectedHashCode.DEFAULT_SELECT_VALUE
            }, "SELECT"), options.map(function(input) {
                var i = input.val;
                var il = input.title;
                return dh.createElement("option", {
                    key : name + "_" + i,
                    value : i
                }, il);
            })));
        };
    }, {
        react : "react"
    }],
    237 : [function(require, dataAndEvents, expectedHashCode) {
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var dom = require("react");
        var o = {
            start : "_2333f7-start",
            info : "_2333f7-info",
            finish : "_2333f7-finish",
            startVideo : "_2333f7-startVideo",
            infoVideo : "_2333f7-infoVideo",
            finishVideo : "_2333f7-finishVideo",
            step : "_2333f7-step",
            content : "_2333f7-content",
            title : "_2333f7-title",
            text : "_2333f7-text",
            button : "_2333f7-button",
            inactive : "_2333f7-inactive",
            link : "_2333f7-link",
            personalize : "_2333f7-personalize",
            registration : "_2333f7-registration",
            progress : "_2333f7-progress",
            bar : "_2333f7-bar",
            progressValue : "_2333f7-progressValue",
            barValue : "_2333f7-barValue",
            grid : "_2333f7-grid",
            item : "_2333f7-item",
            name : "_2333f7-name",
            description : "_2333f7-description",
            footer : "_2333f7-footer",
            skipSettings : "_2333f7-skipSettings",
            slider : "_2333f7-slider",
            sliderItem : "_2333f7-sliderItem",
            sliderActive : "_2333f7-sliderActive",
            placeholder : "_2333f7-placeholder"
        };
        var util = require("lib/tracking");
        /**
         * @param {?} context
         * @return {?}
         */
        expectedHashCode.StartStep = function(context) {
            var j = context.nextStep;
            return dom.createElement("div", {
                className : o.step
            }, dom.createElement("div", {
                className : o.content
            }, dom.createElement("div", {
                className : o.title
            }, "Defeat Tricky Mistakes", dom.createElement("br", null), " With One Click"), dom.createElement("div", {
                className : o.text
            }, "Simply hover your mouse over underlined words and click once on your preferred correction."), dom.createElement("button", {
                className : o.button,
                /**
                 * @return {undefined}
                 */
                onClick : function() {
                    j();
                    util.fire("onboardingTutorialNext-button-click");
                }
            }, "next")));
        };
    }, {
        "lib/tracking" : 307,
        react : "react"
    }],
    238 : [function(require, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} value
         * @return {?}
         */
        function parseInt(value) {
            return value && value.__esModule ? value : {
                "default" : value
            };
        }
        var b = require("babel-runtime/core-js/object/get-prototype-of");
        var bp = parseInt(b);
        var nodes = require("babel-runtime/helpers/classCallCheck");
        var result = parseInt(nodes);
        var one = require("babel-runtime/helpers/createClass");
        var column = parseInt(one);
        var text = require("babel-runtime/helpers/possibleConstructorReturn");
        var type = parseInt(text);
        var prop = require("babel-runtime/helpers/inherits");
        var p = parseInt(prop);
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var helper = require("react");
        var lang = require("react-dom");
        var jQuery = require("lib/util");
        var handler = require("lib/dom");
        var child = require("./signin-dialog");
        var which = require("emitter");
        var SigninDialog = function(deepDataAndEvents) {
            /**
             * @param {Object} opts
             * @return {?}
             */
            function create(opts) {
                var doc = opts.doc;
                var container = opts.container;
                var username = opts.user;
                var placement = opts.placement;
                (0, result["default"])(this, create);
                var self = (0, type["default"])(this, (create.__proto__ || (0, bp["default"])(create)).call(this));
                return self.updateUser = function(data) {
                    self.user = data;
                    self.render();
                }, self.onKey = function(evt) {
                    if (self.dialogComponent) {
                        if (self.dialogComponent.refs) {
                            self.dialogComponent.refs.form.onKey(evt);
                        }
                    }
                }, self.onClose = function() {
                    self.emit("hide");
                    self.remove();
                }, self.doc = doc, self.user = username, self.placement = placement, container && (self.container = container), self.render(), self;
            }
            return(0, p["default"])(create, deepDataAndEvents), (0, column["default"])(create, [{
                key : "checkContainer",
                /**
                 * @return {undefined}
                 */
                value : function() {
                    if (!this.container) {
                        this.container = this.doc.createElement("signin_dialog");
                        this.doc.documentElement.appendChild(this.container);
                        handler.listen(this.doc.defaultView, "keydown", this.onKey, false);
                    }
                }
            }, {
                key : "render",
                /**
                 * @return {undefined}
                 */
                value : function() {
                    var user = this.user;
                    this.checkContainer();
                    this.dialogComponent = lang.render(helper.createElement(child.SigninDialogComponent, {
                        username : user && user.firstName || "",
                        onClose : this.onClose,
                        placement : this.placement
                    }), this.container);
                }
            }, {
                key : "remove",
                /**
                 * @return {undefined}
                 */
                value : function() {
                    handler.unlisten(this.doc.defaultView, "keydown", this.onKey, false);
                    if (this.container) {
                        lang.unmountComponentAtNode(this.container);
                    }
                    if (this.container.parentNode) {
                        this.container.parentNode.removeChild(this.container);
                    }
                }
            }]), create;
        }(jQuery.createClass(which));
        expectedHashCode.SigninDialog = SigninDialog;
    }, {
        "./signin-dialog" : 239,
        "babel-runtime/core-js/object/get-prototype-of" : 28,
        "babel-runtime/helpers/classCallCheck" : 34,
        "babel-runtime/helpers/createClass" : 35,
        "babel-runtime/helpers/inherits" : 38,
        "babel-runtime/helpers/possibleConstructorReturn" : 39,
        emitter : "emitter",
        "lib/dom" : 215,
        "lib/util" : 322,
        react : "react",
        "react-dom" : "react-dom"
    }],
    239 : [function(require, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} value
         * @return {?}
         */
        function parseInt(value) {
            return value && value.__esModule ? value : {
                "default" : value
            };
        }
        var nodes = require("babel-runtime/core-js/object/get-prototype-of");
        var result = parseInt(nodes);
        var m = require("babel-runtime/helpers/classCallCheck");
        var row = parseInt(m);
        var g = require("babel-runtime/helpers/createClass");
        var ret = parseInt(g);
        var b = require("babel-runtime/helpers/possibleConstructorReturn");
        var bp = parseInt(b);
        var one = require("babel-runtime/helpers/inherits");
        var column = parseInt(one);
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var dom = require("react");
        var Block = require("react-dom");
        var fs = require("lib/util");
        var utils = require("lib/dom");
        var child = require("../signin/form");
        var data = {
            signinDialog : "_4c65eb-signinDialog",
            viewContainer : "_4c65eb-viewContainer",
            view : "_4c65eb-view",
            windows : "_4c65eb-windows",
            footer : "_4c65eb-footer",
            content : "_4c65eb-content",
            btnClose : "_4c65eb-btnClose"
        };
        var SigninDialogComponent = function(deepDataAndEvents) {
            /**
             * @return {?}
             */
            function init() {
                (0, row["default"])(this, init);
                var self = (0, bp["default"])(this, (init.__proto__ || (0, result["default"])(init)).apply(this, arguments));
                return self.onClick = function(expectedHashCode) {
                    if (!utils.matchesSelector(expectedHashCode.target, "." + data.content + ", ." + data.content + " *")) {
                        self.onClose(expectedHashCode);
                    }
                }, self.onClose = function(expectedHashCode) {
                    if (expectedHashCode) {
                        expectedHashCode.stopPropagation();
                    }
                    var elt = Block.findDOMNode(self.refs["signin-dialog-el"]);
                    var el1 = Block.findDOMNode(self.refs["signin-content"]);
                    if (el1) {
                        if (elt) {
                            /** @type {string} */
                            el1.style.opacity = "0";
                            /** @type {string} */
                            elt.style.opacity = "0";
                        }
                    }
                    /** @type {number} */
                    self._closeTimeout = setTimeout(function() {
                        return self.props.onClose();
                    }, 500);
                }, self;
            }
            return(0, column["default"])(init, deepDataAndEvents), (0, ret["default"])(init, [{
                key : "componentDidMount",
                /**
                 * @return {undefined}
                 */
                value : function() {
                    var elt = Block.findDOMNode(this.refs["signin-dialog-el"]);
                    var el1 = Block.findDOMNode(this.refs["signin-content"]);
                    /** @type {number} */
                    this._requestAnimationFrame = requestAnimationFrame(function() {
                        /** @type {string} */
                        el1.style.opacity = "0";
                        /** @type {string} */
                        elt.style.opacity = "0";
                        requestAnimationFrame(function() {
                            /** @type {string} */
                            elt.style.opacity = "1";
                            /** @type {string} */
                            el1.style.opacity = "1";
                        });
                    });
                }
            }, {
                key : "componentWillUnmount",
                /**
                 * @return {undefined}
                 */
                value : function() {
                    clearTimeout(this._closeTimeout);
                    cancelAnimationFrame(this._requestAnimationFrame);
                }
            }, {
                key : "render",
                /**
                 * @return {?}
                 */
                value : function() {
                    var cls = utils.cs(data.signinDialog, fs.isWindows() && data.windows);
                    var styles = {
                        opacity : 0
                    };
                    var defaultStyle = {
                        opacity : 0
                    };
                    return dom.createElement("div", {
                        ref : "signin-dialog-el",
                        onClick : this.onClick,
                        className : cls,
                        style : styles
                    }, dom.createElement("div", {
                        ref : "signin-content",
                        className : data.content,
                        style : defaultStyle
                    }, dom.createElement("div", {
                        className : data.viewContainer
                    }, dom.createElement(child.Form, {
                        ref : "form",
                        placement : this.props.placement,
                        username : this.props.username,
                        onClose : this.onClose
                    }))), dom.createElement("div", {
                        className : data.btnClose,
                        onClick : this.onClose
                    }));
                }
            }]), init;
        }(dom.Component);
        expectedHashCode.SigninDialogComponent = SigninDialogComponent;
    }, {
        "../signin/form" : 243,
        "babel-runtime/core-js/object/get-prototype-of" : 28,
        "babel-runtime/helpers/classCallCheck" : 34,
        "babel-runtime/helpers/createClass" : 35,
        "babel-runtime/helpers/inherits" : 38,
        "babel-runtime/helpers/possibleConstructorReturn" : 39,
        "lib/dom" : 215,
        "lib/util" : 322,
        react : "react",
        "react-dom" : "react-dom"
    }],
    240 : [function(require, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} type
         * @return {?}
         */
        function $(type) {
            return type && type.__esModule ? type : {
                "default" : type
            };
        }
        var ready = require("babel-runtime/helpers/defineProperty");
        var ret = $(ready);
        var nodes = require("babel-runtime/core-js/object/get-prototype-of");
        var result = $(nodes);
        var helper = require("babel-runtime/helpers/classCallCheck");
        var update = $(helper);
        var selector = require("babel-runtime/helpers/createClass");
        var elem = $(selector);
        var use = require("babel-runtime/helpers/possibleConstructorReturn");
        var p = $(use);
        var c = require("babel-runtime/helpers/inherits");
        var h = $(c);
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var dom = require("react");
        var command = require("lib/dom");
        var event = {
            buttonContainer : "_9a2bae-buttonContainer",
            buttonSpinner : "_9a2bae-buttonSpinner",
            button : "_9a2bae-button",
            loading : "_9a2bae-loading",
            onboarding : "_9a2bae-onboarding",
            disable : "_9a2bae-disable"
        };
        /** @type {number} */
        var w = 290;
        /**
         * @param {Element} m
         * @return {?}
         */
        var error = function(m) {
            var c = m.className;
            return dom.createElement("div", {
                className : "gr_-spinner " + c
            }, dom.createElement("div", {
                className : "gr_-bounce1"
            }), dom.createElement("div", {
                className : "gr_-bounce2"
            }), dom.createElement("div", {
                className : "gr_-bounce3"
            }));
        };
        var Button = function(deepDataAndEvents) {
            /**
             * @return {?}
             */
            function init() {
                (0, update["default"])(this, init);
                var self = (0, p["default"])(this, (init.__proto__ || (0, result["default"])(init)).apply(this, arguments));
                return self.onClick = function(expectedHashCode) {
                    expectedHashCode.preventDefault();
                    if (!self.props.loading) {
                        self.props.onClick(expectedHashCode);
                    }
                }, self;
            }
            return(0, h["default"])(init, deepDataAndEvents), (0, elem["default"])(init, [{
                key : "render",
                /**
                 * @return {?}
                 */
                value : function() {
                    var r20;
                    var props = this.props;
                    var l = props.loading;
                    var i = props.cls;
                    var MSG_TEX_EDITOR = l ? "" : this.props.text;
                    var gstyle = this.props.styles || {
                        width : w
                    };
                    var cls = command.cs((r20 = {}, (0, ret["default"])(r20, event.buttonContainer, true), (0, ret["default"])(r20, event[i], void 0 !== i), (0, ret["default"])(r20, event.loading, l), r20));
                    return dom.createElement("div", {
                        className : cls,
                        style : gstyle
                    }, l && dom.createElement(error, {
                        className : event.buttonSpinner
                    }), dom.createElement("button", {
                        type : "button",
                        style : gstyle,
                        className : event.button,
                        onClick : this.onClick
                    }, MSG_TEX_EDITOR));
                }
            }]), init;
        }(dom.Component);
        expectedHashCode.Button = Button;
    }, {
        "babel-runtime/core-js/object/get-prototype-of" : 28,
        "babel-runtime/helpers/classCallCheck" : 34,
        "babel-runtime/helpers/createClass" : 35,
        "babel-runtime/helpers/defineProperty" : 36,
        "babel-runtime/helpers/inherits" : 38,
        "babel-runtime/helpers/possibleConstructorReturn" : 39,
        "lib/dom" : 215,
        react : "react"
    }],
    241 : [function(require, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} value
         * @return {?}
         */
        function $(value) {
            return value && value.__esModule ? value : {
                "default" : value
            };
        }
        var path = require("babel-runtime/helpers/extends");
        var type = $(path);
        var target = require("babel-runtime/core-js/object/get-prototype-of");
        var targets = $(target);
        var items = require("babel-runtime/helpers/classCallCheck");
        var option = $(items);
        var dom = require("babel-runtime/helpers/createClass");
        var h = $(dom);
        var one = require("babel-runtime/helpers/possibleConstructorReturn");
        var column = $(one);
        var selector = require("babel-runtime/helpers/inherits");
        var elem = $(selector);
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var self = require("react");
        var child = require("./input");
        var node = {
            inputs : "_194465-inputs",
            hidden : "_194465-hidden"
        };
        /** @type {Array} */
        var contextElem = [{
            label : "Name",
            name : "name",
            type : "text"
        }, {
            label : "Email",
            name : "email",
            type : "text"
        }, {
            label : "Password",
            name : "password",
            type : "password"
        }];
        var Fieldset = function(deepDataAndEvents) {
            /**
             * @return {?}
             */
            function value() {
                return(0, option["default"])(this, value), (0, column["default"])(this, (value.__proto__ || (0, targets["default"])(value)).apply(this, arguments));
            }
            return(0, elem["default"])(value, deepDataAndEvents), (0, h["default"])(value, [{
                key : "setFocus",
                /**
                 * @return {undefined}
                 */
                value : function() {
                    var i = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.props.fields[0];
                    var input = this.refs[i].refs.input;
                    if (input.focus(), input.value) {
                        var index = input.value.length;
                        input.setSelectionRange(index, index);
                    }
                }
            }, {
                key : "render",
                /**
                 * @return {?}
                 */
                value : function() {
                    var _this = this;
                    return self.createElement("fieldset", {
                        className : node.inputs
                    }, self.createElement("input", {
                        className : node.hidden,
                        type : "text",
                        name : "fakeusernameremembered"
                    }), self.createElement("input", {
                        className : node.hidden,
                        type : "password",
                        name : "fakepasswordremembered"
                    }), contextElem.filter(function(body) {
                        var n = body.name;
                        return _this.props.fields.indexOf(n) > -1;
                    }).map(function(options, subKey) {
                        return self.createElement(child.Input, (0, type["default"])({}, options, {
                            ref : options.name,
                            onSet : _this.props.onSet(options.name),
                            value : _this.props.formData[options.name],
                            validation : _this.props.validation[options.name],
                            onValidate : _this.props.onValidate(options.name),
                            forceValidation : _this.props.forceValidation,
                            key : subKey
                        }));
                    }));
                }
            }]), value;
        }(self.Component);
        expectedHashCode.Fieldset = Fieldset;
    }, {
        "./input" : 244,
        "babel-runtime/core-js/object/get-prototype-of" : 28,
        "babel-runtime/helpers/classCallCheck" : 34,
        "babel-runtime/helpers/createClass" : 35,
        "babel-runtime/helpers/extends" : 37,
        "babel-runtime/helpers/inherits" : 38,
        "babel-runtime/helpers/possibleConstructorReturn" : 39,
        react : "react"
    }],
    242 : [function(require, dataAndEvents, expectedHashCode) {
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var dom = require("react");
        var Block = require("lib/url");
        var t = {
            footer : "_4ea68c-footer"
        };
        /**
         * @return {?}
         */
        expectedHashCode.Footer = function() {
            return dom.createElement("div", {
                className : t.footer
            }, "By signing up, you agree to our\u00a0", dom.createElement("a", {
                tabIndex : -1,
                target : "__blank",
                href : Block.getTermsURL()
            }, "Terms and Conditions"), " and ", dom.createElement("a", {
                tabIndex : -1,
                target : "__blank",
                href : Block.getPrivatePolicyURL()
            }, "Privacy Policy"), ".\u00a0 You also agree to receive product-related emails from Grammarly, which you can unsubscribe from at any time.");
        };
    }, {
        "lib/url" : 321,
        react : "react"
    }],
    243 : [function(require, dataAndEvents, self) {
        /**
         * @param {?} value
         * @return {?}
         */
        function parseInt(value) {
            return value && value.__esModule ? value : {
                "default" : value
            };
        }
        var b = require("babel-runtime/regenerator");
        var bp = parseInt(b);
        var i = require("babel-runtime/helpers/defineProperty");
        var it = parseInt(i);
        var text = require("babel-runtime/core-js/object/get-prototype-of");
        var code = parseInt(text);
        var date = require("babel-runtime/helpers/classCallCheck");
        var result = parseInt(date);
        var m = require("babel-runtime/helpers/createClass");
        var row = parseInt(m);
        var g = require("babel-runtime/helpers/possibleConstructorReturn");
        var ret = parseInt(g);
        var red = require("babel-runtime/helpers/inherits");
        var type = parseInt(red);
        var index = require("babel-runtime/core-js/object/assign");
        var h = parseInt(index);
        var one = require("babel-runtime/core-js/object/keys");
        var column = parseInt(one);
        var number = require("babel-runtime/core-js/promise");
        var val = parseInt(number);
        /**
         * @param {string} expectedHashCode
         * @param {Array} args
         * @param {(Element|string)} opt_attributes
         * @param {Text} fn
         * @return {?}
         */
        var setup = function(expectedHashCode, args, opt_attributes, fn) {
            return new (opt_attributes || (opt_attributes = val["default"]))(function(success, done) {
                /**
                 * @param {string} expectedHashCode
                 * @return {undefined}
                 */
                function handler(expectedHashCode) {
                    try {
                        next(fn.next(expectedHashCode));
                    } catch (err) {
                        done(err);
                    }
                }
                /**
                 * @param {?} data
                 * @return {undefined}
                 */
                function loop(data) {
                    try {
                        next(fn["throw"](data));
                    } catch (err) {
                        done(err);
                    }
                }
                /**
                 * @param {Object} event
                 * @return {undefined}
                 */
                function next(event) {
                    if (event.done) {
                        success(event.value);
                    } else {
                        (new opt_attributes(function(f) {
                            f(event.value);
                        })).then(handler, loop);
                    }
                }
                next((fn = fn.apply(expectedHashCode, args || [])).next());
            });
        };
        Object.defineProperty(self, "__esModule", {
            value : true
        });
        var dom = require("react");
        var child = require("./button");
        var data = require("./footer");
        var o = require("../signin/fieldset");
        var $ = require("lib/dom");
        var _self = require("lib/tracking");
        var event = require("lib/util");
        var node = require("./welcome");
        var defaults = require("./login-success");
        var Block = require("lib/message");
        var nodes = require("lib/url");
        var options = {
            form : "_2a5207-form",
            login : "_2a5207-login",
            register : "_2a5207-register",
            loginSuccess : "_2a5207-loginSuccess",
            welcome : "_2a5207-welcome",
            title : "_2a5207-title",
            subTitle : "_2a5207-subTitle",
            wrapper : "_2a5207-wrapper",
            personalizedTitle : "_2a5207-personalizedTitle",
            titleContainer : "_2a5207-titleContainer",
            personalizedTitleSub : "_2a5207-personalizedTitleSub",
            hidden : "_2a5207-hidden",
            validation : "_2a5207-validation",
            fakefield : "_2a5207-fakefield",
            navigation : "_2a5207-navigation",
            loading : "_2a5207-loading",
            navigationItem : "_2a5207-navigationItem",
            loginNav : "_2a5207-loginNav",
            toLogin : "_2a5207-toLogin",
            forgotLink : "_2a5207-forgotLink",
            onboardingVersion : "_2a5207-onboardingVersion",
            freeLabel : "_2a5207-freeLabel"
        };
        self.validationMessages = {
            fail : "Something went wrong. Please try again later.",
            invalidUser : "Invalid email address/password combination.",
            required : "Required",
            shortPassword : "Use 6 characters or more",
            incorrectEmail : "Incorrect",
            emailExists : 'Already in use. Do you need to <a data-view="login">Log in</a>?'
        };
        /**
         * @param {Object} object
         * @param {string} keepData
         * @return {?}
         */
        self.validate = function(object, keepData) {
            var sel = (0, column["default"])(object).reduce(function($cookies, key) {
                var icon = object[key];
                return icon && "" !== icon ? ("password" === key && ("register" === keepData && (icon.length < 6 && ($cookies[key] = self.validationMessages.shortPassword))), "email" !== key || (event.isValidEmail(icon) || ($cookies[key] = self.validationMessages.incorrectEmail)), $cookies) : ($cookies[key] = self.validationMessages.required, $cookies);
            }, {});
            return sel._valid = 0 === (0, column["default"])(sel).length, sel;
        };
        /**
         * @param {?} pt
         * @param {Object} res
         * @return {?}
         */
        self.extendWithServerValidation = function(pt, res) {
            if (!res.error) {
                return(0, h["default"])({}, pt, {
                    _valid : true
                });
            }
            var err = void 0;
            var email = void 0;
            var $log = {};
            try {
                /** @type {*} */
                $log = JSON.parse(res.error);
            } catch (a) {
            }
            return "Conflict" === res.error || "already_exists" === $log.error ? email = self.validationMessages.emailExists : err = "Unauthorized" === res.error || "user_not_authorized" === $log.error ? self.validationMessages.invalidUser : self.validationMessages.fail, (0, h["default"])({}, pt, {
                error : err,
                email : email,
                _valid : false
            });
        };
        /**
         * @param {string} part
         * @return {?}
         */
        self.getResetPassLink = function(part) {
            return nodes.getResetPasswordURL() + (part ? "&email=" + encodeURIComponent(part) : "");
        };
        var compassResult = function(deepDataAndEvents) {
            /**
             * @return {?}
             */
            function init() {
                (0, result["default"])(this, init);
                var options = (0, ret["default"])(this, (init.__proto__ || (0, code["default"])(init)).call(this));
                return options.forceValidation = false, options.onClick = function(expectedHashCode) {
                    if ("login" === expectedHashCode.target.dataset.view) {
                        options.changeView("login");
                    }
                }, options.changeView = function(view) {
                    var d = options.state.data;
                    if (!("login" !== view && "register" !== view)) {
                        /** @type {string} */
                        d.password = "";
                    }
                    options.setState((0, h["default"])({}, options.state, {
                        view : view,
                        data : d,
                        validation : {
                            _valid : true
                        }
                    }));
                    /** @type {boolean} */
                    options.forceValidation = false;
                }, options.onValidate = function(key) {
                    return function(password) {
                        var column = options.state;
                        var validation = column.validation;
                        var name = column.view;
                        validation[key] = self.validate((0, it["default"])({}, key, password), name)[key];
                        delete validation.error;
                        options.setState((0, h["default"])({}, options.state, {
                            validation : validation
                        }));
                    };
                }, options.onSet = function(attribute) {
                    return function(value) {
                        var data = options.state.data;
                        data[attribute] = value;
                        options.setState((0, h["default"])({}, options.state, {
                            data : data
                        }));
                    };
                }, options.getFormData = function(file) {
                    var files = (0, h["default"])({}, options.state.data);
                    return file && (files.hasOwnProperty(file) && delete files[file]), files;
                }, options.onKey = function(evt) {
                    if (event.keyCode(evt) === event.ESC_KEY && (options.props.onClose && options.props.onClose()), event.keyCode(evt) === event.ENTER_KEY) {
                        var tgt = evt.target;
                        if ("A" === tgt.tagName) {
                            return;
                        }
                        options.onSubmit();
                    }
                }, options.onGoPremium = function() {
                    _self.fire("upgrade-after-register");
                    Block.emitBackground("open-url", nodes.getUpgradeURL("upHook", "anonPopupCard"));
                }, options.onSubmit = function() {
                    if (!options.state.loading) {
                        var view = options.state.view;
                        if ("login" === view) {
                            options.onAuth("signin", options.getFormData("name"));
                        }
                        if ("register" === view) {
                            options.onAuth("signup", options.getFormData());
                        }
                    }
                }, options.focusForm = function(el, login) {
                    if ("start" === el) {
                        options.setFocus("login" === login ? "email" : "name");
                    }
                    if ("end" === el) {
                        options.refs.end.focus();
                    }
                }, options.state = {
                    view : "register",
                    validation : {
                        _valid : true
                    },
                    loading : false,
                    data : {
                        name : "",
                        email : "",
                        password : ""
                    }
                }, options;
            }
            return(0, type["default"])(init, deepDataAndEvents), (0, row["default"])(init, [{
                key : "componentDidMount",
                /**
                 * @return {undefined}
                 */
                value : function() {
                    var that = this;
                    /** @type {string} */
                    var focused = "login" === this.state.view ? "email" : "name";
                    setTimeout(function() {
                        that.setFocus(focused);
                    }, 350);
                }
            }, {
                key : "componentDidUpdate",
                /**
                 * @param {string} expectedHashCode
                 * @param {string} type
                 * @return {undefined}
                 */
                value : function(expectedHashCode, type) {
                    var view = this.state.view;
                    if (("login" === view || "register" === view) && type.view !== view) {
                        /** @type {string} */
                        var innerPath = "login" === view ? "email" : "name";
                        this.setFocus(innerPath);
                    }
                }
            }, {
                key : "onAuth",
                /**
                 * @param {string} expectedHashCode
                 * @param {string} type
                 * @return {?}
                 */
                value : function(expectedHashCode, type) {
                    return setup(this, void 0, void 0, bp["default"].mark(function start() {
                        var pt;
                        var ret;
                        var itemView;
                        return bp["default"].wrap(function(item) {
                            for (;;) {
                                switch(item.prev = item.next) {
                                    case 0:
                                        if (pt = self.validate(type, this.state.view), this.forceValidation = true, !pt._valid) {
                                            /** @type {number} */
                                            item.next = 18;
                                            break;
                                        }
                                        return this.setState((0, h["default"])({}, this.state, {
                                            loading : true
                                        })), ret = void 0, item.prev = 5, item.next = 8, Block.promiseBackground(expectedHashCode, {
                                            form : type,
                                            placement : this.props.placement
                                        });
                                    case 8:
                                        ret = item.sent;
                                        /** @type {number} */
                                        item.next = 15;
                                        break;
                                    case 11:
                                        /** @type {number} */
                                        item.prev = 11;
                                        item.t0 = item["catch"](5);
                                        if (item.t0.message) {
                                            if (item.t0.message.includes("rejected by timeout")) {
                                                _self.logger.loginNoBgPageConnection(item.t0.message);
                                            }
                                        }
                                        ret = {
                                            error : true
                                        };
                                    case 15:
                                        pt = self.extendWithServerValidation(pt, ret);
                                        /** @type {number} */
                                        item.next = 20;
                                        break;
                                    case 18:
                                        return this.setState((0, h["default"])({}, this.state, {
                                            validation : pt,
                                            loading : false
                                        })), item.abrupt("return");
                                    case 20:
                                        if (!pt._valid) {
                                            /** @type {number} */
                                            item.next = 23;
                                            break;
                                        }
                                        return itemView = "signup" === expectedHashCode ? "welcome" : "loginSuccess", item.abrupt("return", this.props.onSuccess ? this.props.onSuccess() : this.changeView(itemView));
                                    case 23:
                                        this.setState((0, h["default"])({}, this.state, {
                                            validation : pt,
                                            loading : false
                                        }));
                                    case 24:
                                        ;
                                    case "end":
                                        return item.stop();
                                }
                            }
                        }, start, this, [[5, 11]]);
                    }));
                }
            }, {
                key : "setFocus",
                /**
                 * @param {string} expectedHashCode
                 * @return {undefined}
                 */
                value : function(expectedHashCode) {
                    this.refs.fieldset.setFocus(expectedHashCode);
                }
            }, {
                key : "loginView",
                /**
                 * @return {?}
                 */
                value : function() {
                    var String = this;
                    /** @type {Array} */
                    var fields = ["email", "password"];
                    return dom.createElement("div", {
                        className : options.wrapper
                    }, this.state.validation.error && dom.createElement("div", {
                        className : options.validation
                    }, this.state.validation.error), dom.createElement("input", {
                        className : options.fakefield,
                        type : "text",
                        name : "fakeformstart",
                        /**
                         * @return {?}
                         */
                        onFocus : function() {
                            return String.focusForm("end");
                        }
                    }), dom.createElement(o.Fieldset, {
                        forceValidation : this.forceValidation,
                        validation : this.state.validation,
                        onValidate : this.onValidate,
                        onSet : this.onSet,
                        ref : "fieldset",
                        formData : this.state.data,
                        fields : fields
                    }), dom.createElement("div", {
                        className : options.loginNav
                    }, dom.createElement(child.Button, {
                        loading : this.state.loading,
                        onClick : this.onSubmit,
                        styles : {
                            width : 120
                        },
                        text : "Log In"
                    }), dom.createElement("a", {
                        target : "__blank",
                        href : self.getResetPassLink(this.state.data.email),
                        ref : "end",
                        className : $.cs(options.navigationItem, options.forgotLink)
                    }, "Forgot password?")), dom.createElement("input", {
                        className : options.fakefield,
                        type : "text",
                        name : "fakeformend",
                        /**
                         * @return {?}
                         */
                        onFocus : function() {
                            return String.focusForm("start", "login");
                        }
                    }));
                }
            }, {
                key : "registerView",
                /**
                 * @return {?}
                 */
                value : function() {
                    var t = this;
                    /** @type {Array} */
                    var fields = ["name", "email", "password"];
                    return dom.createElement("div", {
                        className : options.wrapper
                    }, dom.createElement("input", {
                        className : options.fakefield,
                        type : "text",
                        name : "fakeformstart",
                        /**
                         * @return {?}
                         */
                        onFocus : function() {
                            return t.focusForm("end");
                        }
                    }), dom.createElement("div", {
                        className : options.navigation
                    }, "Already have an account?\u00a0", dom.createElement("span", {
                        tabIndex : 0,
                        ref : "end",
                        /**
                         * @return {?}
                         */
                        onClick : function() {
                            return t.changeView("login");
                        },
                        className : options.navigationItem
                    }, "Log In")), dom.createElement(o.Fieldset, {
                        ref : "fieldset",
                        forceValidation : this.forceValidation,
                        validation : this.state.validation,
                        onValidate : this.onValidate,
                        onSet : this.onSet,
                        formData : this.state.data,
                        fields : fields
                    }), dom.createElement(child.Button, {
                        loading : this.state.loading,
                        onClick : this.onSubmit,
                        text : "personalize grammarly"
                    }), dom.createElement(data.Footer, null), dom.createElement("input", {
                        className : options.fakefield,
                        type : "text",
                        name : "fakeformend",
                        /**
                         * @return {?}
                         */
                        onFocus : function() {
                            return t.focusForm("start", "register");
                        }
                    }));
                }
            }, {
                key : "render",
                /**
                 * @return {?}
                 */
                value : function() {
                    var t = this;
                    /** @type {boolean} */
                    var badInnerHTML = "login" === this.state.view;
                    var cls = $.cs(options.form, this.state.loading && options.loading, options[this.state.view], this.props.showOnboardingVersion && options.onboardingVersion);
                    if ("welcome" === this.state.view) {
                        return dom.createElement(node.Welcome, {
                            isShow : true,
                            /**
                             * @return {?}
                             */
                            onClose : function() {
                                return t.props.onClose && t.props.onClose();
                            },
                            /**
                             * @return {?}
                             */
                            onGoPremium : function() {
                                return t.onGoPremium();
                            }
                        });
                    }
                    if ("loginSuccess" === this.state.view) {
                        return dom.createElement(defaults.LoginSuccess, {
                            username : this.props.username,
                            /**
                             * @return {?}
                             */
                            onClose : function() {
                                return t.props.onClose && t.props.onClose();
                            }
                        });
                    }
                    var MSG_VISUAL_EDITOR = badInnerHTML ? this.props.showOnboardingVersion ? dom.createElement("div", null, dom.createElement("div", {
                        className : options.title
                    }, "Member Login"), dom.createElement("div", {
                        className : options.subTitle
                    }, "to save your personalization settings")) : dom.createElement("div", null, dom.createElement("div", {
                        className : options.title
                    }, "Grammarly Member Login")) : this.props.showOnboardingVersion ? dom.createElement("div", null, dom.createElement("div", {
                        className : options.title
                    }, "Create an account"), dom.createElement("div", {
                        className : options.subTitle
                    }, "to save your personalization settings"), dom.createElement("div", {
                        className : options.freeLabel
                    }, "It\u2019s free")) : dom.createElement("div", {
                        className : options.personalizedTitle
                    }, "Personalize Grammarly", dom.createElement("div", {
                        className : options.personalizedTitleSub
                    }, "to your writing needs"));
                    return dom.createElement("div", {
                        className : cls,
                        onClick : this.onClick
                    }, dom.createElement("div", {
                        className : options.titleContainer
                    }, MSG_VISUAL_EDITOR), badInnerHTML ? this.loginView() : this.registerView(), badInnerHTML && dom.createElement("div", {
                        className : options.toLogin
                    }, "New to Grammarly?", dom.createElement("span", {
                        tabIndex : 0,
                        /**
                         * @return {?}
                         */
                        onClick : function() {
                            return t.changeView("register");
                        },
                        className : options.navigationItem
                    }, "Create a free account")));
                }
            }]), init;
        }(dom.Component);
        self.Form = compassResult;
    }, {
        "../signin/fieldset" : 241,
        "./button" : 240,
        "./footer" : 242,
        "./login-success" : 245,
        "./welcome" : 246,
        "babel-runtime/core-js/object/assign" : 24,
        "babel-runtime/core-js/object/get-prototype-of" : 28,
        "babel-runtime/core-js/object/keys" : 29,
        "babel-runtime/core-js/promise" : 31,
        "babel-runtime/helpers/classCallCheck" : 34,
        "babel-runtime/helpers/createClass" : 35,
        "babel-runtime/helpers/defineProperty" : 36,
        "babel-runtime/helpers/inherits" : 38,
        "babel-runtime/helpers/possibleConstructorReturn" : 39,
        "babel-runtime/regenerator" : 43,
        "lib/dom" : 215,
        "lib/message" : 278,
        "lib/tracking" : 307,
        "lib/url" : 321,
        "lib/util" : 322,
        react : "react"
    }],
    244 : [function(require, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} type
         * @return {?}
         */
        function String(type) {
            return type && type.__esModule ? type : {
                "default" : type
            };
        }
        var string = require("babel-runtime/core-js/object/get-prototype-of");
        var result = String(string);
        var prop = require("babel-runtime/helpers/classCallCheck");
        var p = String(prop);
        var json = require("babel-runtime/helpers/createClass");
        var h = String(json);
        var text = require("babel-runtime/helpers/possibleConstructorReturn");
        var type = String(text);
        var html = require("babel-runtime/helpers/inherits");
        var m = String(html);
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var self = require("react");
        var handler = require("lib/util");
        var fs = require("lib/util");
        var util = require("lib/dom");
        var data = {
            input : "_d80b1b-input",
            label : "_d80b1b-label",
            windows : "_d80b1b-windows",
            inputElement : "_d80b1b-inputElement",
            validation : "_d80b1b-validation"
        };
        var Input = function(deepDataAndEvents) {
            /**
             * @return {?}
             */
            function init() {
                (0, p["default"])(this, init);
                var _this = (0, type["default"])(this, (init.__proto__ || (0, result["default"])(init)).apply(this, arguments));
                return _this.id = handler.guid(), _this.state = {
                    cancelValidation : true,
                    dirty : false
                }, _this.onBlur = function() {
                    _this.setState({
                        cancelValidation : false
                    });
                    _this.props.onValidate(_this.value);
                }, _this.onChange = function() {
                    _this.setState({
                        cancelValidation : true,
                        dirty : true
                    });
                    _this.props.onSet(_this.value);
                }, _this;
            }
            return(0, m["default"])(init, deepDataAndEvents), (0, h["default"])(init, [{
                key : "getValidation",
                /**
                 * @return {?}
                 */
                value : function() {
                    return(this.props.validation && (!this.state.cancelValidation && this.state.dirty) || this.props.forceValidation) && self.createElement("div", {
                        className : data.validation,
                        dangerouslySetInnerHTML : {
                            __html : this.props.validation
                        }
                    });
                }
            }, {
                key : "render",
                /**
                 * @return {?}
                 */
                value : function() {
                    var props = this.props;
                    var _value = props.name;
                    var t = props.type;
                    var parentWidget = props.label;
                    var length = props.value;
                    var attributes = {
                        name : _value,
                        type : t,
                        value : length,
                        id : this.id,
                        ref : "input",
                        required : true,
                        spellCheck : false,
                        onBlur : this.onBlur,
                        onChange : this.onChange,
                        className : data.inputElement
                    };
                    return self.createElement("div", {
                        className : util.cs(data.input, fs.isWindows() && data.windows)
                    }, this.getValidation(), self.createElement("input", attributes), self.createElement("label", {
                        htmlFor : this.id,
                        className : data.label
                    }, parentWidget));
                }
            }, {
                key : "value",
                /**
                 * @return {?}
                 */
                get : function() {
                    return this.refs.input.value;
                }
            }]), init;
        }(self.Component);
        expectedHashCode.Input = Input;
    }, {
        "babel-runtime/core-js/object/get-prototype-of" : 28,
        "babel-runtime/helpers/classCallCheck" : 34,
        "babel-runtime/helpers/createClass" : 35,
        "babel-runtime/helpers/inherits" : 38,
        "babel-runtime/helpers/possibleConstructorReturn" : 39,
        "lib/dom" : 215,
        "lib/util" : 322,
        react : "react"
    }],
    245 : [function(valueAccessor, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} value
         * @return {?}
         */
        function require(value) {
            return value && value.__esModule ? value : {
                "default" : value
            };
        }
        var val = valueAccessor("babel-runtime/core-js/object/get-prototype-of");
        var type = require(val);
        var value = valueAccessor("babel-runtime/helpers/classCallCheck");
        var isFunction = require(value);
        var json = valueAccessor("babel-runtime/helpers/createClass");
        var nodes = require(json);
        var udataCur = valueAccessor("babel-runtime/helpers/possibleConstructorReturn");
        var filters = require(udataCur);
        var options = valueAccessor("babel-runtime/helpers/inherits");
        var settings = require(options);
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var self = valueAccessor("react");
        var item = {
            loginSuccess : "_5f9912-loginSuccess",
            windows : "_5f9912-windows",
            name : "_5f9912-name",
            label : "_5f9912-label"
        };
        var LoginSuccess = function(deepDataAndEvents) {
            /**
             * @return {?}
             */
            function value() {
                return(0, isFunction["default"])(this, value), (0, filters["default"])(this, (value.__proto__ || (0, type["default"])(value)).apply(this, arguments));
            }
            return(0, settings["default"])(value, deepDataAndEvents), (0, nodes["default"])(value, [{
                key : "componentDidMount",
                /**
                 * @return {undefined}
                 */
                value : function() {
                    if (this.props.onClose) {
                        setTimeout(this.props.onClose, 1500);
                    }
                }
            }, {
                key : "render",
                /**
                 * @return {?}
                 */
                value : function() {
                    return self.createElement("div", {
                        className : item.loginSuccess
                    }, this.props.username ? self.createElement("div", {
                        className : item.label
                    }, "Welcome back, ", self.createElement("span", {
                        className : item.name
                    }, this.props.username), "!") : self.createElement("div", {
                        className : item.label
                    }, "Welcome back!"));
                }
            }]), value;
        }(self.Component);
        expectedHashCode.LoginSuccess = LoginSuccess;
    }, {
        "babel-runtime/core-js/object/get-prototype-of" : 28,
        "babel-runtime/helpers/classCallCheck" : 34,
        "babel-runtime/helpers/createClass" : 35,
        "babel-runtime/helpers/inherits" : 38,
        "babel-runtime/helpers/possibleConstructorReturn" : 39,
        react : "react"
    }],
    246 : [function(require, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} d
         * @return {?}
         */
        function template(d) {
            return d && d.__esModule ? d : {
                "default" : d
            };
        }
        var data = require("babel-runtime/helpers/defineProperty");
        var result = template(data);
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var dom = require("react");
        var options = {
            welcome : "_66b3a6-welcome",
            windows : "_66b3a6-windows",
            image : "_66b3a6-image",
            content : "_66b3a6-content",
            show : "_66b3a6-show",
            title : "_66b3a6-title",
            text : "_66b3a6-text",
            close : "_66b3a6-close",
            learnMore : "_66b3a6-learnMore",
            goPremium : "_66b3a6-goPremium"
        };
        var command = require("lib/dom");
        var fs = require("lib/util");
        var child = require("./button");
        /**
         * @param {Object} that
         * @return {?}
         */
        expectedHashCode.Welcome = function(that) {
            var r20;
            var merge = that.isShow;
            var element = that.onClose;
            var table = that.onGoPremium;
            var cls = command.cs((r20 = {}, (0, result["default"])(r20, options.welcome, true), (0, result["default"])(r20, options.show, merge), (0, result["default"])(r20, options.windows, fs.isWindows()), r20));
            return dom.createElement("div", {
                className : cls
            }, dom.createElement("div", {
                className : options.image
            }), dom.createElement("div", {
                className : options.content
            }, dom.createElement("div", {
                className : options.title
            }, "Welcome to Grammarly"), dom.createElement("div", {
                className : options.text
            }, "Wave good-bye to the most frequent and pesky ", dom.createElement("br", null), "writing mistakes."), dom.createElement("div", {
                className : options.goPremium
            }, dom.createElement("span", {
                className : options.checks
            }, "Go Premium and get 150+ additional", dom.createElement("br", null), " advanced checks."), " ", dom.createElement("a", {
                onClick : table,
                className : options.learnMore
            }, "Learn more")), dom.createElement("div", {
                className : options.close
            }, dom.createElement(child.Button, {
                onClick : element,
                text : "Continue to Your Text"
            }))));
        };
    }, {
        "./button" : 240,
        "babel-runtime/helpers/defineProperty" : 36,
        "lib/dom" : 215,
        "lib/util" : 322,
        react : "react"
    }],
    247 : [function(require, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} parent
         * @return {?}
         */
        function compiled(parent) {
            return parent && parent.__esModule ? parent : {
                "default" : parent
            };
        }
        /**
         * @return {?}
         */
        function init() {
            /** @type {(Element|null)} */
            var f = document.querySelector(".gr__tooltip");
            return f || (f = _.createEl('<span class="gr__tooltip"><span class="gr__tooltip-content"></span><i class="gr__tooltip-logo"></i><span class="gr__triangle"></span></span>'), document.documentElement.appendChild(f)), f;
        }
        /**
         * @return {?}
         */
        function create() {
            /**
             * @return {undefined}
             */
            function attributes() {
                button.fastHide();
            }
            /**
             * @param {Object} event
             * @return {?}
             */
            function stop(event) {
                var current = event.target;
                return _.inEl(current, item.posEl);
            }
            /**
             * @return {undefined}
             */
            function remove() {
                if (item.posEl) {
                    if (element) {
                        if (element.parentNode) {
                            element.parentNode.removeChild(element);
                        }
                    }
                    _.unlisten(item.doc, "scroll", attributes);
                    if (item.moveListenerDoc) {
                        _.unlisten(item.moveListenerDoc, "scroll", attributes);
                    }
                }
            }
            /**
             * @return {undefined}
             */
            function initialize() {
                if (h) {
                    /** @type {boolean} */
                    h = false;
                    if (element) {
                        /** @type {string} */
                        element.style.opacity = "0";
                        /** @type {string} */
                        element.style.top = "-9999px";
                        if (button) {
                            button.setVisible(false);
                        }
                        element.className = element.className.replace(item.cls, "");
                    }
                }
            }
            /**
             * @return {undefined}
             */
            function log() {
                item.cls += " gr-no-transition";
                show();
                setTimeout(function() {
                    item.cls = item.cls.replace(" gr-no-transition", "");
                    _.removeClass(element, "gr-no-transition");
                }, 100);
            }
            /**
             * @return {undefined}
             */
            function show() {
                var me = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : item;
                var value = me.posEl;
                var el = void 0 === value ? item.posEl : value;
                var html = me.html;
                var content = void 0 === html ? item.html : html;
                var title = me.text;
                var id = void 0 === title ? item.text : title;
                var object = me.cls;
                var self = void 0 === object ? item.cls : object;
                var a = me.doc;
                var adown = void 0 === a ? item.doc : a;
                var attr = me.outerIframe;
                var suiteView = void 0 === attr ? item.outerIframe : attr;
                if ((0, result["default"])(item, {
                        posEl : el,
                        html : content,
                        text : id,
                        cls : self,
                        doc : adown,
                        outerIframe : suiteView
                    }), enabled) {
                    /** @type {boolean} */
                    h = true;
                    if (button) {
                        button.setVisible(true);
                    }
                    if (id) {
                        element.setAttribute("data-content", id);
                    }
                    if (content) {
                        elem.innerHTML = content;
                    }
                    /** @type {string} */
                    element.className = "gr__tooltip";
                    if (self) {
                        _.addClass(element, self);
                    }
                    _.removeClass(element, "gr__flipped");
                    var j = nodes.getAbsRect(el, suiteView);
                    var data = nodes.posToRect(element, j);
                    var rect = data.rect;
                    var top = rect.top;
                    var x = rect.left;
                    _.css(element, {
                        top : top,
                        left : x
                    });
                    if (data) {
                        if (data.rect) {
                            if (!data.rect.flip) {
                                _.addClass(element, "gr__flipped");
                            }
                        }
                    }
                    var originalWidth = element.clientWidth;
                    var lineSpace = element.querySelector(".gr__triangle");
                    /** @type {number} */
                    var left = j.width / 2;
                    if (left > originalWidth) {
                        /** @type {number} */
                        left = 0;
                    }
                    if (data.delta.right <= 0) {
                        left -= data.delta.right;
                    }
                    left -= parseInt(getComputedStyle(element).getPropertyValue("margin-left"), 10);
                    if (lineSpace) {
                        /** @type {string} */
                        lineSpace.style.marginLeft = left + "px";
                    }
                    /** @type {string} */
                    element.style.opacity = "1";
                }
            }
            var item = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
            var element = init();
            var elem = void 0;
            var button = void 0;
            var h = void 0;
            var enabled = void 0 === item.enabled || item.enabled;
            elem = element.querySelector(".gr__tooltip-content");
            if (item.posEl) {
                item.moveListenerDoc = item.outerIframe ? item.outerIframe.contentDocument : item.doc;
                button = new Block.HintImpl({
                    doc : item.moveListenerDoc,
                    doc2 : item.doc,
                    hint : element,
                    hideDelay : 500,
                    delay : 0,
                    /**
                     * @return {?}
                     */
                    onshow : function() {
                        return show();
                    },
                    /** @type {function (): undefined} */
                    onhide : initialize,
                    /** @type {function (Object): ?} */
                    inTarget : stop
                });
                _.listen(item.doc, "scroll", attributes);
                _.listen(item.moveListenerDoc, "scroll", attributes);
                button.bind();
            }
            var self = {
                /** @type {function (): undefined} */
                show : show,
                /** @type {function (): undefined} */
                fastShow : log,
                /** @type {function (): undefined} */
                hide : initialize,
                /** @type {function (): undefined} */
                remove : remove,
                el : element,
                /**
                 * @return {undefined}
                 */
                enable : function() {
                    /** @type {boolean} */
                    enabled = true;
                },
                /**
                 * @return {undefined}
                 */
                disable : function() {
                    /** @type {boolean} */
                    enabled = false;
                },
                /**
                 * @return {?}
                 */
                isEnabled : function() {
                    return enabled;
                }
            };
            return self;
        }
        var data = require("babel-runtime/core-js/object/assign");
        var result = compiled(data);
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var Block = require("./hint");
        var nodes = require("../position");
        var _ = require("../dom");
        /** @type {function (): ?} */
        expectedHashCode.createTooltip = create;
    }, {
        "../dom" : 215,
        "../position" : 289,
        "./hint" : 224,
        "babel-runtime/core-js/object/assign" : 24
    }],
    248 : [function(require, dataAndEvents, expectedHashCode) {
        /**
         * @param {string} code
         * @return {undefined}
         */
        function init(code) {
            /** @type {Element} */
            var script = document.createElement("script");
            /** @type {string} */
            script.innerHTML = code;
            document.head.appendChild(script);
            if (script.parentNode) {
                script.parentNode.removeChild(script);
            }
        }
        /**
         * @return {undefined}
         */
        function done() {
            Block.initContentScript();
            init("window.GR_EXTENSION_ID='" + i.getUuid() + "'");
            init("\n    window.GR_EXTENSION_SEND = function(key, data) {\n      if (!key) throw new TypeError('cant be called without message')\n      var e = document.createEvent('CustomEvent')\n      e.initCustomEvent('external:' + key, true, true, data)\n      document.dispatchEvent(e)\n    }\n  ");
            i.externalEvents.map(function(dataAndEvents) {
                return "external:" + dataAndEvents;
            }).forEach(function(cycle) {
                return parse.on.call(document, cycle, function(message) {
                    var attributes = message.detail;
                    console.log("external event", cycle, attributes);
                    util.emitBackground(cycle, attributes);
                });
            });
        }
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var util = require("./message");
        var parse = require("./dom");
        var i = require("./config");
        var Block = require("./tracking");
        /** @type {function (): undefined} */
        expectedHashCode.addExternalEventListeners = done;
    }, {
        "./config" : 211,
        "./dom" : 215,
        "./message" : 278,
        "./tracking" : 307
    }],
    249 : [function(require, dataAndEvents, expectedHashCode) {
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var string = require("lib/tracking/felogPixel");
        var nodes = require("lib/tracking/telemetry");
        var maxBits = {};
        var pageLoadTimeout = new nodes.Telemetry(string.sendEventPixel, function() {
        }, function() {
        }, function() {
        });
        expectedHashCode.failover = function() {
            /**
             * @return {undefined}
             */
            function f() {
                setTimeout(WAIT, $timeout);
                /** @type {boolean} */
                maxBits.index_load = false;
            }
            /**
             * @return {undefined}
             */
            function nextTick() {
                setTimeout(next, backoff);
                /** @type {boolean} */
                maxBits.app_load = false;
            }
            /**
             * @param {string} bits
             * @return {undefined}
             */
            function parse(bits) {
                /** @type {boolean} */
                maxBits[bits] = true;
            }
            /**
             * @param {string} encoding
             * @param {string} index
             * @return {undefined}
             */
            function end(encoding, index) {
            }
            /**
             * @return {undefined}
             */
            function WAIT() {
                end("index_load", "extension_loading");
                if (!maxBits.index_load) {
                    pageLoadTimeout.pageLoadTimeout();
                }
            }
            /**
             * @return {undefined}
             */
            function next() {
                end("app_load", "extension_app_loading");
                if (!maxBits.app_load) {
                    pageLoadTimeout.appLoadTimeout();
                }
            }
            /** @type {number} */
            var $timeout = 12E4;
            /** @type {number} */
            var backoff = 12E4;
            var ajaxSettings = {
                /** @type {function (): undefined} */
                startPageLoadTimer : f,
                /** @type {function (): undefined} */
                startAppLoadTimer : nextTick,
                /** @type {function (string): undefined} */
                success : parse,
                /**
                 * @param {number} _$timeout_
                 * @return {?}
                 */
                setPageLoadTimeout : function(_$timeout_) {
                    return $timeout = _$timeout_;
                },
                /**
                 * @param {number} dataAndEvents
                 * @return {?}
                 */
                setAppLoadTimeout : function(dataAndEvents) {
                    return backoff = dataAndEvents;
                }
            };
            return ajaxSettings;
        }();
    }, {
        "lib/tracking/felogPixel" : 306,
        "lib/tracking/telemetry" : 310
    }],
    250 : [function(require, dataAndEvents, expectedHashCode) {
        /**
         * @param {Object} element
         * @param {Range} self
         * @return {undefined}
         */
        function after(element, self) {
            /**
             * @param {Object} a
             * @return {undefined}
             */
            self.setDomSelection = function(a) {
                var p = assert.getNodeByTextPos(element, a.begin);
                var b = assert.getNodeByTextPos(element, a.end);
                jQuery.setDomRange(element.ownerDocument, {
                    anchorNode : p.node,
                    anchorOffset : a.begin - p.pos,
                    focusNode : b.node,
                    focusOffset : a.end - b.pos
                });
            };
            /**
             * @param {?} position
             * @return {undefined}
             */
            self.setCursor = function(position) {
                self.cursor = position;
            };
            /**
             * @param {string} b
             * @return {undefined}
             */
            self.fireDomEvent = function(b) {
                if (d.isFF()) {
                    jQuery.emitDomEvent("document-mousedown-mouseup-activeElement");
                }
                /** @type {string} */
                var PasteEventType = " " === b || b.trim() ? "paste" : "backspace";
                jQuery.emitDomEvent("document-" + PasteEventType + "-activeElement", b);
            };
            /**
             * @param {HTMLElement} target
             * @param {string} arg
             * @return {undefined}
             */
            self.doReplace = function(target, arg) {
                self.safeFocus();
                self.setDomSelection(target);
                d.asyncCall(function() {
                    return self.fireDomEvent(arg);
                });
            };
            /**
             * @param {?} dataAndEvents
             * @return {undefined}
             */
            self.setTextareaValue = function(dataAndEvents) {
                self.safeFocus();
                element.ownerDocument.getSelection().selectAllChildren(element);
                d.asyncCall(function() {
                    self.fireDomEvent(dataAndEvents.trimRight());
                    d.asyncCall(self._setCursor, 100);
                }, d.isSafari() ? 100 : 10);
            };
        }
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var assert = require("lib/wrap");
        var jQuery = require("lib/dom");
        var d = require("lib/util");
        /** @type {function (Object, Range): undefined} */
        expectedHashCode.extendDom = after;
    }, {
        "lib/dom" : 215,
        "lib/util" : 322,
        "lib/wrap" : 324
    }],
    251 : [function(require, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} d
         * @return {?}
         */
        function template(d) {
            return d && d.__esModule ? d : {
                "default" : d
            };
        }
        /**
         * @param {Object} editor
         * @return {?}
         */
        function init(editor) {
            /**
             * @return {undefined}
             */
            function stateChange() {
                move();
            }
            /**
             * @param {Event} e
             * @return {undefined}
             */
            function onTouchEnd(e) {
                var pos = expectedHashCode.getBoundingClientRect();
                var data = update(e.clientX - pos.left, e.clientY - pos.top, pos.left, pos.top);
                if (data) {
                    data.e = {
                        clientX : e.clientX,
                        clientY : e.clientY
                    };
                    e.stopPropagation();
                    /** @type {(Event|null)} */
                    var evt = document.createEvent("CustomEvent");
                    delete data.el;
                    delete data.match;
                    evt.initCustomEvent("gramMouse", true, true, data);
                    doc.dispatchEvent(evt);
                }
            }
            /**
             * @param {string} value
             * @return {?}
             */
            function filter(value) {
                return value ? value.toString().split(" ").map(function(value) {
                    return isNaN(parseFloat(value)) && value.indexOf("px") === -1 ? value : Math.floor(parseFloat(value)) + "px";
                }).join(" ") : value + "";
            }
            /**
             * @return {?}
             */
            function init() {
                var cur = win.getComputedStyle(expectedHashCode);
                if (!cur) {
                    return{};
                }
                /**
                 * @param {string} prop
                 * @return {?}
                 */
                var fn = function(prop) {
                    return cur.getPropertyValue(prop);
                };
                /**
                 * @param {Array} opt_attributes
                 * @return {?}
                 */
                var update = function(opt_attributes) {
                    var obj = {};
                    return opt_attributes.map(function(val) {
                        obj[val] = fn(val);
                        if ("z-index" === val) {
                            if ("auto" === obj[val]) {
                                if (expectedHashCode.style.zIndex) {
                                    obj[val] = expectedHashCode.style.zIndex;
                                }
                            }
                        }
                    }), obj;
                };
                var el = {
                    parent : update(["border", "border-radius", "box-sizing", "height", "width", "margin", "padding", "z-index", "border-top-width", "border-right-width", "border-left-width", "border-bottom-width", "border-top-style", "border-right-style", "border-left-style", "border-bottom-style", "padding-top", "padding-left", "padding-bottom", "padding-right", "margin-top", "margin-left", "margin-bottom", "margin-right"]),
                    child : update(["font", "font-size", "font-family", "text-align", "line-height", "letter-spacing", "text-shadow"]),
                    src : update(["position", "margin-top", "line-height", "font-size", "font-family", "z-index"])
                };
                var cDigit = el.parent["z-index"];
                if (el.parent["z-index"] = cDigit && "auto" !== cDigit ? (parseInt(cDigit, 10) - 1).toString() : "0", el.parent.marginTop = filter(el.parent.marginTop), el.src.marginTop = filter(el.src.marginTop), el.parent.margin = filter(el.parent.margin), el.parent.padding = filter(el.parent.padding), (el.parent["border-top-width"] || el.parent["border-left-width"]) && (el.parent["border-style"] = "solid"), el.parent.border) {
                    var codeSegments = el.parent.border.split(" ");
                    el.parent["border-width"] = codeSegments[0];
                    if (codeSegments.length > 1) {
                        el.parent["border-style"] = codeSegments[1];
                    }
                    delete el.parent.border;
                }
                if (el.parent["border-color"] = "transparent !important", "absolute" === el.src.position || "relative" === el.src.position ? el.parent = _.extend(el.parent, update(["top", "left"])) : el.src.position = "relative", result = that.customDefaultBg && that.customDefaultBg(expectedHashCode) || (result || fn("background")), d.isFF() && (!result && (result = ["background-color", "background-image", "background-repeat", "background-attachment", "background-position"].map(fn).join(" "))), el.parent.background =
                        result, d.isFF()) {
                    /** @type {number} */
                    var clientTop = parseInt(fn("border-right-width"), 10) - parseInt(fn("border-left-width"), 10);
                    /** @type {number} */
                    var top = expectedHashCode.offsetWidth - expectedHashCode.clientWidth - clientTop;
                    /** @type {string} */
                    el.child["padding-right"] = top - 1 + "px";
                }
                return "start" === fn("text-align") && (el.child["text-align"] = "ltr" === fn("direction") ? "left" : "right"), el;
            }
            /**
             * @param {?} prop
             * @return {undefined}
             */
            function animate(prop) {
                val = prop;
                render();
            }
            /**
             * @param {Object} styles
             * @return {undefined}
             */
            function start(styles) {
                var css = {
                    background : "transparent !important",
                    "z-index" : styles["z-index"] || 1,
                    position : styles.position,
                    "line-height" : styles["line-height"],
                    "font-size" : styles["font-size"],
                    "-webkit-transition" : "none",
                    transition : "none"
                };
                if (that.removeContainerFontSize) {
                    if (that.removeContainerFontSize(expectedHashCode)) {
                        delete css["font-size"];
                    }
                }
                if (parseInt(styles["margin-top"], 10) > 0) {
                    $.css(expectedHashCode.parentNode, {
                        width : "auto",
                        overflow : "hidden"
                    });
                }
                /** @type {boolean} */
                var n = win.devicePixelRatio > 1;
                if (n) {
                    var value = styles["font-family"];
                    if (0 === value.indexOf("Consolas")) {
                        value = value.replace("Consolas,", "Menlo, Monaco, 'Lucida Console', 'Liberation Mono', 'DejaVu Sans Mono', 'Bitstream Vera Sans Mono', 'Courier New', monospace, serif");
                        elem.child["font-family"] = value;
                        css["font-family"] = value;
                    }
                }
                if (d.isEdge) {
                    if ("auto" === elem.parent.top) {
                        /** @type {string} */
                        elem.parent.top = "0px";
                    }
                }
                $.css(expectedHashCode, css);
            }
            /**
             * @return {undefined}
             */
            function render() {
                var e = init();
                if (!U) {
                    start(e.src);
                    /** @type {boolean} */
                    V = !!expectedHashCode.previousElementSibling && "left" === $.css(expectedHashCode.previousElementSibling, "float");
                    d.interval(render, 500);
                    if (!W) {
                        /** @type {boolean} */
                        W = true;
                        $.listen(expectedHashCode, cycle);
                    }
                    /** @type {boolean} */
                    U = true;
                }
                elem.parent.marginTop = filter(elem.parent.marginTop);
                e = _.merge(e, elem);
                e.child.height = expectedHashCode.scrollHeight;
                if (that.fieldRestoreInlineStyles) {
                    that.fieldRestoreInlineStyles(expectedHashCode, e);
                }
                if (that.ghostHeight) {
                    e.child.height = that.ghostHeight(e.child.height);
                }
                if (that.setContainerLineHeight) {
                    that.setContainerLineHeight(expectedHashCode, e.child["font-size"]);
                }
                if (that.getContainerTextAlign) {
                    e.child.textAlign = that.getContainerTextAlign(expectedHashCode);
                }
                var cfg = _.merge(config, {
                    "data-id" : id,
                    "data-gramm_id" : id,
                    "data-gramm" : "gramm",
                    "data-gramm_editor" : true,
                    dir : expectedHashCode.getAttribute("dir")
                });
                if (!node) {
                    node = doc.createElement("grammarly-ghost");
                    node.setAttribute("spellcheck", "false");
                    $.insertBefore(node, basePrototype);
                }
                if (state.matchPrefix) {
                    cfg.className = state.matchPrefix;
                }
                if (that.ghostHeight) {
                    e.parent.height = that.ghostHeight(e.parent.height);
                }
                var result = lang.render(dom.createElement(container, {
                    style : e,
                    attrs : cfg,
                    val : val
                }), node);
                div = lang.findDOMNode(result);
                form = div.firstElementChild;
                /** @type {string} */
                div.contentEditable = "true";
                self.clone = div;
                self.cloneVal = form;
                draw();
                position();
                addEventListener();
                if (0 === expectedHashCode.offsetHeight) {
                    hide();
                } else {
                    loop();
                }
                self.emit("render");
            }
            /**
             * @return {?}
             */
            function draw() {
                if (V) {
                    if (expectedHashCode.getBoundingClientRect().left === div.getBoundingClientRect().left && expectedHashCode.getBoundingClientRect().top === div.getBoundingClientRect().top) {
                        return V = false;
                    }
                    var buttonPos = expectedHashCode.getBoundingClientRect();
                    var containerPos = expectedHashCode.parentNode.getBoundingClientRect();
                    /** @type {number} */
                    var n = buttonPos.left - containerPos.left;
                    /** @type {number} */
                    var r = buttonPos.top - containerPos.top;
                    /** @type {string} */
                    var transform = "translate(" + n + "px, " + r + "px)";
                    /** @type {string} */
                    elem.parent["-webkit-transform"] = transform;
                    /** @type {string} */
                    elem.parent.transform = transform;
                }
            }
            /**
             * @return {undefined}
             */
            function position() {
                /**
                 * @param {string} value
                 * @param {string} prop
                 * @param {boolean} recurring
                 * @return {undefined}
                 */
                function css(value, prop, recurring) {
                    /** @type {Array} */
                    var map = recurring ? [expectedHashCode, div] : [image, l];
                    /** @type {string} */
                    elem.parent[prop] = parseInt((parseInt(div.style[prop], 10) + map[0][value] - map[1][value]).toString(), 10) + "px";
                }
                var image = assert.getAbsRect(expectedHashCode);
                var l = assert.getAbsRect(div);
                if (l.left !== image.left && css("left", "marginLeft", false), l.top !== image.top && css("top", "marginTop", false), div.clientWidth === expectedHashCode.clientWidth || d.isFF() ? l.width !== image.width && (config.width = image.width) : l.width !== image.width ? div.style.width = image.width.toString() : css("clientWidth", "width", true), d.isFF()) {
                    var ball = $.css(expectedHashCode.parentNode, ["margin-left", "margin-top", "position"]);
                    if (ball) {
                        if (ball.marginLeft || ball.marginTop) {
                            if ("static" === ball.position) {
                                /** @type {string} */
                                expectedHashCode.parentNode.style.position = "relative";
                                /** @type {string} */
                                expectedHashCode.parentNode.style.overflow = "";
                            }
                        }
                    }
                }
                if (l.height !== image.height) {
                    elem.parent.height = image.height;
                }
            }
            /**
             * @return {undefined}
             */
            function addEventListener() {
                /**
                 * @param {Node} node
                 * @param {?} body
                 * @return {?}
                 */
                function traverseNode(node, body) {
                    return Block.isFacebookSite() ? node.nextElementSibling && node.nextElementSibling.childNodes[0] !== body : node.nextElementSibling !== body;
                }
                /**
                 * @param {?} el
                 * @return {?}
                 */
                var f = function(el) {
                    return doc.contains && doc.contains(el) || $.elementInDocument(el, doc);
                };
                if (node) {
                    if (f(expectedHashCode)) {
                        if (!(!traverseNode(node, expectedHashCode) && f(node))) {
                            $.insertBefore(node, basePrototype);
                        }
                    }
                }
            }
            /**
             * @param {string} sel
             * @return {?}
             */
            function $(sel) {
                return div.querySelector(".gr_" + sel);
            }
            /**
             * @return {undefined}
             */
            function move() {
                var branchDataJSON = state.current();
                /** @type {Array} */
                codeSegments = [];
                var height = div.scrollTop;
                /** @type {number} */
                var conditionIndex = 0;
                for (;conditionIndex < branchDataJSON.length;conditionIndex++) {
                    var condition = branchDataJSON[conditionIndex];
                    var item = $(condition.id);
                    if (item) {
                        slide(item);
                        var result = assert.getPos(item, div);
                        var box = {
                            x1 : result.x,
                            x2 : result.x + item.offsetWidth,
                            y1 : result.y,
                            y2 : result.y + item.offsetHeight + 5
                        };
                        var cycle = {
                            match : condition,
                            el : item,
                            id : item.id,
                            box : box
                        };
                        codeSegments.push(cycle);
                        var value = item.textContent;
                        var attrNames = value && value.trim().split(" ").length > 1;
                        if (attrNames) {
                            var scripts = item.getClientRects();
                            if (!(scripts.length < 2)) {
                                cycle.rects = _.map(scripts, function(state) {
                                    return{
                                        x1 : state.left,
                                        x2 : state.right,
                                        y1 : state.top + height,
                                        y2 : state.bottom + height
                                    };
                                });
                            }
                        }
                    }
                }
            }
            /**
             * @param {HTMLElement} item
             * @return {undefined}
             */
            function slide(item) {
                if (item) {
                    var parent = item.parentNode;
                    if (parent) {
                        var s = parent.getAttribute("style");
                        if (s) {
                            item.setAttribute("style", s);
                        }
                    }
                    if (!item.classList.contains("gr_disable_anim_appear")) {
                        item.addEventListener("animationend", function() {
                            return item.classList.add("gr_disable_anim_appear");
                        });
                    }
                    $.css(item, {
                        display : "",
                        padding : "",
                        margin : "",
                        width : ""
                    });
                }
            }
            /**
             * @param {Function} x
             * @param {number} a
             * @param {Function} z
             * @param {number} b
             * @return {?}
             */
            function update(x, a, z, b) {
                var scrollTop = div.scrollTop;
                /** @type {number} */
                var i = 0;
                for (;i < codeSegments.length;i++) {
                    var data = codeSegments[i];
                    var box = data.box;
                    if (x >= box.x1 && (x <= box.x2 && (a >= box.y1 - scrollTop && a <= box.y2 - scrollTop))) {
                        return data;
                    }
                    if (data.rects) {
                        /** @type {number} */
                        var ii = 0;
                        for (;ii < data.rects.length;ii++) {
                            var s = data.rects[ii];
                            var y = x + z;
                            var c = a + b;
                            if (y >= s.x1 && (y <= s.x2 && (c >= s.y1 - scrollTop && c <= s.y2 - scrollTop))) {
                                return data;
                            }
                        }
                    }
                }
            }
            /**
             * @return {undefined}
             */
            function done() {
                clearTimeout(tref);
                d.cancelInterval(render);
            }
            /**
             * @return {undefined}
             */
            function hide() {
                /** @type {string} */
                node.style.display = "none";
                if (d.isSafari()) {
                    /** @type {string} */
                    expectedHashCode.style.background = "";
                    /** @type {string} */
                    expectedHashCode.style.backgroundColor = "";
                }
                expectedHashCode.style.background = result;
                d.cancelInterval(render);
                setTimeout(function() {
                    return self.emit("render");
                }, 300);
                /** @type {boolean} */
                U = false;
                if (node.parentNode) {
                    node.parentNode.removeChild(node);
                }
            }
            /**
             * @return {undefined}
             */
            function loop() {
                if (!U) {
                    /** @type {string} */
                    node.style.display = "";
                    if (!node.parentNode) {
                        $.insertBefore(node, basePrototype);
                    }
                    render();
                    scroll();
                }
            }
            /**
             * @return {undefined}
             */
            function end() {
                done();
                $.unlisten(expectedHashCode, cycle);
                hide();
            }
            var expectedHashCode = editor.el;
            var basePrototype = Block.isFacebookSite() ? expectedHashCode.parentNode : expectedHashCode;
            var doc = expectedHashCode.ownerDocument;
            var win = doc.defaultView;
            var state = editor.editor || {
                /**
                 * @return {?}
                 */
                current : function() {
                    return[];
                }
            };
            var id = editor.id;
            var elem = {
                parent : {},
                child : {}
            };
            var config = {};
            var node = void 0;
            var div = void 0;
            var form = void 0;
            /** @type {boolean} */
            var U = false;
            var W = void 0;
            /** @type {string} */
            var val = "";
            /** @type {boolean} */
            var V = false;
            var result = void 0;
            var tref = void 0;
            /** @type {Array} */
            var codeSegments = [];
            var that = should.pageStyles(doc).getFixesForCurrentDomain();
            var self = Event({
                /** @type {function (): undefined} */
                render : render,
                /** @type {function (): ?} */
                getStyle : init,
                /** @type {function (?): undefined} */
                setText : animate,
                /** @type {function (): undefined} */
                generateAlertPositions : move,
                /** @type {function (): undefined} */
                remove : end,
                /** @type {function (): undefined} */
                hide : hide,
                /** @type {function (): undefined} */
                show : loop
            });
            /**
             * @return {undefined}
             */
            var scroll = function() {
                try {
                    elem.child.height = expectedHashCode.scrollHeight;
                    div.scrollTop = expectedHashCode.scrollTop;
                    clearTimeout(tref);
                    /** @type {number} */
                    tref = setTimeout(scroll, 100);
                } catch (e) {
                    scroll = d._f;
                }
            };
            var cycle = {
                /** @type {function (Event): undefined} */
                mousemove : onTouchEnd,
                /** @type {function (): undefined} */
                mouseenter : stateChange,
                keyup : scroll,
                scroll : scroll
            };
            return self;
        }
        var data = require("babel-runtime/helpers/extends");
        var result = template(data);
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var Event = require("emitter");
        var dom = require("react");
        var lang = require("react-dom");
        var _ = require("lodash");
        var d = require("../util");
        var Block = require("lib/location");
        var assert = require("../position");
        var $ = require("../dom");
        var should = require("../sites");
        var obj = {
            style : {
                child : {
                    display : "inline-block",
                    "line-height" : "initial",
                    color : "transparent",
                    overflow : "hidden",
                    "text-align" : "left",
                    "float" : "initial",
                    clear : "none",
                    "box-sizing" : "border-box",
                    "vertical-align" : "baseline",
                    "white-space" : "pre-wrap",
                    width : "100%",
                    margin : 0,
                    padding : 0,
                    border : 0
                },
                parent : {
                    position : "absolute",
                    color : "transparent",
                    "border-color" : "transparent !important",
                    overflow : "hidden",
                    "white-space" : "pre-wrap"
                },
                src : {}
            },
            attrs : {},
            val : ""
        };
        var container = dom.createClass({
            displayName : "GhostComponent",
            /**
             * @return {?}
             */
            getDefaultProps : function() {
                return obj;
            },
            /**
             * @return {?}
             */
            render : function() {
                var node = _.merge(obj.style, this.props.style);
                var toElem = this.props.attrs;
                var gstyle = $.camelizeAttrs(node.parent);
                var tagifyStyle = $.camelizeAttrs(node.child);
                var i = this.props.val;
                return toElem.gramm = true, dom.createElement("div", (0, result["default"])({
                    style : gstyle
                }, toElem), dom.createElement("span", {
                    style : tagifyStyle,
                    dangerouslySetInnerHTML : {
                        __html : i
                    }
                }), dom.createElement("br", null));
            }
        });
        /** @type {function (Object): ?} */
        expectedHashCode.createGhost = init;
    }, {
        "../dom" : 215,
        "../position" : 289,
        "../sites" : 294,
        "../util" : 322,
        "babel-runtime/helpers/extends" : 37,
        emitter : "emitter",
        "lib/location" : 277,
        lodash : "lodash",
        react : "react",
        "react-dom" : "react-dom"
    }],
    252 : [function(require, dataAndEvents, expectedHashCode) {
        /**
         * @param {Function} fn
         * @param {string} expectedHashCode
         * @param {string} y
         * @return {?}
         */
        function create(fn, expectedHashCode, y) {
            /**
             * @return {?}
             */
            function next() {
                return self = fn(p.el, p.id), self.on("exit", remove), self.dom.insertGhost = func, child = nodes.createGhost({
                    id : y,
                    el : expectedHashCode,
                    editor : self
                }), p.gh = child, self.ghostarea = p, self._run = self.run, self.run = run, self;
            }
            /**
             * @return {undefined}
             */
            function run() {
                render("on");
                /** @type {boolean} */
                M = true;
                result = filter();
                self._run();
                if (child) {
                    child.show();
                }
            }
            /**
             * @return {undefined}
             */
            function render() {
                var i = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "on";
                if ("on" === i) {
                    utils.listen(expectedHashCode, "input", handler);
                    utils.listen(expectedHashCode, "keyup", opt_attributes);
                    utils.listen(expectedHashCode, "keydown", gl);
                    utils.listen(src, "click", attributes, void 0, true);
                } else {
                    utils.unlisten(expectedHashCode, "input", handler);
                    utils.unlisten(expectedHashCode, "keyup", opt_attributes);
                    utils.unlisten(expectedHashCode, "keydown", gl);
                    utils.unlisten(src, "click", attributes);
                }
                if (child) {
                    child[i]("render", initialize);
                }
                self[i]("rendered", debug);
                if (!self.isHtmlGhost) {
                    self[i]("beforeReplace", start);
                    self[i]("afterReplace", onLoad);
                }
            }
            /**
             * @return {?}
             */
            function filter() {
                return "TEXTAREA" === expectedHashCode.tagName ? expectedHashCode.value : expectedHashCode.parentNode ? range.getText(expectedHashCode) : "";
            }
            /**
             * @param {?} n
             * @return {undefined}
             */
            function f(n) {
                expectedHashCode.value = n;
            }
            /**
             * @return {undefined}
             */
            function handler() {
                if (M) {
                    result = filter();
                }
            }
            /**
             * @return {undefined}
             */
            function start() {
                scrollTop = expectedHashCode.scrollTop;
            }
            /**
             * @param {Event} params
             * @return {?}
             */
            function attributes(params) {
                if (Block.isFacebookSite() && utils.matchesSelector(params.target, s)) {
                    return type();
                }
            }
            /**
             * @return {undefined}
             */
            function init() {
                var event = doc.createEvent("TextEvent");
                if (event.initTextEvent) {
                    if (self.latestCursor.s === self.latestCursor.e) {
                        event.initTextEvent("textInput", true, true, null, String.fromCharCode(8203), 1, "en-US");
                        setTimeout(function() {
                            self.saveCursor();
                            self.skipInputEvents();
                            expectedHashCode.dispatchEvent(event);
                            setTimeout(function() {
                                f(filter().replace(String.fromCharCode(8203), ""));
                                self.restoreCursor();
                                self.skipInputEvents(false);
                            }, 50);
                        }, 50);
                    }
                } else {
                    utils.runKeyEvent({
                        el : expectedHashCode,
                        type : "keydown"
                    });
                    utils.runKeyEvent({
                        el : expectedHashCode,
                        type : "keyup"
                    });
                }
                expectedHashCode.scrollTop = scrollTop;
                result = filter();
            }
            /**
             * @return {undefined}
             */
            function initialize() {
                if ((0 === result.length && filter().length > 0 || n) && (result = filter(), n = false), M) {
                    result = result.replace(new RegExp(String.fromCharCode(8203), "g"), "");
                    var msg = helper.diffPos(result, filter());
                    /** @type {boolean} */
                    var t = 1 !== result.indexOf("@") && filter().indexOf("@") === -1;
                    if (msg.delta >= 2) {
                        if (0 === msg.s) {
                            if (program || inverse) {
                                if (!t) {
                                    type();
                                }
                            }
                        }
                    }
                }
            }
            /**
             * @return {undefined}
             */
            function type() {
                if (M) {
                    on();
                    self.clearData();
                }
            }
            /**
             * @param {?} dataAndEvents
             * @return {undefined}
             */
            function opt_attributes(dataAndEvents) {
                self.camouflage();
            }
            /**
             * @param {Object} evt
             * @return {undefined}
             */
            function gl(evt) {
                /** @type {boolean} */
                inverse = 13 === event.keyCode(evt);
            }
            /**
             * @return {?}
             */
            function func() {
                return child.render(), {
                    clone : child.clone,
                    cloneVal : child.cloneVal
                };
            }
            /**
             * @return {undefined}
             */
            function onLoad() {
                setTimeout(init, 50);
            }
            /**
             * @return {undefined}
             */
            function debug() {
                if (child) {
                    child.generateAlertPositions();
                }
            }
            /**
             * @return {undefined}
             */
            function on() {
                if (M) {
                    if (child) {
                        child.hide();
                    }
                }
            }
            /**
             * @return {undefined}
             */
            function _fn() {
                /** @type {boolean} */
                M = true;
                if (child) {
                    child.show();
                }
            }
            /**
             * @return {undefined}
             */
            function remove() {
                render("off");
                if (self) {
                    self.off("exit", remove);
                    self.remove();
                    /** @type {null} */
                    self = null;
                }
                p.emit("exit");
                expectedHashCode.removeAttribute("data-gramm");
                expectedHashCode.removeAttribute("data-txt_gramm_id");
                if (child) {
                    child.remove();
                    /** @type {null} */
                    child = null;
                }
            }
            var doc = expectedHashCode.ownerDocument;
            var src = doc.defaultView;
            /** @type {boolean} */
            var program = false;
            /** @type {boolean} */
            var inverse = false;
            var child = void 0;
            /** @type {boolean} */
            var M = false;
            var n = void 0;
            var scrollTop = void 0;
            var result = filter();
            var self = void 0;
            expectedHashCode.setAttribute("data-gramm", "");
            expectedHashCode.setAttribute("data-txt_gramm_id", y);
            /** @type {string} */
            var s = "div[role=navigation] li[role=listitem] *";
            var p = createObject({
                el : expectedHashCode,
                id : y,
                /** @type {function (): undefined} */
                hideClone : on,
                /** @type {function (): undefined} */
                showClone : _fn,
                /** @type {function (): ?} */
                insertGhost : func,
                /** @type {function (): undefined} */
                remove : remove,
                /** @type {function (): undefined} */
                run : run
            });
            return next();
        }
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var utils = require("../dom");
        var event = require("../util");
        var Block = require("lib/location");
        var nodes = require("./ghost");
        var helper = require("@grammarly-npm/textdiff");
        var createObject = require("emitter");
        var range = require("lib/wrap");
        /** @type {function (Function, string, string): ?} */
        expectedHashCode.createGhostArea = create;
    }, {
        "../dom" : 215,
        "../util" : 322,
        "./ghost" : 251,
        "@grammarly-npm/textdiff" : 16,
        emitter : "emitter",
        "lib/location" : 277,
        "lib/wrap" : 324
    }],
    253 : [function(require, dataAndEvents, expectedHashCode) {
        /**
         * @return {?}
         */
        function isHtmlGhostSite() {
            return ua && Block.HTML_GHOST_SITES.includes(ua);
        }
        /**
         * @return {?}
         */
        function getHtmlGhostSelector() {
            return "[contenteditable]";
        }
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var url = require("lib/location");
        var Block = require("../page-config/defaults");
        var ua = url.getDomain();
        /** @type {function (): ?} */
        expectedHashCode.isHtmlGhostSite = isHtmlGhostSite;
        /** @type {function (): ?} */
        expectedHashCode.getHtmlGhostSelector = getHtmlGhostSelector;
    }, {
        "../page-config/defaults" : 283,
        "lib/location" : 277
    }],
    254 : [function(require, dataAndEvents, expectedHashCode) {
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var helper = require("../under/html-dom");
        var History = require("../under/textarea-dom");
        var range = require("lib/wrap");
        var nodes = require("lib/util");
        var target = require("./facebook-ghost");
        var Block = require("lib/location");
        /**
         * @param {Object} data
         * @return {?}
         */
        expectedHashCode.HtmlGhostDom = function(data) {
            var editor = data.editor;
            var elem = data.el;
            var options = elem.ownerDocument;
            var selection = helper.createHtmlDom(data);
            var self = History.createTextareaDom(data);
            var item = self;
            return item.safeFocus = function() {
                var verticalScrollPos = options.body.scrollTop;
                elem.focus();
                options.body.scrollTop = verticalScrollPos;
            }, self.getCursor = function() {
                return selection.getCursor();
            }, self.setCursor = function(position) {
                item.cursor = position;
                item._setCursor();
            }, item._setCursor = function() {
                range.invalidateNode(elem);
                selection.setCursor(item.cursor);
            }, self.getText = function() {
                return elem.parentNode ? (range.invalidateNode(elem), delete elem.__getText, range.getText(elem)) : "";
            }, self.replace = function(pattern, sub, xs) {
                /** @type {boolean} */
                editor.inputListener.ignorePaste = true;
                item.doReplace(pattern, sub);
                /** @type {boolean} */
                pattern.replaced = !xs;
                /** @type {boolean} */
                pattern.inDom = !xs;
                /** @type {boolean} */
                editor.inputListener.ignorePaste = false;
            }, item.doReplace = function(value, arr) {
                var params = self.getText();
                params = params.substring(0, value.s) + arr + params.substr(value.e);
                item.setTextareaValueSync(params);
                nodes.asyncCall(item._setCursor);
            }, item.setTextareaValueSync = function(content) {
                elem.innerText = content;
                range.invalidateNode(elem);
                item.safeFocus();
            }, self.setTextareaValue = function(value) {
                item.safeFocus();
                nodes.asyncCall(function() {
                    elem.innerText = value;
                    range.invalidateNode(elem);
                });
            }, Block.isFacebookSite() && target.extendDom(elem, self), self;
        };
    }, {
        "../under/html-dom" : 312,
        "../under/textarea-dom" : 319,
        "./facebook-ghost" : 250,
        "lib/location" : 277,
        "lib/util" : 322,
        "lib/wrap" : 324
    }],
    255 : [function(require, dataAndEvents, _this) {
        Object.defineProperty(_this, "__esModule", {
            value : true
        });
        var nodes = require("emitter");
        var _ = require("lodash");
        var Block = require("@grammarly-npm/websocket");
        _this.capi = nodes({
            CLIENT_NAME : "web",
            PROTOCOL_VERSION : "1.0",
            clientVersion : "",
            extDomain : "",
            token : null,
            debug : false,
            /**
             * @param {?} token
             * @return {undefined}
             */
            setToken : function(token) {
                _this.capi.token = token;
                _this.capi.emit("ready", _this.capi.token);
            },
            /**
             * @param {Function} callback
             * @return {?}
             */
            onReady : function(callback) {
                return _this.capi.token ? callback(_this.capi.token) : void _this.capi.one("ready", callback);
            },
            /**
             * @param {string} expectedHashCode
             * @return {?}
             */
            createClient : function(expectedHashCode) {
                /**
                 * @param {string} resp
                 * @return {undefined}
                 */
                function success(resp) {
                    var data = options[resp.error];
                    if (data) {
                        if (!data.intervals) {
                            /** @type {Array} */
                            data.intervals = [];
                            /** @type {number} */
                            data.lastErrSent = 0;
                        }
                        /** @type {number} */
                        data.lastErr = Date.now();
                        data.intervals.push(data.lastErr);
                        if (data.intervals.length < data.maxCount) {
                            self.ws.reconnect();
                            self.start();
                        }
                        /** @type {boolean} */
                        var n = data.lastErr - data.intervals[data.intervals.length - (data.maxCount + 1)] < 6E4;
                        if (data.intervals.length > data.maxCount) {
                            if (n) {
                                if (data.lastErr - data.lastErrSent > 6E4) {
                                    self.emit(data.emitMsg, {
                                        msg : resp,
                                        count : data.intervals.length,
                                        intervals : data.intervals
                                    });
                                    /** @type {number} */
                                    data.lastErrSent = data.lastErr;
                                }
                            }
                        }
                        if ("not_authorized" === resp.error) {
                            if (data.intervals.length > data.maxCount) {
                                /** @type {Array} */
                                data.intervals = [];
                            }
                        }
                    }
                }
                /**
                 * @param {string} key
                 * @param {Object} params
                 * @param {Function} obj
                 * @return {?}
                 */
                function done(key, params, obj) {
                    return params.rev = self.rev++, _.isFunction(obj) && self.one(["finished", params.rev.toString()], obj), callback(key, params), params.rev;
                }
                /**
                 * @param {string} method
                 * @param {Object} params
                 * @param {Function} success
                 * @return {?}
                 */
                function callback(method, params, success) {
                    params = params || {};
                    /** @type {string} */
                    params.action = method;
                    /** @type {number} */
                    params.id = self.messageId++;
                    /** @type {number} */
                    var value = +new Date;
                    return self.one([params.action.toString(), params.id.toString()], function() {
                        if (_.isFunction(success)) {
                            success(params);
                        }
                        self.emit("stats:timing", {
                            key : "performance:capi_time",
                            value : +new Date - value,
                            tags : ["op:" + method]
                        });
                    }), self.ws.send(params), params.id;
                }
                /** @type {boolean} */
                var c = !expectedHashCode.silentLogs;
                /** @type {number} */
                var useStandBy = 9E5;
                var options = {
                    runtime_error : {
                        maxCount : 10,
                        emitMsg : "frequent_runtime_error"
                    },
                    not_authorized : {
                        maxCount : 5,
                        emitMsg : "frequent_not_authorized_error"
                    }
                };
                /** @type {boolean} */
                var d = false;
                /** @type {number} */
                var opt_attributes = 0;
                expectedHashCode = _.extend({
                    connectionTimeout : 1E3,
                    sid : null,
                    useQueue : 30,
                    useStandBy : useStandBy,
                    resetQueueOnReconnect : true
                }, expectedHashCode);
                var throttledUpdate = expectedHashCode.createWs || Block;
                var self = nodes({
                    rev : 0,
                    messageId : 0,
                    options : expectedHashCode,
                    genre : null,
                    ws : throttledUpdate(expectedHashCode),
                    /**
                     * @param {Object} pattern
                     * @param {Object} v
                     * @param {?} millis
                     * @param {Object} content
                     * @return {?}
                     */
                    checkText : function(pattern, v, millis, content) {
                        return self.check(pattern, v, millis, void 0, content);
                    },
                    /**
                     * @param {number} to
                     * @param {Object} theTitle
                     * @param {Object} clone
                     * @param {Function} walkers
                     * @return {?}
                     */
                    submitOt : function(to, theTitle, clone, walkers) {
                        return self.rev = theTitle, clone = clone || {}, done("submit_ot", _.extend({
                            ch : to
                        }, clone), walkers);
                    },
                    /**
                     * @param {Object} pattern
                     * @param {Object} v
                     * @param {?} millis
                     * @param {Object} content
                     * @return {?}
                     */
                    checkNoSynonymsText : function(pattern, v, millis, content) {
                        return self.check(pattern, v, millis, "NOSYNONYMS", content);
                    },
                    /**
                     * @param {Object} pattern
                     * @param {Object} v
                     * @param {?} millis
                     * @param {Object} content
                     * @return {?}
                     */
                    checkGrammar : function(pattern, v, millis, content) {
                        return self.check(pattern, v, millis, "GRAMMAR", content);
                    },
                    /**
                     * @param {Object} pattern
                     * @param {Object} v
                     * @param {?} millis
                     * @param {Object} content
                     * @return {?}
                     */
                    checkSpell : function(pattern, v, millis, content) {
                        return self.check(pattern, v, millis, "SPELL", content);
                    },
                    /**
                     * @param {Object} pattern
                     * @param {Object} v
                     * @param {?} millis
                     * @param {Object} content
                     * @return {?}
                     */
                    checkStyle : function(pattern, v, millis, content) {
                        return self.check(pattern, v, millis, "STYLE", content);
                    },
                    /**
                     * @param {Object} pattern
                     * @param {Object} v
                     * @param {?} millis
                     * @param {Object} content
                     * @return {?}
                     */
                    checkSynonyms : function(pattern, v, millis, content) {
                        return self.check(pattern, v, millis, "SYNONYMS", content);
                    },
                    /**
                     * @param {string} expectedHashCode
                     * @return {?}
                     */
                    acknowledged : function(expectedHashCode) {
                        return self.feedback(expectedHashCode, "acknowledged");
                    },
                    /**
                     * @param {string} expectedHashCode
                     * @return {?}
                     */
                    ignore : function(expectedHashCode) {
                        return self.feedback(expectedHashCode, "ignore");
                    },
                    /**
                     * @param {string} expectedHashCode
                     * @return {?}
                     */
                    ignoreAll : function(expectedHashCode) {
                        return self.feedback(expectedHashCode, "ignore_all");
                    },
                    /**
                     * @param {Element} keepData
                     * @return {?}
                     */
                    addToDictionary : function(keepData) {
                        return callback("add_to_dict", {
                            word : keepData.value
                        });
                    },
                    /**
                     * @param {string} expectedHashCode
                     * @param {string} type
                     * @return {?}
                     */
                    feedback : function(expectedHashCode, type) {
                        return callback("feedback", {
                            sentenceNo : expectedHashCode.sentence_no,
                            alertId : String(expectedHashCode.sid),
                            text : expectedHashCode.value,
                            type : type
                        });
                    },
                    /**
                     * @param {Object} item
                     * @param {boolean} attr
                     * @param {?} millis
                     * @param {string} str
                     * @param {Object} code
                     * @return {?}
                     */
                    check : function(item, attr, millis, str, code) {
                        return done("submit", {
                            text : item,
                            begin : attr,
                            end : millis,
                            checks : str
                        }, code);
                    },
                    /**
                     * @return {?}
                     */
                    start : function() {
                        var error = {
                            token : _this.capi.token,
                            sid : expectedHashCode.sid,
                            docid : expectedHashCode.docid,
                            client : _this.capi.CLIENT_NAME,
                            protocolVersion : _this.capi.PROTOCOL_VERSION
                        };
                        return expectedHashCode.dialect && (error.dialect = expectedHashCode.dialect), _this.capi.clientVersion && (error.clientVersion = _this.capi.clientVersion), _this.capi.extDomain && (error.extDomain = _this.capi.extDomain), callback("start", error);
                    },
                    /**
                     * @param {Function} data
                     * @param {Function} walkers
                     * @return {?}
                     */
                    plagiarism : function(data, walkers) {
                        return done("plagiarism", {
                            /** @type {Function} */
                            text : data
                        }, walkers);
                    },
                    /**
                     * @param {?} view
                     * @param {?} edit
                     * @return {?}
                     */
                    undo : function(view, edit) {
                        return callback("undo", {
                            alertId : view,
                            sentenceId : edit
                        });
                    },
                    /**
                     * @param {?} event
                     * @param {?} e
                     * @return {?}
                     */
                    drop : function(event, e) {
                        return callback("drop", {
                            alertId : event,
                            sentenceId : e
                        });
                    },
                    /**
                     * @param {boolean} keepData
                     * @param {string} body
                     * @return {?}
                     */
                    synonyms : function(keepData, body) {
                        return callback("synonyms", {
                            rev : self.rev - 1,
                            begin : keepData,
                            token : body
                        });
                    },
                    /**
                     * @return {?}
                     */
                    stop : function() {
                        return callback("stop");
                    },
                    /**
                     * @return {?}
                     */
                    logout : function() {
                        return callback("logout");
                    },
                    /**
                     * @return {?}
                     */
                    close : function() {
                        return self.ws.close();
                    },
                    /**
                     * @return {?}
                     */
                    wsPause : function() {
                        return self.ws.wsPause();
                    },
                    /**
                     * @return {?}
                     */
                    wsPlay : function() {
                        return self.ws.wsPlay();
                    },
                    /**
                     * @param {?} deepDataAndEvents
                     * @return {?}
                     */
                    sendContainerId : function(deepDataAndEvents) {
                        return callback("option", {
                            name : "gnar_containerId",
                            value : deepDataAndEvents
                        });
                    }
                });
                var checkOnline = function() {
                    /**
                     * @return {undefined}
                     */
                    function poll() {
                        clearTimeout(tref);
                        /** @type {number} */
                        tref = setTimeout(function() {
                            if (!self.ws.isConnected()) {
                                self.emit("serviceState", {
                                    type : "capi",
                                    available : false
                                });
                                /** @type {boolean} */
                                o = true;
                            }
                        }, backoff);
                    }
                    /**
                     * @return {undefined}
                     */
                    function onError() {
                        clearTimeout(tref);
                        if (o) {
                            self.emit("serviceState", {
                                type : "capi",
                                available : true
                            });
                        }
                        /** @type {boolean} */
                        o = false;
                    }
                    /** @type {number} */
                    var backoff = 6E4;
                    var tref = void 0;
                    /** @type {boolean} */
                    var o = false;
                    return{
                        /** @type {function (): undefined} */
                        setAvailable : onError,
                        /** @type {function (): undefined} */
                        checkOnline : poll
                    };
                }();
                return self.ws.on("message", function(attributes) {
                    if (attributes.action) {
                        var cycle = attributes.action.toLowerCase();
                        if ("finished" === cycle && void 0 !== attributes.rev) {
                            return self.emit([cycle, attributes.rev.toString()], attributes), self.emit(cycle, attributes);
                        }
                        if ("cannot_find_synonym" === attributes.error) {
                            var opt_attributes = {
                                synonyms : {
                                    meanings : []
                                },
                                action : "synonyms",
                                id : attributes.id,
                                type : "syn"
                            };
                            return self.emit("synonyms", opt_attributes);
                        }
                        if ("error" === cycle) {
                            return success(attributes), self.emit("capiError", attributes);
                        }
                        if ("alert" === cycle && void 0 !== attributes.rev) {
                            return self.emit([cycle, attributes.rev.toString()], attributes), self.emit(cycle, attributes);
                        }
                        if (attributes.id) {
                            self.emit([cycle, attributes.id], attributes);
                        }
                        self.emit(cycle, attributes);
                    }
                }), self.on("start", function(data) {
                    self.emit("socketStart");
                    if (c) {
                        console.log("Got START with sid %s", data.sid);
                    }
                    if (data.sid) {
                        self.options.sid = data.sid;
                    }
                }), self.ws.connect(), self.start(), self.ws.on("connect", function() {
                    self.emit("socketConnect");
                    checkOnline.setAvailable();
                }), self.ws.on("error", function(attributes) {
                    checkOnline.checkOnline();
                    if ("disconnected" !== attributes) {
                        self.emit("socketError", attributes);
                        if (!d) {
                            opt_attributes++;
                            self.emit("socketFailCount", opt_attributes);
                        }
                        /** @type {boolean} */
                        d = true;
                    }
                }), self.ws.on("reconnect", function() {
                    self.start();
                    self.emit("socketReconnect");
                    checkOnline.setAvailable();
                    if (d) {
                        self.emit("socketReconnectAfterError");
                        /** @type {boolean} */
                        d = false;
                    }
                }), self.ws.delegate(self, "disconnect"), self;
            }
        });
    }, {
        "@grammarly-npm/websocket" : 18,
        emitter : "emitter",
        lodash : "lodash"
    }],
    256 : [function(handler, dataAndEvents, expectedHashCode) {
        /**
         * @param {string} ctx
         * @param {(Array|string)} n
         * @param {string} h
         * @return {?}
         */
        function f(ctx, n, h) {
            if (ctx.length <= 4) {
                return n;
            }
            var t = source.textdiff(ctx, n);
            if (!t.from) {
                return n;
            }
            h = h || "b";
            /** @type {string} */
            var _ = '<span class="' + h + '">';
            /** @type {string} */
            var a = "</span>";
            return 1 === t.newFragment.length && (t.from > 0 && (ctx[t.from - 1] === t.newFragment && (t.newFragment = t.newFragment + t.newFragment, t.from -= 1))), 1 !== t.oldFragment.length || (t.newFragment.length || (n[t.from - 1] !== t.oldFragment || (t.newFragment = t.oldFragment, t.from -= 1))), t.newFragment.length > 3 ? n : n = ctx.substring(0, t.from) + _ + t.newFragment + a + ctx.substring(t.to);
        }
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var source = handler("@grammarly-npm/textdiff");
        /** @type {function (string, (Array|string), string): ?} */
        expectedHashCode.differ = f;
    }, {
        "@grammarly-npm/textdiff" : 16
    }],
    257 : [function(dataAndEvents, deepDataAndEvents, expectedHashCode) {
        /**
         * @return {?}
         */
        function init() {
            /** @type {Element} */
            var elem = document.createElement("div");
            return elem.setAttribute("contenteditable", "PLAINTEXT-ONLY"), "plaintext-only" === elem.contentEditable;
        }
        /**
         * @param {string} buf
         * @param {string} filter
         * @return {?}
         */
        function next(buf, filter) {
            filter = filter || "all";
            /** @type {Array} */
            var arr = [160, 10, 8, 32, 8194, 8195, 8196, 8197, 8198, 8199, 8200, 8201, 8202, 8203, 8287, 12288];
            if (buf) {
                /** @type {Array.<?>} */
                arr = arr.filter(function(prefix) {
                    return buf.indexOf(prefix) === -1;
                });
            }
            /** @type {Array} */
            var tmp_arr = [];
            /** @type {number} */
            var i = 0;
            for (;i < arr.length;i++) {
                /** @type {string} */
                tmp_arr[i] = String.fromCharCode(arr[i]);
            }
            /** @type {string} */
            var attributes = "";
            switch(filter) {
                case "single":
                    break;
                case "all":
                    ;
                default:
                    /** @type {string} */
                    attributes = "+";
            }
            return new RegExp("[" + tmp_arr.join("") + "]" + attributes, "g");
        }
        /**
         * @param {string} path
         * @return {?}
         */
        function fn(path) {
            return!path || (path = path.replace(expectedHashCode.QUOTE_RE, ""), expectedHashCode.SEPARATORS.indexOf(path) !== -1 || path.match(expectedHashCode.ALL_SPACE_RE));
        }
        /**
         * @param {string} path
         * @param {number} last
         * @param {number} idx
         * @return {?}
         */
        function process(path, last, idx) {
            var from = path.substring(last - 1, last);
            var view = path.substring(idx, idx + 1);
            return fn(from) && fn(view) || last === idx;
        }
        /**
         * @param {string} parent
         * @param {boolean} element
         * @param {boolean} pos
         * @return {?}
         */
        function walk(parent, element, pos) {
            var classes = parent.substring(element, parent.length);
            /** @type {number} */
            var inc = 0;
            /** @type {string} */
            var headBuffer = "";
            if (0 === classes.length) {
                return pos ? {
                    inc : inc,
                    word : ""
                } : "";
            }
            /** @type {string} */
            var optsData = "";
            for (;classes.length > 0 && fn(classes[0]);) {
                optsData += classes.substring(0, 1);
                classes = classes.substring(1, classes.length);
                inc++;
            }
            /** @type {number} */
            var k = 0;
            for (;k < classes.length;k++) {
                var data = classes[k];
                if (fn(data)) {
                    return pos ? {
                        inc : inc,
                        word : headBuffer,
                        sep : optsData
                    } : headBuffer;
                }
                headBuffer += data;
            }
            return pos ? {
                inc : inc,
                word : headBuffer,
                sep : optsData
            } : headBuffer;
        }
        /**
         * @param {string} a
         * @param {number} b
         * @return {?}
         */
        function extend(a, b) {
            var array = a.substring(0, b);
            /** @type {string} */
            var code = "";
            for (;fn(array[array.length - 1]) && array.length > 0;) {
                array = array.substring(0, array.length - 1);
            }
            /** @type {number} */
            b = array.length - 1;
            for (;b >= 0;) {
                var line = array[b];
                if (fn(line)) {
                    return code;
                }
                /** @type {string} */
                code = line + code;
                b--;
            }
            return code;
        }
        /**
         * @param {string} html
         * @param {?} len
         * @return {?}
         */
        function wrap(html, len) {
            var pos = len;
            var line = html.substr(pos, 2);
            var value = html.substr(pos - 1, 2);
            if (value) {
                if (value.match(core_rnotwhite)) {
                    len--;
                    pos = len;
                    line = html.substr(pos, 2);
                }
            }
            for (;line && !line.match(core_rnotwhite);) {
                pos++;
                line = html.substr(pos, 2);
            }
            var end = pos + 2;
            pos = len;
            line = html.substring(pos - 2, pos);
            for (;line && (pos - 2 > 0 && !line.match(core_rnotwhite));) {
                pos--;
                line = html.substring(pos - 2, pos);
            }
            var start = pos;
            return start - 2 <= 0 && (start = 0), {
                s : start,
                e : end
            };
        }
        /**
         * @param {Array} array
         * @param {(Function|number)} ps
         * @return {?}
         */
        function set(array, ps) {
            /** @type {number} */
            var values = 0;
            /** @type {(Function|number)} */
            var i = ps;
            for (;void 0 !== array[i] && !fn(array[i]);) {
                i++;
                values++;
            }
            return values;
        }
        /**
         * @param {Array} arr
         * @param {(Function|number)} size
         * @return {?}
         */
        function reduce(arr, size) {
            /** @type {number} */
            var rval = 0;
            /** @type {(Function|number)} */
            var i = size;
            for (;void 0 !== arr[i] && !fn(arr[i]);) {
                i--;
                rval++;
            }
            return rval;
        }
        /**
         * @param {Object} element
         * @param {Object} opt_attributes
         * @return {?}
         */
        function getAbsolutePosition(element, opt_attributes) {
            if (!element || element === opt_attributes) {
                return{
                    x : 0,
                    y : 0
                };
            }
            var r = {
                x : element.offsetLeft,
                y : element.offsetTop
            };
            var tmp = getAbsolutePosition(element.offsetParent, opt_attributes);
            return r.x += tmp.x, r.y += tmp.y, r;
        }
        /**
         * @param {string} className
         * @return {?}
         */
        function addClass(className) {
            if (!className) {
                return 0;
            }
            var regexp = className.replace(/[\W\d]/gi, " ").trim().replace(/\s+/gi, " ").split(" ");
            return 1 === regexp.length && "" === regexp[0] ? 0 : regexp.length;
        }
        /**
         * @param {number} regex
         * @param {Array} argNames
         * @return {?}
         */
        function getFunction(regex, argNames) {
            if (2 === argNames.length) {
                argNames.push(argNames[1]);
            }
            /** @type {number} */
            var i = 2;
            return regex % 10 === 1 && (regex % 100 !== 11 && (i = 0)), regex % 10 >= 2 && (regex % 10 <= 4 && ((regex % 100 < 10 || regex % 100 >= 20) && (i = 1))), argNames[i];
        }
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        /**
         * @return {undefined}
         */
        expectedHashCode._f = function() {
        };
        /** @type {function (): ?} */
        expectedHashCode.supportsPlaintextEditables = init;
        /** @type {function (string, string): ?} */
        expectedHashCode.getSpaceConstant = next;
        expectedHashCode.ALL_SPACE_RE = next();
        /** @type {string} */
        expectedHashCode.SEPARATORS = ',.;:()\u00a7&$%!@#?*~+}{[]|/"`-<>\u2026\u201c\u201d\n';
        /** @type {RegExp} */
        expectedHashCode.QUOTE_RE = /["'\u201d\u2019\u201a\u201b\u201f\u201e\u201c]/g;
        /** @type {function (string): ?} */
        expectedHashCode.isSep = fn;
        /** @type {function (string, number, number): ?} */
        expectedHashCode.wordSeparated = process;
        /** @type {function (string, boolean, boolean): ?} */
        expectedHashCode.getNextWord = walk;
        /** @type {function (string, number): ?} */
        expectedHashCode.getPrevWord = extend;
        /** @type {RegExp} */
        var core_rnotwhite = /[!?.]\s|\n/g;
        /** @type {function (string, ?): ?} */
        expectedHashCode.getSentenceByPos = wrap;
        /** @type {function (Array, (Function|number)): ?} */
        expectedHashCode.getNextSepOffset = set;
        /** @type {function (Array, (Function|number)): ?} */
        expectedHashCode.getPrevSepOffset = reduce;
        /** @type {function (Object, Object): ?} */
        expectedHashCode.getPos = getAbsolutePosition;
        /** @type {function (string): ?} */
        expectedHashCode.wordCount = addClass;
        /** @type {function (number, Array): ?} */
        expectedHashCode.declension = getFunction;
    }, {}],
    258 : [function(require, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} type
         * @return {?}
         */
        function create(type) {
            return type && type.__esModule ? type : {
                "default" : type
            };
        }
        var selector = require("babel-runtime/helpers/typeof");
        var elem = create(selector);
        var type = require("babel-runtime/core-js/object/assign");
        var socket = create(type);
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var $ = require("lodash");
        var Block = require("lib/wrap");
        var assert = require("../under");
        var matches = require("./match-extensions");
        var helper = require("./text-api");
        var collection = require("./synonyms");
        var target = require("./track");
        var _ = require("./editor-util");
        var Dom = require("lib/dom");
        /**
         * @param {Object} options
         * @return {?}
         */
        expectedHashCode.GrammarlyEditor = function(options) {
            /**
             * @return {undefined}
             */
            function run() {
                if (self.inputListener) {
                    self.inputListener.start();
                }
                if (self.dom) {
                    self.dom.start();
                }
                if (options.value) {
                    self.setText(options.value);
                }
                if (options.matches) {
                    self.addMatches(options.matches);
                }
                self.api.update(self.currentText);
                self.check();
            }
            /**
             * @param {Object} value
             * @return {?}
             */
            function attributes(value) {
                var type = "object" === ("undefined" === typeof value ? "undefined" : (0, elem["default"])(value)) && value.id ? value.id : value;
                var attributes = self.bySid(type);
                if (self._removedByServer.push(type), "object" === ("undefined" === typeof value ? "undefined" : (0, elem["default"])(value)) && (value.id && result.rmMatchesBufferCache(value)), attributes && (self.emit("serverRemove", attributes), attributes.cancelServerRemove)) {
                    return void delete attributes.cancelServerRemove;
                }
                if (attributes) {
                    return result.forceRemove(attributes);
                }
                var statics = self.matches.getRemoved()[type];
                if (statics) {
                    if (T) {
                        console.log("remove-already-removed-match");
                    }
                    result.forceRemove(statics);
                }
            }
            /**
             * @param {Function} val
             * @return {?}
             */
            function next(val) {
                return fn(val);
            }
            /**
             * @param {Element} elem
             * @return {?}
             */
            function color(elem) {
                return elem.tagName && (tags.indexOf(elem.tagName.toLowerCase()) === -1 && "gmail_quote" !== elem.className);
            }
            /**
             * @param {?} inplace
             * @param {boolean} not
             * @param {Element} expr
             * @return {?}
             */
            function filter(inplace, not, expr) {
                return "tmp_id" === expr.id.toString() || (!!expr.syn || not);
            }
            /**
             * @param {?} var_args
             * @return {?}
             */
            function create(var_args) {
                var _defaultOptions = {
                    matches : self.serializeMatches(self.matches.get(), true),
                    editorId : self.id,
                    cursor : self.latestCursor,
                    socketId : self.api.ws.socketId,
                    api : self.api.getState(),
                    selectedMatchId : self.selectedMatch && self.selectedMatch.id
                };
                return self.getHtml && !var_args ? (0, socket["default"])({}, _defaultOptions, {
                    html : self.getHtml(),
                    whiteSpace : self.el.__white_space
                }) : (0, socket["default"])({}, _defaultOptions, {
                    text : self.getText(true)
                });
            }
            /**
             * @param {Object} opt_attributes
             * @return {undefined}
             */
            function render(opt_attributes) {
                self.clearData();
                if (opt_attributes.html) {
                    self.el.__white_space = self.el.style.whiteSpace = opt_attributes.whiteSpace || "normal";
                }
                self.one("afterReplace", function() {
                    self.api.setState(opt_attributes.api);
                    self.addMatches(opt_attributes.matches);
                    if (!opt_attributes.cursor) {
                        opt_attributes.cursor = {
                            s : 0,
                            e : 0
                        };
                    }
                    if (!self.isHtmlGhost) {
                        self.el.focus();
                    }
                    /** @type {boolean} */
                    var t = self.getMatches().filter(function(dataAndEvents) {
                        return dataAndEvents.syn;
                    }).length > 0;
                    if (t) {
                        self.synonyms.registerRemove();
                    }
                    self.setCursor(opt_attributes.cursor);
                    self.latestCursor = opt_attributes.cursor;
                    self.render();
                });
                if (void 0 !== opt_attributes.html && self.setHtml) {
                    self.setHtml(opt_attributes.html);
                } else {
                    self.setText(opt_attributes.text);
                }
            }
            /**
             * @return {undefined}
             */
            function update() {
                that.checkPlagiarism(self.currentText);
            }
            /**
             * @param {boolean} key
             * @param {string} value
             * @return {undefined}
             */
            function access(key, value) {
                that.synonyms(key, value);
            }
            /**
             * @return {undefined}
             */
            function opt_attributes() {
                if (apps.plagiarismActive()) {
                    throttledUpdate();
                }
            }
            /**
             * @return {undefined}
             */
            function gl() {
                dereg();
            }
            /**
             * @return {undefined}
             */
            function init() {
                if (self.getText) {
                    var classNames = self.getText();
                    var elapsed = _.wordCount(classNames);
                    /** @type {number} */
                    var change = elapsed > 0 ? self.getFiltered().length / elapsed : 0;
                    self.emit("track", {
                        type : "timing",
                        data : {
                            "performance:text_stats.error_rate" : Math.round(1E3 * change) / 1E3,
                            "performance:text_stats.text_size_chars" : classNames.length,
                            "performance:text_stats.text_size_words" : elapsed
                        }
                    });
                }
            }
            /**
             * @return {undefined}
             */
            function load() {
                var values = self.el.querySelectorAll(".gr-alert");
                var valuesLen = values.length;
                /** @type {number} */
                var i = 0;
                for (;i < valuesLen;i++) {
                    var node = values[i];
                    var tmp = node.nextSibling;
                    if (tmp) {
                        if (3 === tmp.nodeType) {
                            if (!node.__sentCorruptedUnderline) {
                                if (!Dom.hasClass(node, "Punctuation")) {
                                    if (tmp.textContent) {
                                        if (tmp.textContent[0].match(/\w/)) {
                                            self.emit("corruptedUnderline", {
                                                text : node.textContent,
                                                id : node.id,
                                                className : node.className,
                                                siblingText : tmp.textContent.substring(0, 20)
                                            });
                                            /** @type {boolean} */
                                            node.__sentCorruptedUnderline = true;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                /** @type {number} */
                tref = setTimeout(load, 5E3);
            }
            /**
             * @return {undefined}
             */
            function listener() {
                self.synonyms.fieldEnable();
            }
            /**
             * @return {undefined}
             */
            function toggle() {
                self.api.close();
                self.synonyms.disable();
                clearTimeout(tref);
            }
            /** @type {boolean} */
            var T = !options.silentLogs;
            var that = helper.createTextApi(options);
            var self = assert.createEditor((0, socket["default"])({}, options, {
                api : that,
                /** @type {function (Element): ?} */
                isValidNode : color,
                /** @type {function (?, boolean, Element): ?} */
                isValidMatchForNode : filter,
                editorType : options.editorType.value
            }));
            self.matchPrefix = options.matchPrefix;
            var fn = options.filter || function(arr) {
                return arr;
            };
            var apps = options.apps || {
                /**
                 * @return {?}
                 */
                plagiarismActive : function() {
                    return false;
                }
            };
            var throttledUpdate = $.throttle(update, options.plagiarismCheckDelay || 2E3);
            var result = self.matches;
            var copy = matches.createMatchExtensions({
                silentLogs : options.silentLogs,
                exposeRawMatch : options.exposeRawMatch,
                editor : self,
                matches : result
            });
            /** @type {boolean} */
            var isTextarea = "textarea" === options.editorType.value;
            /** @type {Array} */
            var tags = ["pre", "code", "blockquote"];
            /** @type {Array} */
            var exclusions = ["gmail_quote"];
            Block.skipTag($.union(Block.skipTag() || [], tags));
            Block.skipClass($.union(Block.skipClass() || [], exclusions));
            $.extend(self, {
                /** @type {function (): undefined} */
                checkPlagiarism : update,
                /** @type {function (boolean, string): undefined} */
                getSynonyms : access,
                filter : fn,
                apps : apps,
                /** @type {function (Function): ?} */
                matchFilter : next,
                synonyms : collection.createSynonyms({
                    editor : self,
                    canRemove : options.canRemoveSynonym,
                    textareaWrapSelector : options.textareaWrapSelector,
                    animatorContainer : options.animatorContainer,
                    getAnimatorElPos : options.getAnimatorElPos,
                    exposeSynApi : options.exposeSynApi
                }),
                /** @type {function (?): ?} */
                getState : create,
                /** @type {function (Object): undefined} */
                setState : render,
                /** @type {function (): undefined} */
                run : run,
                ot_alert_intersection : 0,
                isTextarea : isTextarea
            }, copy);
            self.on("change", opt_attributes);
            self.on("input", gl);
            self.on("keydown", gl);
            self.on("exit", toggle);
            self.on("fieldEnable", listener);
            self.on("startInvalidateNode", that.wsPause);
            self.on("endInvalidateNode", that.wsPlay);
            that.delegate(self, "plagiarismChecked");
            that.delegate(self, "capiError");
            that.delegate(self, "serviceState");
            that.delegate(self, "socketConnect");
            that.delegate(self, "socketStart");
            that.delegate(self, "socketReconnect");
            that.delegate(self, "socketReconnectAfterError");
            that.delegate(self, "socketFailCount");
            that.delegate(self, "disconnect");
            that.delegate(self, "socketError");
            that.delegate(self, "frequent_runtime_error");
            that.delegate(self, "too_many_runtime_error");
            that.delegate(self, "frequent_not_authorized_error");
            that.delegate(self, "finished");
            that.on("remove", attributes);
            target.track(self);
            Block.setOnError(function(newkey) {
                self.emit("track", {
                    type : "increment",
                    key : "wrap_error." + newkey
                });
            });
            var tref = void 0;
            if (!isTextarea) {
                load();
            }
            var dereg = $.debounce(init, 5E3);
            if (options.autorun) {
                run();
            }
            /** @type {function (string, string): ?} */
            var hasKey = self.api.feedback;
            return self.api.feedback = function(expectedHashCode, type) {
                return hasKey(expectedHashCode, type);
            }, self;
        };
        /**
         * @param {Object} opts
         * @return {?}
         */
        expectedHashCode.getUpgradeUrlFromMatches = function(opts) {
            /**
             * @param {?} a
             * @return {?}
             */
            function normalize(a) {
                /** @type {string} */
                var paramString = "";
                return $.each(a, function(dataAndEvents, text) {
                    if ("" !== paramString) {
                        paramString += "&";
                    }
                    paramString += encodeURI(String(text)) + "=" + dataAndEvents;
                }), paramString;
            }
            /**
             * @param {?} selector
             * @return {?}
             */
            function init(selector) {
                var nodes = compact(selector);
                var map = {};
                return $.each(nodes, function(node) {
                    var g = node.group;
                    var y = node.category.replace("_", "");
                    /** @type {string} */
                    var objUid = [g, y].join(":");
                    if (void 0 === map[objUid]) {
                        /** @type {number} */
                        map[objUid] = 0;
                    }
                    map[objUid] += 1;
                }), map;
            }
            /**
             * @param {?} array
             * @return {?}
             */
            function compact(array) {
                return $.filter(array, function(line) {
                    return line.hidden;
                });
            }
            var attributes = init(opts.matches);
            var headers = opts.returnUrl;
            var copy = opts.queryParams || {};
            var options = {};
            var css = {};
            return headers && (options.return_url = encodeURIComponent(headers)), opts.appType && (options.app_type = opts.appType), css = $.extend(attributes, options, copy), opts.baseUrl + "?" + normalize(css);
        };
    }, {
        "../under" : 314,
        "./editor-util" : 257,
        "./match-extensions" : 259,
        "./synonyms" : 262,
        "./text-api" : 263,
        "./track" : 264,
        "babel-runtime/core-js/object/assign" : 24,
        "babel-runtime/helpers/typeof" : 42,
        "lib/dom" : 215,
        "lib/wrap" : 324,
        lodash : "lodash"
    }],
    259 : [function(require, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} value
         * @return {?}
         */
        function h(value) {
            return value && value.__esModule ? value : {
                "default" : value
            };
        }
        var selector = require("babel-runtime/core-js/json/stringify");
        var elem = h(selector);
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var _ = require("lodash");
        var m = require("./editor-util");
        var assert = require("./match-transformer");
        /**
         * @param {Object} e
         * @return {?}
         */
        expectedHashCode.createMatchExtensions = function(e) {
            /**
             * @param {Object} node
             * @param {string} source
             * @return {?}
             */
            function update(node, source) {
                /** @type {string} */
                var n = node.syn ? " gr-syn" : " gr-alert";
                return node._e - node._s === 1 && ("a" !== source.substring(node._s, node._e).toLowerCase() && (n += " gr_tiny")), node.selected && (n += " sel"), n += node.gramm ? " gr_gramm" : " gr_spell", node.replaced && (n += " gr_replaced"), node.notClickableTitle && ("ContextualSpelling" !== node.group && (n += " gr_hide")), node.free || (n += " gr_premium"), n;
            }
            /**
             * @param {Object} attributes
             * @param {?} html
             * @return {?}
             */
            function add(attributes, html) {
                return attributes.skipUpdatePos = "Plagiarism" === attributes.category || "syn" === attributes.type, assert.processMatch(attributes, html, {
                    exposeRawMatch : button
                }), "syn" !== attributes.type || (self.emit("syn", attributes), false);
            }
            /**
             * @param {?} val
             * @return {?}
             */
            function contains(val) {
                return _.find(object.get(), {
                    sid : val.toString()
                });
            }
            /**
             * @param {Array} params
             * @param {string} elem
             * @return {?}
             */
            function next(params, elem) {
                /** @type {Array} */
                var nodes = [];
                /** @type {number} */
                var i = 0;
                for (;i < params.length;i++) {
                    var param = params[i];
                    if ("ContextualSpelling" === param.group) {
                        nodes.push(m.getSentenceByPos(elem, param.s));
                    }
                }
                return params.filter(function(a) {
                    if ("ContextualSpelling" === a.group || ("Plagiarism" === a.group || a.syn)) {
                        return true;
                    }
                    /** @type {number} */
                    var i = 0;
                    for (;i < nodes.length;i++) {
                        var b = nodes[i];
                        if (a.s > b.s && a.s < b.e) {
                            return false;
                        }
                    }
                    return true;
                });
            }
            /**
             * @param {Object} data
             * @return {?}
             */
            function success(data) {
                var codeSegments = object.get();
                if ("Plagiarism" !== data.category) {
                    /** @type {number} */
                    var i = 0;
                    for (;i < codeSegments.length;i++) {
                        var e = codeSegments[i];
                        if (e.category === data.category && "Plagiarism" !== e.category) {
                            var o = object.isIntersected(data, e) && complete(data, e);
                            if (o) {
                                return e;
                            }
                        }
                    }
                    return false;
                }
            }
            /**
             * @param {Object} a
             * @return {?}
             */
            function test(a) {
                /**
                 * @param {Object} a
                 * @param {Object} b
                 * @return {?}
                 */
                function f(a, b) {
                    return a.s === b.s && a.e === b.e || (a.s === b.s || a.e === b.e) && a.value.replace(/\s+/g, "") === b.value.replace(/\s+/g, "");
                }
                var codeSegments = object.get();
                if ("Plagiarism" !== a.category) {
                    /** @type {number} */
                    var i = 0;
                    for (;i < codeSegments.length;i++) {
                        var b = codeSegments[i];
                        if (f(a, b)) {
                            if (a.priority < b.priority) {
                                return-1;
                            }
                            if (a.priority > b.priority) {
                                return i;
                            }
                        }
                    }
                }
            }
            /**
             * @param {Object} attributes
             * @param {string} t
             * @return {?}
             */
            function remove(attributes, t) {
                var obj = object.get();
                var k = test(attributes);
                if (k === -1) {
                    return S && console.log("%c skip adding match with lower priority", "color:rgba(239, 110, 105, 0.8)", attributes.value, attributes), false;
                }
                if (k) {
                    if (k > -1) {
                        if (S) {
                            console.log("%c remove same match with lower priority", "color:rgba(239, 110, 105, 0.8)", obj[k].value, obj[k]);
                        }
                        obj.splice(k, 1);
                    }
                }
                var recurring = success(attributes);
                if (recurring) {
                    return S && console.log("%c remove, match of same category is overlaping with", "color:rgba(239, 110, 105, 0.8)", attributes.value, recurring), object.matchUpdater.extendWithoutAdding(obj, attributes), false;
                }
                /** @type {boolean} */
                var i = attributes.v.indexOf(" ") !== -1;
                /** @type {boolean} */
                var program = attributes.v.indexOf("'") !== -1 || attributes.v.indexOf("\u2019") !== -1;
                /** @type {boolean} */
                var inverse = ",," === attributes.v || ".." === attributes.v;
                if (!(_.isUndefined(attributes.rFirst) || (m.wordSeparated(t, attributes.s, attributes.e) || (i || (m.isSep(attributes.v.trim()) || (program || inverse)))))) {
                    return S && console.log("%c match is part of word '%s'", "color:rgba(239, 110, 105, 0.8)", attributes.value, attributes), object.emit("match_is_part_of_word"), false;
                }
                if ("IgnoredPatterns" === attributes.category || "IgnoredWords" === attributes.category) {
                    return S && console.log("%c remove ignored", "color:rgba(239, 110, 105, 0.8)", attributes), false;
                }
                var codeSegments = t.substring(attributes.s, attributes.e);
                if (attributes.todo.indexOf("add a comma") !== -1 && ("," === t.substring(attributes.e, attributes.e + 1) || "," === codeSegments[codeSegments.length - 1])) {
                    return attributes.removed = true, S && console.log("%c lost add a comma match, comma is here", "color:rgba(239, 110, 105, 0.8)", attributes), false;
                }
                if (attributes.todo.indexOf("add an article") !== -1 && (" an" === codeSegments || (" the" === codeSegments || " a" === codeSegments))) {
                    return S && console.log("%c lost add an article match", "color:rgba(239, 110, 105, 0.8)", attributes), false;
                }
                var calculatedHash = m.getPrevWord(t, attributes.s) + " " + attributes.value;
                /** @type {boolean} */
                var h = calculatedHash === attributes.rFirst || calculatedHash === attributes.secondArticle;
                if (h) {
                    return S && console.log("%c lost add an article match, article already fixed", "color:rgba(239, 110, 105, 0.8)", attributes), false;
                }
                if (removeItem(attributes)) {
                    return S && console.log("skip AccidentallyConfused match see https://grammarly.atlassian.net/browse/FT-1172"), false;
                }
                var entity = object.tryToAdd(attributes, t);
                return!!entity;
            }
            /**
             * @param {Object} a
             * @return {?}
             */
            function removeItem(a) {
                var codeSegments = object.get();
                /** @type {number} */
                var i = 0;
                for (;i < codeSegments.length;i++) {
                    var b = codeSegments[i];
                    if (a.s === b.s && (a.e === b.e && ("AccidentallyConfused" === a.category && ("CommonlyConfused" === b.category || "Misspelled" === b.category)))) {
                        return true;
                    }
                }
                return false;
            }
            /**
             * @param {string} expectedHashCode
             * @param {string} type
             * @param {?} opt_attributes
             * @param {boolean} recurring
             * @return {?}
             */
            function initialize(expectedHashCode, type, opt_attributes, recurring) {
                var value = expectedHashCode.value;
                /** @type {boolean} */
                var hasNonList = !m.wordSeparated(type, opt_attributes, recurring);
                /** @type {boolean} */
                var a = " " === value[0] && " " === value[value.length - 1];
                /** @type {boolean} */
                var c = value.indexOf(",") !== -1;
                /** @type {boolean} */
                var l = value.indexOf(";") !== -1;
                /** @type {boolean} */
                var u = ea.indexOf(value) !== -1;
                /** @type {boolean} */
                var hasOppositeType = expectedHashCode.rFirst === type.substring(opt_attributes, recurring + 1);
                var tval = m.getPrevWord(type, opt_attributes) + " " + value;
                /** @type {boolean} */
                var program = tval === expectedHashCode.rFirst || tval === expectedHashCode.secondArticle;
                /** @type {boolean} */
                var inverse = "ArticleUse" === expectedHashCode.category && (expectedHashCode.todo.indexOf("change") !== -1 && expectedHashCode.next !== m.getNextWord(type, recurring));
                /** @type {boolean} */
                var property = "Plagiarism" === expectedHashCode.category;
                /** @type {boolean} */
                var object = "ClosingPunctuation" === expectedHashCode.category;
                return hasNonList && (!a && (!c && (!u && (!l && (!object && !property))))) || (hasOppositeType || (program || inverse));
            }
            /**
             * @param {Function} attributes
             * @return {undefined}
             */
            function render(attributes) {
                var label = self.getText();
                var names = object.tryToAdd(attributes, label);
                if (names) {
                    self.addMethodsToMatch(attributes);
                    self.saveCursor();
                    self.render();
                    self.restoreCursor();
                    self.emit("addedSynonym", attributes);
                }
            }
            /**
             * @return {undefined}
             */
            function handler() {
                self.saveCursor();
                object.get().forEach(function(attributes) {
                    if (attributes.syn) {
                        self.emit("removeSyn", attributes);
                    }
                });
                toggle();
                if (self.dom) {
                    self.dom.removeBySelector(".gr-syn");
                }
                self.restoreCursor();
            }
            /**
             * @return {undefined}
             */
            function toggle() {
                var codeSegments = object.get();
                /** @type {number} */
                var i = 0;
                for (;i < codeSegments.length;i++) {
                    codeSegments[i].deselect();
                    if (codeSegments[i].syn) {
                        object.remove(codeSegments[i]);
                        i--;
                    }
                }
            }
            /**
             * @param {string} expectedHashCode
             * @param {string} type
             * @param {?} opt_attributes
             * @return {undefined}
             */
            function createDom(expectedHashCode, type, opt_attributes) {
                if (expectedHashCode.syn) {
                    self.latestCursor.s = self.latestCursor.e = self.latestCursor.s - type + opt_attributes.length;
                }
            }
            /**
             * @param {Object} d
             * @param {Object} v
             * @return {?}
             */
            function complete(d, v) {
                return d.rFirst === v.rFirst && (0, elem["default"])(d.r) === (0, elem["default"])(v.r);
            }
            /**
             * @param {Object} a
             * @param {Object} val
             * @param {boolean} deepDataAndEvents
             * @return {?}
             */
            function resolve(a, val, deepDataAndEvents) {
                return!a.syn && (!val.syn && (deepDataAndEvents && (a.v.toLowerCase() === val.v.toLowerCase() && (a.category === val.category && complete(a, val)))));
            }
            /**
             * @param {string} expectedHashCode
             * @param {string} type
             * @return {undefined}
             */
            function finish(expectedHashCode, type) {
                expectedHashCode.sid = type.id.toString();
                expectedHashCode.sentence_no = type.sentence_no;
                expectedHashCode.header = type.header;
                expectedHashCode.cls = type.cls;
                expectedHashCode.details = type.details;
                expectedHashCode.explanation = type.explanation;
                expectedHashCode.todo = type.todo;
                expectedHashCode.notClickableTitle = type.notClickableTitle;
                expectedHashCode.showTitle = type.showTitle;
                if (S) {
                    console.log("updated match with server id", expectedHashCode);
                }
            }
            /**
             * @param {string} actual
             * @return {?}
             */
            function assertThat(actual) {
                return!actual.syn;
            }
            /**
             * @param {string} expectedHashCode
             * @return {?}
             */
            function assertHashcodeEquals(expectedHashCode) {
                return "Plagiarism" === expectedHashCode.category ? {
                    next : true
                } : {
                    remove : false
                };
            }
            /**
             * @param {Object} opt_attributes
             * @param {Object} deepDataAndEvents
             * @return {undefined}
             */
            function clone(opt_attributes, deepDataAndEvents) {
                forIn(opt_attributes, deepDataAndEvents);
                delete opt_attributes.selected;
                if (!opt_attributes.serverRemove) {
                    object.addRemoved(opt_attributes);
                }
            }
            /**
             * @param {string} results
             * @return {?}
             */
            function serializeToXML(results) {
                return Boolean(results.addedToDict || (results.ignored || results.serverRemove));
            }
            /**
             * @param {Array} opt
             * @param {boolean} dataAndEvents
             * @return {?}
             */
            function serialize(opt, dataAndEvents) {
                return opt = opt || object.get(), opt = opt.filter(function(dataAndEvents) {
                    return!dataAndEvents.replaced;
                }), dataAndEvents || (opt = opt.filter(function(dataAndEvents) {
                    return!dataAndEvents.syn;
                })), opt = opt.map(function(o) {
                    var global = {};
                    var obj = o;
                    var x;
                    for (x in o) {
                        if ("r" === x || ("origReplacements" === x || ("rHtml" === x || ("examples" === x || ("references" === x || ("syn" === x || ("synonyms" === x || ("transforms" === x || ("rawMatch" === x || (!_.isFunction(obj[x]) && (!_.isObject(obj[x]) && ("selected" !== x && "inDom" !== x)) || (_.isArray(obj[x]) || "header" === x))))))))))) {
                            global[x] = obj[x];
                        }
                    }
                    return global;
                });
            }
            /** @type {boolean} */
            var S = !e.silentLogs;
            var object = e.matches;
            var self = e.editor;
            var button = e.exposeRawMatch;
            var ea = _.map(",.;:", function(dataAndEvents) {
                return dataAndEvents + " ";
            });
            var removeSyn = {
                /** @type {function (Object, string): ?} */
                getMatchClass : update,
                /** @type {function (Object, ?): ?} */
                processMatch : add,
                /** @type {function (string, string, ?): undefined} */
                beforeReplace : createDom,
                /** @type {function (string): ?} */
                processRemove : assertHashcodeEquals,
                /** @type {function (string, string, ?, boolean): ?} */
                matchRemoved : initialize,
                /** @type {function (Object, Object, boolean): ?} */
                matchesEqual : resolve,
                /** @type {function (string, string): undefined} */
                extendMatch : finish,
                /** @type {function (string): ?} */
                canAddRemovedMatch : serializeToXML,
                /** @type {function (string): ?} */
                canShiftMatchEnd : assertThat,
                /** @type {function (): undefined} */
                removeSyn : handler,
                /** @type {function (Object, string): ?} */
                tryToAdd : remove,
                /** @type {function (Array, boolean): ?} */
                serializeMatches : serialize,
                /** @type {function (Function): undefined} */
                addSyn : render,
                /** @type {function (Array, string): ?} */
                filterBySpelling : next,
                /** @type {function (?): ?} */
                bySid : contains
            };
            var forIn = object.remove;
            return object.remove = clone, removeSyn;
        };
    }, {
        "./editor-util" : 257,
        "./match-transformer" : 260,
        "babel-runtime/core-js/json/stringify" : 22,
        lodash : "lodash"
    }],
    260 : [function(require, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} d
         * @return {?}
         */
        function messageHandler(d) {
            return d && d.__esModule ? d : {
                "default" : d
            };
        }
        /**
         * @param {string} expectedHashCode
         * @return {?}
         */
        function init(expectedHashCode) {
            /** @type {RegExp} */
            var typePattern = /^(?:(.*): ){1}(.+)$/;
            /** @type {Array} */
            var that = [];
            if (!expectedHashCode) {
                return[];
            }
            var el = Node.createEl("<div>" + expectedHashCode + "</div>", document);
            var parent = el.querySelectorAll("p");
            /** @type {number} */
            var j = 0;
            for (;j < parent.length;j++) {
                var resultItems = parent[j].querySelectorAll("span");
                /** @type {Array} */
                var cycle = [];
                /** @type {number} */
                var i = 0;
                for (;i < resultItems.length;i++) {
                    var result = resultItems[i];
                    var source = result.innerHTML;
                    /** @type {string} */
                    var src = "Comment";
                    var lc = result.classList[0] || "grey";
                    var target = source.match(typePattern);
                    if (target) {
                        source = target[2];
                        src = target[1];
                    }
                    cycle.push({
                        type : src,
                        color : lc,
                        example : source
                    });
                }
                if (cycle.length) {
                    that.push(cycle);
                }
            }
            return that;
        }
        /**
         * @param {string} replacement
         * @return {?}
         */
        function replace(replacement) {
            var resultItems = replacement.split(/\n|<br\/?>/gi);
            resultItems.splice(0, 4);
            /** @type {Array} */
            var contents = [];
            /** @type {number} */
            var i = 0;
            for (;i < resultItems.length;i++) {
                var result = resultItems[i];
                var keys = result.match(/<strong>(.*?)\:<\/strong>(.*?)$/i);
                var key = void 0;
                var description = void 0;
                if (keys) {
                    key = keys[1];
                    description = keys[2].replace("_br", "");
                }
                contents.push({
                    type : key,
                    descr : description
                });
            }
            return contents;
        }
        /**
         * @param {Object} err
         * @return {?}
         */
        function error(err) {
            return err.details || "";
        }
        /**
         * @param {Object} dir
         * @return {?}
         */
        function normalize(dir) {
            return dir.explanation && dir.explanation.replace(/<\/?p[^>]*>/g, "").trim();
        }
        /**
         * @param {Object} result
         * @return {undefined}
         */
        function complete(result) {
            if ("Plagiarism" === result.category) {
                result.references = replace(result.details);
                /** @type {string} */
                result.explanation = "A part of your paper is matching some text from the Web. Please make sure that this text is properly referenced.";
                /** @type {string} */
                result.header = "Unoriginal text: " + assert.wordCount(result.text) + " words";
                result.href = result.extra_properties.url || "";
                result.href_title = (result.extra_properties.url || "").replace("https://", "").replace("http://", "");
            }
        }
        /**
         * @param {Array} scripts
         * @param {Object} data
         * @return {?}
         */
        function process(scripts, data) {
            /** @type {string} */
            var d = "";
            /** @type {boolean} */
            var test = false;
            if (scripts && 0 !== scripts.length) {
                /** @type {boolean} */
                data.onlyDel = true;
                /** @type {number} */
                var i = 0;
                for (;i < scripts.length;i++) {
                    var self = scripts[i];
                    var context = scripts[i + 1] && scripts[i + 1].ins;
                    var s = scripts[i + 1] && scripts[i + 1].del;
                    if (_.isUndefined(self.sep)) {
                        var result = void 0;
                        if (self.ins) {
                            /** @type {boolean} */
                            data.onlyDel = false;
                            if (test) {
                                d += "<span class='arr'> \u2192 </span>";
                            }
                            /** @type {string} */
                            var optsData = "";
                            if (".,:;_".indexOf(self.ins) !== -1) {
                                /** @type {string} */
                                optsData = "thin";
                            }
                            result = self.ins;
                            if (test) {
                                result = jQuery.differ(test, self.ins);
                                data.del = test;
                                /** @type {null} */
                                test = null;
                            }
                            d += "<span class='ins " + optsData + "'>" + result + "</span>";
                        }
                        if (self.del) {
                            if (self.del.length > 1) {
                                result = self.del;
                                if (context) {
                                    result = jQuery.differ(context, self.del);
                                }
                                /** @type {string} */
                                var blue = "del ";
                                if (self.del.match(/["'\u201d][.,;]/)) {
                                    blue += "del-qdot ";
                                }
                                if (self.del.match(/,,/)) {
                                    /** @type {string} */
                                    blue = "red sign double-commas";
                                }
                                var stack = self.del.replace(/,/g, "").split(" ").filter(Boolean) || [];
                                if (self.del.match(/^,(.*?),$/) && (self.del.length > 2 && stack.length > 1)) {
                                    /** @type {string} */
                                    blue = "red";
                                    /** @type {string} */
                                    var f = "<span class='sign " + blue + "'>,</span>";
                                    /** @type {string} */
                                    d = "<span class='" + blue + "'>" + (f + stack.shift()) + "..." + (stack.pop() + f) + "</span>";
                                    /** @type {boolean} */
                                    data.onlyDel = false;
                                    break;
                                }
                                d += "<span class='" + blue + "'>" + result + "</span>";
                            } else {
                                /** @type {string} */
                                var p = self.del.match(/[a-z]/i) ? " del del-letter" : " sign";
                                if ("\u2019" === self.del) {
                                    p += " apostrophe";
                                }
                                d += "<span class='red" + p + "'>" + self.del + "</span>";
                            }
                            test = self.del;
                        }
                        var chunk = self.w;
                        if (chunk) {
                            /** @type {string} */
                            var pass = "word";
                            if (s) {
                                pass += " del-word";
                            }
                            if (context) {
                                pass += " ins-word";
                            }
                            /** @type {string} */
                            chunk = "<span class='" + pass + "'>" + chunk + "</span>";
                        }
                        if (chunk) {
                            d += chunk;
                        }
                    } else {
                        d += "<span class='arr'> \u2192 </span>";
                        /** @type {null} */
                        test = null;
                    }
                }
                return d;
            }
        }
        /**
         * @param {number} red
         * @param {Array} results
         * @return {?}
         */
        function initialize(red, results) {
            if (results) {
                var template = _.template("<span class='replacement'><span class='btn-r' data-value='<%- r %>'><%= title %></span></span>");
                /** @type {string} */
                var _title = "";
                return 2 === results.length && (results[0].del && (results[1].ins && (_title = _.template("<span><span class='ins sec'><%= ins %></span></span>")({
                    ins : results[1].ins
                })))), 3 === results.length && (results[0].del && (results[2].ins && (_title = _.template("<span><span class='ins sec'><%= ins %></span></span>")({
                    ins : results[2].ins
                })))), results[0].w && (_title = _.template("<span><%= w %><span class='ins sec'><%= ins %></span></span>")({
                    w : results[0].w,
                    ins : results[1].ins
                })), results[0].ins && (_title = _.template("<span><span class='ins sec'><%= ins %></span><%= w %></span>")({
                    ins : results[0].ins,
                    w : results[1].w
                })), template({
                    r : red,
                    title : _title
                });
            }
        }
        /**
         * @param {Array} suite
         * @param {Object} item
         * @return {?}
         */
        function next(suite, item) {
            /** @type {Array} */
            var data = [];
            var r20 = getNext(suite[0]);
            if (!r20) {
                item.cls += " replaceWithoutSep";
            }
            /** @type {number} */
            var i = 1;
            for (;i < suite.length;i++) {
                var scripts = check(suite[i], r20);
                data.push({
                    label : process(scripts, item) || item.origReplacements[i],
                    value : item.origReplacements[i]
                });
            }
            return data;
        }
        /**
         * @param {Array} properties
         * @param {boolean} regex
         * @return {?}
         */
        function check(properties, regex) {
            /** @type {Array} */
            var n = [];
            /** @type {boolean} */
            var v = false;
            /** @type {boolean} */
            var scope = false;
            return n = properties.filter(function(self) {
                return regex ? v ? self : (self.del && (scope = true), void((self.sep || scope && self.ins) && (v = true))) : self;
            });
        }
        /**
         * @param {Array} d
         * @param {Object} data
         * @return {?}
         */
        function renderTemplate(d, data) {
            /** @type {string} */
            var str = "";
            var _fn = _.template("<span class='replacement replacement-<%= index %>'><span class='btn-r' data-value='<%- r %>'><span><%= parts %></span></span></span>");
            /** @type {Array} */
            var tagNameArr = [];
            /** @type {Array} */
            var scripts = [];
            /** @type {boolean} */
            var r20 = false;
            /** @type {boolean} */
            var s = false;
            var ins = void 0;
            /** @type {number} */
            var i = 0;
            for (;i < d[0].length;i++) {
                var cycle = d[0][i];
                if (scripts.push(cycle), cycle.ins && (s = true), cycle.sep || ins && cycle.ins) {
                    /** @type {boolean} */
                    r20 = true;
                    break;
                }
                if (cycle.del) {
                    /** @type {boolean} */
                    ins = true;
                }
            }
            /** @type {number} */
            var lineStart = 0;
            str = process(scripts, data) || "";
            if (!r20) {
                lineStart++;
                str = _fn({
                    r : data.origReplacements[0],
                    parts : process(scripts, data),
                    index : 0
                });
            }
            if (r20) {
                if (s) {
                    lineStart++;
                }
            }
            var segment = d[0] && (d[0][1] && d[0][1].del);
            if (segment && (segment.match(/^,(.*?),$/) && segment.length > 2)) {
                return str;
            }
            /** @type {number} */
            var j = lineStart;
            for (;j < d.length;j++) {
                var last = check(d[j], r20);
                tagNameArr.push(_fn({
                    r : data.origReplacements[j],
                    parts : process(last, data) || data.origReplacements[j],
                    index : j
                }));
            }
            return str + tagNameArr.join("");
        }
        /**
         * @param {Array} codeSegments
         * @return {?}
         */
        function getNext(codeSegments) {
            if (!codeSegments) {
                return false;
            }
            /** @type {boolean} */
            var ins = false;
            /** @type {number} */
            var i = 0;
            for (;i < codeSegments.length;i++) {
                if (codeSegments[i].sep || codeSegments[i].ins && ins) {
                    return true;
                }
                if (codeSegments[i].del) {
                    /** @type {boolean} */
                    ins = true;
                }
            }
            return false;
        }
        /**
         * @param {Array} value
         * @param {Object} data
         * @return {?}
         */
        function show(value, data) {
            if ((value.length > 2 || (getNext(value[0]) || data.longTitle)) && ("Articles" !== data.category && !data.showTitle)) {
                return data.cls += " multiReplace", getNext(value[0]) || (data.cls += " replaceWithoutSep"), data.multiReplace = true, renderTemplate(value, data);
            }
            if (1 === value.length || data.showTitle) {
                return process(value[0], data);
            }
            if (2 === value.length || ("Articles" === data.category || "Determiners" === data.category)) {
                data.cls += " doubleReplace";
                /** @type {boolean} */
                data.doubleReplace = true;
                var classNames = initialize(data.rFirst, value[0]);
                return(classNames || "") + initialize(data.r[0], value[1]);
            }
            return "";
        }
        /**
         * @param {Object} parent
         * @return {undefined}
         */
        function promote(parent) {
            var node = parent.del;
            /** @type {number} */
            var i = 0;
            for (;i < parent.r.length;i++) {
                var b = parent.r[i];
                parent.r[i] = jQuery.differ(node, b);
            }
        }
        /**
         * @param {string} deepDataAndEvents
         * @return {?}
         */
        function clone(deepDataAndEvents) {
            deepDataAndEvents = deepDataAndEvents.replace("\u2192", "<span class='sep'></span>");
            var tr = Node.createEl("<div>" + deepDataAndEvents + "</div>");
            /** @type {Array} */
            var ret = [];
            /** @type {number} */
            var i = 0;
            for (;i < tr.childNodes.length;i++) {
                var node = tr.childNodes[i];
                if (3 !== node.nodeType) {
                    if (node.classList.contains("sep")) {
                        ret.push({
                            sep : true
                        });
                    }
                    if (node.classList.contains("gr_grammar_ins")) {
                        ret.push({
                            ins : node.innerHTML
                        });
                    }
                    if (node.classList.contains("gr_grammar_del")) {
                        ret.push({
                            del : node.innerHTML
                        });
                    }
                } else {
                    ret.push({
                        w : node.nodeValue
                    });
                }
            }
            return ret;
        }
        /**
         * @param {Object} o
         * @return {?}
         */
        function encode(o) {
            if (o.notClickableTitle && !o.showTitle) {
                return[];
            }
            if (!o.transforms) {
                return[];
            }
            var t = o.transforms;
            return t.map(function(deepDataAndEvents) {
                return clone(deepDataAndEvents);
            });
        }
        /**
         * @param {Object} data
         * @return {?}
         */
        function format(data) {
            var path = data.title;
            var name = data.transforms;
            if (name && (name[0] && 2 === name[0].length)) {
                var results = name[0];
                if (results[0].w && results[1].ins || results[1].w && results[0].ins) {
                    data.cls += " only-ins";
                }
                if (results[0].w && results[1].del || results[1].w && results[0].del) {
                    data.cls += " only-del";
                }
                if (results[0].ins && results[1].del || results[1].ins && results[0].del) {
                    data.cls += " ins-del";
                }
            }
            if (name && name[0]) {
                var o = name[0].reduce(function(recurring, step) {
                    var c2 = step[(0, conf["default"])(step).shift()].toString() || "";
                    return Math.max(recurring, c2.length);
                }, 0);
                if (o > 20) {
                    /** @type {boolean} */
                    data.notClickableTitle = true;
                    /** @type {boolean} */
                    data.longTitle = true;
                    data.replacementHint = fn("Click to " + data.todo);
                    name = name.map(function(contextElem) {
                        return contextElem.filter(function(tx) {
                            return tx.ins;
                        });
                    });
                }
            }
            return path = show(name, data), name.length && (data.rHtml = next(name, data)), path || (path = data.v), data.replaceInCard && (data.replaceInCard = path), data.notClickableTitle && (path = data.title), path;
        }
        /**
         * @param {Object} options
         * @return {undefined}
         */
        function render(options) {
            delete options.text;
            delete options.rid;
            delete options.action;
            delete options.undone;
        }
        /**
         * @param {Object} data
         * @param {?} file
         * @param {?} opt_attributes
         * @return {undefined}
         */
        function parse(data, file, opt_attributes) {
            if (opt_attributes) {
                if (opt_attributes.exposeRawMatch) {
                    data.rawMatch = _.cloneDeep(data);
                }
            }
            data.id = (data.id || handler.guid()).toString();
            data.s = data.begin;
            data.e = data.end;
            data._s = data.s;
            data._e = data.e;
            if ("Plagiarism" === data.group) {
                data.highlightBegin = data.s;
                data.highlightEnd = data.e;
            }
            if (void 0 !== data.highlightBegin) {
                if (void 0 !== data.highlightEnd) {
                    if (data.highlightBegin === data.highlightEnd) {
                        if (data.text.length > 0) {
                            data.highlightBegin = data.s;
                            data.highlightEnd = data.e;
                        }
                    }
                }
            }
            if (void 0 !== data.highlightBegin) {
                data._s = data.highlightBegin;
            }
            if (void 0 !== data.highlightEnd) {
                data._e = data.highlightEnd;
            }
            /** @type {number} */
            data.sd = data._s - data.s;
            /** @type {number} */
            data.ed = data._e - data.e;
            data._value = file.substring(data._s, data._e);
            if ("Spelling" === data.group) {
                /** @type {string} */
                data.group = "ContextualSpelling";
            }
            var showAddButton = data.extra_properties && "true" === data.extra_properties.enhancement;
            data.cls = data.group;
            data.origReplacements = (data.replacements || []).concat();
            data.rFirst = data.replacements && (!showAddButton && data.replacements.splice(0, 1)[0]);
            data.rFirst = data.rFirst && data.rFirst.replace(/\s+/g, " ");
            /** @type {boolean} */
            data.noReplacments = data.rFirst === false || void 0 === data.rFirst;
            data.showTitle = data.noReplacments || data.extra_properties && "true" === data.extra_properties.show_title;
            data.replaceInCard = !data.noReplacments && (data.extra_properties && "true" === data.extra_properties.show_title);
            data.didYouMean = !data.noReplacments && (data.extra_properties && "true" === data.extra_properties.did_you_mean);
            data.enhancement = data.replacements && (data.replacements.length && showAddButton);
            data.notClickableTitle = data.noReplacments || (data.showTitle || data.didYouMean);
            /** @type {number} */
            data.priority = parseInt(String(data.extra_properties && data.extra_properties.priority || 0), 10);
            data.r = data.replacements || [];
            data.rHtml = data.rHtml || [];
            data.v = data.text;
            data.oldVal = data.v;
            data.sid = data.id.toString();
            data.originalTransforms = data.transforms || [];
            data.transforms = encode(data);
            data.header = format(data);
            data.details = error(data);
            data.originalTodo = data.todo || "";
            data.originalExamples = data.examples || "";
            data.examples = init(data.originalExamples);
            data.explanation = normalize(data);
            complete(data);
            /** @type {number} */
            data.l = data.e - data.s;
            /** @type {boolean} */
            data.multi = data.r.length > 0;
            /** @type {boolean} */
            data.spell = "ContextualSpelling" === data.group;
            /** @type {boolean} */
            data.gramm = !data.spell;
            /** @type {boolean} */
            data.showAcceptButton = "ContextualSpelling" !== data.group && (data.noReplacments && (data.replacements || []).length < 1);
            /** @type {boolean} */
            data.showReplacements = Boolean("Misspelled" === data.category && data.r.length);
            /** @type {boolean} */
            data.showAddToDictionary = Boolean(data.spell && ("General" === data.point && ("Misspelled" === data.category || "Unknown" === data.category)));
            /** @type {boolean} */
            data.showReplacementsInText = true;
            if (data.multiReplace) {
                /** @type {boolean} */
                data.showReplacements = true;
                /** @type {boolean} */
                data.showReplacementsInText = false;
                /** @type {boolean} */
                data.showReplacementsOnTop = true;
            }
            if (data.cls) {
                if (data.cls.indexOf("doubleReplace") !== -1) {
                    /** @type {boolean} */
                    data.showReplacements = false;
                    /** @type {boolean} */
                    data.showReplacementsInText = false;
                }
            }
            if (data.showTitle || data.longTitle) {
                /** @type {boolean} */
                data.showReplacements = false;
                /** @type {boolean} */
                data.showReplacementsOnTop = false;
                /** @type {boolean} */
                data.showReplacementsInText = false;
            }
            if (data.showReplacements) {
                if (data.del) {
                    promote(data);
                }
            }
            if (data.enhancement) {
                /** @type {string} */
                data.category = "_" + data.category;
                data.title = assert.declension(data.r.length, ["Suggested enhancement:", "Suggested enhancements:"]);
            }
            if ("spelling" === data.todo) {
                /** @type {string} */
                data.todo = "correct";
            }
            if ("" === data.todo && !data.rFirst || ("Plagiarism" === data.category || data.notClickableTitle)) {
                /** @type {string} */
                data.todo = "expand card";
            }
            if ("" === data.todo) {
                if (data.rFirst) {
                    /** @type {string} */
                    data.todo = "correct";
                }
            }
            data.value = data.v;
            data.todo = fn("Click to " + data.todo);
            render(data);
        }
        /**
         * @param {string} value
         * @return {?}
         */
        function fn(value) {
            /** @type {Element} */
            var elem = document.createElement("div");
            return elem.innerHTML = value, elem.textContent;
        }
        var data = require("babel-runtime/core-js/object/keys");
        var conf = messageHandler(data);
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var _ = require("lodash");
        var handler = require("../util");
        var Node = require("../dom");
        var jQuery = require("./differ");
        var assert = require("./editor-util");
        /** @type {function (string): ?} */
        expectedHashCode.examples = init;
        /** @type {function (Object): ?} */
        expectedHashCode.header = format;
        /** @type {function (Object, ?, ?): undefined} */
        expectedHashCode.processMatch = parse;
    }, {
        "../dom" : 215,
        "../util" : 322,
        "./differ" : 256,
        "./editor-util" : 257,
        "babel-runtime/core-js/object/keys" : 29,
        lodash : "lodash"
    }],
    261 : [function($sanitize, dataAndEvents, expectedHashCode) {
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var view = $sanitize("../dom");
        /**
         * @param {Object} event
         * @return {?}
         */
        expectedHashCode.SelectionAnimator = function(event) {
            /**
             * @param {Array} elements
             * @param {string} keyframe
             * @return {undefined}
             */
            function animate(elements, keyframe) {
                if (select(), 0 !== elements.length) {
                    var el = elements[0];
                    var box = void 0;
                    if (range = elements[elements.length - 1] || el, className = "g-selection-anim " + event.editor.matchPrefix, element = el.ownerDocument.createElement("div"), element.className = className, event.getAnimatorElPos) {
                        box = event.getAnimatorElPos(el);
                    } else {
                        if (keyframe) {
                            var unwrappedTarget = el.ownerDocument.querySelector(keyframe);
                            if (unwrappedTarget) {
                                var rect = el.getBoundingClientRect();
                                var size = range.getBoundingClientRect();
                                var padding = unwrappedTarget.getBoundingClientRect();
                                box = {
                                    left : rect.left - padding.left,
                                    right : size.right - padding.right,
                                    top : rect.top - padding.top,
                                    bottom : rect.bottom - padding.bottom,
                                    width : size.right - rect.left,
                                    height : rect.height
                                };
                            }
                        } else {
                            box = elements[0].getBoundingClientRect();
                        }
                    }
                    if (box) {
                        view.css(element, {
                            top : box.top + box.height,
                            left : box.left,
                            width : 0
                        });
                        /** @type {number} */
                        var x = Math.ceil(box.width / 8);
                        /** @type {number} */
                        var w = box.width - x;
                        element.setAttribute("data-width", String(event.editor.matchPrefix ? Math.ceil(box.width) : box.width));
                        event.animatorContainer.appendChild(element);
                        setTimeout(function() {
                            /** @type {string} */
                            element.style.width = w + "px";
                        }, 10);
                    }
                    object.el = element;
                }
            }
            /**
             * @return {undefined}
             */
            function select() {
                var context = event.animatorContainer ? event.animatorContainer.ownerDocument : document;
                var resultItems = context.querySelectorAll(".g-selection-anim");
                var valuesLen = resultItems.length;
                /** @type {number} */
                var i = 0;
                for (;i < valuesLen;i++) {
                    var result = resultItems[i];
                    if (result.parentNode) {
                        result.parentNode.removeChild(resultItems[i]);
                    }
                }
            }
            /**
             * @return {?}
             */
            function hide() {
                if (element) {
                    return element.getAttribute("data-width") ? void view.css(element, {
                        webkitTransitionDuration : "0.2s",
                        MozTransitionDuration : "0.2s",
                        transitionDuration : "0.2s",
                        width : parseInt(element.getAttribute("data-width"), 10)
                    }) : select();
                }
            }
            var object = {
                /** @type {function (Array, string): undefined} */
                animate : animate,
                /** @type {function (): undefined} */
                remove : select,
                /** @type {function (): ?} */
                complete : hide,
                el : document.documentElement
            };
            var element = void 0;
            var className = void 0;
            var range = void 0;
            return object;
        };
    }, {
        "../dom" : 215
    }],
    262 : [function(require, dataAndEvents, expectedHashCode) {
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var Block = require("./selection-animator");
        var handler = require("../util");
        var util = require("../dom");
        var assert = require("lib/wrap");
        var getActual = require("emitter");
        var _ = require("lodash");
        /**
         * @param {Object} event
         * @return {?}
         */
        expectedHashCode.createSynonyms = function(event) {
            /**
             * @return {undefined}
             */
            function start() {
                util.listen(expectedHashCode, "dblclick", attributes);
            }
            /**
             * @return {undefined}
             */
            function add() {
                escape();
                util.unlisten(expectedHashCode, "dblclick", attributes);
            }
            /**
             * @param {?} thisField
             * @return {undefined}
             */
            function hide(thisField) {
                _this.animate([thisField.getEl()], keyframe);
                setTimeout(_this.complete, 120);
            }
            /**
             * @return {undefined}
             */
            function escape() {
                _this.remove();
            }
            /**
             * @param {Event} event
             * @return {undefined}
             */
            function attributes(event) {
                if (self.selectedMatch) {
                    self.selectedMatch.deselect();
                }
                var data = self.getSelection();
                var value = data.value;
                if (/^\s?[a-z']+\s?$/i.test(value) && !(value.length < 2)) {
                    if (!self.isTextarea) {
                        var cur = self.el.ownerDocument.getSelection().anchorNode || event.target.parentNode;
                        var codeSegments = assert.skipClass() || [];
                        var tagNameArr = assert.skipTag() || [];
                        /** @type {number} */
                        var i = 0;
                        for (;i < codeSegments.length;i++) {
                            tagNameArr.push("." + codeSegments[i]);
                        }
                        if (cur.tagName || (cur = cur.parentNode), util.matchesSelector(cur, tagNameArr.join(","))) {
                            return;
                        }
                    }
                    self.getSynonyms(data.s, value);
                    initialize(data);
                    validation();
                }
            }
            /**
             * @return {undefined}
             */
            function validation() {
                /**
                 * @param {Event} e
                 * @return {undefined}
                 */
                function attributes(e) {
                    if (!e.isTrigger) {
                        if (!(0 === e.clientX)) {
                            if (event.canRemove(e.target)) {
                                escape();
                                util.unlisten(doc.body, "click", attributes);
                                util.unlisten(doc.body, "input", attributes);
                                util.unlisten(doc.body, "keydown", attributes);
                                if (_.find(self.getMatches(), {
                                        syn : true
                                    })) {
                                    self.removeSyn();
                                    self.emit("rendered");
                                }
                            }
                        }
                    }
                }
                util.listen(doc.body, "click", attributes);
                util.listen(doc.body, "input", attributes);
                util.listen(doc.body, "keydown", attributes);
            }
            /**
             * @param {Object} r
             * @return {undefined}
             */
            function initialize(r) {
                var start = r.s;
                var end = r.e;
                var b = r.value;
                if (b.indexOf(" ") === b.length - 1 && (end -= 1, b = r.text.substr(start, end - start)), data = r, self.dom) {
                    var events = self.dom.renderRange({
                        s : start,
                        e : end
                    });
                    _this.animate(events, keyframe);
                    var l = events.length;
                    /** @type {number} */
                    var i = 0;
                    for (;i < l;i++) {
                        assert.unwrap(events[i]);
                    }
                    self.setCursor(r);
                }
            }
            /**
             * @param {Object} attributes
             * @return {?}
             */
            function opt_attributes(attributes) {
                _this.complete();
                var start = data.s;
                var end = data.e;
                var value = data.value;
                return self.getSelection().value !== value ? void console.log("selection changed") : (value.indexOf(" ") === value.length - 1 && (end -= 1, value = data.text.substr(start, end - start)), attributes.error ? console.warn("Error occured: ", attributes.error) : (_.extend(attributes, {
                    app : "synonyms",
                    addReplace : true,
                    cls : "Synonyms",
                    syn : true,
                    expanded : true,
                    begin : start,
                    end : end,
                    highlightBegin : start,
                    highlightEnd : end,
                    id : handler.guid(),
                    s : start,
                    e : end,
                    _s : start,
                    _e : end,
                    ed : 0,
                    sd : 0,
                    l : end - start,
                    auto : false,
                    v : value,
                    serverRemove : true,
                    value : value,
                    oldVal : value,
                    animEl : _this.el,
                    todo : ""
                }), related && _.extend(attributes, {
                    /** @type {function (): undefined} */
                    removeUnderline : escape
                }), self.removeSyn(), void self.addSyn(attributes)));
            }
            var self = event.editor;
            var expectedHashCode = event.editor.el;
            var related = event.exposeSynApi;
            var doc = expectedHashCode.ownerDocument;
            var _this = Block.SelectionAnimator({
                editor : event.editor,
                getAnimatorElPos : event.getAnimatorElPos,
                animatorContainer : event.animatorContainer
            });
            event.canRemove = event.canRemove || function(dataAndEvents) {
                return false;
            };
            var keyframe = event.textareaWrapSelector || "#editor .svg-wrap";
            util.listen(expectedHashCode, "dblclick", attributes);
            var data = void 0;
            self.on("syn", opt_attributes);
            var actual = getActual({
                /** @type {function (?): undefined} */
                completeAnimation : hide,
                /** @type {function (): undefined} */
                removeUnderline : escape,
                /** @type {function (): undefined} */
                registerRemove : validation,
                /** @type {function (): undefined} */
                disable : add,
                /** @type {function (): undefined} */
                fieldEnable : start
            });
            return actual;
        };
    }, {
        "../dom" : 215,
        "../util" : 322,
        "./selection-animator" : 261,
        emitter : "emitter",
        "lib/wrap" : 324,
        lodash : "lodash"
    }],
    263 : [function(require, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} d
         * @return {?}
         */
        function messageHandler(d) {
            return d && d.__esModule ? d : {
                "default" : d
            };
        }
        var data = require("babel-runtime/core-js/json/stringify");
        var conf = messageHandler(data);
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var util = require("lodash");
        var buffer = require("@grammarly-npm/changesets");
        var Block = require("./capi");
        /**
         * @param {Object} data
         * @return {?}
         */
        expectedHashCode.createTextApi = function(data) {
            /**
             * @param {?} value
             * @return {undefined}
             */
            function update(value) {
                if (value !== self.text) {
                    var fix = buffer.diff(self.text, value);
                    self.text = value;
                    if (fix.length) {
                        self.changes.push(fix);
                    }
                }
            }
            /**
             * @return {undefined}
             */
            function attributes() {
                /** @type {Array} */
                self.changes = [];
                /** @type {string} */
                self.text = "";
                /** @type {number} */
                self.sentRev = 0;
                /** @type {number} */
                client.rev = 0;
            }
            /**
             * @return {undefined}
             */
            function opt_attributes() {
                var value = self.text;
                attributes();
                update(value);
                send();
            }
            /**
             * @return {?}
             */
            function anonymous() {
                return{
                    changes : self.changes.map(function(b) {
                        return b.pack();
                    }),
                    text : self.text,
                    sentRev : self.sentRev
                };
            }
            /**
             * @param {Object} opt_attributes
             * @return {undefined}
             */
            function buildRename(opt_attributes) {
                self.text = opt_attributes.text;
                self.changes = opt_attributes.changes.map(function(data) {
                    return buffer.unpack(data);
                });
                self.sentRev = opt_attributes.sentRev;
                client.rev = opt_attributes.sentRev;
            }
            /**
             * @param {Function} attributes
             * @return {undefined}
             */
            function done(attributes) {
                if (_) {
                    console.log("MIDDLE LOG: finished: " + (0, conf["default"])(attributes));
                }
                var asserterNames = attributes.removed || [];
                asserterNames.forEach(function(attributes) {
                    return self.emit("remove", attributes);
                });
                self.emit("finish", attributes);
            }
            /**
             * @param {Array} codeSegments
             * @return {undefined}
             */
            function keydownEvent(codeSegments) {
                /** @type {number} */
                var i = 0;
                for (;i < codeSegments.length;i++) {
                    var r = codeSegments[i];
                    r.begin = r.s;
                    r.end = r.e;
                    r.highlightBegin = r._s;
                    r.highlightEnd = r._e;
                    get(r);
                    r.s = r.begin;
                    r.e = r.end;
                    r._s = r.highlightBegin;
                    r._e = r.highlightEnd;
                }
            }
            /**
             * @param {string} fix
             * @param {Function} attributes
             * @return {undefined}
             */
            function init(fix, attributes) {
                if (_) {
                    console.log("MIDDLE LOG: received match: " + (0, conf["default"])(attributes), fix, self.changes.length);
                }
                get(attributes);
                /** @type {string} */
                attributes.type = fix;
                self.emit("add", attributes);
            }
            /**
             * @param {string} cycle
             * @return {undefined}
             */
            function get(cycle) {
                var begin = cycle.begin;
                var i = cycle.rev + 1;
                for (;i < self.changes.length;i++) {
                    fetch(self.changes[i], cycle);
                }
                /** @type {number} */
                cycle.rev = self.changes.length - 1;
                if (cycle.begin !== begin) {
                    if (_) {
                        console.log("DIFF", cycle);
                    }
                }
                if (cycle.begin > self.text.length) {
                    if (_) {
                        console.log("match offset error", cycle);
                    }
                    self.emit("match-has-wrong-revision", cycle);
                }
            }
            /**
             * @param {?} pool
             * @param {string} callback
             * @return {undefined}
             */
            function fetch(pool, callback) {
                pool.sequencify().forEach(function(axis) {
                    loop(axis, callback, "begin", "end");
                    loop(axis, callback, "highlightBegin", "highlightEnd");
                });
            }
            /**
             * @param {Event} axis
             * @param {Object} array
             * @param {string} min
             * @param {string} index
             * @return {undefined}
             */
            function loop(axis, array, min, index) {
                if (axis.pos + axis.len >= array[min]) {
                    if (axis.pos + axis.len < array[index]) {
                        self.emit("ot_alert_intersection");
                    }
                }
                if ("+" === axis.type) {
                    if (array[min] < 0 || axis.pos <= array[min]) {
                        array[min] += axis.len;
                        array[index] += axis.len;
                    }
                } else {
                    if ("-" === axis.type) {
                        if (axis.pos < array[min]) {
                            array[min] -= axis.len;
                            array[index] -= axis.len;
                        }
                    }
                }
            }
            /**
             * @param {Function} msgs
             * @return {undefined}
             */
            function startJob(msgs) {
                self.emit("sending");
                client.plagiarism(msgs, function() {
                    return self.emit("plagiarismChecked");
                });
            }
            /**
             * @return {undefined}
             */
            function send() {
                var msgs = self.changes.slice(self.sentRev).map(function(b) {
                    return b.pack();
                });
                if (msgs.length) {
                    self.emit("sending");
                    var i = {};
                    if (data.extendParams) {
                        data.extendParams(i);
                    }
                    client.submitOt(msgs, self.changes.length - 1, i, done);
                    self.sentRev = self.changes.length;
                }
            }
            /**
             * @return {undefined}
             */
            function gl() {
                result().then(function(deepDataAndEvents) {
                    client.sendContainerId(deepDataAndEvents);
                })["catch"](function(cycle) {
                    if (_) {
                        console.error("Cannot send containerId", cycle);
                    }
                });
            }
            /** @type {boolean} */
            var _ = !data.silentLogs;
            var mime = data.capi || Block.capi.createClient;
            var result = data.getContainerId;
            var client = mime({
                sid : data.sid,
                docid : data.docid,
                createWs : data.createWs,
                url : data.capiUrl,
                dialect : data.dialect,
                silentLogs : data.silentLogs
            });
            client.on("alert", init.bind(null, "error"));
            client.on("synonyms", init.bind(null, "syn"));
            client.on("socketReconnect", opt_attributes);
            client.on("disconnect", attributes);
            client.on("socketStart", gl);
            var self = util.extend({
                text : "",
                changes : [],
                sentRev : 0,
                /** @type {function (): undefined} */
                send : send,
                /** @type {function (?): undefined} */
                update : update,
                /** @type {function (Array): undefined} */
                updateMatchesToCurrentRevision : keydownEvent,
                /** @type {function (string): undefined} */
                updateMatch : get,
                /** @type {function (): undefined} */
                restart : opt_attributes,
                /** @type {function (): undefined} */
                reset : attributes,
                /** @type {function (Function): undefined} */
                checkPlagiarism : startJob,
                /** @type {function (): ?} */
                getState : anonymous,
                /** @type {function (Object): undefined} */
                setState : buildRename,
                /** @type {function (string, Function): undefined} */
                onadd : init,
                /** @type {function (Function): undefined} */
                onfinish : done
            }, client);
            return self;
        };
    }, {
        "./capi" : 255,
        "@grammarly-npm/changesets" : 1,
        "babel-runtime/core-js/json/stringify" : 22,
        lodash : "lodash"
    }],
    264 : [function(proceed, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} value
         * @return {?}
         */
        function lookupIterator(value) {
            return value && value.__esModule ? value : {
                "default" : value
            };
        }
        var value = proceed("babel-runtime/core-js/object/keys");
        var iterator = lookupIterator(value);
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        /**
         * @param {Object} self
         * @return {undefined}
         */
        expectedHashCode.track = function(self) {
            /**
             * @param {Object} key
             * @return {?}
             */
            function done(key) {
                return key && (result[key] && result[key].request) ? Date.now() - result[key].request : 0;
            }
            /**
             * @param {?} data
             * @return {undefined}
             */
            function opt_attributes(data) {
                var fix = self.id + data.rev;
                if (l) {
                    console.log("SUBMIT_OT", fix);
                }
                result[fix] = {
                    request : Date.now()
                };
            }
            /**
             * @param {Element} opts
             * @return {undefined}
             */
            function go(opts) {
                var i = self.id + opts.rev;
                var index = i + opts.id;
                var cycle = done(i);
                if (l) {
                    console.log("GET_ALERT", cycle);
                }
                result[index] = {
                    time : Date.now(),
                    type : "first"
                };
                if (result[i]) {
                    if (result[i].first) {
                        result[i].last = cycle;
                        /** @type {string} */
                        result[index].type = "last";
                    } else {
                        result[i].first = cycle;
                    }
                }
            }
            /**
             * @param {?} params
             * @return {undefined}
             */
            function attributes(params) {
                var _name = self.id + params.rev;
                var name = result[_name];
                /** @type {string} */
                var failureMessage = 0 === params.rev ? "first." : "";
                var recurring = {};
                if (name) {
                    if (name.first) {
                        recurring["performance:checks." + failureMessage + "request_to_first_response"] = name.first;
                        if (name.last) {
                            recurring["checks." + failureMessage + "request_to_last_response:performance"] = name.last;
                        }
                        self.emit("track", {
                            type : "timing",
                            data : recurring
                        });
                        if (l) {
                            console.log("finish:", params.rev, self.id, recurring);
                        }
                    }
                }
            }
            /**
             * @return {undefined}
             */
            function init() {
                var cycle = self.getMatches().filter(function(data) {
                    return!data.tracked && (data.renderTs && (result[self.id + data.rev + data.id] && result[self.id + data.rev]));
                }).reduce(function(exports, data) {
                    var message = result[self.id + data.rev + data.id];
                    var type = message.type;
                    /** @type {number} */
                    var val = data.renderTs - result[self.id + data.rev].request;
                    /** @type {string} */
                    var failureMessage = 0 === data.rev ? "first." : "";
                    return data.tracked = true, exports["performance:checks." + failureMessage + "request_to_" + type + "_render"] = val, exports["performance:checks." + failureMessage + "response_to_" + type + "_render"] = data.renderTs - message.time, exports;
                }, {});
                if ((0, iterator["default"])(cycle).length) {
                    self.emit("track", {
                        type : "timing",
                        data : cycle
                    });
                    if (l) {
                        console.log("render times: ", cycle);
                    }
                }
            }
            /**
             * @param {?} suite
             * @return {undefined}
             */
            function gl(suite) {
                /** @type {boolean} */
                var cycle = !!suite.renderTs;
                self.emit("track", {
                    type : "increment",
                    key : "performance:removed_checks.removed_alerts" + (cycle ? "_rendered" : "")
                });
                if (l) {
                    console.log("match:", cycle, suite.renderTs);
                }
            }
            var result = {};
            /** @type {boolean} */
            var l = false;
            self.id = self.id || "";
            self.on("rendered", function() {
                try {
                    init();
                } catch (e) {
                }
            });
            self.api.on("submit_ot", opt_attributes);
            self.api.on("finish", attributes);
            self.api.on("alert", go);
            self.api.on("ot_alert_intersection", function() {
                self.ot_alert_intersection++;
            });
            self.api.on("stats:timing", function(pair) {
                var values = {};
                values[pair.key] = pair.value;
                self.emit("track", {
                    type : "timing",
                    data : values
                });
            });
            self.matches.on("remove", gl);
            self.matches.on("lost_match_value_in_text", function() {
                self.emit("track", {
                    type : "increment",
                    key : "lost_match_value_in_text:old"
                });
            });
            self.matches.on("match_is_part_of_word", function() {
                self.emit("track", {
                    type : "increment",
                    key : "match_is_part_of_word:old"
                });
            });
            self.matches.on("remove", gl);
        };
    }, {
        "babel-runtime/core-js/object/keys" : 29
    }],
    265 : [function(nock, dataAndEvents, expectedHashCode) {
        /**
         * @param {Function} handler
         * @param {Function} opt_attributes
         * @return {?}
         */
        function setup(handler, opt_attributes) {
            /**
             * @return {undefined}
             */
            function start() {
                reset();
                /** @type {number} */
                tref = setTimeout(later, n);
                /** @type {number} */
                going = setTimeout(later, 1E3 * c[0]);
                /** @type {number} */
                timeout = setTimeout(later, 1E3 * c[1]);
                /** @type {number} */
                to = setTimeout(later, 1E3 * c[2]);
            }
            /**
             * @return {undefined}
             */
            function reset() {
                /** @type {number} */
                _i = 0;
                if (tref) {
                    clearTimeout(tref);
                }
                if (going) {
                    clearTimeout(going);
                }
                if (timeout) {
                    clearTimeout(timeout);
                }
                if (to) {
                    clearTimeout(to);
                }
            }
            var n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : i;
            var c = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : [30, 60, 120];
            /** @type {number} */
            var _i = 0;
            /** @type {null} */
            var tref = null;
            /** @type {null} */
            var going = null;
            /** @type {null} */
            var timeout = null;
            /** @type {null} */
            var to = null;
            /**
             * @return {?}
             */
            var later = function setup() {
                return _i < _len ? (n === i && handler(), tref = setTimeout(setup, n), void _i++) : (server.logger.infinityCheckResetFail(n), void console.error("Infinity check reset fails, change to the offline state."));
            };
            return{
                /** @type {function (): undefined} */
                start : start,
                /** @type {function (): undefined} */
                finish : reset
            };
        }
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var server = nock("./tracking");
        /** @type {number} */
        var i = 2E4;
        /** @type {number} */
        var _len = 3;
        /** @type {function (Function, Function): ?} */
        expectedHashCode.infinityChecker = setup;
    }, {
        "./tracking" : 307
    }],
    266 : [function($sanitize, dataAndEvents, expectedHashCode) {
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var $ = $sanitize("react");
        /**
         * @param {Element} el
         * @return {?}
         */
        expectedHashCode.LogoIcon = function(el) {
            var cls = el.className;
            return $.createElement("svg", {
                className : cls,
                width : "18",
                height : "18",
                viewBox : "0 0 18 18"
            }, $.createElement("g", {
                transform : "translate(-7 -7)",
                fill : "none",
                fillRule : "evenodd"
            }, $.createElement("circle", {
                fill : "#00AE84",
                cx : "16",
                cy : "16",
                r : "9.008"
            }), $.createElement("path", {
                d : "M17.318 17.843c.052.297.335.504.64.504h.963l.56-.074c-.895 1.297-2.438 1.897-4.13 1.638-1.38-.214-2.566-1.14-3.065-2.437-1.134-2.942 1.03-5.75 3.84-5.75 1.468 0 2.75.852 3.49 1.882.193.304.58.385.864.185.267-.185.342-.533.178-.815-1.014-1.578-2.84-2.593-4.906-2.46-2.677.193-4.854 2.37-5.003 5.04-.18 3.103 2.295 5.637 5.382 5.637 1.618 0 3.065-.703 4.056-1.837l-.12.652v.585c0 .304.21.586.508.637.395.074.738-.23.738-.608v-3.52H17.93c-.38.008-.687.35-.612.74z",
                fill : "#FFF"
            })));
        };
        /**
         * @param {Element} el
         * @return {?}
         */
        expectedHashCode.IgnoreIcon = function(el) {
            var cls = el.className;
            return $.createElement("span", {
                className : cls,
                dangerouslySetInnerHTML : {
                    __html : '\n            <svg width="32" height="32" viewBox="0 0 32 32">\n              <defs>\n                <path d="M21,12.5 L21,20.1308289 C21,21.7154283 19.6513555,23 17.9996703,23 L14.0003297,23 C12.3432934,23 11,21.7124939 11,20.1308289 L11,12.5 L11,12.5" id="d70af4_ignoreIconUse"></path>\n                <mask data-mask-color="d70af4_ignoreIcon" id="d70af4_ignoreIconMask" x="-1" y="0" width="9.5" height="10.5">\n                  <use data-fix="d70af4_ignoreIcon" xlink:href="#d70af4_ignoreIconUse"/>\n                </mask>\n              </defs>\n              <g stroke="#D2D4DD" fill="none" fill-rule="evenodd">\n                <path d="M9 10.6h14" stroke-width="1.2"/>\n                <g stroke-width="1.2">\n                  <path d="M14.6 14v6M17.4 14v6"/>\n                </g>\n                <use mask="url(#d70af4_ignoreIconMask)" stroke-width="2.4" xlink:href="#d70af4_ignoreIconUse"/>\n                <path d="M18.5 11V9c0-1.1045695-.8982606-2-1.9979131-2h-1.0041738C14.3944962 7 13.5 7.8877296 13.5 9v2" stroke-width="1.2"/>\n              </g>\n            </svg>\n      '
                }
            });
        };
        /**
         * @param {Element} el
         * @return {?}
         */
        expectedHashCode.DictionaryIcon = function(el) {
            var cls = el.className;
            return $.createElement("span", {
                className : cls,
                dangerouslySetInnerHTML : {
                    __html : '\n        <svg width="32" height="32" viewBox="0 0 32 32" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">\n          <defs>\n            <mask id="57da07_dictionaryIconMask" x="0" y="0" width="10" height="15" fill="#fff">\n              <path id="57da07_dictionaryIconUse" d="M11 9h10v15l-4.8857422-4L11 24z"/>\n            </mask>\n          </defs>\n          <use mask="url(#57da07_dictionaryIconMask)" xlink:href="#57da07_dictionaryIconUse" stroke-width="2.4" stroke="#D2D4DD" fill="none"/>\n        </svg>\n      '
                }
            });
        };
        /**
         * @param {Element} el
         * @return {?}
         */
        expectedHashCode.DictionaryAddedIcon = function(el) {
            var cls = el.className;
            return $.createElement("svg", {
                className : cls,
                width : "15",
                height : "23",
                viewBox : "0 0 15 23"
            }, $.createElement("path", {
                d : "M14.773 22.573V.39h-14v22.183l7-5.326",
                fill : "#15C49A",
                fillRule : "evenodd"
            }));
        };
        /**
         * @param {Element} el
         * @return {?}
         */
        expectedHashCode.WikiIcon = function(el) {
            var cls = el.className;
            return $.createElement("svg", {
                className : cls,
                width : "32",
                height : "32",
                viewBox : "0 0 32 32"
            }, $.createElement("path", {
                d : "M13.633 21l2.198-4.264L17.64 21h.633l3.756-8.643c.21-.485.62-.776 1.057-.842V11H20.05v.515c.402.09.83.24 1.02.666l-2.758 6.363c-.5-1.06-1.01-2.22-1.498-3.375.504-1.07.915-2.064 1.533-3.04.36-.576.948-.59 1.25-.618V11h-3.23v.51c.404 0 1.242.037.868.822l-.936 1.97-.993-2.19c-.155-.342.145-.57.635-.596L15.938 11h-3.633v.51c.433.015 1.043.013 1.268.38.694 1.274 1.158 2.598 1.79 3.898l-1.636 3.06-2.75-6.323c-.31-.713.425-.943.903-1.002L11.874 11H8v.51c.535.178 1.225.974 1.418 1.376 1.447 3.027 2.176 5.057 3.557 8.114h.658z",
                fill : "#D2D4DD",
                fillRule : "evenodd"
            }));
        };
        /**
         * @param {Element} el
         * @return {?}
         */
        expectedHashCode.UndoIcon = function(el) {
            var cls = el.className;
            return $.createElement("svg", {
                className : cls,
                width : "32",
                height : "32",
                viewBox : "0 0 32 32"
            }, $.createElement("g", {
                stroke : "#D2D4DD",
                fill : "none",
                fillRule : "evenodd",
                strokeLinecap : "round"
            }, $.createElement("path", {
                d : "M11.518 8.412l-4.26 4.224L11.5 16.88"
            }), $.createElement("path", {
                d : "M16.192 22.236h4.23c2.642 0 4.784-2.147 4.784-4.783 0-2.642-2.15-4.784-4.787-4.784H8.1"
            })));
        };
    }, {
        react : "react"
    }],
    267 : [function(require, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} value
         * @return {?}
         */
        function parseInt(value) {
            return value && value.__esModule ? value : {
                "default" : value
            };
        }
        /**
         * @param {Object} obj
         * @param {?} type
         * @param {?} selector
         * @param {?} callback
         * @param {?} value
         * @param {?} el
         * @return {?}
         */
        function is(obj, type, selector, callback, value, el) {
            switch(obj.kind) {
                case "common":
                    return dom.createElement(container, {
                        model : obj,
                        onIgnore : type,
                        onAddToDictionary : selector,
                        onEditor : callback,
                        onLogin : value,
                        isAddedToDictionary : el
                    });
                case "synonyms":
                    return dom.createElement(expectedHashCode.CardSynonyms, {
                        model : obj,
                        onEditor : callback,
                        onLogin : value
                    });
                default:
                    return null;
            }
        }
        var b = require("babel-runtime/core-js/object/get-prototype-of");
        var bp = parseInt(b);
        var i = require("babel-runtime/helpers/classCallCheck");
        var it = parseInt(i);
        var one = require("babel-runtime/helpers/createClass");
        var column = parseInt(one);
        var prop = require("babel-runtime/helpers/possibleConstructorReturn");
        var p = parseInt(prop);
        var m = require("babel-runtime/helpers/inherits");
        var row = parseInt(m);
        var g = require("babel-runtime/helpers/extends");
        var ret = parseInt(g);
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var helper = require("lib/config");
        var nodes = require("lib/message");
        var hasOwn = require("lib/inline-cards/model/grammarly_editor_alert");
        var dom = require("react");
        var callback = require("./utils/react");
        var $ = require("../dom");
        var _self = require("../tracking");
        var url = require("../location");
        var Block = require("./model/card");
        var data = require("./replacement");
        var child = require("./icons");
        var options = {
            container : "_c4f153-container",
            flip : "_c4f153-flip",
            flipSyn : "_c4f153-flipSyn",
            card : "_c4f153-card",
            bigTitle : "_c4f153-bigTitle",
            unknownWordTitle : "_c4f153-unknownWordTitle",
            btnDictLabelWithIcon : "_c4f153-btnDictLabelWithIcon",
            explanation : "_c4f153-explanation",
            replacement : "_c4f153-replacement",
            maxWidthReached : "_c4f153-maxWidthReached",
            item : "_c4f153-item",
            logoIcon : "_c4f153-logoIcon",
            ignoreIcon : "_c4f153-ignoreIcon",
            undoIcon : "_c4f153-undoIcon",
            dictionaryIcon : "_c4f153-dictionaryIcon",
            wikiIcon : "_c4f153-wikiIcon",
            footer : "_c4f153-footer",
            footerButton : "_c4f153-footerButton",
            btnIgnore : "_c4f153-btnIgnore",
            icon : "_c4f153-icon",
            btnLogo : "_c4f153-btnLogo",
            btnPersonalize : "_c4f153-btnPersonalize",
            personalizeMessage : "_c4f153-personalizeMessage",
            attn : "_c4f153-attn",
            cardAddedToDict : "_c4f153-cardAddedToDict",
            addedToDictTitle : "_c4f153-addedToDictTitle",
            dictionaryDescription : "_c4f153-dictionaryDescription",
            undo : "_c4f153-undo",
            dictLink : "_c4f153-dictLink",
            dictionaryAddedIcon : "_c4f153-dictionaryAddedIcon",
            synTitle : "_c4f153-synTitle",
            synList : "_c4f153-synList",
            synListSingle : "_c4f153-synListSingle",
            synListTitle : "_c4f153-synListTitle",
            synListNumber : "_c4f153-synListNumber",
            synSubitems : "_c4f153-synSubitems",
            synItem : "_c4f153-synItem",
            dict : "_c4f153-dict",
            dictContent : "_c4f153-dictContent",
            dictItemCounter : "_c4f153-dictItemCounter",
            dictItem : "_c4f153-dictItem",
            qualifier : "_c4f153-qualifier",
            dictFooterItem : "_c4f153-dictFooterItem",
            wikiLink : "_c4f153-wikiLink",
            wiki : "_c4f153-wiki",
            gr__tooltip_empty : "gr__tooltip_empty",
            gr__tooltip : "gr__tooltip",
            "gr-notfound-tooltip" : "gr-notfound-tooltip",
            "gr__tooltip-content" : "gr__tooltip-content",
            "gr__tooltip-logo" : "gr__tooltip-logo",
            gr__flipped : "gr__flipped"
        };
        /**
         * @param {Element} node
         * @return {?}
         */
        var select = function(node) {
            var text = node.title;
            var cls = node.className;
            return dom.createElement("div", (0, ret["default"])({
                className : cls
            }, callback.setInnerHTML(text.toLowerCase(), ["i", "b"])));
        };
        /**
         * @param {Element} value
         * @return {?}
         */
        var n = function(value) {
            var text = value.title;
            var match = value.explanation;
            return dom.createElement("div", null, dom.createElement(select, {
                className : options.bigTitle,
                title : text
            }), dom.createElement("div", (0, ret["default"])({
                className : options.explanation
            }, callback.setInnerHTML(match, ["i", "b"]))));
        };
        /**
         * @param {Element} element
         * @return {?}
         */
        expectedHashCode.FooterButton = function(element) {
            var className = element.className;
            var onClick = element.onClick;
            var children = element.children;
            return dom.createElement("div", {
                className : $.cs(options.footerButton, className),
                role : "button",
                /**
                 * @param {string} expectedHashCode
                 * @return {undefined}
                 */
                onClick : function(expectedHashCode) {
                    expectedHashCode.stopPropagation();
                    onClick();
                }
            }, children);
        };
        /**
         * @param {?} settings
         * @return {?}
         */
        expectedHashCode.GrammarlyFooter = function(settings) {
            var context = settings.isUserAuthenticated;
            var onClick = settings.onEditor;
            var callback = settings.onLogin;
            return context ? dom.createElement(expectedHashCode.FooterButton, {
                className : $.cs(options.item, options.btnLogo),
                onClick : onClick
            }, dom.createElement(child.LogoIcon, {
                className : $.cs(options.icon, options.logoIcon)
            }), " See more in Grammarly") : dom.createElement(expectedHashCode.FooterButton, {
                className : $.cs(options.btnPersonalize, options.item),
                onClick : callback
            }, dom.createElement("div", {
                className : options.personalizeMessage
            }, dom.createElement("span", {
                className : options.attn
            }, "ATTN:"), " You\u2019re missing many ", dom.createElement("br", null), " key Grammarly features."), dom.createElement(child.LogoIcon, {
                className : $.cs(options.icon, options.logoIcon)
            }), " Personalize for free");
        };
        /**
         * @param {Object} $scope
         * @return {?}
         */
        expectedHashCode.CardCommonContent = function($scope) {
            var model = $scope.model;
            var txt = $scope.onAddToDictionary;
            var _m = $scope.onIgnore;
            var file = $scope.onEditor;
            var oldTodos = $scope.onLogin;
            var hasAddToDictionary = model.getFooterProps();
            return dom.createElement("div", {
                className : $.cs(options.card)
            }, model.isTextCard ? !model.isUnknowWord && dom.createElement(n, {
                title : model.title,
                explanation : model.explanation
            }) : dom.createElement("div", {
                className : options.replacement
            }, dom.createElement(data.Replacement, {
                itemClassName : options.item,
                replacement : model.getReplacements()
            })), dom.createElement("div", {
                className : options.footer
            }, hasAddToDictionary.hasAddToDictionary && dom.createElement(expectedHashCode.FooterButton, {
                className : $.cs(options.btnDict, options.item),
                /**
                 * @return {?}
                 */
                onClick : function() {
                    return txt();
                }
            }, model.isUnknowWord && dom.createElement(select, {
                className : options.unknownWordTitle,
                title : model.title
            }), dom.createElement("span", {
                className : $.cs(options.btnDictLabelWithIcon)
            }, dom.createElement(child.DictionaryIcon, {
                className : $.cs(options.icon, options.dictionaryIcon)
            }), " Add to dictionary")), dom.createElement(expectedHashCode.FooterButton, {
                className : $.cs(options.btnIgnore, options.item),
                /**
                 * @return {?}
                 */
                onClick : function() {
                    return _m();
                }
            }, dom.createElement(child.IgnoreIcon, {
                className : $.cs(options.icon, options.ignoreIcon)
            }), " Ignore"), dom.createElement(expectedHashCode.GrammarlyFooter, {
                onEditor : file,
                onLogin : oldTodos,
                isUserAuthenticated : model.isUserAuthenticated
            })));
        };
        /**
         * @param {?} event
         * @return {?}
         */
        var error = function(event) {
            var related = event.word;
            return dom.createElement("div", {
                className : $.cs(options.card, options.cardAddedToDict)
            }, dom.createElement("div", {
                className : options.addedToDictTitle
            }, dom.createElement(child.DictionaryAddedIcon, {
                className : options.dictionaryAddedIcon
            }), " ", related), dom.createElement("div", {
                className : options.dictionaryDescription
            }, "is now in your ", dom.createElement("div", {
                /**
                 * @return {undefined}
                 */
                onClick : function() {
                    nodes.emitBackground("open-url", helper.URLS.appPersonalDictionary);
                },
                className : options.dictLink
            }, "personal dictionary")));
        };
        var container = function(deepDataAndEvents) {
            /**
             * @return {?}
             */
            function value() {
                (0, it["default"])(this, value);
                var me = (0, p["default"])(this, (value.__proto__ || (0, bp["default"])(value)).apply(this, arguments));
                return me.state = {
                    isAddedToDictionary : me.props.isAddedToDictionary
                }, me;
            }
            return(0, row["default"])(value, deepDataAndEvents), (0, column["default"])(value, [{
                key : "render",
                /**
                 * @return {?}
                 */
                value : function() {
                    var me = this;
                    var Model = this.props.model;
                    return this.state.isAddedToDictionary ? dom.createElement(error, {
                        word : Model.highlightText
                    }) : dom.createElement(expectedHashCode.CardCommonContent, {
                        /**
                         * @return {undefined}
                         */
                        onAddToDictionary : function() {
                            me.setState({
                                isAddedToDictionary : true
                            });
                            me.props.onAddToDictionary();
                        },
                        onIgnore : this.props.onIgnore,
                        onEditor : this.props.onEditor,
                        onLogin : this.props.onLogin,
                        model : Model
                    });
                }
            }]), value;
        }(dom.Component);
        expectedHashCode.CardCommon = container;
        /**
         * @param {?} json
         * @return {?}
         */
        var create = function(json) {
            var arr = json.meanings;
            switch(arr.length) {
                case 0:
                    return dom.createElement("span", null);
                case 1:
                    return dom.createElement("div", {
                        className : $.cs(options.synList, options.synListSingle)
                    }, dom.createElement("div", {
                        className : options.synSubitems
                    }, dom.createElement(data.Replacement, {
                        replacement : arr[0].list,
                        itemClassName : options.synItem
                    })));
                default:
                    return dom.createElement("div", {
                        className : options.synList
                    }, arr.map(function(cl, subKey) {
                        return dom.createElement("div", {
                            key : subKey,
                            className : options.synListItem
                        }, dom.createElement("div", {
                            className : options.synListTitle
                        }, dom.createElement("span", {
                            className : options.synListNumber
                        }, subKey + 1, "."), cl.title), dom.createElement("div", {
                            className : options.synSubitems
                        }, dom.createElement(data.Replacement, {
                            replacement : cl.list,
                            itemClassName : options.synItem
                        })));
                    }));
            }
        };
        /**
         * @param {Object} that
         * @return {?}
         */
        expectedHashCode.CardSynonyms = function(that) {
            var context = that.model;
            var element = that.onEditor;
            var merge = that.onLogin;
            return dom.createElement("div", {
                className : $.cs(options.card, options.synCard)
            }, dom.createElement("div", {
                className : options.synTitle
            }, "Synonyms:"), dom.createElement(create, {
                meanings : context.meanings
            }), dom.createElement("div", {
                className : options.footer
            }, dom.createElement(expectedHashCode.GrammarlyFooter, {
                onEditor : element,
                onLogin : merge,
                isUserAuthenticated : context.isUserAuthenticated
            })));
        };
        /** @type {number} */
        var elementWidth = 288;
        var tr = function(deepDataAndEvents) {
            /**
             * @return {?}
             */
            function value() {
                (0, it["default"])(this, value);
                var test = (0, p["default"])(this, (value.__proto__ || (0, bp["default"])(value)).apply(this, arguments));
                return test.state = {
                    isMaxWidth : false
                }, test;
            }
            return(0, row["default"])(value, deepDataAndEvents), (0, column["default"])(value, [{
                key : "componentDidMount",
                /**
                 * @return {undefined}
                 */
                value : function() {
                    if (this.el) {
                        if (this.el.firstElementChild) {
                            if (this.el.firstElementChild.clientWidth === elementWidth) {
                                this.setState({
                                    isMaxWidth : true
                                });
                            }
                        }
                    }
                }
            }, {
                key : "render",
                /**
                 * @return {?}
                 */
                value : function() {
                    var me = this;
                    var that = this.props;
                    var node = that.model;
                    var dir = that.onIgnore;
                    var content = that.onAddToDictionary;
                    var restoreScript = that.onEditor;
                    var udataCur = that.onLogin;
                    var failuresLink = that.isAddedToDictionary;
                    return dom.createElement("div", {
                        /**
                         * @param {string} expectedHashCode
                         * @return {?}
                         */
                        onClick : function(expectedHashCode) {
                            return expectedHashCode.stopPropagation();
                        },
                        key : node.id,
                        /**
                         * @param {string} expectedHashCode
                         * @return {?}
                         */
                        ref : function(expectedHashCode) {
                            return me.el = expectedHashCode;
                        },
                        className : $.cs(this.state.isMaxWidth && options.maxWidthReached)
                    }, is(node, dir, content, restoreScript, udataCur, failuresLink));
                }
            }]), value;
        }(dom.Component);
        expectedHashCode.Card = tr;
        var PositionedCard = function(deepDataAndEvents) {
            /**
             * @return {?}
             */
            function value() {
                (0, it["default"])(this, value);
                var obj = (0, p["default"])(this, (value.__proto__ || (0, bp["default"])(value)).apply(this, arguments));
                return obj.state = {
                    pos : {
                        rect : {
                            top : 0,
                            left : 0,
                            width : 0,
                            height : 0,
                            flip : false
                        },
                        sourceRect : {
                            width : 0
                        },
                        delta : {
                            right : 0,
                            left : 0,
                            bottom : 0,
                            top : 0
                        },
                        className : "",
                        visible : false
                    },
                    addedToDict : false,
                    match : {},
                    visible : false
                }, obj._firstInteractionMap = {}, obj.handlers = function(event, p, deepDataAndEvents) {
                    var params = obj.state.match;
                    var jQuery = obj.props;
                    if (obj.state.addedToDict) {
                        return void _self.fire("show-dictionary");
                    }
                    if (event) {
                        switch(event) {
                            case "replace":
                                jQuery.animateReplacement(String(params.id), p, deepDataAndEvents);
                                params.replace(p, false);
                                jQuery.hide();
                                if (params.syn) {
                                    _self.logger.synonymReplacementAction();
                                } else {
                                    _self.logger.cardReplacementAction();
                                }
                                break;
                            case "ignore":
                                params.ignore();
                                jQuery.hide();
                                _self.logger.cardIgnoreAction();
                                break;
                            case "hide":
                                jQuery.hide();
                                break;
                            case "anim-hide":
                                jQuery.hide();
                                break;
                            case "editor":
                                jQuery.openEditor();
                                break;
                            case "login":
                                jQuery.openEditor();
                                break;
                            case "add":
                                jQuery.addToDict();
                                _self.logger.cardAddToDictAction();
                        }
                        try {
                            switch(event) {
                                case "replace":
                                    ;
                                case "ignore":
                                    ;
                                case "add":
                                    ;
                                case "editor":
                                    if (void 0 === obj._firstInteractionMap[params.editorId]) {
                                        _self.logger.cardFirstInteraction(url.getDomain(), obj.props.getUserType(), obj.props.getEditorType());
                                        /** @type {boolean} */
                                        obj._firstInteractionMap[params.editorId] = true;
                                    }
                                    ;
                            }
                        } catch (a) {
                        }
                    }
                }, obj;
            }
            return(0, row["default"])(value, deepDataAndEvents), (0, column["default"])(value, [{
                key : "createCardModel",
                /**
                 * @param {string} expectedHashCode
                 * @param {string} type
                 * @return {?}
                 */
                value : function(expectedHashCode, type) {
                    var _ = this;
                    switch(expectedHashCode.kind) {
                        case "common":
                            return new Block.CommonCardModelImpl(expectedHashCode, function(num, deepDataAndEvents) {
                                return _.handlers("replace", num, deepDataAndEvents);
                            }, type);
                        case "synonym":
                            return new Block.SynonymsCardModelImpl(expectedHashCode, function(num) {
                                return _.handlers("replace", num);
                            }, type);
                        default:
                            return null;
                    }
                }
            }, {
                key : "render",
                /**
                 * @return {?}
                 */
                value : function() {
                    var item = this;
                    var state = this.state;
                    var t = state.pos;
                    var params = state.match;
                    var visible = state.visible;
                    var object = state.addedToDict;
                    var target = t.rect;
                    var attrs = target.flip;
                    var css = {
                        top : target.top,
                        left : target.left,
                        visibility : visible ? "" : "hidden"
                    };
                    if (!visible) {
                        return dom.createElement("div", null);
                    }
                    var result = hasOwn.createAlert(params);
                    var person = this.createCardModel(result, !this.props.isAnonymous());
                    return dom.createElement("div", {
                        style : css,
                        className : $.cs(options.container, attrs && options.flip, attrs && ("synonyms" === person.kind && options.flipSyn))
                    }, dom.createElement(tr, {
                        model : person,
                        /**
                         * @return {?}
                         */
                        onIgnore : function() {
                            return item.handlers("ignore");
                        },
                        /**
                         * @return {?}
                         */
                        onAddToDictionary : function() {
                            return item.handlers("add");
                        },
                        isAddedToDictionary : object,
                        /**
                         * @return {?}
                         */
                        onLogin : function() {
                            return item.handlers("login");
                        },
                        /**
                         * @return {?}
                         */
                        onEditor : function() {
                            return item.handlers("editor");
                        }
                    }));
                }
            }]), value;
        }(dom.Component);
        expectedHashCode.PositionedCard = PositionedCard;
    }, {
        "../dom" : 215,
        "../location" : 277,
        "../tracking" : 307,
        "./icons" : 266,
        "./model/card" : 270,
        "./replacement" : 273,
        "./utils/react" : 275,
        "babel-runtime/core-js/object/get-prototype-of" : 28,
        "babel-runtime/helpers/classCallCheck" : 34,
        "babel-runtime/helpers/createClass" : 35,
        "babel-runtime/helpers/extends" : 37,
        "babel-runtime/helpers/inherits" : 38,
        "babel-runtime/helpers/possibleConstructorReturn" : 39,
        "lib/config" : 211,
        "lib/inline-cards/model/grammarly_editor_alert" : 272,
        "lib/message" : 278,
        react : "react"
    }],
    268 : [function(require, dataAndEvents, expectedHashCode) {
        /**
         * @param {string} path
         * @return {?}
         */
        function build(path) {
            var scripts = {
                Spelling : opts.contextualSpelling,
                ContextualSpelling : opts.contextualSpelling,
                Grammar : opts.grammar,
                Style : opts.style,
                SentenceStructure : opts.sentenceStructure,
                Punctuation : opts.punctuation
            };
            if (void 0 === scripts[path]) {
                throw new TypeError("Unknown alert group " + path);
            }
            return scripts[path];
        }
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var Block = require("./alert_replacement");
        expectedHashCode.createReplacement = Block.createReplacement;
        expectedHashCode.createSimpleReplacement = Block.createSimpleReplacement;
        var opts;
        !function(result) {
            /** @type {string} */
            result[result.contextualSpelling = 0] = "contextualSpelling";
            /** @type {string} */
            result[result.grammar = 1] = "grammar";
            /** @type {string} */
            result[result.sentenceStructure = 2] = "sentenceStructure";
            /** @type {string} */
            result[result.punctuation = 3] = "punctuation";
            /** @type {string} */
            result[result.style = 4] = "style";
            /** @type {string} */
            result[result.plagiarism = 5] = "plagiarism";
            /** @type {string} */
            result[result.synonym = 6] = "synonym";
        }(opts = expectedHashCode.AlertGroup || (expectedHashCode.AlertGroup = {}));
        /** @type {function (string): ?} */
        expectedHashCode.alertGroupFromString = build;
    }, {
        "./alert_replacement" : 269
    }],
    269 : [function(require, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} type
         * @return {?}
         */
        function Event(type) {
            return type && type.__esModule ? type : {
                "default" : type
            };
        }
        /**
         * @param {string} readAheadLimit
         * @param {Function} logLevel
         * @return {?}
         */
        function mark(readAheadLimit, logLevel) {
            return{
                re : new RegExp("^(" + readAheadLimit + ")(.*)$"),
                /** @type {Function} */
                createResult : logLevel
            };
        }
        /**
         * @param {Array} selector
         * @return {?}
         */
        function setup(selector) {
            /**
             * @param {string} selector
             * @return {?}
             */
            function setup(selector) {
                /** @type {boolean} */
                var callback2 = true;
                /** @type {boolean} */
                var n = false;
                var bulk = void 0;
                try {
                    var _ref;
                    var keys = (0, c["default"])(ArrayProto);
                    for (;!(callback2 = (_ref = keys.next()).done);callback2 = true) {
                        var matcher = _ref.value;
                        var actualValue = selector.match(matcher.re);
                        if (null !== actualValue) {
                            return[matcher.createResult(actualValue), actualValue[actualValue.length - 1]];
                        }
                    }
                } catch (fn) {
                    /** @type {boolean} */
                    n = true;
                    bulk = fn;
                } finally {
                    try {
                        if (!callback2) {
                            if (keys["return"]) {
                                keys["return"]();
                            }
                        }
                    } finally {
                        if (n) {
                            throw bulk;
                        }
                    }
                }
            }
            /**
             * @param {string} src
             * @return {?}
             */
            function init(src) {
                /** @type {Array.<?>} */
                var arr = ["<span class='gr_grammar_del'>", "<span class='gr_grammar_ins'>", "\u2192"].map(function(term) {
                    return src.indexOf(term);
                });
                if (arr.findIndex(function(dataAndEvents) {
                        return 0 === dataAndEvents;
                    }) > 0) {
                    throw common.logger.couldNotParseTransform(selector, false), new Error("Couldn't parse transform: " + selector);
                }
                if (arr = arr.filter(function(dataAndEvents) {
                        return dataAndEvents > 0;
                    }), arr.length > 0) {
                    /** @type {number} */
                    var end = Math.min.apply(Math, (0, event["default"])(arr));
                    return[{
                        type : "text",
                        text : src.substring(0, end)
                    }, src.substring(end)];
                }
                return[{
                    type : "text",
                    text : src
                }, ""];
            }
            /** @type {Array} */
            var option = selector;
            /** @type {Array} */
            var data = [];
            /** @type {boolean} */
            var i = false;
            for (;option.length > 0;) {
                var options = setup(option);
                if (void 0 === options && (i = true), options = options || init(option), void 0 !== options) {
                    if ("insert" === options[0].type) {
                        var event = data[data.length - 1];
                        if (event) {
                            if ("delete" === event.type) {
                                data.push({
                                    type : "arrow"
                                });
                            }
                        }
                    }
                    data.push(options[0]);
                    option = options[1];
                }
                if (i || void 0 === options) {
                    common.logger.couldNotParseTransform(selector, void 0 === options);
                }
            }
            return data;
        }
        /**
         * @param {Array} extra
         * @param {?} onlyHandlers
         * @return {?}
         */
        function trigger(extra, onlyHandlers) {
            return{
                newText : onlyHandlers,
                transform : setup(extra)
            };
        }
        /**
         * @param {?} obj
         * @return {?}
         */
        function insert(obj) {
            /** @type {Array} */
            var t = [{
                type : "insert",
                text : obj
            }];
            return{
                newText : obj,
                transform : t
            };
        }
        var type = require("babel-runtime/helpers/toConsumableArray");
        var event = Event(type);
        var complete = require("babel-runtime/core-js/get-iterator");
        var c = Event(complete);
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var common = require("../../tracking");
        /** @type {Array} */
        var ArrayProto = [mark("(?:\\<span class='gr_grammar_del'\\>([\\S\\s]*?)\\</span\\>)", function(msgs) {
            return{
                type : "delete",
                text : msgs[2]
            };
        }), mark("(?:\\<span class='gr_grammar_ins'\\>([\\S\\s]*?)\\</span\\>)", function(msgs) {
            return{
                type : "insert",
                text : msgs[2]
            };
        }), mark("(\u2192)", function(dataAndEvents) {
            return{
                type : "arrow"
            };
        }), mark("([^<>\u2192]+)", function(msgs) {
            return{
                type : "text",
                text : msgs[1]
            };
        })];
        /** @type {function (Array): ?} */
        expectedHashCode.parseTransformHtml = setup;
        /** @type {function (Array, ?): ?} */
        expectedHashCode.createReplacement = trigger;
        /** @type {function (?): ?} */
        expectedHashCode.createSimpleReplacement = insert;
    }, {
        "../../tracking" : 307,
        "babel-runtime/core-js/get-iterator" : 20,
        "babel-runtime/helpers/toConsumableArray" : 41
    }],
    270 : [function(require, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} type
         * @return {?}
         */
        function $(type) {
            return type && type.__esModule ? type : {
                "default" : type
            };
        }
        var ready = require("babel-runtime/core-js/object/get-prototype-of");
        var ret = $(ready);
        var nodes = require("babel-runtime/helpers/createClass");
        var result = $(nodes);
        var helper = require("babel-runtime/helpers/possibleConstructorReturn");
        var update = $(helper);
        var selector = require("babel-runtime/helpers/inherits");
        var elem = $(selector);
        var use = require("babel-runtime/helpers/classCallCheck");
        var p = $(use);
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var Block = require("./alert");
        var Y = require("./card_replacement");
        /**
         * @param {Object} params
         * @param {?} contentHTML
         * @return {undefined}
         */
        var newMillis = function initialize(params, contentHTML) {
            (0, p["default"])(this, initialize);
            this.isUserAuthenticated = contentHTML;
            this.id = params.id;
            this.title = params.title;
            this.explanation = params.explanation;
            this.details = params.details;
        };
        /** @type {function (Object, ?): undefined} */
        expectedHashCode.CardModelBaseImpl = newMillis;
        var CommonCardModelImpl = function(nowMillis) {
            /**
             * @param {string} cycle
             * @param {?} info
             * @param {?} attributes
             * @return {?}
             */
            function process(cycle, info, attributes) {
                (0, p["default"])(this, process);
                var self = (0, update["default"])(this, (process.__proto__ || (0, ret["default"])(process)).call(this, cycle, attributes));
                return self._alert = cycle, self._replace = info, self.isUserAuthenticated = attributes, self.kind = "common", self.details = self._alert.details, self.todo = self._alert.todo, self.isUnknowWord = "Unknown" === self._alert.category, self.highlightText = self._alert.highlightText, self.extraProperties = self._alert.extraProperties, self.hasAcknowledgeButton = 0 === self._alert.replacements.length && self._alert.group !== Block.AlertGroup.contextualSpelling, self.hasAddToDictionary = !!self._alert.extraProperties.hasAddToDictionary,
                    self.isTextCard = Y.isNoReplacement(self._alert.replacements), self.title = self._getTitle(), self;
            }
            return(0, elem["default"])(process, nowMillis), (0, result["default"])(process, [{
                key : "_getTitle",
                /**
                 * @return {?}
                 */
                value : function() {
                    return this.isUnknowWord ? "Unknown word" : "Misspelled" === this._alert.category && "General" === this._alert.point ? "" : this._alert.extraProperties.isDidYouMean || this.extraProperties.isShowTitle ? "Check word usage" : this._alert.todo;
                }
            }, {
                key : "getFooterProps",
                /**
                 * @return {?}
                 */
                value : function() {
                    return{
                        hasAcknowledgeButton : this.hasAcknowledgeButton,
                        hasAddToDictionary : this.hasAddToDictionary
                    };
                }
            }, {
                key : "getReplacements",
                /**
                 * @return {?}
                 */
                value : function() {
                    var ct = this._alert.replacements;
                    return Y.isNoReplacement(ct) ? new Y.EmptyReplacement : new Y.CardReplacementList(this.title, ct, this._replace);
                }
            }]), process;
        }(newMillis);
        expectedHashCode.CommonCardModelImpl = CommonCardModelImpl;
        /**
         * @param {Object} res
         * @param {?} contacts
         * @param {?} ioargs
         * @return {undefined}
         */
        var SynonymsCardModelImpl = function onSuccess(res, contacts, ioargs) {
            var self = this;
            (0, p["default"])(this, onSuccess);
            /** @type {Object} */
            this._alert = res;
            this._replace = contacts;
            this.isUserAuthenticated = ioargs;
            /** @type {string} */
            this.kind = "synonyms";
            this.meanings = this._alert.meanings.map(function(settings) {
                return{
                    title : settings.title,
                    list : new Y.CardReplacementFlatList("", settings.replacements, function($out) {
                        return self._replace($out);
                    })
                };
            });
            /** @type {boolean} */
            this.isActive = false;
            /** @type {boolean} */
            this.isAnyMeanings = Boolean(this.meanings.length);
            this.id = this._alert.id;
            this.title = this._alert.title;
            /** @type {string} */
            this.explanation = "";
            /** @type {string} */
            this.details = "";
        };
        /** @type {function (Object, ?, ?): undefined} */
        expectedHashCode.SynonymsCardModelImpl = SynonymsCardModelImpl;
    }, {
        "./alert" : 268,
        "./card_replacement" : 271,
        "babel-runtime/core-js/object/get-prototype-of" : 28,
        "babel-runtime/helpers/classCallCheck" : 34,
        "babel-runtime/helpers/createClass" : 35,
        "babel-runtime/helpers/inherits" : 38,
        "babel-runtime/helpers/possibleConstructorReturn" : 39
    }],
    271 : [function(require, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} type
         * @return {?}
         */
        function $(type) {
            return type && type.__esModule ? type : {
                "default" : type
            };
        }
        /**
         * @param {Array} str
         * @return {?}
         */
        function lastBraceInKey(str) {
            return!str || 0 === str.length;
        }
        /**
         * @param {Object} _
         * @return {?}
         */
        function render(_) {
            return _.slice(_.findIndex(function(statement) {
                return "arrow" === statement.type;
            }) + 1).filter(function(statement) {
                return "delete" !== statement.type;
            }).map(function(elem) {
                return "insert" === elem.type || "text" === elem.type ? elem.text : "";
            }).join("");
        }
        var selector = require("babel-runtime/core-js/object/get-prototype-of");
        var elem = $(selector);
        var helper = require("babel-runtime/helpers/possibleConstructorReturn");
        var update = $(helper);
        var json = require("babel-runtime/helpers/inherits");
        var obj = $(json);
        var nodes = require("babel-runtime/helpers/classCallCheck");
        var result = $(nodes);
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var opts;
        !function(d) {
            /** @type {string} */
            d[d.single = 0] = "single";
            /** @type {string} */
            d[d.list = 1] = "list";
            /** @type {string} */
            d[d.flatList = 2] = "flatList";
            /** @type {string} */
            d[d.empty = 3] = "empty";
        }(opts = expectedHashCode.CardReplacementTemplate || (expectedHashCode.CardReplacementTemplate = {}));
        /** @type {function (Array): ?} */
        expectedHashCode.isNoReplacement = lastBraceInKey;
        /**
         * @return {undefined}
         */
        var EmptyReplacement = function render() {
            (0, result["default"])(this, render);
            this.template = opts.empty;
            /** @type {string} */
            this.headerText = "";
        };
        /** @type {function (): undefined} */
        expectedHashCode.EmptyReplacement = EmptyReplacement;
        /**
         * @param {?} content
         * @param {?} allBindingsAccessor
         * @param {?} depMaps
         * @return {undefined}
         */
        var CardReplacementSingle = function init(content, allBindingsAccessor, depMaps) {
            var newText = this;
            (0, result["default"])(this, init);
            this.headerText = content;
            this._replacement = allBindingsAccessor;
            this._onReplace = depMaps;
            this.transform = this._replacement.transform;
            /**
             * @return {?}
             */
            this.onReplace = function() {
                return newText._onReplace(newText._replacement.newText);
            };
            this.template = opts.single;
        };
        /** @type {function (?, ?, ?): undefined} */
        expectedHashCode.CardReplacementSingle = CardReplacementSingle;
        /**
         * @param {?} content
         * @param {?} allBindingsAccessor
         * @param {?} depMaps
         * @return {undefined}
         */
        var newMillis = function init(content, allBindingsAccessor, depMaps) {
            var fs = this;
            (0, result["default"])(this, init);
            this.headerText = content;
            this.replacements = allBindingsAccessor;
            this._onReplace = depMaps;
            this.template = opts.list;
            /**
             * @param {Object} data
             * @return {?}
             */
            this.getOnReplace = function(data) {
                return function() {
                    fs._onReplace(data.newText, render(data.transform));
                };
            };
        };
        /** @type {function (?, ?, ?): undefined} */
        expectedHashCode.CardReplacementList = newMillis;
        var CardReplacementFlatList = function(nowMillis) {
            /**
             * @param {string} cycle
             * @param {?} attributes
             * @param {boolean} recurring
             * @return {?}
             */
            function create(cycle, attributes, recurring) {
                (0, result["default"])(this, create);
                var s = (0, update["default"])(this, (create.__proto__ || (0, elem["default"])(create)).call(this, cycle, attributes, recurring));
                return s.headerText = cycle, s.template = opts.flatList, s;
            }
            return(0, obj["default"])(create, nowMillis), create;
        }(newMillis);
        expectedHashCode.CardReplacementFlatList = CardReplacementFlatList;
    }, {
        "babel-runtime/core-js/object/get-prototype-of" : 28,
        "babel-runtime/helpers/classCallCheck" : 34,
        "babel-runtime/helpers/inherits" : 38,
        "babel-runtime/helpers/possibleConstructorReturn" : 39
    }],
    272 : [function($, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} s
         * @return {?}
         */
        function getActual(s) {
            return s && s.__esModule ? s : {
                "default" : s
            };
        }
        /**
         * @param {Element} target
         * @return {?}
         */
        function handler(target) {
            var node = target.rawMatch;
            return test.assert("synonym" !== node.action, "Do not use `getBasicAlertFields` for synonyms."), {
                id : node.id.toString(),
                hidden : node.hidden,
                category : node.category,
                isFree : node.free,
                highlightText : node.highlightText,
                range : {
                    start : node.begin,
                    end : node.end
                },
                group : that.alertGroupFromString(node.group)
            };
        }
        /**
         * @param {Element} target
         * @return {?}
         */
        function initialize(target) {
            var node = target.rawMatch;
            /** @type {number} */
            var start = Number(node.synonyms.pos);
            var name = node.synonyms.token;
            var end = start + name.length;
            return{
                id : String(target.id),
                hidden : false,
                category : node.category,
                isFree : true,
                highlightText : name,
                range : {
                    start : start,
                    end : end
                },
                group : that.AlertGroup.synonym
            };
        }
        /**
         * @param {Element} node
         * @return {?}
         */
        function render(node) {
            /** @type {string} */
            var kind = "common";
            var data = node.rawMatch;
            var options = data.extra_properties;
            var source = handler(node);
            var context = {
                title : data.title,
                details : data.details,
                explanation : data.explanation
            };
            var all = (0, keys["default"])(source, context);
            var switchLabel = {
                kind : kind,
                todo : data.todo,
                point : data.point,
                replacements : (data.transforms || []).map(function(results, prop) {
                    return that.createReplacement(results, data.replacements[prop]);
                }),
                extraProperties : {
                    hasAddToDictionary : !!options.add_to_dict,
                    isDidYouMean : !!options.did_you_mean,
                    isShowTitle : !!options.show_title,
                    isEnchancement : !!options.enhancement,
                    plagiarismUrl : options.url,
                    sentence : options.sentence,
                    priority : options.priority ? parseInt(options.priority, 10) : 0
                }
            };
            return(0, keys["default"])(all, switchLabel);
        }
        /**
         * @param {Element} opts
         * @return {?}
         */
        function init(opts) {
            /** @type {string} */
            var kind = "synonym";
            var def = opts.rawMatch;
            var key = initialize(opts);
            var context = {
                title : def.synonyms.token,
                details : "",
                explanation : ""
            };
            var camelKey = (0, keys["default"])(key, context);
            var switchLabel = {
                kind : kind,
                meanings : def.synonyms.meanings.map(function(body) {
                    return{
                        title : body.meaning,
                        replacements : body.synonyms.map(function(data) {
                            return that.createSimpleReplacement(data.derived);
                        })
                    };
                }),
                replacements : (def.replacements || []).map(that.createSimpleReplacement)
            };
            return(0, keys["default"])(camelKey, switchLabel);
        }
        /**
         * @param {Element} params
         * @return {?}
         */
        function dispatch(params) {
            var context = params.rawMatch;
            if (!context.group && "synonyms" === context.action) {
                return init(params);
            }
            var n = that.alertGroupFromString(params.rawMatch.group);
            switch(n) {
                default:
                    return render(params);
            }
        }
        var obj = $("babel-runtime/core-js/object/assign");
        var keys = getActual(obj);
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var test = $("stdlib");
        var that = $("./alert");
        /** @type {function (Element): ?} */
        expectedHashCode.createAlert = dispatch;
    }, {
        "./alert" : 268,
        "babel-runtime/core-js/object/assign" : 24,
        stdlib : 328
    }],
    273 : [function(require, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} value
         * @return {?}
         */
        function h(value) {
            return value && value.__esModule ? value : {
                "default" : value
            };
        }
        /**
         * @param {Object} options
         * @return {?}
         */
        function request(options) {
            var msgs = options.filter(function(event) {
                return "insert" === event.type || "delete" === event.type;
            });
            return msgs.length > 0 ? msgs[msgs.length - 1].type + "Replacement" : "";
        }
        /**
         * @param {Object} token
         * @param {number} a
         * @return {?}
         */
        function handler(token, a) {
            var theScriptTags = token.slice(a).filter(function(statement) {
                return "insert" === statement.type;
            });
            return theScriptTags.length > 0 ? theScriptTags[0].text : "";
        }
        /**
         * @param {Object} source
         * @param {number} n
         * @return {?}
         */
        function next(source, n) {
            var theScriptTags = source.slice(0, n).filter(function(event) {
                return "delete" === event.type;
            });
            return theScriptTags.length > 0 ? theScriptTags[0].text : "";
        }
        /**
         * @param {Object} args
         * @param {number} i
         * @return {?}
         */
        function f(args, i) {
            return!!args[i + 1] && "delete" === args[i + 1].type;
        }
        /**
         * @param {Object} args
         * @param {number} i
         * @return {?}
         */
        function func(args, i) {
            return!!args[i + 1] && "text" === args[i + 1].type;
        }
        /**
         * @param {Object} options
         * @param {number} name
         * @return {?}
         */
        function tmpl(options, name) {
            return!!options[name + 1] && "insert" === options[name + 1].type;
        }
        /**
         * @param {Object} styles
         * @return {?}
         */
        function style(styles) {
            return 0 === styles.filter(function(transform) {
                return "insert" !== transform.type && "text" !== transform.type;
            }).length;
        }
        /**
         * @param {Object} namespace
         * @return {?}
         */
        function get(namespace) {
            return namespace.slice(namespace.findIndex(function(statement) {
                return "arrow" === statement.type;
            }) + 1);
        }
        /**
         * @param {string} options
         * @param {string} msg
         * @param {?} stats
         * @param {?} stdout
         * @param {number} i
         * @return {?}
         */
        function cb(options, msg, stats, stdout, i) {
            return self.createElement("span", {
                className : $.cs(value.insertPart, stats && value.insertWithWord, Y.isSinglePunctuation(options) && value.insertPunctuation, Y.isQuestion(options) && value.insertQuestion, stdout && value.nextIsWord),
                key : i
            }, Y.highlightDiff(msg, options));
        }
        /**
         * @param {string} defs
         * @param {string} node
         * @param {number} context
         * @return {?}
         */
        function create(defs, node, context) {
            return self.createElement("span", {
                className : $.cs(value.deletePart, Y.isQuoteWithPunctuation(defs) && value.deleteQuoteWithPunctuation, Y.isPunctuation(defs) && value.deletePunctuation, Y.isColonOrSemicolon(defs) && value.deleteColonOrSemicolon, Y.isComma(defs) && value.deleteComma, Y.isExclamation(defs) && value.deleteExclamation, Y.isDash(defs) && value.deleteDash, Y.isQuestion(defs) && value.deleteQuestion, Y.isEllipsis(defs) && value.deleteEllipsis, Y.isQuote(defs) && value.deleteQuote, Y.isPeriod(defs) && value.deletePeriod,
                    Y.isParenthesis(defs) && value.deleteParenthesis, Y.isDoubleComma(defs) && value.deleteDoubleComma, Y.isAphostrophe(defs) && value.deleteAphostrophe, Y.isLetter(defs) && value.deleteLetter, Y.isPunctuationAndLetter(defs) && value.deletePunctuationBeforeLetter),
                key : context
            }, Y.highlightDiff(node, defs));
        }
        /**
         * @param {?} success
         * @param {?} __
         * @param {?} settings
         * @param {number} key
         * @return {?}
         */
        function callback(success, __, settings, key) {
            return self.createElement("span", {
                className : $.cs(value.wordPart, __ && value.wordBeforeDelete, settings && value.wordBeforeInsert),
                key : key
            }, success);
        }
        /**
         * @param {Object} options
         * @param {string} expectedHashCode
         * @param {number} input
         * @return {?}
         */
        function render(options, expectedHashCode, input) {
            return self.createElement("span", {
                key : input,
                className : value[request(options)],
                onClick : event.stopPropagation(expectedHashCode)
            }, get(options).map(function(data, context) {
                switch(data.type) {
                    case "delete":
                        return create(data.text, handler(options, context), context);
                    case "insert":
                        return cb(data.text, next(options, context), style(options), func(options, context), context);
                    case "text":
                        return callback(data.text, f(options, context), tmpl(options, context), context);
                    default:
                        throw new Error("Part " + data + " should not exist");;
                }
            }));
        }
        /**
         * @param {?} e
         * @param {string} expectedHashCode
         * @return {?}
         */
        function destroy(e, expectedHashCode) {
            return self.createElement("div", (0, elem["default"])({
                className : value.title,
                onClick : event.stopPropagation(expectedHashCode)
            }, event.setInnerHTML(e)));
        }
        /**
         * @param {Object} options
         * @param {?} info
         * @return {?}
         */
        function success(options, info) {
            return self.createElement("div", {
                className : $.cs(value.singleReplacement, info)
            }, self.createElement("div", null, render(options.transform, options.onReplace)));
        }
        /**
         * @param {Object} s
         * @param {boolean} recurring
         * @param {?} doc
         * @return {?}
         */
        function init(s, recurring, doc) {
            return self.createElement("div", {
                className : value.listReplacement
            }, s.replacements.map(function(data, chunk) {
                return self.createElement("div", {
                    key : chunk,
                    className : $.cs(value.listItemReplacementWrapper, doc, recurring && value.flattenListItemReplacementWrapper, 0 === chunk && (!s.headerText && value.listItemReplacementNoHeader)),
                    onClick : s.getOnReplace(data)
                }, 0 === chunk && (s.headerText && destroy(s.headerText, s.getOnReplace(data))), self.createElement("span", {
                    className : value.listItemReplacement
                }, render(data.transform, s.getOnReplace(data), chunk)));
            }));
        }
        /**
         * @param {Object} data
         * @param {?} resp
         * @return {?}
         */
        function parse(data, resp) {
            switch(data.template) {
                case db.CardReplacementTemplate.single:
                    return success(data, resp);
                case db.CardReplacementTemplate.list:
                    return init(data, false, resp);
                case db.CardReplacementTemplate.flatList:
                    return init(data, true, resp);
                default:
                    throw new Error("Replacement template " + db.CardReplacementTemplate[data.template] + " is not supported");;
            }
        }
        var selector = require("babel-runtime/helpers/extends");
        var elem = h(selector);
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var self = require("react");
        var $ = require("../../dom");
        var db = require("../model/card_replacement");
        var Y = require("./utils");
        var event = require("../utils/react");
        var value = {
            title : "_abcbcc-title",
            replacement : "_abcbcc-replacement",
            singleReplacement : "_abcbcc-singleReplacement",
            listItemReplacement : "_abcbcc-listItemReplacement",
            sideCommas : "_abcbcc-sideCommas",
            orReplacement : "_abcbcc-orReplacement",
            insertReplacement : "_abcbcc-insertReplacement",
            longReplacement : "_abcbcc-longReplacement",
            didYouMean : "_abcbcc-didYouMean",
            wordPart : "_abcbcc-wordPart",
            wordBeforeInsert : "_abcbcc-wordBeforeInsert",
            insertPart : "_abcbcc-insertPart",
            insertPunctuation : "_abcbcc-insertPunctuation",
            deleteReplacement : "_abcbcc-deleteReplacement",
            deletePart : "_abcbcc-deletePart",
            wordBeforeDelete : "_abcbcc-wordBeforeDelete",
            deletePunctuation : "_abcbcc-deletePunctuation",
            deleteColonOrSemicolon : "_abcbcc-deleteColonOrSemicolon",
            deleteParenthesis : "_abcbcc-deleteParenthesis",
            deleteQuestion : "_abcbcc-deleteQuestion",
            deleteExclamation : "_abcbcc-deleteExclamation",
            deletePeriod : "_abcbcc-deletePeriod",
            deleteQuote : "_abcbcc-deleteQuote",
            deleteDash : "_abcbcc-deleteDash",
            deleteEllipsis : "_abcbcc-deleteEllipsis",
            deleteQuoteWithPunctuation : "_abcbcc-deleteQuoteWithPunctuation",
            deleteApostrophe : "_abcbcc-deleteApostrophe",
            deletePunctuationBeforeLetter : "_abcbcc-deletePunctuationBeforeLetter",
            deleteLetter : "_abcbcc-deleteLetter",
            deleteDoubleComma : "_abcbcc-deleteDoubleComma",
            insertQuestion : "_abcbcc-insertQuestion",
            nextIsWord : "_abcbcc-nextIsWord",
            listReplacement : "_abcbcc-listReplacement",
            arrowPart : "_abcbcc-arrowPart",
            bold : "_abcbcc-bold",
            orSeparator : "_abcbcc-orSeparator",
            didYouMeanLabel : "_abcbcc-didYouMeanLabel",
            listItemReplacementNoHeader : "_abcbcc-listItemReplacementNoHeader",
            listItemReplacementWrapper : "_abcbcc-listItemReplacementWrapper",
            flattenListItemReplacementWrapper : "_abcbcc-flattenListItemReplacementWrapper"
        };
        /**
         * @param {Object} options
         * @return {?}
         */
        expectedHashCode.Replacement = function(options) {
            return self.createElement("div", {
                className : $.cs(value.replacement)
            }, parse(options.replacement, options.itemClassName));
        };
    }, {
        "../../dom" : 215,
        "../model/card_replacement" : 271,
        "../utils/react" : 275,
        "./utils" : 274,
        "babel-runtime/helpers/extends" : 37,
        react : "react"
    }],
    274 : [function(require, dataAndEvents, expectedHashCode) {
        /**
         * @param {string} a
         * @return {?}
         */
        function clean(a) {
            return null !== a && (a.replace(/\s/g, "").length < 3 && null !== a.match(typePattern));
        }
        /**
         * @param {string} a
         * @return {?}
         */
        function extend(a) {
            return null !== a && (a.replace(/\s/g, "").length < 3 && null !== a.match(/[;:]/));
        }
        /**
         * @param {Object} value
         * @return {?}
         */
        function addClass(value) {
            return null !== value && (1 === value.replace(/\s/g, "").length && clean(value));
        }
        /**
         * @param {Object} a
         * @return {?}
         */
        function merge(a) {
            return null !== a && null !== a.match(/["'\u201d][.,;]/);
        }
        /**
         * @param {string} a
         * @return {?}
         */
        function array_to_hash(a) {
            return'"' === a || ("\u201d" === a || "\u201c" === a);
        }
        /**
         * @param {Object} obj
         * @return {?}
         */
        function toArray(obj) {
            return null !== obj && null !== obj.match(/,,/);
        }
        /**
         * @param {Object} a
         * @return {?}
         */
        function add(a) {
            return null !== a && a.match(/[.,;:!?\\\/\u2026\-\u2014()]\s*[a-z]/i);
        }
        /**
         * @param {string} a
         * @return {?}
         */
        function selector_sortOrder(a) {
            return "\u2019" === a;
        }
        /**
         * @param {string} a
         * @return {?}
         */
        function is_array(a) {
            return "," === a;
        }
        /**
         * @param {string} a
         * @return {?}
         */
        function operate(a) {
            return "!" === a;
        }
        /**
         * @param {string} key
         * @return {?}
         */
        function date(key) {
            return "-" === key || "\u2014" === key;
        }
        /**
         * @param {string} obj
         * @return {?}
         */
        function objectType(obj) {
            return "?" === obj;
        }
        /**
         * @param {string} a
         * @return {?}
         */
        function param(a) {
            return "." === a;
        }
        /**
         * @param {string} a
         * @return {?}
         */
        function ok(a) {
            return "\u2026" === a;
        }
        /**
         * @param {string} obj
         * @return {?}
         */
        function isDomNode(obj) {
            return ")" === obj || "(" === obj;
        }
        /**
         * @param {string} obj
         * @return {?}
         */
        function type(obj) {
            return null !== obj && (1 === obj.length && null !== obj.match(/[a-z]/i));
        }
        /**
         * @param {string} s
         * @param {string} v
         * @return {?}
         */
        function render(s, v) {
            if (s.length <= 4) {
                return self.createElement("span", null, v);
            }
            var o = assert.textdiff(s, v);
            var i = o.from;
            var ss = o.to;
            var step = o.oldFragment;
            var r = o.newFragment;
            /** @type {boolean} */
            var program = 1 === r.length && (i > 0 && s[i - 1] === r);
            /** @type {boolean} */
            var inverse = 1 === step.length && (0 === r.length && v[i - 1] === step);
            var j = i;
            var n = r;
            return(program || inverse) && (j = i - 1), program && (n = r + r), inverse && (n = step), n.length > 3 ? self.createElement("span", null, v) : self.createElement("span", null, s.substring(0, j), self.createElement("span", {
                className : item.bold
            }, n), s.substring(ss));
        }
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var self = require("react");
        var assert = require("@grammarly-npm/textdiff");
        var item = {
            title : "_abcbcc-title",
            replacement : "_abcbcc-replacement",
            singleReplacement : "_abcbcc-singleReplacement",
            listItemReplacement : "_abcbcc-listItemReplacement",
            sideCommas : "_abcbcc-sideCommas",
            orReplacement : "_abcbcc-orReplacement",
            insertReplacement : "_abcbcc-insertReplacement",
            longReplacement : "_abcbcc-longReplacement",
            didYouMean : "_abcbcc-didYouMean",
            wordPart : "_abcbcc-wordPart",
            wordBeforeInsert : "_abcbcc-wordBeforeInsert",
            insertPart : "_abcbcc-insertPart",
            insertPunctuation : "_abcbcc-insertPunctuation",
            deleteReplacement : "_abcbcc-deleteReplacement",
            deletePart : "_abcbcc-deletePart",
            wordBeforeDelete : "_abcbcc-wordBeforeDelete",
            deletePunctuation : "_abcbcc-deletePunctuation",
            deleteColonOrSemicolon : "_abcbcc-deleteColonOrSemicolon",
            deleteParenthesis : "_abcbcc-deleteParenthesis",
            deleteQuestion : "_abcbcc-deleteQuestion",
            deleteExclamation : "_abcbcc-deleteExclamation",
            deletePeriod : "_abcbcc-deletePeriod",
            deleteQuote : "_abcbcc-deleteQuote",
            deleteDash : "_abcbcc-deleteDash",
            deleteEllipsis : "_abcbcc-deleteEllipsis",
            deleteQuoteWithPunctuation : "_abcbcc-deleteQuoteWithPunctuation",
            deleteApostrophe : "_abcbcc-deleteApostrophe",
            deletePunctuationBeforeLetter : "_abcbcc-deletePunctuationBeforeLetter",
            deleteLetter : "_abcbcc-deleteLetter",
            deleteDoubleComma : "_abcbcc-deleteDoubleComma",
            insertQuestion : "_abcbcc-insertQuestion",
            nextIsWord : "_abcbcc-nextIsWord",
            listReplacement : "_abcbcc-listReplacement",
            arrowPart : "_abcbcc-arrowPart",
            bold : "_abcbcc-bold",
            orSeparator : "_abcbcc-orSeparator",
            didYouMeanLabel : "_abcbcc-didYouMeanLabel",
            listItemReplacementNoHeader : "_abcbcc-listItemReplacementNoHeader",
            listItemReplacementWrapper : "_abcbcc-listItemReplacementWrapper",
            flattenListItemReplacementWrapper : "_abcbcc-flattenListItemReplacementWrapper"
        };
        /** @type {RegExp} */
        var typePattern = /["'\u201d\u201c.,;:!?\\\/\u2026\-\u2014()]/;
        /** @type {function (string): ?} */
        expectedHashCode.isPunctuation = clean;
        /** @type {function (string): ?} */
        expectedHashCode.isColonOrSemicolon = extend;
        /** @type {function (Object): ?} */
        expectedHashCode.isSinglePunctuation = addClass;
        /** @type {function (Object): ?} */
        expectedHashCode.isQuoteWithPunctuation = merge;
        /** @type {function (string): ?} */
        expectedHashCode.isQuote = array_to_hash;
        /** @type {function (Object): ?} */
        expectedHashCode.isDoubleComma = toArray;
        /** @type {function (Object): ?} */
        expectedHashCode.isPunctuationAndLetter = add;
        /** @type {function (string): ?} */
        expectedHashCode.isAphostrophe = selector_sortOrder;
        /** @type {function (string): ?} */
        expectedHashCode.isComma = is_array;
        /** @type {function (string): ?} */
        expectedHashCode.isExclamation = operate;
        /** @type {function (string): ?} */
        expectedHashCode.isDash = date;
        /** @type {function (string): ?} */
        expectedHashCode.isQuestion = objectType;
        /** @type {function (string): ?} */
        expectedHashCode.isPeriod = param;
        /** @type {function (string): ?} */
        expectedHashCode.isEllipsis = ok;
        /** @type {function (string): ?} */
        expectedHashCode.isParenthesis = isDomNode;
        /** @type {function (string): ?} */
        expectedHashCode.isLetter = type;
        /** @type {function (string, string): ?} */
        expectedHashCode.highlightDiff = render;
    }, {
        "@grammarly-npm/textdiff" : 16,
        react : "react"
    }],
    275 : [function(proceed, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} e
         * @param {Array} opt_attributes
         * @return {?}
         */
        function clean(e, opt_attributes) {
            return{
                dangerouslySetInnerHTML : {
                    __html : value.sanitize(e, opt_attributes)
                }
            };
        }
        /**
         * @param {string} expectedHashCode
         * @return {?}
         */
        function click(expectedHashCode) {
            return function(ev) {
                ev.stopPropagation();
                expectedHashCode(ev);
            };
        }
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var value = proceed("./string");
        /** @type {function (?, Array): ?} */
        expectedHashCode.setInnerHTML = clean;
        /** @type {function (string): ?} */
        expectedHashCode.stopPropagation = click;
    }, {
        "./string" : 276
    }],
    276 : [function($resource, dataAndEvents, expectedHashCode) {
        /**
         * @param {string} m
         * @return {?}
         */
        function capitalize(m) {
            return m ? m[0].toUpperCase() + m.slice(1) : "";
        }
        /**
         * @param {string} str
         * @return {?}
         */
        function camelize(str) {
            return str ? str.replace(/(?:^|[-_])(\w)/g, function(dataAndEvents, chr) {
                return chr ? chr.toUpperCase() : "";
            }) : "";
        }
        /**
         * @return {?}
         */
        function sanitize() {
            var name = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "";
            var fn = arguments[1];
            return name && "undefined" !== typeof window ? fn ? user.sanitize(name, {
                ALLOWED_TAGS : fn
            }) : user.sanitize(name) : "";
        }
        /**
         * @param {string} options
         * @param {?} description
         * @return {?}
         */
        function buildRule(options, description) {
            var spec = options.match(description);
            return spec && spec[1];
        }
        /**
         * @param {string} s
         * @return {?}
         */
        function charSet(s) {
            return s.split(/\s+/)[0];
        }
        /**
         * @param {(number|string)} value
         * @param {string} other
         * @param {?} n
         * @return {?}
         */
        function pluralize(value, other, n) {
            return 1 === value ? other : n;
        }
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var user = $resource("dompurify");
        /** @type {string} */
        expectedHashCode.nbsp = String.fromCharCode(160);
        /** @type {function (string): ?} */
        expectedHashCode.capitalize = capitalize;
        /** @type {function (string): ?} */
        expectedHashCode.camelize = camelize;
        /** @type {function (): ?} */
        expectedHashCode.sanitize = sanitize;
        /** @type {function (string, ?): ?} */
        expectedHashCode.getFirstMatch = buildRule;
        /** @type {function (string): ?} */
        expectedHashCode.getFirstWord = charSet;
        /** @type {function ((number|string), string, ?): ?} */
        expectedHashCode.pluralize = pluralize;
    }, {
        dompurify : "dompurify"
    }],
    277 : [function(require, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} type
         * @return {?}
         */
        function Event(type) {
            return type && type.__esModule ? type : {
                "default" : type
            };
        }
        /**
         * @param {Object} t
         * @return {?}
         */
        function delay(t) {
            var domWaiters = this;
            var sibling = t.tabs;
            return config.SafePromise.create(function(cb) {
                return each(domWaiters, void 0, void 0, __exports__["default"].mark(function end() {
                    var tref;
                    var r;
                    return __exports__["default"].wrap(function(self) {
                        for (;;) {
                            switch(self.prev = self.next) {
                                case 0:
                                    return tref = setTimeout(function() {
                                        return sibling.getActiveTabUrl().then(cb);
                                    }, 2E3), self.next = 3, sibling.getActiveTabUrl();
                                case 3:
                                    r = self.sent;
                                    clearTimeout(tref);
                                    cb(r);
                                case 6:
                                    ;
                                case "end":
                                    return self.stop();
                            }
                        }
                    }, end, this);
                }));
            });
        }
        /**
         * @param {Object} el
         * @return {?}
         */
        function s(el) {
            var target = el && el.ownerDocument || document;
            var a = target.location || target.defaultView.location;
            return a ? c(a.hostname) : "";
        }
        /**
         * @param {Object} callback
         * @return {?}
         */
        function getNext(callback) {
            return event["default"].race([delay(callback).then(parse), d.delay(1E4).then(function() {
                throw new Error("Request to tabs.getCurrentTabUrl rejected by timeout");
            })]);
        }
        /**
         * @param {?} url
         * @return {?}
         */
        function parse(url) {
            if (d.isFF() && /^about:/.test(url)) {
                return url;
            }
            /** @type {Element} */
            var a = document.createElement("a");
            return a.href = url, c(a.hostname);
        }
        /**
         * @param {Object} parentNode
         * @return {?}
         */
        function checkLocation(parentNode) {
            var target = parentNode && parentNode.ownerDocument || document;
            var loc = target.location || target.defaultView.location;
            return loc ? loc.pathname + loc.search : "";
        }
        /**
         * @return {?}
         */
        function load() {
            /** @type {RegExp} */
            var regexp = new RegExp("^(?:[a-z]+:)?//", "i");
            /** @type {string} */
            var path = "";
            /** @type {NodeList} */
            var codeSegments = document.getElementsByTagName("link");
            /** @type {number} */
            var i = 0;
            for (;i < codeSegments.length;i++) {
                var anchor = codeSegments[i];
                /** @type {string} */
                var str = '"' + anchor.getAttribute("rel") + '"';
                /** @type {RegExp} */
                var pat = /(\"icon )|( icon\")|(\"icon\")|( icon )/i;
                if (str.search(pat) !== -1) {
                    path = anchor.getAttribute("href");
                }
            }
            return path || (path = "favicon.ico"), regexp.test(path) ? path : "/" !== path[0] ? "//" + document.location.host + document.location.pathname + path : "//" + document.location.host + path;
        }
        var complete = require("babel-runtime/regenerator");
        var __exports__ = Event(complete);
        var type = require("babel-runtime/core-js/promise");
        var event = Event(type);
        /**
         * @param {string} expectedHashCode
         * @param {Array} args
         * @param {(Element|string)} list
         * @param {Text} fn
         * @return {?}
         */
        var each = function(expectedHashCode, args, list, fn) {
            return new (list || (list = event["default"]))(function(success, done) {
                /**
                 * @param {string} expectedHashCode
                 * @return {undefined}
                 */
                function handler(expectedHashCode) {
                    try {
                        next(fn.next(expectedHashCode));
                    } catch (err) {
                        done(err);
                    }
                }
                /**
                 * @param {?} data
                 * @return {undefined}
                 */
                function loop(data) {
                    try {
                        next(fn["throw"](data));
                    } catch (err) {
                        done(err);
                    }
                }
                /**
                 * @param {Object} event
                 * @return {undefined}
                 */
                function next(event) {
                    if (event.done) {
                        success(event.value);
                    } else {
                        (new list(function(f) {
                            f(event.value);
                        })).then(handler, loop);
                    }
                }
                next((fn = fn.apply(expectedHashCode, args || [])).next());
            });
        };
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var d = require("./util");
        var Block = require("./page-config/defaults");
        var config = require("stdlib");
        /**
         * @param {string} sel
         * @return {?}
         */
        var c = function(sel) {
            return sel.replace("www.", "");
        };
        /** @type {function (Object): ?} */
        expectedHashCode.currentUrl = delay;
        /** @type {function (Object): ?} */
        expectedHashCode.getDomain = s;
        /** @type {function (Object): ?} */
        expectedHashCode.promiseGetDomain = getNext;
        /** @type {function (?): ?} */
        expectedHashCode.domainFromUrl = parse;
        /**
         * @return {?}
         */
        expectedHashCode.isFacebookSite = function() {
            return Block.FACEBOOK_SITES.includes(s());
        };
        /**
         * @return {?}
         */
        expectedHashCode.isJiraSite = function() {
            return/\.atlassian\.net/.test(s());
        };
        /**
         * @return {?}
         */
        expectedHashCode.isBlackboardSite = function() {
            return/\.blackboard\.com/.test(s());
        };
        /** @type {function (Object): ?} */
        expectedHashCode.getUrl = checkLocation;
        /** @type {function (): ?} */
        expectedHashCode.getFavicon = load;
    }, {
        "./page-config/defaults" : 283,
        "./util" : 322,
        "babel-runtime/core-js/promise" : 31,
        "babel-runtime/regenerator" : 43,
        stdlib : 328
    }],
    278 : [function(require, dataAndEvents, el) {
        (function(message) {
            /**
             * @param {?} node
             * @return {?}
             */
            function walk(node) {
                return node && node.__esModule ? node : {
                    "default" : node
                };
            }
            /**
             * @param {string} type
             * @param {Function} callback
             * @return {undefined}
             */
            function one(type, callback) {
                /**
                 * @return {undefined}
                 */
                function attributes() {
                    off(type, attributes);
                    /** @type {number} */
                    var expectedHashCode = arguments.length;
                    /** @type {Array} */
                    var fix = Array(expectedHashCode);
                    /** @type {number} */
                    var i = 0;
                    for (;i < expectedHashCode;i++) {
                        fix[i] = arguments[i];
                    }
                    callback.apply(this, fix);
                }
                Class(type, attributes);
            }
            /**
             * @param {string} expectedHashCode
             * @param {Function} opt_attributes
             * @return {?}
             */
            function Class(expectedHashCode, opt_attributes) {
                if ("__bgerror" === expectedHashCode) {
                    return void object.on("__bgerror", opt_attributes);
                }
                var configList = listeners[expectedHashCode] = listeners[expectedHashCode] || [];
                if (configList.push(opt_attributes), 1 === configList.length) {
                    try {
                        self.listen(expectedHashCode, function() {
                            /** @type {boolean} */
                            var callback2 = true;
                            /** @type {boolean} */
                            var t = false;
                            var bulk = void 0;
                            try {
                                var elem;
                                var exports = (0, result["default"])(configList);
                                for (;!(callback2 = (elem = exports.next()).done);callback2 = true) {
                                    var parent = elem.value;
                                    parent.apply(void 0, arguments);
                                }
                            } catch (fn) {
                                /** @type {boolean} */
                                t = true;
                                bulk = fn;
                            } finally {
                                try {
                                    if (!callback2) {
                                        if (exports["return"]) {
                                            exports["return"]();
                                        }
                                    }
                                } finally {
                                    if (t) {
                                        throw bulk;
                                    }
                                }
                            }
                        });
                    } catch (error) {
                        el.emitError(error);
                    }
                }
            }
            /**
             * @param {string} type
             * @param {Function} opt_attributes
             * @return {?}
             */
            function off(type, opt_attributes) {
                if ("__bgerror" === type) {
                    return void object.off("__bgerror", opt_attributes);
                }
                var listenerArray = listeners[type];
                if (listenerArray) {
                    var index = listenerArray.indexOf(opt_attributes);
                    if (index !== -1) {
                        listenerArray.splice(index, 1);
                    }
                    if (0 === listenerArray.length) {
                        delete listeners[type];
                    }
                }
            }
            /**
             * @param {string} event
             * @return {undefined}
             */
            function s(event) {
                try {
                    switch(self.kind) {
                        case "background-message-api":
                            self.broadcast(event, {});
                            break;
                        default:
                            throw new Error("emitTabs can be used only on background");;
                    }
                } catch (error) {
                    el.emitError(error);
                }
            }
            /**
             * @param {?} res
             * @param {?} message
             * @return {undefined}
             */
            function content(res, message) {
                var eventData = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
                var target = arguments[3];
                var result = target || function() {
                };
                try {
                    if (!res) {
                        throw TypeError("emitTo can't be used without destination point");
                    }
                    switch(self.kind) {
                        case "background-message-api":
                            self.sendTo(res, message, eventData, result);
                            break;
                        default:
                            throw new Error("emitTo can be used only on background");;
                    }
                } catch (error) {
                    el.emitError(error);
                }
            }
            /**
             * @param {string} expectedHashCode
             * @param {string} cycle
             * @return {undefined}
             */
            function node(expectedHashCode, cycle) {
                try {
                    self.toFocused(expectedHashCode, cycle);
                } catch (error) {
                    el.emitError(error);
                }
            }
            /**
             * @param {string} expectedHashCode
             * @param {string} cycle
             * @param {?} attributes
             * @return {undefined}
             */
            function post(expectedHashCode, cycle, attributes) {
                try {
                    switch(self.kind) {
                        case "content-script-message-api":
                            self.broadcastBackground(expectedHashCode, cycle, attributes);
                            break;
                        default:
                            throw new Error("emitBackground can be used only in content script");;
                    }
                } catch (error) {
                    el.emitError(error);
                }
            }
            /**
             * @param {string} expectedHashCode
             * @return {?}
             */
            function getNext(expectedHashCode) {
                var cycle = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
                var selector = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 1E4;
                var a = new type["default"](function(attributes, recurring) {
                    try {
                        switch(self.kind) {
                            case "content-script-message-api":
                                self.broadcastBackground(expectedHashCode, cycle, attributes, recurring);
                                break;
                            default:
                                throw new Error("promiseBackground can be used only on client scripts");;
                        }
                    } catch (error) {
                        recurring(error);
                        el.emitError(error);
                    }
                });
                return type["default"].race([a, config.delay(selector).then(function() {
                    throw new Error("Request to bg page (" + self + ") rejected by timeout");
                })]);
            }
            var tree = require("babel-runtime/core-js/promise");
            var type = walk(tree);
            var nodes = require("babel-runtime/core-js/get-iterator");
            var result = walk(nodes);
            Object.defineProperty(el, "__esModule", {
                value : true
            });
            var _ = require("lodash");
            var parse = require("emitter");
            var config = require("./util");
            var handler = require("./dom");
            var Block = require("extension-api");
            var e = message && (message.env && message.env.SANDBOX) ? {
                message : {
                    broadcastBackground : config._f,
                    listen : config._f,
                    toFocused : config._f
                }
            } : Block.getGlobalExtensionApi();
            var self = e.message;
            var object = parse({});
            var listeners = {};
            el.emitError = _.throttle(function(attributes) {
                return object.emit("__bgerror", attributes);
            }, 1E3);
            if (config.isBg()) {
                handler.listen(document, "grammarly:offline", function() {
                    return el.emitError("proxy dead");
                }, void 0);
            }
            /** @type {function (string, Function): undefined} */
            el.one = one;
            /** @type {function (string, Function): ?} */
            el.on = Class;
            /** @type {function (string, Function): ?} */
            el.off = off;
            /** @type {function (string): undefined} */
            el.emitTabs = s;
            /** @type {function (?, ?): undefined} */
            el.emitTo = content;
            /** @type {function (string, string): undefined} */
            el.emitFocusedTab = node;
            /** @type {function (string, string, ?): undefined} */
            el.emitBackground = post;
            /** @type {function (string): ?} */
            el.promiseBackground = getNext;
        }).call(this, require("_process"));
    }, {
        "./dom" : 215,
        "./util" : 322,
        _process : 158,
        "babel-runtime/core-js/get-iterator" : 20,
        "babel-runtime/core-js/promise" : 31,
        emitter : "emitter",
        "extension-api" : 177,
        lodash : "lodash"
    }],
    279 : [function(Application, dataAndEvents, expectedHashCode) {
        /**
         * @return {?}
         */
        function isTestsMode() {
            return!!window.__extensionTestsMode;
        }
        /**
         * @return {?}
         */
        function dispatcher() {
            return self.appConfig.extensionId;
        }
        /**
         * @return {?}
         */
        function getMaxSupportedCssHeight() {
            return "firefox" === self.bundleInfo.browser;
        }
        /**
         * @return {?}
         */
        function handler() {
            return "chrome" === self.bundleInfo.browser;
        }
        /**
         * @return {?}
         */
        function Detectizr() {
            return "safari" === self.bundleInfo.browser;
        }
        /**
         * @return {?}
         */
        function dispose() {
            return "edge" === self.bundleInfo.browser;
        }
        /**
         * @return {?}
         */
        function setupScroller() {
            return self.systemInfo.os.isWindows;
        }
        /**
         * @return {?}
         */
        function fn() {
            return "bg" === self.bundleInfo.context;
        }
        /**
         * @return {?}
         */
        function init() {
            return "popup" === self.bundleInfo.context;
        }
        /**
         * @return {?}
         */
        function runTest() {
            return fn() || init();
        }
        /**
         * @return {?}
         */
        function browser() {
            return self.bundleInfo.browser;
        }
        /**
         * @return {?}
         */
        function getVersion() {
            return self.buildInfo.version;
        }
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var sandbox = Application("config");
        var self = sandbox.getGlobal();
        /** @type {function (): ?} */
        expectedHashCode.isTestsMode = isTestsMode;
        /** @type {function (): ?} */
        expectedHashCode.getUuid = dispatcher;
        /** @type {function (): ?} */
        expectedHashCode.isFF = getMaxSupportedCssHeight;
        /** @type {function (): ?} */
        expectedHashCode.isChrome = handler;
        /** @type {function (): ?} */
        expectedHashCode.isSafari = Detectizr;
        /** @type {function (): ?} */
        expectedHashCode.isEdge = dispose;
        /** @type {function (): ?} */
        expectedHashCode.isWindows = setupScroller;
        /** @type {function (): ?} */
        expectedHashCode.isBg = fn;
        /** @type {function (): ?} */
        expectedHashCode.isPopup = init;
        /** @type {function (): ?} */
        expectedHashCode.isBgOrPopup = runTest;
        /** @type {function (): ?} */
        expectedHashCode.getBrowser = browser;
        /** @type {function (): ?} */
        expectedHashCode.getVersion = getVersion;
        expectedHashCode.ENV = self.bundleInfo.env;
        expectedHashCode.URLS = self.appConfig.url;
        expectedHashCode.appName = self.appConfig.felog.appName;
        expectedHashCode.gnarAppName = self.appConfig.gnar.appName;
        expectedHashCode.GRAMMARLY_DOMAIN = self.appConfig.url.grammarlyDomain;
    }, {
        config : 169
    }],
    280 : [function(require, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} value
         * @return {?}
         */
        function $(value) {
            return value && value.__esModule ? value : {
                "default" : value
            };
        }
        var nodes = require("babel-runtime/core-js/object/keys");
        var result = $(nodes);
        var one = require("babel-runtime/core-js/object/get-prototype-of");
        var column = $(one);
        var path = require("babel-runtime/helpers/classCallCheck");
        var type = $(path);
        var dom = require("babel-runtime/helpers/createClass");
        var h = $(dom);
        var header = require("babel-runtime/helpers/possibleConstructorReturn");
        var opts = $(header);
        var selector = require("babel-runtime/helpers/inherits");
        var elem = $(selector);
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var lang = require("lib/util");
        var request = require("./defaults");
        var module = require("lib/location");
        var Block = require("./config-loader");
        var Config = function(deepDataAndEvents) {
            /**
             * @param {string} cycle
             * @return {?}
             */
            function value(cycle) {
                (0, type["default"])(this, value);
                var config = (0, opts["default"])(this, (value.__proto__ || (0, column["default"])(value)).call(this, cycle));
                return config.invalidate = function() {
                    return config.load();
                }, config;
            }
            return(0, elem["default"])(value, deepDataAndEvents), (0, h["default"])(value, [{
                key : "getByPage",
                /**
                 * @param {string} expectedHashCode
                 * @return {?}
                 */
                value : function(expectedHashCode) {
                    var nType = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : module.getUrl();
                    if (expectedHashCode) {
                        var helperName = (0, result["default"])(expectedHashCode).find(function(expected) {
                            return(new RegExp(expected)).test(nType);
                        });
                        return helperName ? expectedHashCode[helperName] : void 0;
                    }
                }
            }, {
                key : "get",
                /**
                 * @param {string} expectedHashCode
                 * @param {string} type
                 * @return {?}
                 */
                value : function(expectedHashCode, type) {
                    var page = this.config.pageConfig[expectedHashCode] || (this.config.subdomains.find(function(s) {
                        return(new RegExp("\\." + lang.escapeRegExp(s.domain) + "$")).test(expectedHashCode);
                    }) || this.config.partials.find(function(res) {
                        return expectedHashCode.includes(res.domain);
                    }));
                    if (page && page.enabled === false) {
                        return page;
                    }
                    var opt = this.getByPage(page && page.pages, type);
                    var options = opt || (page || {});
                    return options.enabled = options.enabled !== false, options;
                }
            }, {
                key : "toReload",
                /**
                 * @param {string} expectedHashCode
                 * @return {?}
                 */
                value : function(expectedHashCode) {
                    return 0 === expectedHashCode.indexOf("http") && request.SITES_TO_RELOAD.some(function(mod) {
                        return expectedHashCode.includes(mod);
                    });
                }
            }]), value;
        }(Block.ConfigLoader);
        expectedHashCode.Config = Config;
    }, {
        "./config-loader" : 281,
        "./defaults" : 283,
        "babel-runtime/core-js/object/get-prototype-of" : 28,
        "babel-runtime/core-js/object/keys" : 29,
        "babel-runtime/helpers/classCallCheck" : 34,
        "babel-runtime/helpers/createClass" : 35,
        "babel-runtime/helpers/inherits" : 38,
        "babel-runtime/helpers/possibleConstructorReturn" : 39,
        "lib/location" : 277,
        "lib/util" : 322
    }],
    281 : [function(require, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} type
         * @return {?}
         */
        function create(type) {
            return type && type.__esModule ? type : {
                "default" : type
            };
        }
        var html = require("babel-runtime/regenerator");
        var m = create(html);
        var data = require("babel-runtime/helpers/classCallCheck");
        var conf = create(data);
        var type = require("babel-runtime/helpers/createClass");
        var socket = create(type);
        var selector = require("babel-runtime/core-js/promise");
        var elem = create(selector);
        /**
         * @param {string} expectedHashCode
         * @param {Array} opt_attributes
         * @param {(Element|string)} expectedNumberOfNonCommentArgs
         * @param {Text} fn
         * @return {?}
         */
        var setup = function(expectedHashCode, opt_attributes, expectedNumberOfNonCommentArgs, fn) {
            return new (expectedNumberOfNonCommentArgs || (expectedNumberOfNonCommentArgs = elem["default"]))(function(success, done) {
                /**
                 * @param {string} expectedHashCode
                 * @return {undefined}
                 */
                function handler(expectedHashCode) {
                    try {
                        next(fn.next(expectedHashCode));
                    } catch (err) {
                        done(err);
                    }
                }
                /**
                 * @param {?} data
                 * @return {undefined}
                 */
                function loop(data) {
                    try {
                        next(fn["throw"](data));
                    } catch (err) {
                        done(err);
                    }
                }
                /**
                 * @param {Object} event
                 * @return {undefined}
                 */
                function next(event) {
                    if (event.done) {
                        success(event.value);
                    } else {
                        (new expectedNumberOfNonCommentArgs(function(f) {
                            f(event.value);
                        })).then(handler, loop);
                    }
                }
                next((fn = fn.apply(expectedHashCode, opt_attributes || [])).next());
            });
        };
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var db = require("./localforage");
        var collection = require("lib/request");
        var nodes = require("lib/config");
        var common = require("lib/tracking");
        var Block = require("./meta");
        var i = require("./utils");
        var helper = require("./decorator");
        var Backbone = require("lib/profiler");
        /** @type {number} */
        var timedout = 6E4;
        /** @type {string} */
        var str = "Config missed";
        /** @type {string} */
        var msg = "Config malformed";
        var ConfigLoader = function() {
            /**
             * @param {?} elem
             * @return {undefined}
             */
            function restoreScript(elem) {
                (0, conf["default"])(this, restoreScript);
                this._prefs = elem;
            }
            return(0, socket["default"])(restoreScript, [{
                key : "init",
                /**
                 * @return {?}
                 */
                value : function() {
                    return setup(this, void 0, void 0, m["default"].mark(function end() {
                        var config;
                        return m["default"].wrap(function(self) {
                            for (;;) {
                                switch(self.prev = self.next) {
                                    case 0:
                                        return Backbone.Profiler.start("pageConfig_init"), config = void 0, self.next = 4, this.isSkipConfig();
                                    case 4:
                                        if (!self.sent) {
                                            /** @type {number} */
                                            self.next = 8;
                                            break;
                                        }
                                        console.warn("Config: use default config in DEBUG mode (skipConfig=true)");
                                        /** @type {number} */
                                        self.next = 11;
                                        break;
                                    case 8:
                                        return self.next = 10, this.loadFromStorage();
                                    case 10:
                                        config = self.sent;
                                    case 11:
                                        return this.config = config ? config : {}, self.next = 14, (new Block.Meta).load();
                                    case 14:
                                        return this.meta = self.sent, Backbone.Profiler.stop("pageConfig_init"), self.abrupt("return", this);
                                    case 17:
                                        ;
                                    case "end":
                                        return self.stop();
                                }
                            }
                        }, end, this);
                    }));
                }
            }, {
                key : "isSkipConfig",
                /**
                 * @return {?}
                 */
                value : function() {
                    return setup(this, void 0, void 0, m["default"].mark(function end() {
                        return m["default"].wrap(function(stream) {
                            for (;;) {
                                switch(stream.prev = stream.next) {
                                    case 0:
                                        if (stream.t0 = false, !stream.t0) {
                                            /** @type {number} */
                                            stream.next = 5;
                                            break;
                                        }
                                        return stream.next = 4, this._prefs.get("skipConfig");
                                    case 4:
                                        stream.t0 = stream.sent;
                                    case 5:
                                        return stream.abrupt("return", stream.t0);
                                    case 6:
                                        ;
                                    case "end":
                                        return stream.stop();
                                }
                            }
                        }, end, this);
                    }));
                }
            }, {
                key : "load",
                /**
                 * @return {?}
                 */
                value : function() {
                    return setup(this, void 0, void 0, m["default"].mark(function start() {
                        var result;
                        var n;
                        var i;
                        var sec;
                        return m["default"].wrap(function(current) {
                            for (;;) {
                                switch(current.prev = current.next) {
                                    case 0:
                                        if (result = this.meta.config, n = result.date, i = result.interval, !(n + i > Date.now())) {
                                            /** @type {number} */
                                            current.next = 5;
                                            break;
                                        }
                                        return sec = (n + i - Date.now()) / 1E3 / 60, console.info("Config: next update in " + sec.toFixed(2) + " m"), current.abrupt("return");
                                    case 5:
                                        return console.info("Config: going to update config from CDN..."), current.abrupt("return", this.updateFromCDN());
                                    case 7:
                                        ;
                                    case "end":
                                        return current.stop();
                                }
                            }
                        }, start, this);
                    }));
                }
            }, {
                key : "updateFromCDN",
                /**
                 * @return {?}
                 */
                value : function() {
                    return setup(this, void 0, void 0, m["default"].mark(function next() {
                        var cycle;
                        var expectedHashCode;
                        return m["default"].wrap(function(self) {
                            for (;;) {
                                switch(self.prev = self.next) {
                                    case 0:
                                        return cycle = void 0, self.prev = 1, self.next = 4, collection.fetch(nodes.URLS.pageConfigUrl, {
                                            timeout : timedout
                                        });
                                    case 4:
                                        if (cycle = self.sent, i.isValid(cycle)) {
                                            /** @type {number} */
                                            self.next = 7;
                                            break;
                                        }
                                        throw new Error(msg);;
                                    case 7:
                                        this.config = cycle;
                                        this.save(cycle);
                                        /** @type {number} */
                                        self.next = 17;
                                        break;
                                    case 11:
                                        /** @type {number} */
                                        self.prev = 11;
                                        self.t0 = self["catch"](1);
                                        common.logger.pageConfigCDNError(self.t0.message);
                                        /** @type {string} */
                                        expectedHashCode = "Config: can't get valid config - " + self.t0.message;
                                        console.warn(expectedHashCode, cycle);
                                        this.saveOnError(expectedHashCode);
                                    case 17:
                                        ;
                                    case "end":
                                        return self.stop();
                                }
                            }
                        }, next, this, [[1, 11]]);
                    }));
                }
            }, {
                key : "loadFromStorage",
                /**
                 * @return {?}
                 */
                value : function() {
                    return setup(this, void 0, void 0, m["default"].mark(function next() {
                        var attributes;
                        return m["default"].wrap(function(self) {
                            for (;;) {
                                switch(self.prev = self.next) {
                                    case 0:
                                        return self.prev = 0, self.next = 3, db.localforage.getItem("config");
                                    case 3:
                                        if (attributes = self.sent) {
                                            /** @type {number} */
                                            self.next = 6;
                                            break;
                                        }
                                        throw new Error(str);;
                                    case 6:
                                        if (i.isValid(attributes)) {
                                            /** @type {number} */
                                            self.next = 8;
                                            break;
                                        }
                                        throw new Error(msg);;
                                    case 8:
                                        return console.info("Config: loaded from local storage successfully"), self.abrupt("return", attributes);
                                    case 12:
                                        return self.prev = 12, self.t0 = self["catch"](0), str === self.t0.message || common.logger.pageConfigLocalStorageError(self.t0.message, self.t0.name), console.warn("Config: cannot get valid config from storage: " + self.t0), self.abrupt("return", void 0);
                                    case 17:
                                        ;
                                    case "end":
                                        return self.stop();
                                }
                            }
                        }, next, this, [[0, 12]]);
                    }));
                }
            }, {
                key : "save",
                /**
                 * @param {string} expectedHashCode
                 * @return {undefined}
                 */
                value : function(expectedHashCode) {
                    var interval = expectedHashCode.interval;
                    var protocolVersion = expectedHashCode.protocolVersion;
                    var ver = expectedHashCode.version;
                    db.localforage.setItem("config", expectedHashCode);
                    this.fireVersionUpdate(ver, this.meta.config.version);
                    this.meta.set({
                        date : this.getCurrentTimestamp(),
                        status : "success",
                        interval : interval,
                        protocolVersion : protocolVersion,
                        version : ver
                    });
                    console.info("Config: new config saved to local storage successfully:", expectedHashCode.version, expectedHashCode);
                }
            }, {
                key : "saveOnError",
                /**
                 * @param {string} expectedHashCode
                 * @return {undefined}
                 */
                value : function(expectedHashCode) {
                    var options = this.meta.config;
                    var interval = options.interval;
                    var protocolVersion = options.protocolVersion;
                    var version = options.version;
                    this.meta.set({
                        date : this.getCurrentTimestamp(),
                        status : "failed",
                        interval : interval,
                        protocolVersion : protocolVersion,
                        version : version,
                        info : expectedHashCode
                    });
                }
            }, {
                key : "fireVersionUpdate",
                /**
                 * @param {string} expectedHashCode
                 * @param {string} type
                 * @return {undefined}
                 */
                value : function(expectedHashCode, type) {
                    if (expectedHashCode) {
                        if (type !== expectedHashCode) {
                            common.logger.pageConfigUpdated(type, expectedHashCode);
                        }
                    }
                }
            }, {
                key : "getCurrentTimestamp",
                /**
                 * @return {?}
                 */
                value : function() {
                    return Date.now();
                }
            }, {
                key : "config",
                /**
                 * @param {string} expectedHashCode
                 * @return {undefined}
                 */
                set : function(expectedHashCode) {
                    expectedHashCode = expectedHashCode || {};
                    this._config = helper.decorateConfig(expectedHashCode);
                },
                /**
                 * @return {?}
                 */
                get : function() {
                    return this._config;
                }
            }]), restoreScript;
        }();
        expectedHashCode.ConfigLoader = ConfigLoader;
    }, {
        "./decorator" : 282,
        "./localforage" : 285,
        "./meta" : 286,
        "./utils" : 287,
        "babel-runtime/core-js/promise" : 31,
        "babel-runtime/helpers/classCallCheck" : 34,
        "babel-runtime/helpers/createClass" : 35,
        "babel-runtime/regenerator" : 43,
        "lib/config" : 211,
        "lib/profiler" : 290,
        "lib/request" : 291,
        "lib/tracking" : 307
    }],
    282 : [function(require, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} value
         * @return {?}
         */
        function $(value) {
            return value && value.__esModule ? value : {
                "default" : value
            };
        }
        /**
         * @param {string} set
         * @return {?}
         */
        function data(set) {
            var all = jQuery.merge({
                pageConfig : {}
            }, set);
            return all.pageConfig || (all.pageConfig = {}), all;
        }
        /**
         * @param {string} element
         * @return {?}
         */
        function decorate(element) {
            return input.decorate(element);
        }
        var nodes = require("babel-runtime/helpers/defineProperty");
        var result = $(nodes);
        var path = require("babel-runtime/core-js/object/keys");
        var type = $(path);
        var selector = require("babel-runtime/core-js/object/assign");
        var elem = $(selector);
        var one = require("babel-runtime/helpers/classCallCheck");
        var column = $(one);
        var header = require("babel-runtime/helpers/createClass");
        var opts = $(header);
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var module = require("../config");
        var Block = require("./defaults");
        var assert = require("../util");
        var jQuery = require("lodash");
        /** @type {function (string): ?} */
        expectedHashCode.deepCopyWithDefault = data;
        var input = function() {
            /**
             * @return {undefined}
             */
            function onTimeout() {
                (0, column["default"])(this, onTimeout);
            }
            return(0, opts["default"])(onTimeout, null, [{
                key : "decorate",
                /**
                 * @param {string} expectedHashCode
                 * @return {?}
                 */
                value : function(expectedHashCode) {
                    return expectedHashCode = expectedHashCode || {}, expectedHashCode = this.filterByVersion(expectedHashCode), expectedHashCode = this.withDefault(expectedHashCode), expectedHashCode = this.parseBooleans(expectedHashCode), expectedHashCode = this.parseBrowserValues(expectedHashCode), expectedHashCode = this.filterInvalidPageRegexp(expectedHashCode), expectedHashCode = this.collectSubdomains(expectedHashCode), expectedHashCode = this.collectPartials(expectedHashCode);
                }
            }, {
                key : "withDefault",
                /**
                 * @param {string} expectedHashCode
                 * @return {?}
                 */
                value : function(expectedHashCode) {
                    expectedHashCode = data(expectedHashCode);
                    var ret = Block.PAGE_CONFIG && Block.PAGE_CONFIG.pageConfig || {};
                    if (!Block.OVERRIDE_PAGE_CONFIG) {
                        ({});
                    }
                    return expectedHashCode.pageConfig = jQuery.merge({}, ret, expectedHashCode.pageConfig), expectedHashCode;
                }
            }, {
                key : "filterByVersion",
                /**
                 * @param {string} expectedHashCode
                 * @return {?}
                 */
                value : function(expectedHashCode) {
                    var gotErr = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : module.getVersion();
                    expectedHashCode = data(expectedHashCode);
                    var resultItems = expectedHashCode.pageConfig;
                    return expectedHashCode.pageConfig = (0, type["default"])(resultItems).filter(function(i) {
                        var result = resultItems[i];
                        var p = result.version;
                        return!p || ("*" === p || 1 !== assert.versionComparator(gotErr, p));
                    }).reduce(function(deepDataAndEvents, $conditional) {
                        return(0, elem["default"])({}, deepDataAndEvents, (0, result["default"])({}, $conditional, expectedHashCode.pageConfig[$conditional]));
                    }, {}), expectedHashCode;
                }
            }, {
                key : "parseBooleans",
                /**
                 * @param {string} expectedHashCode
                 * @return {?}
                 */
                value : function(expectedHashCode) {
                    /**
                     * @param {?} value
                     * @return {?}
                     */
                    function render(value) {
                        return!(value === false || "false" === value);
                    }
                    /**
                     * @param {?} data
                     * @return {?}
                     */
                    function template(data) {
                        return!!data && render(data);
                    }
                    expectedHashCode = data(expectedHashCode);
                    var index = expectedHashCode.pageConfig;
                    return(0, type["default"])(index).forEach(function(id) {
                        if (!index[id]) {
                            index[id] = {};
                        }
                        var options = index[id];
                        options.enabled = render(options.enabled);
                        options.matchInclusions = template(options.matchInclusions);
                        options.matchSubdomains = template(options.matchSubdomains);
                        if (options.pages) {
                            (0, type["default"])(options.pages).forEach(function(i) {
                                options.pages[i].enabled = render(options.pages[i].enabled);
                            });
                        }
                    }), expectedHashCode;
                }
            }, {
                key : "parseBrowserValues",
                /**
                 * @param {string} expectedHashCode
                 * @return {?}
                 */
                value : function(expectedHashCode) {
                    var core_rnotwhite = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : assert.getBrowser();
                    expectedHashCode = data(expectedHashCode);
                    var commands = expectedHashCode.pageConfig;
                    return(0, type["default"])(commands).map(function(name) {
                        var options = commands[name] && commands[name].disabledBrowsers;
                        if (options) {
                            if (options.includes(core_rnotwhite)) {
                                /** @type {boolean} */
                                commands[name].enabled = false;
                            }
                        }
                    }), expectedHashCode;
                }
            }, {
                key : "filterInvalidPageRegexp",
                /**
                 * @param {string} expectedHashCode
                 * @return {?}
                 */
                value : function(expectedHashCode) {
                    expectedHashCode = data(expectedHashCode);
                    var scripts = expectedHashCode.pageConfig;
                    return(0, type["default"])(scripts).forEach(function(path) {
                        var content = scripts[path];
                        if (content.pages) {
                            content.pages = (0, type["default"])(content.pages).filter(function(punctuation) {
                                try {
                                    return new RegExp(punctuation);
                                } catch (t) {
                                    return false;
                                }
                            }).reduce(function(deepDataAndEvents, page) {
                                return(0, elem["default"])({}, deepDataAndEvents, (0, result["default"])({}, page, content.pages[page]));
                            }, {});
                        }
                    }), expectedHashCode;
                }
            }, {
                key : "collectSubdomains",
                /**
                 * @param {string} expectedHashCode
                 * @return {?}
                 */
                value : function(expectedHashCode) {
                    expectedHashCode = data(expectedHashCode);
                    var matches = expectedHashCode.pageConfig;
                    /** @type {Array} */
                    expectedHashCode.subdomains = [];
                    try {
                        expectedHashCode.subdomains = (0, type["default"])(matches).filter(function(sel) {
                            return matches[sel].matchSubdomains;
                        }).map(function(sel) {
                            return(0, elem["default"])({
                                domain : sel
                            }, matches[sel]);
                        });
                    } catch (n) {
                        console.warn("Cannot collect subdomains from config");
                    }
                    return expectedHashCode;
                }
            }, {
                key : "collectPartials",
                /**
                 * @param {string} expectedHashCode
                 * @return {?}
                 */
                value : function(expectedHashCode) {
                    expectedHashCode = data(expectedHashCode);
                    var matches = expectedHashCode.pageConfig;
                    /** @type {Array} */
                    expectedHashCode.partials = [];
                    try {
                        expectedHashCode.partials = (0, type["default"])(matches).filter(function(sel) {
                            return matches[sel].matchInclusions;
                        }).map(function(sel) {
                            return(0, elem["default"])({
                                domain : sel
                            }, matches[sel]);
                        });
                    } catch (n) {
                        console.warn("Cannot collect partials from config");
                    }
                    return expectedHashCode;
                }
            }]), onTimeout;
        }();
        expectedHashCode.RawConfigDecorator = input;
        /** @type {function (string): ?} */
        expectedHashCode.decorateConfig = decorate;
    }, {
        "../config" : 211,
        "../util" : 322,
        "./defaults" : 283,
        "babel-runtime/core-js/object/assign" : 24,
        "babel-runtime/core-js/object/keys" : 29,
        "babel-runtime/helpers/classCallCheck" : 34,
        "babel-runtime/helpers/createClass" : 35,
        "babel-runtime/helpers/defineProperty" : 36,
        lodash : "lodash"
    }],
    283 : [function(require, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} type
         * @return {?}
         */
        function create(type) {
            return type && type.__esModule ? type : {
                "default" : type
            };
        }
        var tpl;
        var type = require("babel-runtime/helpers/defineProperty");
        var socket = create(type);
        var selector = require("babel-runtime/helpers/toConsumableArray");
        var elem = create(selector);
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var util = require("lodash");
        var rep = require("lib/config");
        /** @type {string} */
        expectedHashCode.PROTOCOL_VERSION = "1.0";
        /** @type {Array} */
        expectedHashCode.SITES_TO_RELOAD = ["inbox.google.com", "mail.google.com", "yahoo.com", "mail.live.com", "facebook.com", "tumblr.com", "stackoverflow.com", "wordpress.com", "wordpress.org", "blogspot.com"];
        /** @type {Array} */
        expectedHashCode.FACEBOOK_SITES = ["facebook.com", "messenger.com", "work.fb.com", "business.facebook.com"];
        /** @type {Array} */
        expectedHashCode.HTML_GHOST_SITES = ["twitter.com"].concat((0, elem["default"])(expectedHashCode.FACEBOOK_SITES));
        expectedHashCode.CUSTOM_UNSUPPORTED_MESSAGES = {
            "drive.google.com" : {
                title : "Google Drive",
                message : 'We hope to support Google Drive apps<br/> in the future, but for now please use your</br> <a class="openGrammarly" href="' + rep.URLS.app + '">Grammarly Editor</a>.'
            },
            "docs.google.com" : {
                title : "Google Drive",
                message : 'We hope to support Google Drive apps<br/> in the future, but for now please use your</br> <a class="openGrammarly" href="' + rep.URLS.app + '">Grammarly Editor</a>.'
            },
            "chrome.google.com" : {
                title : "Web Store"
            }
        };
        /** @type {number} */
        var PAGE_CONFIG_DEFAULT_INTERVAL = 18E5;
        /** @type {number} */
        expectedHashCode.PAGE_CONFIG_DEFAULT_INTERVAL = PAGE_CONFIG_DEFAULT_INTERVAL;
        /** @type {Array} */
        expectedHashCode.PAGE_CONFIG_UPDATE_INTERVALS = [6E5, expectedHashCode.PAGE_CONFIG_DEFAULT_INTERVAL, 36E5, 108E5, 432E5, 864E5, 31536E6];
        expectedHashCode.OVERRIDE_PAGE_CONFIG = {};
        expectedHashCode.PAGE_CONFIG_INTERNAL = (tpl = {
            version : {
                enabled : false,
                servicePage : true
            },
            extensions : {
                enabled : false,
                servicePage : true
            },
            settings : {
                enabled : false,
                servicePage : true
            },
            "com.safari.grammarlyspellcheckergrammarchecker" : {
                enabled : false,
                matchInclusions : true,
                servicePage : true
            }
        }, (0, socket["default"])(tpl, "app." + rep.GRAMMARLY_DOMAIN, {
            enabled : false,
            grammarlyEditor : true
        }), (0, socket["default"])(tpl, "linkedin.com", {
            pages : {
                "/messaging" : {
                    afterReplaceEvents : ["input"]
                }
            }
        }), (0, socket["default"])(tpl, "plus.google.com", {
            afterReplaceEvents : ["keyup"],
            minFieldHeight : 0,
            minFieldWidth : 0
        }), (0, socket["default"])(tpl, "facebook.com", {
            minFieldHeight : 0,
            fields : [{
                name : "caption_text"
            }]
        }), (0, socket["default"])(tpl, "mail.google.com", {
            fields : [{
                name : "to"
            }, {
                name : "cc"
            }, {
                name : "bcc"
            }, {
                className : "vO"
            }],
            subframes : false
        }), (0, socket["default"])(tpl, "drive.google.com", {
            track : true
        }), (0, socket["default"])(tpl, "docs.google.com", {
            track : true
        }), (0, socket["default"])(tpl, "app.asana.com", {
            fields : [{
                className : "task-row-text-input"
            }]
        }), (0, socket["default"])(tpl, "tumblr.com", {
            fields : [{
                attr : ["aria-label", "Post title"]
            }, {
                attr : ["aria-label", "Type or paste a URL"]
            }]
        }), (0, socket["default"])(tpl, "chrome.google.com", {
            dontShowDisabledBadge : true
        }), (0, socket["default"])(tpl, "airbnb.com", {
            fields : [{
                attr : ["id", "question"]
            }]
        }), tpl);
        var sourceProperty = {
            "hootsuite.com" : {
                enabled : false
            },
            "chrome.google.com" : {
                enabled : false
            },
            "facebook.com" : {
                enabled : true,
                pages : {
                    ".*/notes" : {
                        enabled : false
                    }
                }
            },
            "onedrive.live.com" : {
                enabled : false
            },
            "docs.com" : {
                enabled : false
            },
            "sp.docs.com" : {
                enabled : false
            },
            "docs.google.com" : {
                enabled : false
            },
            "drive.google.com" : {
                enabled : false
            },
            "texteditor.nsspot.net" : {
                enabled : false
            },
            "jsbin.com" : {
                enabled : false
            },
            "jsfiddle.net" : {
                enabled : false
            },
            "quora.com" : {
                enabled : false
            },
            "paper.dropbox.com" : {
                enabled : false
            },
            "mail.live.com" : {
                enabled : false,
                matchInclusions : true
            },
            "imperavi.com" : {
                enabled : false
            },
            "usecanvas.com" : {
                enabled : false
            }
        };
        expectedHashCode.PAGE_CONFIG = {
            pageConfig : util.merge({}, sourceProperty, expectedHashCode.PAGE_CONFIG_INTERNAL)
        };
    }, {
        "babel-runtime/helpers/defineProperty" : 36,
        "babel-runtime/helpers/toConsumableArray" : 41,
        "lib/config" : 211,
        lodash : "lodash"
    }],
    284 : [function(require, dataAndEvents, expectedHashCode) {
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var jasmine = require("./config-base");
        var Block = require("universal/bg/prefs");
        var nodes = require("extension-api");
        var name = new Block.PrefsImpl(nodes.getGlobalExtensionApi().preferences);
        expectedHashCode.pageConfig = new jasmine.Config(name);
    }, {
        "./config-base" : 280,
        "extension-api" : 177,
        "universal/bg/prefs" : 331
    }],
    285 : [function(proceed, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} value
         * @return {?}
         */
        function lookupIterator(value) {
            return value && value.__esModule ? value : {
                "default" : value
            };
        }
        var value = proceed("babel-runtime/core-js/promise");
        var iterator = lookupIterator(value);
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        /** @type {string} */
        var errorName = "Grammarly";
        /** @type {number} */
        var CORDOVA_JS_BUILD_LABEL = 1;
        /** @type {string} */
        var publicInterfaceName = "configuration";
        var client = void 0;
        try {
            client = proceed("localforage");
            client.config({
                name : errorName,
                version : CORDOVA_JS_BUILD_LABEL,
                size : 4194304,
                storeName : publicInterfaceName
            });
        } catch (cycle) {
            console.error("Fallback to memory storage", cycle);
            var $cookies = {};
            client = {
                /**
                 * @param {string} key
                 * @return {?}
                 */
                getItem : function(key) {
                    return iterator["default"].resolve($cookies[key]);
                },
                /**
                 * @param {string} key
                 * @param {string} expectedHashCode
                 * @return {?}
                 */
                setItem : function(key, expectedHashCode) {
                    return $cookies[key] = expectedHashCode, iterator["default"].resolve(expectedHashCode);
                },
                /**
                 * @return {undefined}
                 */
                clear : function() {
                    $cookies = {};
                    iterator["default"].resolve(true);
                }
            };
        }
        expectedHashCode.localforage = client;
    }, {
        "babel-runtime/core-js/promise" : 31,
        localforage : "localforage"
    }],
    286 : [function($, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} type
         * @return {?}
         */
        function require(type) {
            return type && type.__esModule ? type : {
                "default" : type
            };
        }
        var env = $("babel-runtime/regenerator");
        var features = require(env);
        var type = $("babel-runtime/helpers/classCallCheck");
        var ret = require(type);
        var p = $("babel-runtime/helpers/createClass");
        var keys = require(p);
        var q = $("babel-runtime/core-js/promise");
        var elements = require(q);
        /**
         * @param {string} expectedHashCode
         * @param {Array} args
         * @param {(Element|string)} element
         * @param {Text} fn
         * @return {?}
         */
        var setup = function(expectedHashCode, args, element, fn) {
            return new (element || (element = elements["default"]))(function(success, done) {
                /**
                 * @param {string} expectedHashCode
                 * @return {undefined}
                 */
                function handler(expectedHashCode) {
                    try {
                        next(fn.next(expectedHashCode));
                    } catch (err) {
                        done(err);
                    }
                }
                /**
                 * @param {?} data
                 * @return {undefined}
                 */
                function loop(data) {
                    try {
                        next(fn["throw"](data));
                    } catch (err) {
                        done(err);
                    }
                }
                /**
                 * @param {Object} event
                 * @return {undefined}
                 */
                function next(event) {
                    if (event.done) {
                        success(event.value);
                    } else {
                        (new element(function(f) {
                            f(event.value);
                        })).then(handler, loop);
                    }
                }
                next((fn = fn.apply(expectedHashCode, args || [])).next());
            });
        };
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var $window = $("./localforage");
        var me = $("./utils");
        /** @type {string} */
        var storageKey = "lastConfigUpdate";
        var Meta = function() {
            /**
             * @return {undefined}
             */
            function onTimeout() {
                (0, ret["default"])(this, onTimeout);
            }
            return(0, keys["default"])(onTimeout, [{
                key : "load",
                /**
                 * @return {?}
                 */
                value : function() {
                    return setup(this, void 0, void 0, features["default"].mark(function end() {
                        var expectedHashCode;
                        return features["default"].wrap(function(stream) {
                            for (;;) {
                                switch(stream.prev = stream.next) {
                                    case 0:
                                        return stream.next = 2, $window.localforage.getItem(storageKey);
                                    case 2:
                                        return expectedHashCode = stream.sent, this.set(expectedHashCode), stream.abrupt("return", this);
                                    case 5:
                                        ;
                                    case "end":
                                        return stream.stop();
                                }
                            }
                        }, end, this);
                    }));
                }
            }, {
                key : "set",
                /**
                 * @param {string} expectedHashCode
                 * @return {?}
                 */
                value : function(expectedHashCode) {
                    var self = expectedHashCode || {};
                    var protocolVersion = self.protocolVersion;
                    var v = self.version;
                    var status = self.status;
                    var info = self.info;
                    var d = self.date;
                    var i = self.interval;
                    return this._meta = {
                        date : Number(d) || 0,
                        interval : me.getInterval(Number(i)),
                        protocolVersion : protocolVersion,
                        version : v,
                        status : status,
                        info : info
                    }, $window.localforage.setItem(storageKey, this._meta);
                }
            }, {
                key : "config",
                /**
                 * @return {?}
                 */
                get : function() {
                    return this._meta;
                }
            }]), onTimeout;
        }();
        expectedHashCode.Meta = Meta;
    }, {
        "./localforage" : 285,
        "./utils" : 287,
        "babel-runtime/core-js/promise" : 31,
        "babel-runtime/helpers/classCallCheck" : 34,
        "babel-runtime/helpers/createClass" : 35,
        "babel-runtime/regenerator" : 43
    }],
    287 : [function(getName, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} name
         * @return {?}
         */
        function ondata(name) {
            return name && name.__esModule ? name : {
                "default" : name
            };
        }
        /**
         * @param {Function} type
         * @return {?}
         */
        function isValid(type) {
            if (type && (type.pageConfig && ((0, quoteNeeded["default"])(type).length && ((0, quoteNeeded["default"])(type.pageConfig).length && (!type.protocolVersion || type.protocolVersion === obj.PROTOCOL_VERSION))))) {
                return true;
            }
        }
        /**
         * @param {number} until
         * @return {?}
         */
        function dir(until) {
            return obj.PAGE_CONFIG_UPDATE_INTERVALS.includes(until) ? until : obj.PAGE_CONFIG_DEFAULT_INTERVAL;
        }
        var name = getName("babel-runtime/core-js/object/keys");
        var quoteNeeded = ondata(name);
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var obj = getName("./defaults");
        /** @type {function (Function): ?} */
        expectedHashCode.isValid = isValid;
        /** @type {function (number): ?} */
        expectedHashCode.getInterval = dir;
    }, {
        "./defaults" : 283,
        "babel-runtime/core-js/object/keys" : 29
    }],
    288 : [function(require, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} value
         * @return {?}
         */
        function parseInt(value) {
            return value && value.__esModule ? value : {
                "default" : value
            };
        }
        /**
         * @param {?} parent
         * @return {?}
         */
        function promote(parent) {
            var isGameReady = assert.isDraftJsField(parent);
            var isGameOver = Block.isFacebookSite();
            return!isGameReady || (isGameOver || (draftjs.draftjs || (draftjs.draftjs = true))), !isGameReady || isGameOver;
        }
        /**
         * @param {Object} opts
         * @return {?}
         */
        function init(opts) {
            /**
             * @return {undefined}
             */
            function observe() {
                /** @type {boolean} */
                he = true;
                /** @type {MutationObserver} */
                observer = new MutationObserver(setup);
                observer.observe(doc.body, {
                    childList : true,
                    subtree : true
                });
                config.interval(complete, val);
            }
            /**
             * @param {Object} obj
             * @return {?}
             */
            function draw(obj) {
                /**
                 * @param {string} elem
                 * @return {?}
                 */
                function transform(elem) {
                    return selector.indexOf(elem) !== -1 && Boolean(matched.push(elem));
                }
                var matched = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : [];
                var selector = _.flatten(_.transform(result, function(matchIndexes, fix) {
                    return matchIndexes.push(fix);
                }, []));
                if (transform(obj) || !obj.children) {
                    return matched;
                }
                /** @type {number} */
                var i = 0;
                for (;i < obj.children.length;i++) {
                    draw(obj.children[i], matched);
                }
                return matched;
            }
            /**
             * @param {Array} namespaces
             * @return {undefined}
             */
            function setup(namespaces) {
                var expectedHashCode;
                var newArgs;
                (expectedHashCode = []).concat.apply(expectedHashCode, (0, h["default"])((newArgs = []).concat.apply(newArgs, (0, h["default"])(namespaces.map(function(original) {
                    var button = original.removedNodes;
                    return[].concat((0, h["default"])((0, row["default"])(button))).map(function(walkers) {
                        return draw(walkers);
                    });
                }))))).forEach(remove);
            }
            /**
             * @return {undefined}
             */
            function stop() {
                if (he) {
                    config.cancelInterval(complete);
                    observer.disconnect();
                    /** @type {boolean} */
                    he = false;
                }
            }
            /**
             * @return {?}
             */
            function split() {
                return[].concat((0, h["default"])(result)).filter(function(expectedHashCode) {
                    return predicate(expectedHashCode) || !expectedHashCode.offsetHeight;
                });
            }
            /**
             * @return {undefined}
             */
            function complete() {
                split().forEach(remove);
                var attributes = close();
                if (!notify(attributes)) {
                    object.emit("add", attributes);
                }
            }
            /**
             * @return {undefined}
             */
            function init() {
                _.each(result, function(xs) {
                    return xs.forEach(listener);
                });
                result = filter();
                object.emit("add", close());
                observe();
            }
            /**
             * @param {Object} attributes
             * @return {undefined}
             */
            function remove(attributes) {
                if (a.has(attributes)) {
                    a.get(attributes).off();
                    a["delete"](attributes);
                }
                ["textareas", "contenteditables", "iframes", "htmlghosts"].forEach(function(idx) {
                    var fromIndex = result[idx].indexOf(attributes);
                    if (fromIndex !== -1) {
                        result[idx].splice(fromIndex, 1);
                    }
                });
                object.emit("remove", attributes);
            }
            /**
             * @return {?}
             */
            function initialize() {
                return column["default"].wrap(function(current) {
                    for (;;) {
                        switch(current.prev = current.next) {
                            case 0:
                                return current.delegateYield(this.textareas, "t0", 1);
                            case 1:
                                return current.delegateYield(this.contenteditables, "t1", 2);
                            case 2:
                                return current.delegateYield(this.iframes, "t2", 3);
                            case 3:
                                return current.delegateYield(this.htmlghosts, "t3", 4);
                            case 4:
                                ;
                            case "end":
                                return current.stop();
                        }
                    }
                }, mixin[0], this);
            }
            /**
             * @return {?}
             */
            function filter() {
                return(0, type["default"])({
                    textareas : [],
                    contenteditables : [],
                    iframes : [],
                    htmlghosts : [],
                    usageTracking : []
                }, m["default"], initialize);
            }
            /**
             * @param {(Object|string)} arg
             * @return {undefined}
             */
            function get(arg) {
                /** @type {(Object|string)} */
                doc = arg;
                v = doc.location.hostname;
                /** @type {RegExp} */
                re = new RegExp("://" + v);
                view = doc.defaultView;
                if (options) {
                    offset = _.isNumber(options.minFieldHeight) ? options.minFieldHeight : offset;
                    endOffset = _.isNumber(options.minFieldWidth) ? options.minFieldHeight : endOffset;
                }
            }
            /**
             * @param {?} args
             * @return {?}
             */
            function notify(args) {
                return 0 === args.textareas.length && (0 === args.contenteditables.length && (0 === args.iframes.length && (0 === args.htmlghosts.length && 0 === args.usageTracking.length)));
            }
            /**
             * @param {Element} node
             * @return {?}
             */
            function render(node) {
                if (!options) {
                    return true;
                }
                if (options.enabled === false) {
                    return false;
                }
                if (!options.fields && options.enabled === true) {
                    return true;
                }
                /**
                 * @param {?} eventName
                 * @return {?}
                 */
                var render = function(eventName) {
                    var parts = (0, result["default"])(eventName, 2);
                    var attributeName = parts[0];
                    var spaceAfter = parts[1];
                    return node.getAttribute(attributeName) === spaceAfter;
                };
                return!options.fields.some(function(element) {
                    var name = element.name;
                    var id = element.id;
                    var className = element.className;
                    var expectedHashCode = element.attr;
                    return name && name === node.name || (id && id === node.id || (className && util.hasClass(node, className) || expectedHashCode && (Array.isArray(expectedHashCode) && render(expectedHashCode))));
                });
            }
            /**
             * @return {?}
             */
            function error() {
                return!doc.location || (0 === doc.location.href.indexOf("about:") || (0 === doc.location.href.indexOf("chrome:") || (!doc.body || 0 === doc.body.childNodes.length)));
            }
            /**
             * @return {?}
             */
            function docReady() {
                return "interactive" !== doc.readyState && "complete" !== doc.readyState;
            }
            /**
             * @return {?}
             */
            function resize() {
                var img = doc.documentElement.getBoundingClientRect();
                return img.height < h && view.innerHeight < h || img.width < h;
            }
            /**
             * @param {Element} node
             * @return {?}
             */
            function appendChild(node) {
                return node.clientHeight < offset || node.clientWidth < endOffset;
            }
            /**
             * @param {Element} root
             * @param {boolean} isXML
             * @param {?} results
             * @return {?}
             */
            function find(root, isXML, results) {
                var rtl = results.filter(function(dataAndEvents) {
                    return!isXML || "readonly" !== dataAndEvents;
                }).some(function(expectedHashCode) {
                    return Array.isArray(expectedHashCode) ? root.hasAttribute(expectedHashCode[0]) && root.getAttribute(expectedHashCode[0]).includes(expectedHashCode[1]) : root.hasAttribute(expectedHashCode);
                });
                return rtl || "rtl" === root.getAttribute("dir");
            }
            /**
             * @param {Element} element
             * @return {undefined}
             */
            function listener(element) {
                if ([].concat((0, h["default"])(module.grammarlyAttrs), ["spellcheck"]).forEach(function(attrib) {
                        return element.removeAttribute(attrib);
                    }), helper.isHtmlGhostSite()) {
                    var li = element.parentElement && element.parentElement.parentElement;
                    if (li) {
                        li.removeAttribute("spellcheck");
                    }
                }
            }
            /**
             * @param {Node} arg
             * @return {?}
             */
            function fn(arg) {
                return util.getParentBySel(arg, module.restrictedParentAttrs);
            }
            /**
             * @param {Element} root
             * @param {boolean} isXML
             * @return {?}
             */
            function parse(root, isXML) {
                var files = find(root, isXML, module.restrictedAttrs);
                var range = find(root, isXML, module.customFieldsRestrictedAttrs);
                var valid = promote(root) && (!files && (!range && (!appendChild(root) && (util.isVisible(root) && render(root) || util.hasClass(root, "grammDemo")))));
                var rangeContainer = range && !valid;
                return{
                    valid : valid,
                    goodForTracking : rangeContainer
                };
            }
            /**
             * @param {string} selector
             * @param {boolean} isXML
             * @return {?}
             */
            function update(selector, isXML) {
                /** @type {Array} */
                var readyList = [];
                /** @type {Array} */
                var schema = [];
                /** @type {Array} */
                var asserterNames = [].concat((0, h["default"])((0, row["default"])(doc.querySelectorAll(selector))));
                return asserterNames.forEach(function(obj) {
                    var ret = parse(obj, isXML);
                    if (ret.goodForTracking) {
                        readyList.push(obj);
                    }
                    if (ret.valid) {
                        schema.push(obj);
                    }
                }), {
                    fields : schema,
                    trackingFields : readyList
                };
            }
            /**
             * @return {?}
             */
            function success() {
                return update("textarea", false);
            }
            /**
             * @return {?}
             */
            function run() {
                if (trackingFields) {
                    return{
                        fields : [],
                        trackingFields : []
                    };
                }
                var that = update('[contenteditable]:not([contenteditable="false"]):not([data-reactid])', true);
                return that.fields = that.fields.filter(function(err) {
                    return!fn(err);
                }), that;
            }
            /**
             * @return {?}
             */
            function getElementById() {
                return trackingFields ? update(helper.getHtmlGhostSelector(), false) : {
                    fields : [],
                    trackingFields : []
                };
            }
            /**
             * @param {Element} node
             * @return {?}
             */
            function load(node) {
                if (uri.href = node.src, (0 !== node.src.indexOf("http") || re.test(node.src)) && ("about:blank" !== node.src && ((!node.src || (node.src.indexOf("javascript:") !== -1 || uri.protocol === document.location.protocol && (uri.hostname === document.location.hostname && uri.port === document.location.port))) && !util.hasClass(node, self.baseCls)))) {
                    /** @type {null} */
                    var doc = null;
                    try {
                        doc = node.contentDocument;
                    } catch (n) {
                        return;
                    }
                    if ((!doc || doc.body) && (doc && (!find(node, false, module.allRestrictedAttrs) && (!find(doc.body, false, module.allRestrictedAttrs) && render(node))))) {
                        var elem = doc.querySelector("html") || {
                            /**
                             * @param {string} name
                             * @return {?}
                             */
                            hasAttribute : function(name) {
                                return false;
                            }
                        };
                        if (("on" === doc.designMode || (doc.body.hasAttribute("contenteditable") || ("false" === doc.body.getAttribute("contenteditable") || (elem.hasAttribute("contenteditable") || "false" === elem.getAttribute("contenteditable"))))) && !appendChild(node)) {
                            return config.isFF() && ("on" === doc.designMode && (doc.designMode = "off", doc.body.setAttribute("contenteditable", "true"))), true;
                        }
                    }
                }
            }
            /**
             * @return {?}
             */
            function $() {
                return[].concat((0, h["default"])((0, row["default"])(doc.querySelectorAll("iframe")))).filter(load);
            }
            /**
             * @param {Array} regex
             * @return {undefined}
             */
            function check(regex) {
                result = _.mapValues(result, function(caseSensitive, i) {
                    return[].concat(caseSensitive, regex[i]);
                });
                /** @type {function (): ?} */
                result[m["default"]] = initialize;
            }
            /**
             * @param {Object} view
             * @param {string} name
             * @return {?}
             */
            function callback(view, name) {
                return _.difference(view[name], result[name]);
            }
            /**
             * @param {Object} value
             * @param {string} res
             * @return {?}
             */
            function clear(value, res) {
                var results = callback(value, res);
                return args.shouldRemove ? results.filter(function(expectedHashCode) {
                    return!args.shouldRemove(expectedHashCode);
                }) : results;
            }
            /**
             * @return {?}
             */
            function close() {
                var udataCur = create();
                var r20 = (0, type["default"])({
                    textareas : clear(udataCur, "textareas"),
                    contenteditables : clear(udataCur, "contenteditables"),
                    iframes : clear(udataCur, "iframes"),
                    htmlghosts : clear(udataCur, "htmlghosts"),
                    usageTracking : clear(udataCur, "usageTracking")
                }, m["default"], initialize);
                return check(r20), r20;
            }
            /**
             * @return {?}
             */
            function create() {
                var a1 = filter();
                if (error() || (docReady() || resize())) {
                    return a1;
                }
                var me = success();
                var response = run();
                var obj = getElementById();
                var emptyJ = $();
                /** @type {Array} */
                var usageTracking = [].concat((0, h["default"])(me.trackingFields), (0, h["default"])(response.trackingFields), (0, h["default"])(obj.trackingFields));
                return(0, bp["default"])({}, a1, {
                    textareas : me.fields,
                    contenteditables : response.fields,
                    iframes : emptyJ,
                    htmlghosts : obj.fields,
                    usageTracking : usageTracking
                });
            }
            var delta = opts.doc;
            var d = void 0 === delta ? document : delta;
            var options = opts.page;
            /** @type {Array.<?>} */
            var mixin = [initialize].map(column["default"].mark);
            var val = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : html;
            var a = new ret["default"];
            var trackingFields = helper.isHtmlGhostSite();
            var args = utils.pageStyles(d).getFixesForCurrentDomain();
            var predicate = args.shouldRemove || config._f;
            /** @type {number} */
            var h = 150;
            /** @type {number} */
            var offset = 35;
            /** @type {number} */
            var endOffset = 300;
            var result = filter();
            var doc = void 0;
            var view = void 0;
            var v = void 0;
            var re = void 0;
            var he = void 0;
            var observer = void 0;
            get(d);
            var object = Class({
                /** @type {function (): ?} */
                get : close,
                /** @type {function (): undefined} */
                reset : init,
                /** @type {function (Object): undefined} */
                remove : remove,
                /** @type {function (): undefined} */
                stop : stop
            });
            /** @type {function (string, Function): ?} */
            var set = object.on;
            return object.on = function(type, opt_attributes) {
                return he || observe(), set(type, opt_attributes), {
                    /**
                     * @return {undefined}
                     */
                    un : function() {
                    }
                };
            }, object;
        }
        var b = require("babel-runtime/core-js/object/assign");
        var bp = parseInt(b);
        var nodes = require("babel-runtime/helpers/slicedToArray");
        var result = parseInt(nodes);
        var text = require("babel-runtime/helpers/defineProperty");
        var type = parseInt(text);
        var str = require("babel-runtime/core-js/symbol/iterator");
        var m = parseInt(str);
        var one = require("babel-runtime/regenerator");
        var column = parseInt(one);
        var index = require("babel-runtime/core-js/array/from");
        var row = parseInt(index);
        var c = require("babel-runtime/helpers/toConsumableArray");
        var h = parseInt(c);
        var g = require("babel-runtime/core-js/map");
        var ret = parseInt(g);
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var _ = require("lodash");
        var Class = require("emitter");
        var module = require("./config");
        var utils = require("./sites");
        var helper = require("./ghost/html-ghost-locator");
        var self = require("./elements/iframe");
        var config = require("./util");
        var util = require("./dom");
        var Block = require("./location");
        var assert = require("./editor/field-type-detect");
        /** @type {Element} */
        var uri = document.createElement("a");
        /** @type {number} */
        var html = 1E3;
        var draftjs = {
            draftjs : false
        };
        /** @type {function (Object): ?} */
        expectedHashCode.PageFields = init;
    }, {
        "./config" : 211,
        "./dom" : 215,
        "./editor/field-type-detect" : 218,
        "./elements/iframe" : 225,
        "./ghost/html-ghost-locator" : 253,
        "./location" : 277,
        "./sites" : 294,
        "./util" : 322,
        "babel-runtime/core-js/array/from" : 19,
        "babel-runtime/core-js/map" : 23,
        "babel-runtime/core-js/object/assign" : 24,
        "babel-runtime/core-js/symbol/iterator" : 33,
        "babel-runtime/helpers/defineProperty" : 36,
        "babel-runtime/helpers/slicedToArray" : 40,
        "babel-runtime/helpers/toConsumableArray" : 41,
        "babel-runtime/regenerator" : 43,
        emitter : "emitter",
        lodash : "lodash"
    }],
    289 : [function(require, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} type
         * @return {?}
         */
        function Event(type) {
            return type && type.__esModule ? type : {
                "default" : type
            };
        }
        /**
         * @param {string} element
         * @param {Object} obj
         * @return {?}
         */
        function _update(element, obj) {
            return update(element, obj)[0];
        }
        /**
         * @param {Element} element
         * @param {Object} object
         * @return {?}
         */
        function update(element, object) {
            /** @type {Array} */
            var updated = [{
                top : 0,
                left : 0,
                height : 0,
                width : 0
            }];
            if (!element) {
                return updated;
            }
            var doc = element.ownerDocument;
            var body = doc.documentElement;
            var newlines = element.getClientRects();
            var scrollTop = body.scrollTop || doc.body.scrollTop;
            var scrollLeft = body.scrollLeft || doc.body.scrollLeft;
            var node = object && object.contentDocument;
            if (0 === newlines.length) {
                return updated;
            }
            var array = (0, c["default"])(newlines).map(function(box) {
                return{
                    top : box.top + scrollTop,
                    left : box.left + scrollLeft,
                    height : box.height,
                    width : box.width
                };
            });
            if (node && (node.documentElement && node.documentElement === body)) {
                var bounds = _update(object);
                array = array.map(function(offset) {
                    return(0, event["default"])({}, offset, {
                        top : offset.top + bounds.top - scrollTop,
                        left : offset.left + bounds.left - scrollLeft
                    });
                });
            }
            return array;
        }
        /**
         * @param {HTMLElement} element
         * @param {?} offset
         * @return {?}
         */
        function getOffset(element, offset) {
            var n = arguments.length > 2 && (void 0 !== arguments[2] && arguments[2]);
            var doc = element.ownerDocument;
            var div = _getDimensions(doc);
            var width = element.clientWidth;
            var height = element.clientHeight;
            var obj = {
                top : 0,
                left : 0,
                flip : false
            };
            var b = {
                top : offset.top - doc.body.scrollTop - height,
                left : offset.left - width,
                bottom : doc.body.scrollTop + div.height - offset.top - offset.height - height,
                right : doc.body.scrollLeft + div.width - offset.left - width
            };
            return b.bottom < 0 && b.bottom < b.top || n ? (obj.top = offset.top - height + 3, obj.flip = true) : (obj.top = offset.top + offset.height - 3, obj.flip = false), b.right < 0 ? obj.left = div.width - width : obj.left = offset.left, {
                rect : obj,
                delta : b,
                sourceRect : offset
            };
        }
        /**
         * @param {Element} e
         * @param {Element} event
         * @return {?}
         */
        function resize(e, event) {
            /**
             * @param {string} x
             * @param {string} y
             * @return {undefined}
             */
            function max(x, y) {
                o[x] += p[y] / 2 - b[y] / 2;
                if (s[x] > o[x]) {
                    o[x] = s[x];
                }
                if (s[x] + s[y] < o[x] + b[y]) {
                    /** @type {number} */
                    o[x] = s[x] + s[y] - b[y];
                }
            }
            var uHostName = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : "top:center";
            var s = init();
            var p = event.getBoundingClientRect();
            var b = e.getBoundingClientRect();
            var o = {
                top : 0,
                left : 0,
                flipY : false,
                flipX : false
            };
            var position = {
                top : p.top - s.top,
                left : p.left - s.left,
                bottom : -p.bottom + s.bottom,
                right : -p.right + s.right
            };
            var bottom = uHostName.split(":");
            return o.top = p.top, "center" === bottom[0] ? max("top", "height") : "top" === bottom[0] ? position.top > b.height ? o.top -= b.height : (o.top += p.height, o.flipY = true) : "bottom" === bottom[0] && (position.bottom > b.height ? o.top += p.height : (o.top -= b.height, o.flipY = true)), o.left = p.left, "center" === bottom[1] ? max("left", "width") : "left" === bottom[1] ? (o.left += p.width - b.width, position.left + p.width < b.width && (o.left = s.left)) : "right" === bottom[1] && (position.right +
                p.width < b.width && (o.left += p.width + position.right - b.width)), o;
        }
        /**
         * @return {?}
         */
        function init() {
            /** @type {Element} */
            var r = document.createElement("div");
            /** @type {string} */
            r.style.cssText = "position: fixed;top: 0;left: 0;bottom: 0;right: 0;";
            document.documentElement.insertBefore(r, document.documentElement.firstChild);
            /** @type {(ClientRect|null)} */
            var t = r.getBoundingClientRect();
            return document.documentElement.removeChild(r), t;
        }
        /**
         * @param {Document} doc
         * @return {?}
         */
        function _getDimensions(doc) {
            var offset = doc.documentElement.clientTop || (doc.body.clientTop || 0);
            var length = doc.documentElement.clientLeft || (doc.body.clientLeft || 0);
            var scrollLeft = doc.documentElement.scrollLeft || doc.body.scrollLeft;
            var destination = doc.documentElement.scrollTop || doc.body.scrollTop;
            var bodyHeight = doc.defaultView.innerHeight;
            var w = doc.defaultView.innerWidth;
            return{
                width : w,
                height : bodyHeight,
                scrollTop : destination - offset,
                scrollLeft : scrollLeft - length,
                top : offset,
                left : length
            };
        }
        /**
         * @param {Object} element
         * @param {Object} opt_attributes
         * @return {?}
         */
        function getAbsolutePosition(element, opt_attributes) {
            if (!element || element === opt_attributes) {
                return{
                    x : 0,
                    y : 0
                };
            }
            var r = {
                x : element.offsetLeft,
                y : element.offsetTop
            };
            var tmp = getAbsolutePosition(element.offsetParent, opt_attributes);
            return r.x += tmp.x, r.y += tmp.y, r;
        }
        var type = require("babel-runtime/core-js/object/assign");
        var event = Event(type);
        var complete = require("babel-runtime/core-js/array/from");
        var c = Event(complete);
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        /** @type {function (string, Object): ?} */
        expectedHashCode.getAbsRect = _update;
        /** @type {function (Element, Object): ?} */
        expectedHashCode.getAllAbsRects = update;
        /** @type {function (HTMLElement, ?): ?} */
        expectedHashCode.posToRect = getOffset;
        /** @type {function (Element, Element): ?} */
        expectedHashCode.posToEl = resize;
        /** @type {function (Object, Object): ?} */
        expectedHashCode.getPos = getAbsolutePosition;
    }, {
        "babel-runtime/core-js/array/from" : 19,
        "babel-runtime/core-js/object/assign" : 24
    }],
    290 : [function(require, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} type
         * @return {?}
         */
        function create(type) {
            return type && type.__esModule ? type : {
                "default" : type
            };
        }
        var html = require("babel-runtime/regenerator");
        var m = create(html);
        var type = require("babel-runtime/helpers/classCallCheck");
        var socket = create(type);
        var selector = require("babel-runtime/helpers/createClass");
        var elem = create(selector);
        var text = require("babel-runtime/core-js/promise");
        var item = create(text);
        /**
         * @param {string} expectedHashCode
         * @param {Array} opt_attributes
         * @param {(Element|string)} args
         * @param {Text} fn
         * @return {?}
         */
        var each = function(expectedHashCode, opt_attributes, args, fn) {
            return new (args || (args = item["default"]))(function(success, done) {
                /**
                 * @param {string} expectedHashCode
                 * @return {undefined}
                 */
                function handler(expectedHashCode) {
                    try {
                        next(fn.next(expectedHashCode));
                    } catch (err) {
                        done(err);
                    }
                }
                /**
                 * @param {?} data
                 * @return {undefined}
                 */
                function loop(data) {
                    try {
                        next(fn["throw"](data));
                    } catch (err) {
                        done(err);
                    }
                }
                /**
                 * @param {Object} event
                 * @return {undefined}
                 */
                function next(event) {
                    if (event.done) {
                        success(event.value);
                    } else {
                        (new args(function(f) {
                            f(event.value);
                        })).then(handler, loop);
                    }
                }
                next((fn = fn.apply(expectedHashCode, opt_attributes || [])).next());
            });
        };
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var element = require("lib/timers");
        var common = require("lib/tracking");
        var Profiler = function() {
            /**
             * @return {undefined}
             */
            function initialize() {
                var domWaiters = this;
                (0, socket["default"])(this, initialize);
                this.timings = {};
                /**
                 * @param {string} event
                 * @return {?}
                 */
                this.track = function(event) {
                    /** @type {number} */
                    var len = arguments.length;
                    /** @type {Array} */
                    var args = Array(len > 1 ? len - 1 : 0);
                    /** @type {number} */
                    var i = 1;
                    for (;i < len;i++) {
                        args[i - 1] = arguments[i];
                    }
                    return each(domWaiters, void 0, void 0, m["default"].mark(function end() {
                        return m["default"].wrap(function(current) {
                            for (;;) {
                                switch(current.prev = current.next) {
                                    case 0:
                                        return current.abrupt("return", this._track.apply(this, [false, event].concat(args)));
                                    case 1:
                                        ;
                                    case "end":
                                        return current.stop();
                                }
                            }
                        }, end, this);
                    }));
                };
                /**
                 * @param {?} c
                 * @return {?}
                 */
                this.trackAsync = function(c) {
                    /** @type {number} */
                    var len = arguments.length;
                    /** @type {Array} */
                    var args = Array(len > 1 ? len - 1 : 0);
                    /** @type {number} */
                    var i = 1;
                    for (;i < len;i++) {
                        args[i - 1] = arguments[i];
                    }
                    return each(domWaiters, void 0, void 0, m["default"].mark(function end() {
                        return m["default"].wrap(function(current) {
                            for (;;) {
                                switch(current.prev = current.next) {
                                    case 0:
                                        return current.abrupt("return", this._track.apply(this, [true, c].concat(args)));
                                    case 1:
                                        ;
                                    case "end":
                                        return current.stop();
                                }
                            }
                        }, end, this);
                    }));
                };
                /**
                 * @param {string} isDir
                 * @param {Function} stat
                 * @return {?}
                 */
                this._track = function(isDir, stat) {
                    /** @type {number} */
                    var len = arguments.length;
                    /** @type {Array} */
                    var cycle = Array(len > 2 ? len - 2 : 0);
                    /** @type {number} */
                    var i = 2;
                    for (;i < len;i++) {
                        cycle[i - 2] = arguments[i];
                    }
                    return each(domWaiters, void 0, void 0, m["default"].mark(function initialize() {
                        var expectedHashCode;
                        return m["default"].wrap(function(self) {
                            for (;;) {
                                switch(self.prev = self.next) {
                                    case 0:
                                        if (expectedHashCode = stat.name + (isDir ? "__sync" : ""), element.timers.start(expectedHashCode), self.prev = 2, !isDir) {
                                            /** @type {number} */
                                            self.next = 8;
                                            break;
                                        }
                                        return self.next = 6, stat.apply(void 0, cycle);
                                    case 6:
                                        /** @type {number} */
                                        self.next = 9;
                                        break;
                                    case 8:
                                        stat.apply(void 0, cycle);
                                    case 9:
                                        /** @type {number} */
                                        self.next = 14;
                                        break;
                                    case 11:
                                        throw self.prev = 11, self.t0 = self["catch"](2), self.t0;;
                                    case 14:
                                        return self.prev = 14, this.timings[expectedHashCode] = element.timers.stop(expectedHashCode), self.finish(14);
                                    case 17:
                                        ;
                                    case "end":
                                        return self.stop();
                                }
                            }
                        }, initialize, this, [[2, 11, 14, 17]]);
                    }));
                };
            }
            return(0, elem["default"])(initialize, [{
                key : "start",
                /**
                 * @param {string} expectedHashCode
                 * @return {undefined}
                 */
                value : function(expectedHashCode) {
                    element.timers.start(expectedHashCode);
                }
            }, {
                key : "stop",
                /**
                 * @param {string} expectedHashCode
                 * @return {undefined}
                 */
                value : function(expectedHashCode) {
                    this.timings[expectedHashCode] = element.timers.stop(expectedHashCode);
                }
            }], [{
                key : "start",
                /**
                 * @param {string} expectedHashCode
                 * @return {undefined}
                 */
                value : function(expectedHashCode) {
                    element.timers.start(expectedHashCode);
                }
            }, {
                key : "stop",
                /**
                 * @param {string} expectedHashCode
                 * @return {?}
                 */
                value : function(expectedHashCode) {
                    var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 3E4;
                    var cycle = element.timers.stop(expectedHashCode);
                    return cycle > t && (console.warn("profiler_" + expectedHashCode + "_time_exceeded", cycle), "pageConfig_init" === expectedHashCode && common.logger.tooLongPageConfigInit(cycle), "updateUser" === expectedHashCode && common.logger.tooLongUserUpdateTime(cycle)), cycle;
                }
            }]), initialize;
        }();
        expectedHashCode.Profiler = Profiler;
    }, {
        "babel-runtime/core-js/promise" : 31,
        "babel-runtime/helpers/classCallCheck" : 34,
        "babel-runtime/helpers/createClass" : 35,
        "babel-runtime/regenerator" : 43,
        "lib/timers" : 301,
        "lib/tracking" : 307
    }],
    291 : [function(require, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} options
         * @return {?}
         */
        function compile(options) {
            return options && options.__esModule ? options : {
                "default" : options
            };
        }
        /**
         * @param {Object} req
         * @return {?}
         */
        function request(req) {
            if (req.data && ((req.query || "post" !== req.method) && (req.url += "?" + log(req.data))), req.data && ("post" === req.method && (!req.query && !req.body))) {
                try {
                    req.body = (0, template["default"])(req.data);
                } catch (expectedHashCode) {
                    req.body = {};
                    console.warn(expectedHashCode);
                }
                req.headers = req.headers || {};
                req.headers["Content-Type"] = req.headers["Content-Type"] || "application/json";
                delete req.data;
            }
            return req.credentials = "include", req;
        }
        /**
         * @param {?} path
         * @return {?}
         */
        function fetch(path) {
            var url = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
            return url.url = path, request(url), data.isBg() || Block.isTestsMode() ? resolve(url) : helper.promiseBackground("fetch", url).then(function(result) {
                if (_.isObject(result) && result.error) {
                    throw new Error(result.error);
                }
                return result;
            });
        }
        /**
         * @param {Object} options
         * @return {?}
         */
        function resolve(options) {
            /**
             * @param {Object} response
             * @return {?}
             */
            function next(response) {
                return response.ok ? response[options.isText ? "text" : "json"]() : response.text().then(function(reqData) {
                    throw{
                        name : "RequestError",
                        body : reqData,
                        statusCode : response.status,
                        message : response.statusText
                    };
                });
            }
            var url = options.url;
            return delete options.url, url ? p["default"].race([window.fetch(url, options).then(next).then(function(body) {
                if ("string" !== typeof body && (body && body.error)) {
                    throw new Error(body.error);
                }
                return body;
            }), data.delay(options.timeout || utf8).then(function() {
                throw new Error("Fetch request to " + url + " rejected by timeout");
            })]) : p["default"].reject(new Error("Url is not defined in fetch request"));
        }
        /**
         * @param {Object} obj
         * @return {?}
         */
        function log(obj) {
            /** @type {string} */
            var out = "";
            /**
             * @param {string} name
             * @return {undefined}
             */
            var serialize = function(name) {
                if (Array.isArray(obj[name])) {
                    if (obj[name].length) {
                        var k = obj[name].map(function(value) {
                            return name + "=" + value;
                        }).join("&");
                        out += "" + (out.length ? "&" : "") + k;
                    }
                } else {
                    out += "" + (out.length ? "&" : "") + name + "=" + encodeURIComponent(obj[name]);
                }
            };
            var i;
            for (i in obj) {
                serialize(i);
            }
            return out;
        }
        var src = require("babel-runtime/core-js/promise");
        var p = compile(src);
        var content = require("babel-runtime/core-js/json/stringify");
        var template = compile(content);
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var _ = require("lodash");
        var data = require("./util");
        var Block = require("./config");
        var helper = require("./message");
        /** @type {number} */
        var utf8 = 1E4;
        if (data.isBg()) {
            helper.on("fetch", function(unknown, done) {
                return resolve(unknown).then(done, function(err) {
                    return done({
                        error : err.message
                    });
                });
            });
        }
        /** @type {function (Object): ?} */
        expectedHashCode.transformOptions = request;
        /** @type {function (?): ?} */
        expectedHashCode.fetch = fetch;
        /** @type {function (Object): ?} */
        expectedHashCode.paramStr = log;
    }, {
        "./config" : 211,
        "./message" : 278,
        "./util" : 322,
        "babel-runtime/core-js/json/stringify" : 22,
        "babel-runtime/core-js/promise" : 31,
        lodash : "lodash"
    }],
    292 : [function(require, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} type
         * @return {?}
         */
        function Event(type) {
            return type && type.__esModule ? type : {
                "default" : type
            };
        }
        var complete = require("babel-runtime/core-js/object/assign");
        var c = Event(complete);
        var target = require("babel-runtime/core-js/symbol");
        var targets = Event(target);
        var type = require("babel-runtime/helpers/classCallCheck");
        var event = Event(type);
        var selector = require("babel-runtime/helpers/createClass");
        var elem = Event(selector);
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var dom = require("react");
        var Block = require("./position");
        var Dom = require("./dom");
        /**
         * @param {Element} el
         * @return {?}
         */
        var create = function(el) {
            var s = el.style;
            var c = el.className;
            return dom.createElement("div", {
                style : s,
                className : "g-selection-anim " + c
            });
        };
        var SelectionAnimator = function() {
            /**
             * @return {undefined}
             */
            function init() {
                var element = this;
                var doc = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : document;
                (0, event["default"])(this, init);
                this._doc = doc;
                this._id = (0, targets["default"])("SelectionAnimator");
                /** @type {string} */
                this._cls = "";
                /** @type {number} */
                this._width80 = 0;
                /** @type {number} */
                this._width20 = 0;
                /** @type {null} */
                this._component = null;
                /**
                 * @return {undefined}
                 */
                this.render = function() {
                    element._component = Dom.renderReactWithParent(dom.createElement(create, {
                        style : (0, c["default"])({}, element._style),
                        className : element._cls
                    }), element._doc.documentElement, element._id);
                };
                /**
                 * @return {undefined}
                 */
                this.remove = function() {
                    if (element._component) {
                        element._component.remove();
                        /** @type {null} */
                        element._component = null;
                    }
                };
                /**
                 * @return {undefined}
                 */
                this.complete = function() {
                    /** @type {string} */
                    element._style.WebkitTransitionDuration = "0.2s";
                    /** @type {string} */
                    element._style.MozTransitionDuration = "0.2s";
                    /** @type {string} */
                    element._style.transitionDuration = "0.2s";
                    element._style.width = element._width80 + element._width20;
                    if (element._component) {
                        element.render();
                    }
                };
            }
            return(0, elem["default"])(init, [{
                key : "animate",
                /**
                 * @param {string} expectedHashCode
                 * @return {undefined}
                 */
                value : function(expectedHashCode) {
                    var d = this;
                    var failureMessage = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "";
                    this._cls = failureMessage;
                    var pos = Block.getAbsRect(expectedHashCode);
                    this._style = {
                        top : pos.top + pos.height + 1,
                        left : pos.left,
                        width : 0,
                        height : 2
                    };
                    /** @type {number} */
                    this._width20 = Math.ceil(pos.width / 8);
                    /** @type {number} */
                    this._width80 = pos.width - this._width20;
                    setTimeout(function() {
                        d._style.width = d._width80;
                        d.render();
                    }, 10);
                    setTimeout(function() {
                        d.complete();
                    }, 500);
                    this.render();
                }
            }]), init;
        }();
        expectedHashCode.SelectionAnimator = SelectionAnimator;
    }, {
        "./dom" : 215,
        "./position" : 289,
        "babel-runtime/core-js/object/assign" : 24,
        "babel-runtime/core-js/symbol" : 32,
        "babel-runtime/helpers/classCallCheck" : 34,
        "babel-runtime/helpers/createClass" : 35,
        react : "react"
    }],
    293 : [function(require, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} value
         * @return {?}
         */
        function isPlainObject(value) {
            return value && value.__esModule ? value : {
                "default" : value
            };
        }
        /**
         * @param {Selection} selector
         * @return {?}
         */
        function jQuery(selector) {
            return selector.getRangeAt(0).getBoundingClientRect();
        }
        /**
         * @param {Object} sel
         * @param {Document} event
         * @return {?}
         */
        function filter(sel, event) {
            var node = sel.anchorNode;
            if (!node) {
                return false;
            }
            var expr = cmd.restrictedAttrs.map(function(expectedHashCode) {
                return Array.isArray(expectedHashCode) ? "[" + expectedHashCode[0] + '="' + expectedHashCode[1] + '"]' : "[" + expectedHashCode + "]";
            }).join(",");
            var activeElement = event.activeElement;
            var deep = sel.toString().trim();
            /** @type {boolean} */
            var copy = "TEXTAREA" !== node.tagName && "INPUT" !== node.tagName;
            /** @type {boolean} */
            var inst = !activeElement || "INPUT" !== activeElement.tagName && "TEXTAREA" !== activeElement.tagName;
            /** @type {boolean} */
            var n = !h.isContentEditable(node);
            /** @type {boolean} */
            var d = !h.getParentBySel(node, expr) && !h.matchesSelector(node, expr);
            /** @type {boolean} */
            var fc = !h.getParentBySel(node, "[contenteditable=true],[contenteditable=plaintext-only]") && !h.parentIsContentEditable(node);
            return!!(deep && (copy && (inst && (n && (d && fc)))));
        }
        /**
         * @param {string} str
         * @param {number} x
         * @param {number} val
         * @return {?}
         */
        function error(str, x, val) {
            if (!str) {
                return null;
            }
            var codeSegments = str.split(/[.;!?]/g);
            /** @type {number} */
            var min = 0;
            /** @type {number} */
            var max = 0;
            /** @type {number} */
            var i = 0;
            for (;i < codeSegments.length;i++) {
                if (max = min + codeSegments[i].length, x >= min && val <= max) {
                    return{
                        v : codeSegments[i],
                        s : x - min,
                        e : val - min
                    };
                }
                min = max + 1;
            }
            return null;
        }
        var selector = require("babel-runtime/helpers/classCallCheck");
        var elem = isPlainObject(selector);
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var cmd = require("./config");
        var h = require("./dom");
        /** @type {function (Object, Document): ?} */
        expectedHashCode.isValidSelection = filter;
        /**
         * @param {string} expectedHashCode
         * @param {?} var_args
         * @param {?} minutes
         * @return {undefined}
         */
        var SelectionElement = function create(expectedHashCode, var_args, minutes) {
            var self = this;
            (0, elem["default"])(this, create);
            /** @type {string} */
            this._doc = expectedHashCode;
            this._selectHandler = var_args;
            this._deselectHandler = minutes;
            /** @type {boolean} */
            this._select = false;
            /**
             * @return {?}
             */
            this.release = function() {
                return h.unlisten(self._doc, "click", self.check);
            };
            /**
             * @param {Object} item
             * @return {?}
             */
            this.check = function(item) {
                var message = item.detail;
                if (2 !== message) {
                    return void(self._select && (self._deselectHandler(), self._select = false));
                }
                /** @type {boolean} */
                self._select = true;
                var sel = self._doc.getSelection();
                if (filter(sel, self._doc)) {
                    var number = sel.anchorNode.textContent;
                    var value = sel.toString();
                    if (!value.match(/[0-9_\u00b1!@#$%^&*:"|<>?~().,:}{\u2019=']/)) {
                        var data = {
                            v : value,
                            s : 0,
                            e : value.length
                        };
                        var elem = sel.getRangeAt(0);
                        if (elem.ownerDocument = self._doc, sel.anchorNode === sel.focusNode) {
                            var start = sel.anchorOffset;
                            var s = start + value.length;
                            data = error(number, start, s);
                        }
                        if (null !== data) {
                            self._selectHandler({
                                data : {
                                    v : data.v,
                                    s : data.s,
                                    e : data.e,
                                    w : value
                                },
                                pos : jQuery(sel),
                                el : elem
                            });
                        }
                    }
                }
            };
            h.listen(expectedHashCode, "click", this.check);
        };
        /** @type {function (string, ?, ?): undefined} */
        expectedHashCode.SelectionElement = SelectionElement;
    }, {
        "./config" : 211,
        "./dom" : 215,
        "babel-runtime/helpers/classCallCheck" : 34
    }],
    294 : [function(jQuery, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} type
         * @return {?}
         */
        function String(type) {
            return type && type.__esModule ? type : {
                "default" : type
            };
        }
        /**
         * @param {Object} nodes
         * @param {Element} selector
         * @return {?}
         */
        function filtered(nodes, selector) {
            return nodes.find(function(pair) {
                return getValue(selector, pair.split(":"));
            });
        }
        /**
         * @param {Element} el
         * @param {Array} element
         * @return {?}
         */
        function getValue(el, element) {
            var cell = (0, type["default"])(element, 2);
            var name = cell[0];
            var dir = cell[1];
            var parent = el.getAttribute(name);
            return Boolean(parent && (parent === dir || parent.includes(dir) && name + ":" + dir));
        }
        /**
         * @param {Element} recurring
         * @return {?}
         */
        function readFile(recurring) {
            return recurring.dataset && recurring.dataset.testid;
        }
        /**
         * @return {?}
         */
        function initialize() {
            var doc = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : document;
            var domain = win.getDomain(doc.documentElement);
            var data = locale_data[domain];
            return{
                /**
                 * @return {undefined}
                 */
                addDomainClass : function() {
                    doc.documentElement.classList.add("gr__" + domain.replace(/\./g, "_"));
                },
                /**
                 * @return {undefined}
                 */
                customizeElements : function() {
                    if (data) {
                        result(data).each(function(obj, selector) {
                            return(0, code["default"])(doc.querySelectorAll(selector)).forEach(function(part) {
                                return result.extend(part.style || {}, obj);
                            });
                        });
                    }
                },
                /**
                 * @return {?}
                 */
                getFixesForCurrentDomain : function() {
                    var dir = data[domain];
                    if (dir) {
                        return dir;
                    }
                    var id = (0, h["default"])(data).filter(function($state) {
                        return $state.includes("*");
                    }).find(function(requestUrl) {
                        return domain.indexOf(requestUrl.replace("*", "")) > -1;
                    });
                    return id && data[id] || {};
                }
            };
        }
        var obj = jQuery("babel-runtime/core-js/object/keys");
        var h = String(obj);
        var text = jQuery("babel-runtime/core-js/array/from");
        var code = String(text);
        var html = jQuery("babel-runtime/helpers/slicedToArray");
        var type = String(html);
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var win = jQuery("./location");
        var targets = jQuery("./util");
        var result = jQuery("lodash");
        var self = jQuery("./client-script");
        var parent = jQuery("./dom");
        var locale_data = {
            "translate.google.com" : {
                "#gt-clear" : {
                    zIndex : "2"
                }
            },
            "linkedin.com" : {
                ".mentions-highlighter" : {
                    zIndex : "0"
                }
            },
            "us.nakedwines.com" : {
                ".postbutton" : {
                    display : "inline-block"
                }
            }
        };
        var lookBack = function() {
            var value = void 0;
            return function() {
                return "undefined" === typeof value && (value = !!document.querySelector("c-wiz")), value;
            };
        }();
        var data = {
            "airbnb.com" : {
                /**
                 * @param {Element} horizontalSlide
                 * @return {?}
                 */
                stopImmediatePropagationForClick : function(horizontalSlide) {
                    return horizontalSlide.classList.contains("send-message-textarea");
                }
            },
            "twitter.com" : {
                /**
                 * @param {Object} element
                 * @return {?}
                 */
                btnDiff : function(element) {
                    if ("tweet-box-dm-conversation" === element.id) {
                        return[-25, 1];
                    }
                    var node = element.parentElement && (element.parentElement.parentElement && element.parentElement.parentElement.querySelector(".EmojiPicker"));
                    return null !== node && node.offsetHeight > 0 ? [-25, 3] : element.clientHeight > 40 || "tweet-box-home-timeline" !== element.id ? [0, 0] : [-30, 0];
                },
                /**
                 * @param {Element} tile
                 * @param {Element} element
                 * @return {undefined}
                 */
                fieldRestoreInlineStyles : function(tile, element) {
                    if ("tweet-box-dm-conversation" === tile.id) {
                        if (tile.style.zIndex !== element.src["z-index"]) {
                            tile.style.zIndex = element.src["z-index"];
                            tile.style.position = element.src.position;
                            /** @type {string} */
                            tile.style.transition = "none";
                            /** @type {string} */
                            tile.style.background = "transparent";
                        }
                    }
                }
            },
            "linkedin.com" : {
                /**
                 * @param {Element} selector
                 * @return {?}
                 */
                fieldStateForDomain : function(selector) {
                    if ("IFRAME" === selector.tagName && selector.id) {
                        return selector.id.replace(/\d*\d/, "");
                    }
                    /** @type {Array} */
                    var ancestors = ["class:trans"];
                    return filtered(ancestors, selector);
                },
                /**
                 * @param {?} iSearch
                 * @param {number} v00
                 * @param {(Object|boolean)} options
                 * @return {?}
                 */
                menuPosLeft : function(iSearch, v00, options) {
                    return!targets.isSafari() || options.enabled ? v00 : v00 - 7;
                }
            },
            "*.slack.com" : {
                /**
                 * @param {number} recurring
                 * @return {?}
                 */
                forceMinimize : function(recurring) {
                    return recurring.clientHeight > 40;
                },
                /**
                 * @param {string} expectedHashCode
                 * @return {?}
                 */
                btnCustomContainer : function(expectedHashCode) {
                    return expectedHashCode;
                },
                /**
                 * @param {Object} dataAndEvents
                 * @param {Object} _element
                 * @return {?}
                 */
                btnCustomStyles : function(dataAndEvents, _element) {
                    /** @type {number} */
                    var width = _element.clientHeight < 40 ? 25 : 0;
                    return dataAndEvents ? {
                        right : 10 + width,
                        bottom : 10,
                        left : "auto",
                        top : "auto"
                    } : {
                        right : -10,
                        bottom : -2,
                        left : "auto",
                        top : "auto"
                    };
                },
                /**
                 * @param {string} expectedHashCode
                 * @return {?}
                 */
                customDefaultBg : function(expectedHashCode) {
                    return expectedHashCode.parentNode && (expectedHashCode.parentNode.parentNode && expectedHashCode.parentNode.parentNode.classList.contains("offline")) ? "rgb(253, 241, 193)" : "rgb(255, 255, 255)";
                }
            },
            "*.zendesk.com" : {
                /**
                 * @param {string} expectedHashCode
                 * @return {?}
                 */
                customDefaultBg : function(expectedHashCode) {
                    return expectedHashCode.classList.contains("ember-text-area") && (expectedHashCode.parentNode && (expectedHashCode.parentNode.parentNode && (expectedHashCode.parentNode.parentNode.parentNode && !expectedHashCode.parentNode.parentNode.parentNode.classList.contains("is-public"))) ? "#fff6d9" : "#fff") || null;
                }
            },
            "facebook.com" : {
                /**
                 * @param {Element} el
                 * @return {?}
                 */
                fieldStateForDomain : function(el) {
                    /** @type {Array} */
                    var rule = ["role:textbox", "testid:ufi_comment_composer", "testid:react-composer-root"];
                    /**
                     * @param {Element} element
                     * @param {Array} next
                     * @return {?}
                     */
                    var after = function(element, next) {
                        var timeout = (0, type["default"])(next, 2);
                        var udataCur = (timeout[0], timeout[1]);
                        return element.dataset && element.dataset.testid === udataCur ? "testid:" + udataCur : !!parent.getParentByData(element, "testid", udataCur) && "testid:" + udataCur;
                    };
                    return rule.find(function(pair) {
                        var OBJECT = pair.split(":");
                        var o = (0, type["default"])(OBJECT, 2);
                        var v = o[0];
                        var current = o[1];
                        return "testid" === v ? Boolean(after(el, [v, current])) : getValue(el, [v, current]);
                    });
                },
                /**
                 * @param {?} msg
                 * @return {?}
                 */
                ghostHeight : function(msg) {
                    /** @type {number} */
                    var t = parseInt(msg, 10);
                    return t > 0 ? t + 2 + "px" : t + "px";
                },
                /**
                 * @param {string} expectedHashCode
                 * @param {?} key
                 * @return {undefined}
                 */
                setContainerLineHeight : function(expectedHashCode, key) {
                    var input = readFile(expectedHashCode);
                    var $cookies = {
                        "14px" : "18px",
                        "24px" : "28px",
                        "30px" : "1.2em"
                    };
                    if ("status-attachment-mentions-input" === input) {
                        var field = parent.getParentByDepth.call(expectedHashCode, 0);
                        field.style.lineHeight = $cookies[key] || parseInt(key, 10) + 4 + "px";
                    }
                },
                /**
                 * @param {Element} recurring
                 * @return {?}
                 */
                removeContainerFontSize : function(recurring) {
                    return "status-attachment-mentions-input" === readFile(recurring);
                },
                /**
                 * @param {Object} attr
                 * @param {number} value
                 * @return {?}
                 */
                menuPosLeft : function(attr, value) {
                    return attr && (attr.el.name && "xhpc_message_text" === attr.el.name) ? Math.ceil(value) : value;
                },
                /**
                 * @param {number} recurring
                 * @return {?}
                 */
                forceMinimize : function(recurring) {
                    return "ufi_reply_composer" === readFile(recurring);
                },
                /**
                 * @param {string} expectedHashCode
                 * @return {?}
                 */
                getContainerTextAlign : function(expectedHashCode) {
                    var input = readFile(expectedHashCode);
                    if ("status-attachment-mentions-input" === input) {
                        var bar = parent.getParentByDepth.call(expectedHashCode, 4);
                        return bar.style.textAlign;
                    }
                },
                /**
                 * @param {string} expectedHashCode
                 * @return {?}
                 */
                btnCustomContainer : function(expectedHashCode) {
                    var input = readFile(expectedHashCode);
                    if ("ufi_comment_composer" === input || "ufi_reply_composer" === input) {
                        return expectedHashCode;
                    }
                    if ("status-attachment-mentions-input" === input) {
                        var el = parent.getParentByDepth.call(expectedHashCode, 4);
                        return el.parentNode.style.position = "relative", el;
                    }
                    if (expectedHashCode.name && "xhpc_message_text" === expectedHashCode.name) {
                        return expectedHashCode;
                    }
                    var testid = parent.getParentByData(expectedHashCode, "testid", "react-composer-root");
                    if (testid) {
                        var _this = parent.getParentByDepth.call(expectedHashCode, 3);
                        return _this.parentNode.style.position = "relative", _this;
                    }
                    return "webMessengerRecentMessages" === expectedHashCode.getAttribute("aria-controls") ? expectedHashCode : void 0;
                },
                /**
                 * @param {boolean} dataAndEvents
                 * @param {string} expectedHashCode
                 * @return {?}
                 */
                btnCustomStyles : function(dataAndEvents, expectedHashCode) {
                    /** @type {string} */
                    var w = "auto";
                    /** @type {string} */
                    var _auto_ = "auto";
                    if ("webMessengerRecentMessages" === expectedHashCode.getAttribute("aria-controls")) {
                        return dataAndEvents ? {
                            right : 10,
                            bottom : 10,
                            left : w,
                            top : _auto_
                        } : {
                            right : -5,
                            bottom : 2,
                            left : w,
                            top : _auto_
                        };
                    }
                    var input = readFile(expectedHashCode);
                    if ("ufi_comment_composer" === input) {
                        /** @type {number} */
                        var _ = 15;
                        /** @type {number} */
                        var s = -4;
                        /** @type {number} */
                        var _clockseq = -14;
                        var target = parent.getParentByDepth.call(expectedHashCode, 6).querySelector(".UFICommentAttachmentButtons");
                        /** @type {number} */
                        var offset = dataAndEvents ? 0 : -(target.clientWidth + _);
                        /** @type {number} */
                        var clockseq = dataAndEvents ? s : _clockseq;
                        return{
                            right : offset,
                            bottom : clockseq,
                            left : w,
                            top : _auto_
                        };
                    }
                    if ("ufi_reply_composer" === input || expectedHashCode.hasAttribute("aria-haspopup") && expectedHashCode.hasAttribute("aria-owns")) {
                        /** @type {number} */
                        var px = 17;
                        /** @type {number} */
                        var p = -4;
                        /** @type {number} */
                        var a = -8;
                        var surfaceElement = parent.getParentByDepth.call(expectedHashCode, 6).querySelector(".UFICommentAttachmentButtons");
                        /** @type {number} */
                        var right = dataAndEvents ? 0 : -(surfaceElement.clientWidth + px);
                        /** @type {number} */
                        var adown = dataAndEvents ? p : a;
                        return{
                            right : right,
                            bottom : adown,
                            left : w,
                            top : _auto_
                        };
                    }
                    /** @type {number} */
                    var x2 = dataAndEvents ? 10 : -8;
                    /** @type {number} */
                    var y2 = dataAndEvents ? 10 : -5;
                    var context = parent.getParentByData(expectedHashCode, "testid", "react-composer-root");
                    if (context) {
                        /** @type {number} */
                        var ex2 = 30;
                        /** @type {number} */
                        var maxX = -12;
                        /** @type {number} */
                        var ey2 = 6;
                        /** @type {number} */
                        var maxY = -3;
                        /** @type {boolean} */
                        var S = context.querySelectorAll('[aria-label="Post a sticker"], [aria-label="Insert an emoji"]').length > 0;
                        if (S) {
                            /** @type {number} */
                            x2 = dataAndEvents ? ex2 : maxX;
                            /** @type {number} */
                            y2 = dataAndEvents ? ey2 : maxY;
                        }
                    }
                    return expectedHashCode.name && ("xhpc_message_text" === expectedHashCode.name && (y2 = 50)), {
                        right : x2,
                        bottom : y2,
                        left : w,
                        top : _auto_
                    };
                }
            },
            "mail.google.com" : {
                /**
                 * @param {string} expectedHashCode
                 * @return {?}
                 */
                btnCustomContainer : function(expectedHashCode) {
                    var sel = parent.getParentByTag(expectedHashCode, "TABLE");
                    var element = sel && parent.getParentByTag(sel, "TABLE");
                    var content = element && element.querySelector('[command="Files"]');
                    return element && content ? parent.getParentByTag(content, "TABLE") : null;
                },
                /**
                 * @param {Object} dataAndEvents
                 * @return {?}
                 */
                btnCustomStyles : function(dataAndEvents) {
                    return dataAndEvents ? {
                        right : 10,
                        top : -30,
                        left : "auto"
                    } : {
                        right : -2,
                        top : -25,
                        left : "auto"
                    };
                },
                /**
                 * @param {string} expectedHashCode
                 * @return {?}
                 */
                shouldRemove : function(expectedHashCode) {
                    var table = parent.getParentByTag(expectedHashCode, "TABLE");
                    if (table) {
                        var row = parent.getParentByTag(table, "TABLE");
                        if (row) {
                            var dom = row.querySelector('[role=toolbar][aria-label="Spell Check"]');
                            return dom && dom.offsetParent;
                        }
                    }
                }
            },
            "inbox.google.com" : {
                /**
                 * @param {string} expectedHashCode
                 * @return {?}
                 */
                btnCustomContainer : function(expectedHashCode) {
                    return expectedHashCode.parentNode;
                },
                /**
                 * @param {Object} dataAndEvents
                 * @return {?}
                 */
                btnCustomStyles : function(dataAndEvents) {
                    return dataAndEvents ? {
                        right : 12,
                        top : "auto",
                        left : "auto",
                        bottom : 62
                    } : {
                        right : -5,
                        top : "auto",
                        left : "auto",
                        bottom : 60
                    };
                }
            },
            "medium.com" : {
                /**
                 * @param {Object} element
                 * @return {?}
                 */
                btnDiff : function(element) {
                    return parent.parentHasClass(element, "postArticle--full") ? [-75, 0, false] : [0, 0, false];
                }
            },
            "plus.google.com" : {
                /**
                 * @param {number} recurring
                 * @return {?}
                 */
                forceMinimize : function(recurring) {
                    return recurring.clientHeight < 30;
                },
                /**
                 * @param {string} expectedHashCode
                 * @return {?}
                 */
                btnCustomContainer : function(expectedHashCode) {
                    /**
                     * @param {Node} elem
                     * @return {?}
                     */
                    var next = function(elem) {
                        return/comment/i.test(elem.getAttribute("aria-label") || "");
                    };
                    return lookBack() && next(expectedHashCode) ? expectedHashCode.parentNode : expectedHashCode;
                },
                /**
                 * @param {Object} dataAndEvents
                 * @return {?}
                 */
                btnCustomStyles : function(dataAndEvents) {
                    /** @type {number} */
                    var x2 = lookBack() ? -12 : -18;
                    /** @type {number} */
                    var y2 = lookBack() ? -5 : -10;
                    return dataAndEvents ? {
                        right : 10,
                        bottom : 10,
                        left : "auto",
                        top : "auto"
                    } : {
                        right : x2,
                        bottom : y2,
                        left : "auto",
                        top : "auto"
                    };
                },
                /**
                 * @return {?}
                 */
                fieldParentCustomStyle : function() {
                    var oldOverflow = {
                        "padding-bottom" : "2px",
                        "overflow-x" : "hidden"
                    };
                    return lookBack() ? oldOverflow : {};
                }
            },
            "app.asana.com" : {
                /**
                 * @param {number} recurring
                 * @return {?}
                 */
                forceMinimize : function(recurring) {
                    return!!recurring.classList.contains("task-comments-input") && (!!(recurring.parentNode && (recurring.parentNode.parentNode && recurring.parentNode.parentNode.parentNode)) && !recurring.parentNode.parentNode.parentNode.classList.contains("focused"));
                }
            },
            "youtube.com" : {
                /**
                 * @param {Object} element
                 * @return {?}
                 */
                btnDiff : function(element) {
                    return parent.hasClass(element, "comment-simplebox-text") ? [15, 15] : [0, 0];
                }
            },
            "socialflow.com" : {
                /**
                 * @param {Object} bShow
                 * @return {?}
                 */
                fieldParentCustomStyle : function(bShow) {
                    return bShow ? {
                        width : "",
                        overflow : "visible"
                    } : {};
                }
            }
        };
        /** @type {function (): ?} */
        expectedHashCode.pageStyles = initialize;
        (function() {
            /**
             * @return {undefined}
             */
            function params() {
                if (window.randomize) {
                    var win = window.randomize;
                    /**
                     * @param {Event} event
                     * @return {undefined}
                     */
                    window.randomize = function(event) {
                        try {
                            if (event.data) {
                                /** @type {*} */
                                var parentWindowLocation = JSON.parse(event.data);
                                if (parentWindowLocation[0]) {
                                    if (parentWindowLocation[0].parentWindowLocation) {
                                        win(event);
                                    }
                                }
                            }
                        } catch (r) {
                        }
                    };
                }
            }
            var excludes = win.getDomain();
            if (excludes.indexOf("chase.com") > -1 || excludes.indexOf("chaseonline.com") > -1) {
                self.addScript(document, [params]);
            }
        })();
    }, {
        "./client-script" : 205,
        "./dom" : 215,
        "./location" : 277,
        "./util" : 322,
        "babel-runtime/core-js/array/from" : 19,
        "babel-runtime/core-js/object/keys" : 29,
        "babel-runtime/helpers/slicedToArray" : 40,
        lodash : "lodash"
    }],
    295 : [function(dataAndEvents, deepDataAndEvents, expectedHashCode) {
        /**
         * @param {?} err
         * @return {?}
         */
        function _error(err) {
            return{
                type : expectedHashCode.UPDATE_CONNECTION,
                data : {
                    bgNotConnected : true,
                    online : false
                },
                reason : err,
                sync : false
            };
        }
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        /** @type {string} */
        expectedHashCode.UPDATE_CONNECTION = "connection/UPDATE_CONNECTION";
        /** @type {function (?): ?} */
        expectedHashCode.bgPageDown = _error;
    }, {}],
    296 : [function(require, dataAndEvents, expectedHashCode) {
        /**
         * @param {Function} f
         * @return {?}
         */
        function operation(f) {
            var exports = assert.createMirrorStore(f, {
                bgPageDown : Block.bgPageDown
            }, response.reducer);
            var store = exports.store;
            var actions = exports.actions;
            return nodes.on("__bgerror", actions.bgPageDown), {
                store : store,
                actions : actions
            };
        }
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var nodes = require("lib/message");
        var assert = require("lib/store-mirror");
        var response = require("./reducer");
        var Block = require("./actions");
        /** @type {function (Function): ?} */
        expectedHashCode.createAndObserve = operation;
    }, {
        "./actions" : 295,
        "./reducer" : 297,
        "lib/message" : 278,
        "lib/store-mirror" : 299
    }],
    297 : [function(require, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} value
         * @return {?}
         */
        function h(value) {
            return value && value.__esModule ? value : {
                "default" : value
            };
        }
        /**
         * @return {?}
         */
        function isReady() {
            var cl = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
            var event = arguments[1];
            var type = event.type;
            var domEvent = event.data;
            switch(type) {
                case Block.UPDATE_CONNECTION:
                    return(0, elem["default"])({}, cl, {
                        connection : (0, elem["default"])({}, cl.connection, domEvent)
                    });
                default:
                    return cl;
            }
        }
        var selector = require("babel-runtime/core-js/object/assign");
        var elem = h(selector);
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var Block = require("./actions");
        /** @type {function (): ?} */
        expectedHashCode.reducer = isReady;
    }, {
        "./actions" : 295,
        "babel-runtime/core-js/object/assign" : 24
    }],
    298 : [function(require, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} type
         * @return {?}
         */
        function Event(type) {
            return type && type.__esModule ? type : {
                "default" : type
            };
        }
        /**
         * @param {Object} child
         * @param {Function} g
         * @return {?}
         */
        function subscribe(child, g) {
            /**
             * @return {undefined}
             */
            function f() {
                var item = child.getState();
                if (!_.isEmpty(item)) {
                    if (!_.isEqual(this_date_components, item)) {
                        this_date_components = item;
                        g(item);
                    }
                }
            }
            var this_date_components = void 0;
            return helper.asyncCall(f), child.subscribe(f);
        }
        var type = require("babel-runtime/helpers/defineProperty");
        var event = Event(type);
        var complete = require("babel-runtime/core-js/object/assign");
        var c = Event(complete);
        var selector = require("babel-runtime/core-js/object/keys");
        var elem = Event(selector);
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var _ = require("lodash");
        var helper = require("lib/util");
        /** @type {function (Object, Function): ?} */
        expectedHashCode.observeStore = subscribe;
        /**
         * @param {string} expectedHashCode
         * @param {?} cb
         * @return {?}
         */
        expectedHashCode.bindActions = function(expectedHashCode, cb) {
            return(0, elem["default"])(expectedHashCode).filter(function(timeoutKey) {
                return expectedHashCode[timeoutKey];
            }).reduce(function(deepDataAndEvents, method) {
                return(0, c["default"])(deepDataAndEvents, (0, event["default"])({}, method, function() {
                    var args = expectedHashCode[method].apply(expectedHashCode, arguments);
                    var sync = "undefined" === typeof args.sync || args.sync;
                    return cb((0, c["default"])({}, args, {
                        sync : sync
                    }));
                }));
            }, {});
        };
    }, {
        "babel-runtime/core-js/object/assign" : 24,
        "babel-runtime/core-js/object/keys" : 29,
        "babel-runtime/helpers/defineProperty" : 36,
        "lib/util" : 322,
        lodash : "lodash"
    }],
    299 : [function(require, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} value
         * @return {?}
         */
        function h(value) {
            return value && value.__esModule ? value : {
                "default" : value
            };
        }
        /**
         * @param {Function} g
         * @return {?}
         */
        function create(g) {
            var _params = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
            var callback = arguments[2];
            /**
             * @return {?}
             */
            var init = function() {
                var data = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : event;
                var test = arguments[1];
                var d = data.page || (data.config || {});
                var domain = d.domain;
                return test.sync && router.emitBackground("dispatch", (0, elem["default"])({}, test, {
                    domain : domain
                })), test.type === type ? (0, elem["default"])({}, data, test.data) : callback ? callback(data, test) : data;
            };
            var that = server.createStore(init, {}, server.applyMiddleware(obj));
            var actions = self.bindActions((0, elem["default"])({}, Block.pureActions, _params), that.dispatch);
            return router.on("state", function(task) {
                nodes.asyncCall(function() {
                    return that.dispatch({
                        type : type,
                        data : task
                    });
                }, 0);
            }), self.observeStore(that, g), {
                store : that,
                actions : actions
            };
        }
        var selector = require("babel-runtime/core-js/object/assign");
        var elem = h(selector);
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var flag = require("redux-logger");
        var server = require("redux");
        var router = require("lib/message");
        var Block = require("universal/bg/store");
        var self = require("./helpers");
        var nodes = require("../util");
        var obj = flag({
            level : "debug",
            /**
             * @return {?}
             */
            collapsed : function() {
                return true;
            },
            /**
             * @return {?}
             */
            predicate : function() {
                return false;
            }
        });
        /** @type {string} */
        var type = "store/SYNC";
        var event = {
            page : {},
            connection : {}
        };
        /** @type {function (Function): ?} */
        expectedHashCode.createMirrorStore = create;
    }, {
        "../util" : 322,
        "./helpers" : 298,
        "babel-runtime/core-js/object/assign" : 24,
        "lib/message" : 278,
        redux : "redux",
        "redux-logger" : "redux-logger",
        "universal/bg/store" : 341
    }],
    300 : [function($, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} value
         * @return {?}
         */
        function lookupIterator(value) {
            return value && value.__esModule ? value : {
                "default" : value
            };
        }
        /**
         * @return {undefined}
         */
        function reset() {
            /**
             * @param {string} cycle
             * @return {undefined}
             */
            function fn(cycle) {
                self.listen(document, cycle, function(elem) {
                    var parent = elem.value;
                    that.emitBackground(cycle, parent);
                });
            }
            /**
             * @param {?} cl
             * @return {?}
             */
            function stringify(cl) {
                /** @type {Array} */
                var bucket = [];
                return(0, iterator["default"])(cl, function(dataAndEvents, value) {
                    if ("object" === ("undefined" === typeof value ? "undefined" : (0, keys["default"])(value)) && null !== value) {
                        if (bucket.indexOf(value) !== -1) {
                            return;
                        }
                        bucket.push(value);
                    }
                    return value;
                });
            }
            /**
             * @return {undefined}
             */
            function cb() {
                self.emitDomEvent("console-log", stringify(emptyJ.flushLog()));
            }
            /**
             * @return {undefined}
             */
            function gl() {
                that.emitBackground("get-tracker-log", {}, function(funcToCall) {
                    return self.emitDomEvent("tracker-log", funcToCall);
                });
            }
            /**
             * @return {undefined}
             */
            function obj() {
                that.emitBackground("get-capi-log", {}, function(funcToCall) {
                    return self.emitDomEvent("capi-log", funcToCall);
                });
            }
            /**
             * @return {undefined}
             */
            function route() {
                that.emitBackground("get-extid", {}, function(funcToCall) {
                    return self.emitDomEvent("extid", funcToCall);
                });
            }
            /**
             * @return {undefined}
             */
            function reset() {
                that.emitBackground("get-localforage", {}, function(funcToCall) {
                    return self.emitDomEvent("localforage", funcToCall);
                });
            }
            /**
             * @param {Object} field
             * @return {undefined}
             */
            function attributes(field) {
                that.emitBackground("set-localforage", {
                    key : field.key,
                    value : field.value
                }, function(funcToCall) {
                    return self.emitDomEvent("localforage", funcToCall);
                });
            }
            /**
             * @param {Object} listener
             * @return {undefined}
             */
            function opt_attributes(listener) {
                var key = listener.key;
                that.emitBackground("get-pref", {
                    key : key
                }, function(x) {
                    return self.emitDomEvent("pref", {
                        key : key,
                        value : x
                    });
                });
            }
            /**
             * @param {Object} args
             * @return {undefined}
             */
            function each(args) {
                var key = args.key;
                var val = args.value;
                that.emitBackground("set-pref", {
                    key : key,
                    value : val
                });
            }
            /**
             * @return {undefined}
             */
            function F() {
                that.emitBackground("get-ff-uuid", {}, function(funcToCall) {
                    return self.emitDomEvent("ff-uuid", funcToCall);
                });
            }
            ["bg-reload", "reset", "qa-relogin", "disable-auth", "enable-auth", "disable-defs", "enable-defs", "disable-domain", "enable-domain", "uninstall", "set-popup-url", "set-premium-user", "set-fake-capi", "run-fake-capi", "disable-send-state-to-tabs", "enable-send-state-to-tabs"].forEach(fn);
            self.listen(document, "get-extid", route);
            self.listen(document, "get-ff-uuid", F);
            self.listen(document, "get-capi-log", obj);
            self.listen(document, "get-tracker-log", gl);
            self.listen(document, "get-console-log", cb);
            self.listen(document, "get-localforage", reset);
            self.listen(document, "set-localforage", attributes);
            self.listen(document, "get-pref", opt_attributes);
            self.listen(document, "set-prefs", each);
        }
        var obj = $("babel-runtime/helpers/typeof");
        var keys = lookupIterator(obj);
        var value = $("babel-runtime/core-js/json/stringify");
        var iterator = lookupIterator(value);
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var self = $("./dom");
        var that = $("./message");
        var emptyJ = $("./console");
        /** @type {function (): undefined} */
        expectedHashCode.api = reset;
    }, {
        "./console" : 212,
        "./dom" : 215,
        "./message" : 278,
        "babel-runtime/core-js/json/stringify" : 22,
        "babel-runtime/helpers/typeof" : 42
    }],
    301 : [function(dataAndEvents, deepDataAndEvents, expectedHashCode) {
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var cur = {};
        expectedHashCode.timers = {
            /**
             * @param {string} expectedHashCode
             * @return {undefined}
             */
            start : function(expectedHashCode) {
                /** @type {number} */
                cur[expectedHashCode] = Date.now();
            },
            /**
             * @param {string} expectedHashCode
             * @return {?}
             */
            stop : function(expectedHashCode) {
                var passed = this.passed(expectedHashCode);
                return delete cur[expectedHashCode], passed;
            },
            /**
             * @param {?} ontype
             * @return {?}
             */
            passed : function(ontype) {
                return ontype && cur[ontype] ? Date.now() - cur[ontype] : 0;
            }
        };
    }, {}],
    302 : [function(require, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} type
         * @return {?}
         */
        function Event(type) {
            return type && type.__esModule ? type : {
                "default" : type
            };
        }
        /**
         * @return {?}
         */
        function init() {
            var value = window.fetch.bind(window);
            var log = Block.LoggingImpl.DefaultLogAppender.createRootLogger("gnar", Block.Logging.LogLevel.INFO, new Block.LoggingImpl.GetFelogClient(defaults.URLS.newFelog, defaults.appName, defaults.getVersion(), defaults.ENV, value));
            var text = Block.TimeSeriesImpl.MetricsStorage.createRoot("gnar", defaults.URLS.newFelog, value);
            var tokenizer = new $G.BackendStorage(value, module.GNAR.url);
            var ContainerIdManager = new $G.ChromeCookieStorage(module.GNAR.url, module.GNAR.domain);
            var i = new $G.WebExtensionsCookieStorage(module.GNAR.url, module.GNAR.domain);
            var a = new $G.ContainerIdManager(d.isChrome() ? ContainerIdManager : d.isFF() ? i : tokenizer, [new $G.CookieStorage(module.GNAR.domain), new $G.LocalStorage, new $G.MemoryStorage], log.getLogger("containerId"), text.getCounter("containerId"), d.isChrome() ? 1E3 : 5E3);
            return new $G.GnarClientImpl(module.GNAR.url, defaults.gnarAppName, module.getVersion(), value, a, log, text, true);
        }
        /**
         * @return {?}
         */
        function listen() {
            return setup(this, void 0, void 0, event["default"].mark(function end() {
                return event["default"].wrap(function(current) {
                    for (;;) {
                        switch(current.prev = current.next) {
                            case 0:
                                try {
                                    config.tracker().gnar = init();
                                } catch (ex) {
                                    common.logger.gnarClientInitFail(ex && ex.message);
                                }
                                ;
                            case 1:
                                ;
                            case "end":
                                return current.stop();
                        }
                    }
                }, end, this);
            }));
        }
        /**
         * @param {?} last
         * @return {undefined}
         */
        function process(last) {
            /**
             * @param {string} data
             * @param {?} key
             * @return {undefined}
             */
            function dataAttr(data, key) {
                if (key) {
                    if (data) {
                        set(data, null);
                        set(data, key, extendedOptionsWithExpiresDate);
                    }
                }
            }
            var camelKey = last.dapi;
            var domain = url.getDomain();
            var extendedOptionsWithExpiresDate = {
                path : "/",
                domain : domain,
                expires : new Date((new Date).setFullYear((new Date).getFullYear() + 1))
            };
            dataAttr("__fngrprnt__", camelKey);
        }
        var type = require("babel-runtime/regenerator");
        var event = Event(type);
        var nodes = require("babel-runtime/core-js/promise");
        var result = Event(nodes);
        /**
         * @param {string} expectedHashCode
         * @param {Array} args
         * @param {(Element|string)} opt_attributes
         * @param {Text} fn
         * @return {?}
         */
        var setup = function(expectedHashCode, args, opt_attributes, fn) {
            return new (opt_attributes || (opt_attributes = result["default"]))(function(success, done) {
                /**
                 * @param {string} expectedHashCode
                 * @return {undefined}
                 */
                function handler(expectedHashCode) {
                    try {
                        next(fn.next(expectedHashCode));
                    } catch (err) {
                        done(err);
                    }
                }
                /**
                 * @param {?} data
                 * @return {undefined}
                 */
                function loop(data) {
                    try {
                        next(fn["throw"](data));
                    } catch (err) {
                        done(err);
                    }
                }
                /**
                 * @param {Object} event
                 * @return {undefined}
                 */
                function next(event) {
                    if (event.done) {
                        success(event.value);
                    } else {
                        (new opt_attributes(function(f) {
                            f(event.value);
                        })).then(handler, loop);
                    }
                }
                next((fn = fn.apply(expectedHashCode, args || [])).next());
            });
        };
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var set = require("cookie");
        var url = require("../location");
        var defaults = require("../config");
        var d = require("../util");
        var module = require("../config");
        var config = require("./tracker");
        var common = require("./logger");
        var $G = require("@grammarly-npm/gnarclientweb");
        var Block = require("@grammarly-npm/telemetry.ts");
        /** @type {function (): ?} */
        expectedHashCode.init = listen;
        /** @type {function (?): undefined} */
        expectedHashCode.processCookiesFromGrammarly = process;
        /**
         * @return {?}
         */
        expectedHashCode.getContainerIdOrUndefined = function() {
            return setup(void 0, void 0, void 0, event["default"].mark(function end() {
                return event["default"].wrap(function(stream) {
                    for (;;) {
                        switch(stream.prev = stream.next) {
                            case 0:
                                return stream.prev = 0, stream.next = 3, config.tracker().gnar.getContainerId();
                            case 3:
                                return stream.abrupt("return", stream.sent);
                            case 6:
                                return stream.prev = 6, stream.t0 = stream["catch"](0), stream.abrupt("return", void 0);
                            case 9:
                                ;
                            case "end":
                                return stream.stop();
                        }
                    }
                }, end, this, [[0, 6]]);
            }));
        };
    }, {
        "../config" : 211,
        "../location" : 277,
        "../util" : 322,
        "./logger" : 308,
        "./tracker" : 311,
        "@grammarly-npm/gnarclientweb" : 5,
        "@grammarly-npm/telemetry.ts" : 8,
        "babel-runtime/core-js/promise" : 31,
        "babel-runtime/regenerator" : 43,
        cookie : "cookie"
    }],
    303 : [function(require, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} type
         * @return {?}
         */
        function select(type) {
            return type && type.__esModule ? type : {
                "default" : type
            };
        }
        /**
         * @param {string} expectedHashCode
         * @return {undefined}
         */
        function show(expectedHashCode) {
            /** @type {number} */
            var len = arguments.length;
            /** @type {Array} */
            var result = Array(len > 1 ? len - 1 : 0);
            /** @type {number} */
            var i = 1;
            for (;i < len;i++) {
                result[i - 1] = arguments[i];
            }
            /**
             * @param {string} cycle
             * @return {undefined}
             */
            var fail = function(cycle) {
                console.warn("tracking call " + expectedHashCode + " failed, reason: ", cycle);
            };
            if (Block.isBg()) {
                Block.asyncCall(function() {
                    var _ref1;
                    try {
                        switch(cb(expectedHashCode, result), expectedHashCode) {
                            case options.CALL_HANDLER_ID:
                                var message = result[0];
                                /** @type {Array.<?>} */
                                var otherArgs = result.slice(1);
                                (_ref1 = options.methods)[message].apply(_ref1, (0, keys["default"])(otherArgs));
                                break;
                            default:
                                check(expectedHashCode, result);
                        }
                    } catch (cycle) {
                        fail(cycle);
                    }
                }, 20);
            } else {
                /** @type {number} */
                var quietMillis = 1E4;
                var timeout = void 0;
                /**
                 * @return {?}
                 */
                var complete = function() {
                    return clearInterval(timeout);
                };
                /**
                 * @param {string} value
                 * @return {undefined}
                 */
                var callback = function(value) {
                    complete();
                    fail(value);
                };
                /** @type {number} */
                timeout = window.setTimeout(function() {
                    return callback("timeout call through bg page");
                }, quietMillis);
                self.emitBackground("tracking-call", {
                    msg : expectedHashCode,
                    data : result
                }, complete);
            }
        }
        /**
         * @param {string} pair
         * @param {Array} r
         * @return {?}
         */
        function check(pair, r) {
            var parents = pair.split(".");
            var method = parents.pop();
            var expectedHashCode = parents.reduce(function(meta, a) {
                return a in meta ? meta[a] : {};
            }, config.tracker());
            return expectedHashCode && (method && expectedHashCode[method]) ? void expectedHashCode[method].apply(expectedHashCode, (0, keys["default"])(r)) : console.error("No method " + pair + " in tracker object");
        }
        /**
         * @param {string} msg
         * @param {Array} item
         * @return {undefined}
         */
        function cb(msg, item) {
            console.info(msg, item);
        }
        /**
         * @return {?}
         */
        function removex() {
            /** @type {Array.<?>} */
            var e = models.slice(0);
            return models.length = 0, e;
        }
        var lang = require("babel-runtime/core-js/object/assign");
        var obj = (select(lang), require("babel-runtime/helpers/toConsumableArray"));
        var keys = select(obj);
        var selector = require("babel-runtime/core-js/object/keys");
        var elem = select(selector);
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var options;
        var self = require("../message");
        var Block = require("../util");
        var config = require("./tracker");
        var object = require("./felogPixel");
        var player = require("../config");
        var entities = require("./felogClient");
        var c = require("lib/request");
        !function(n) {
            var t;
            var self = Block.isBg() ? new entities.DefaultFelogClient(player.URLS.newFelog, player.appName, player.getVersion(), player.ENV, c.fetch.bind(window)) : void 0;
            !function(exports) {
                /**
                 * @param {?} ev
                 * @param {string} funcToCall
                 * @param {string} millis
                 * @param {?} options
                 * @return {undefined}
                 */
                function setup(ev, funcToCall, millis, options) {
                    if (!self) {
                        throw Error("felogClient unavailable");
                    }
                    self.sendEvent(ev, funcToCall, millis, options)["catch"](function(dataAndEvents) {
                        return object.sendEventPixel(ev, funcToCall, millis, options, self.getContext());
                    });
                }
                /**
                 * @param {?} property
                 * @param {string} funcToCall
                 * @param {string} millis
                 * @param {?} context
                 * @return {undefined}
                 */
                function getAll(property, funcToCall, millis, context) {
                    if (!self) {
                        throw Error("felogClient unavailable");
                    }
                    self.sendUsageEvent(property, funcToCall, millis, context)["catch"](function(dataAndEvents) {
                        return object.sendEventPixel(property, funcToCall, millis);
                    });
                }
                /**
                 * @param {?} owner
                 * @return {undefined}
                 */
                function remove(owner) {
                    if (self) {
                        self.setUserId(owner);
                    }
                }
                /**
                 * @param {string} isXML
                 * @return {undefined}
                 */
                function find(isXML) {
                    if (self) {
                        self.setContainerId(isXML);
                    }
                }
                /** @type {function (?, string, string, ?): undefined} */
                exports.sendFelog = setup;
                /** @type {function (?, string, string, ?): undefined} */
                exports.sendFelogUsageEvent = getAll;
                /** @type {function (?): undefined} */
                exports.setUserId = remove;
                /** @type {function (string): undefined} */
                exports.setContainerId = find;
            }(t = n.methods || (n.methods = {}));
            /** @type {string} */
            n.CALL_HANDLER_ID = "tracking/RPC";
        }(options || (options = {}));
        expectedHashCode.callBgPage = (0, elem["default"])(options.methods).reduce(function(safe, i) {
            return safe[i] = function() {
                /** @type {number} */
                var expectedHashCode = arguments.length;
                /** @type {Array} */
                var args = Array(expectedHashCode);
                /** @type {number} */
                var $_i = 0;
                for (;$_i < expectedHashCode;$_i++) {
                    args[$_i] = arguments[$_i];
                }
                return show.apply(void 0, [options.CALL_HANDLER_ID, i].concat(args));
            }, safe;
        }, {});
        /** @type {Array} */
        var models = [];
        /** @type {function (string): undefined} */
        expectedHashCode.call = show;
        /** @type {function (): ?} */
        expectedHashCode.getLog = removex;
    }, {
        "../config" : 211,
        "../message" : 278,
        "../util" : 322,
        "./felogClient" : 305,
        "./felogPixel" : 306,
        "./tracker" : 311,
        "babel-runtime/core-js/object/assign" : 24,
        "babel-runtime/core-js/object/keys" : 29,
        "babel-runtime/helpers/toConsumableArray" : 41,
        "lib/request" : 291
    }],
    304 : [function(require, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} value
         * @return {?}
         */
        function appendModelPrefix(value) {
            return value && value.__esModule ? value : {
                "default" : value
            };
        }
        /**
         * @param {?} opt_noCache
         * @param {string} service
         * @param {?} serviceName
         * @param {string} url
         * @param {Object} target
         * @param {string} func
         * @param {string} millis
         * @param {Object} id
         * @param {Object} config
         * @return {?}
         */
        function send(opt_noCache, service, serviceName, url, target, func, millis, id, config) {
            var obj = {
                message : func,
                logger : target,
                level : goog.toFelogString(millis),
                application : opt_noCache,
                version : service,
                userId : config && config.userId,
                containerId : config && config.containerId,
                env : serviceName
            };
            return id && (obj.extra = id), url + "/log?json=" + encodeURIComponent((0, fullOtherName["default"])(obj));
        }
        /**
         * @param {string} app
         * @param {string} config
         * @param {?} allBindingsAccessor
         * @param {string} url
         * @param {Object} logger
         * @param {string} msg
         * @param {string} attributes
         * @param {?} el
         * @return {?}
         */
        function init(app, config, allBindingsAccessor, url, logger, msg, attributes, el) {
            var obj = {
                message : msg,
                logger : logger,
                level : goog.toFelogString(attributes),
                application : app,
                version : config,
                env : allBindingsAccessor,
                extra_usage : el
            };
            return url + "/log?json=" + encodeURIComponent((0, fullOtherName["default"])(obj));
        }
        var other = require("babel-runtime/core-js/json/stringify");
        var fullOtherName = appendModelPrefix(other);
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var goog;
        !function(logging) {
            /** @type {string} */
            logging[logging.INFO = 0] = "INFO";
            /** @type {string} */
            logging[logging.WARN = 1] = "WARN";
            /** @type {string} */
            logging[logging.ERROR = 2] = "ERROR";
        }(goog = expectedHashCode.LogLevel || (expectedHashCode.LogLevel = {}));
        (function(logging) {
            /**
             * @param {string} url
             * @return {?}
             */
            function initialize(url) {
                switch(url) {
                    case logging.INFO:
                        return "INFO";
                    case logging.WARN:
                        return "WARN";
                    case logging.ERROR:
                        return "ERROR";
                    default:
                        throw new TypeError("Unrecognized log level " + url);;
                }
            }
            /** @type {function (string): ?} */
            logging.toFelogString = initialize;
        })(goog = expectedHashCode.LogLevel || (expectedHashCode.LogLevel = {}));
        /** @type {function (?, string, ?, string, Object, string, string, Object, Object): ?} */
        expectedHashCode.felogRequestUrl = send;
        /** @type {function (string, string, ?, string, Object, string, string, ?): ?} */
        expectedHashCode.felogUsageRequestUrl = init;
    }, {
        "babel-runtime/core-js/json/stringify" : 22
    }],
    305 : [function(require, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} type
         * @return {?}
         */
        function Event(type) {
            return type && type.__esModule ? type : {
                "default" : type
            };
        }
        var target = require("babel-runtime/core-js/object/assign");
        var targets = Event(target);
        var type = require("babel-runtime/helpers/classCallCheck");
        var event = Event(type);
        var selector = require("babel-runtime/helpers/createClass");
        var elem = Event(selector);
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var nodes = require("@grammarly-npm/telemetry.ts/lib/timeseries_impl");
        var util = require("./felog");
        var Block = require("lib/util");
        var DefaultFelogClient = function() {
            /**
             * @param {(Function|string)} opt_rightAlign
             * @param {?} clear
             * @param {?} backend
             * @param {?} x
             * @param {?} postProcess
             * @return {undefined}
             */
            function Renderer(opt_rightAlign, clear, backend, x, postProcess) {
                (0, event["default"])(this, Renderer);
                /** @type {(Function|string)} */
                this._baseUrl = opt_rightAlign;
                this._appName = clear;
                this._appVersion = backend;
                this._env = x;
                this._fetch = postProcess;
                this._context = {
                    userId : void 0,
                    containerId : void 0
                };
                this._metrics = nodes.MetricsStorage.createRoot(this._env + "." + this._appName, this._baseUrl, this._fetch);
            }
            return(0, elem["default"])(Renderer, [{
                key : "setUserId",
                /**
                 * @param {string} expectedHashCode
                 * @return {undefined}
                 */
                value : function(expectedHashCode) {
                    this._context = (0, targets["default"])({}, this._context, {
                        userId : expectedHashCode
                    });
                }
            }, {
                key : "setContainerId",
                /**
                 * @param {string} expectedHashCode
                 * @return {undefined}
                 */
                value : function(expectedHashCode) {
                    this._context = (0, targets["default"])({}, this._context, {
                        containerId : expectedHashCode
                    });
                }
            }, {
                key : "getContext",
                /**
                 * @return {?}
                 */
                value : function() {
                    return this._context;
                }
            }, {
                key : "sendEvent",
                /**
                 * @param {string} expectedHashCode
                 * @param {string} type
                 * @param {?} opt_attributes
                 * @param {boolean} recurring
                 * @return {?}
                 */
                value : function(expectedHashCode, type, opt_attributes, recurring) {
                    return this._fetch(util.felogRequestUrl(this._appName, this._appVersion, this._env, this._baseUrl, expectedHashCode, type, opt_attributes, recurring, this._context), {
                        mode : "no-cors",
                        method : "get",
                        cache : "no-cache"
                    }).then(function(dataAndEvents) {
                    })["catch"](function(dataAndEvents) {
                    });
                }
            }, {
                key : "sendUsageEvent",
                /**
                 * @param {string} expectedHashCode
                 * @param {string} type
                 * @param {?} opt_attributes
                 * @param {boolean} recurring
                 * @return {?}
                 */
                value : function(expectedHashCode, type, opt_attributes, recurring) {
                    var failuresLink = {
                        domain : recurring.domain,
                        accountType : recurring.accountType,
                        fieldType : recurring.fieldType,
                        fieldSupported : recurring.fieldSupported
                    };
                    if (this._context.containerId || this._context.userId) {
                        var suiteView = (this._context.containerId || this._context.userId) + recurring.domain;
                        failuresLink.groupInfo = Block.normalizedHashCode(suiteView, 1E9);
                    }
                    return this._fetch(util.felogUsageRequestUrl(this._appName, this._appVersion, this._env, this._baseUrl, expectedHashCode, type, opt_attributes, failuresLink), {
                        mode : "no-cors",
                        method : "get",
                        cache : "no-cache"
                    }).then(function(dataAndEvents) {
                    })["catch"](function(dataAndEvents) {
                    });
                }
            }, {
                key : "sendCounter",
                /**
                 * @param {string} expectedHashCode
                 * @param {string} type
                 * @return {undefined}
                 */
                value : function(expectedHashCode, type) {
                    this._metrics.getCounter(expectedHashCode).increment(type);
                }
            }, {
                key : "sendTimer",
                /**
                 * @param {string} expectedHashCode
                 * @param {string} type
                 * @return {undefined}
                 */
                value : function(expectedHashCode, type) {
                    this._metrics.getTimer(expectedHashCode).recordTime(type);
                }
            }]), Renderer;
        }();
        expectedHashCode.DefaultFelogClient = DefaultFelogClient;
    }, {
        "./felog" : 304,
        "@grammarly-npm/telemetry.ts/lib/timeseries_impl" : 13,
        "babel-runtime/core-js/object/assign" : 24,
        "babel-runtime/helpers/classCallCheck" : 34,
        "babel-runtime/helpers/createClass" : 35,
        "lib/util" : 322
    }],
    306 : [function(valueAccessor, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} value
         * @return {?}
         */
        function lookupIterator(value) {
            return value && value.__esModule ? value : {
                "default" : value
            };
        }
        /**
         * @param {?} value
         * @param {string} funcToCall
         * @param {string} millis
         * @param {?} namespace
         * @param {Object} overrides
         * @return {?}
         */
        function initialize(value, funcToCall, millis, namespace, overrides) {
            /** @type {Element} */
            var image = document.createElement("img");
            return image.src = that.felogRequestUrl(args.appName, args.getVersion(), args.ENV, args.URLS.newFelog, value, funcToCall, millis, namespace, overrides), iterator["default"].resolve();
        }
        var value = valueAccessor("babel-runtime/core-js/promise");
        var iterator = lookupIterator(value);
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var args = valueAccessor("../newConfig");
        var that = valueAccessor("./felog");
        /** @type {function (?, string, string, ?, Object): ?} */
        expectedHashCode.sendEventPixel = initialize;
    }, {
        "../newConfig" : 279,
        "./felog" : 304,
        "babel-runtime/core-js/promise" : 31
    }],
    307 : [function($, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} name
         * @return {?}
         */
        function ondata(name) {
            return name && name.__esModule ? name : {
                "default" : name
            };
        }
        /**
         * @return {undefined}
         */
        function setup() {
            var item = $("./bgonly");
            var children = item.init;
            var attributes = item.processCookiesFromGrammarly;
            children()["catch"](function(dataAndEvents) {
                return _self.logger.bgTrackingInitFail();
            });
            windowEventHandlers = $("./on").on;
            self.on("tracking-fire", function(payload) {
                var id = payload.msg;
                var data = payload.data;
                return slice.apply(void 0, [id].concat((0, quoteNeeded["default"])(data)));
            });
            self.on("tracker-init", attributes);
            self.on("tracking-call", function(payload) {
                var id = payload.msg;
                var data = payload.data;
                var fn5 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : m._f;
                cur.call.apply(cur, [id].concat((0, quoteNeeded["default"])(data)));
                fn5();
            });
            slice("activity-ping");
        }
        /**
         * @param {string} e
         * @return {?}
         */
        function slice(e) {
            /** @type {number} */
            var len = arguments.length;
            /** @type {Array} */
            var cycle = Array(len > 1 ? len - 1 : 0);
            /** @type {number} */
            var i = 1;
            for (;i < len;i++) {
                cycle[i - 1] = arguments[i];
            }
            if (m.isBg()) {
                if (!windowEventHandlers[e]) {
                    return console.error("No handler specified for message: " + e);
                }
                m.asyncCall(function() {
                    var expectedHashCode;
                    return(expectedHashCode = windowEventHandlers)[e].apply(expectedHashCode, cycle);
                }, 20);
            } else {
                self.emitBackground("tracking-fire", {
                    msg : e,
                    data : cycle
                });
            }
        }
        /**
         * @return {undefined}
         */
        function ajax() {
            /**
             * @return {undefined}
             */
            function rsc() {
                a++;
                if (a > b) {
                    clearInterval(ival);
                }
                var funcToCall = {
                    gnar : d("gnar_containerId"),
                    dapi : d("__fngrprnt__")
                };
                clearInterval(ival);
                self.emitBackground("tracker-init", funcToCall);
            }
            /** @type {number} */
            var a = 0;
            var d = $("cookie");
            if (d["default"]) {
                d = d["default"];
            }
            /** @type {number} */
            var ival = setInterval(rsc, 500);
            /** @type {number} */
            var b = 10;
        }
        var name = $("babel-runtime/helpers/toConsumableArray");
        var quoteNeeded = ondata(name);
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var m = $("../util");
        var self = $("../message");
        var cur = $("./call");
        var _self = $("./logger");
        expectedHashCode.logger = _self.logger;
        var events = $("./call");
        expectedHashCode.call = events.call;
        expectedHashCode.getLog = events.getLog;
        var windowEventHandlers = {};
        /** @type {function (): undefined} */
        expectedHashCode.initBg = setup;
        /** @type {function (string): ?} */
        expectedHashCode.fire = slice;
        /** @type {function (): undefined} */
        expectedHashCode.initContentScript = ajax;
    }, {
        "../message" : 278,
        "../util" : 322,
        "./bgonly" : 302,
        "./call" : 303,
        "./logger" : 308,
        "./on" : 309,
        "babel-runtime/helpers/toConsumableArray" : 41,
        cookie : "cookie"
    }],
    308 : [function(require, dataAndEvents, expectedHashCode) {
        /**
         * @return {undefined}
         */
        function addEventListener() {
            window.addEventListener("error", function(walkers) {
                return expectedHashCode.logger.unhandledBgPageException(walkers);
            });
            window.addEventListener("unhandledrejection", function(walkers) {
                return expectedHashCode.logger.unhandledBgPageRejection(walkers);
            });
        }
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var module = require("./call");
        var nodes = require("./telemetry");
        var Block = require("../newConfig");
        expectedHashCode.logger = new nodes.Telemetry(module.callBgPage.sendFelog.bind(module.callBgPage), module.callBgPage.sendFelogUsageEvent.bind(module.callBgPage), module.callBgPage.setUserId.bind(module.callBgPage), module.callBgPage.setContainerId.bind(module.callBgPage));
        if (Block.isBg()) {
            console.info("Installing unhandled error loggers...");
            addEventListener();
        }
    }, {
        "../newConfig" : 279,
        "./call" : 303,
        "./telemetry" : 310
    }],
    309 : [function(require, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} value
         * @return {?}
         */
        function walk(value) {
            return value && value.__esModule ? value : {
                "default" : value
            };
        }
        var r20;
        var ctor = require("babel-runtime/helpers/defineProperty");
        var t = walk(ctor);
        var nodes = require("babel-runtime/regenerator");
        var result = walk(nodes);
        var ast = require("babel-runtime/helpers/slicedToArray");
        var ret = walk(ast);
        var child = require("babel-runtime/core-js/promise");
        var h = walk(child);
        /**
         * @param {string} expectedHashCode
         * @param {Array} args
         * @param {(Element|string)} opt_attributes
         * @param {Text} fn
         * @return {?}
         */
        var setup = function(expectedHashCode, args, opt_attributes, fn) {
            return new (opt_attributes || (opt_attributes = h["default"]))(function(success, done) {
                /**
                 * @param {string} expectedHashCode
                 * @return {undefined}
                 */
                function handler(expectedHashCode) {
                    try {
                        next(fn.next(expectedHashCode));
                    } catch (err) {
                        done(err);
                    }
                }
                /**
                 * @param {?} data
                 * @return {undefined}
                 */
                function loop(data) {
                    try {
                        next(fn["throw"](data));
                    } catch (err) {
                        done(err);
                    }
                }
                /**
                 * @param {Object} event
                 * @return {undefined}
                 */
                function next(event) {
                    if (event.done) {
                        success(event.value);
                    } else {
                        (new opt_attributes(function(f) {
                            f(event.value);
                        })).then(handler, loop);
                    }
                }
                next((fn = fn.apply(expectedHashCode, args || [])).next());
            });
        };
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var Block = require("../util");
        var $ = require("./call");
        var common = require("./logger");
        var preferences = require("universal/bg/prefs");
        var helper = require("extension-api");
        expectedHashCode.on = (r20 = {}, (0, t["default"])(r20, "activity-ping", function() {
        }), (0, t["default"])(r20, "daily-ping", function(p, s) {
            return setup(this, void 0, void 0, result["default"].mark(function next() {
                var namespace;
                var path;
                var T1;
                var a;
                var a13;
                var x;
                var y;
                return result["default"].wrap(function(self) {
                    for (;;) {
                        switch(self.prev = self.next) {
                            case 0:
                                if (p) {
                                    /** @type {number} */
                                    self.next = 2;
                                    break;
                                }
                                return self.abrupt("return");
                            case 2:
                                return $.call("gnar.pingMaybe"), namespace = new preferences.PrefsImpl(helper.getGlobalExtensionApi().preferences), self.next = 6, namespace.get("pingDate");
                            case 6:
                                if (path = self.sent, "string" !== typeof path && (path = ""), T1 = path.split("|"), a = (0, ret["default"])(T1, 2), a13 = a[0], x = a[1], y = s ? "cookiesDisabled" : p, !(a13 && (a13 > Date.now() && x === y))) {
                                    /** @type {number} */
                                    self.next = 12;
                                    break;
                                }
                                return self.abrupt("return");
                            case 12:
                                return common.logger.dailyPing(), self.next = 15, namespace.set("pingDate", [Block.getNextPingDate(), y].join("|"));
                            case 15:
                                ;
                            case "end":
                                return self.stop();
                        }
                    }
                }, next, this);
            }));
        }), (0, t["default"])(r20, "app_signin_success", function(labelPlacement) {
            $.call("gnar.track", "userLoginForm/accepted", {
                placement : labelPlacement
            });
        }), (0, t["default"])(r20, "app_signup_success", function(labelPlacement) {
            $.call("gnar.track", "userAccountSignupForm/accepted", {
                placement : labelPlacement
            });
        }), (0, t["default"])(r20, "signin-error", function(e) {
            /** @type {string} */
            e.errorType = "Server-Side";
            $.call("gnar.track", "userLoginForm/rejected");
        }), (0, t["default"])(r20, "signup-error", function(e) {
            /** @type {string} */
            e.errorType = "Server-Side";
            $.call("gnar.track", "userAccountSignupForm/rejected");
        }), (0, t["default"])(r20, "upgrade-after-register", function() {
            return setup(this, void 0, void 0, result["default"].mark(function end() {
                return result["default"].wrap(function(current) {
                    for (;;) {
                        switch(current.prev = current.next) {
                            case 0:
                                $.call("gnar.track", "Account_Type_Selected");
                            case 1:
                                ;
                            case "end":
                                return current.stop();
                        }
                    }
                }, end, this);
            }));
        }), (0, t["default"])(r20, "hook-clicked", function(deepDataAndEvents) {
            $.call("gnar.track", "upgradeHookClicked", {
                placement : deepDataAndEvents
            });
            common.logger.userUpgradeClick(deepDataAndEvents);
        }), (0, t["default"])(r20, "correct-btn-clicked", function() {
            $.call("gnar.track", "gbuttonClicked");
            common.logger.gButtonClick();
        }), (0, t["default"])(r20, "btn-disable-in-field", function(deepDataAndEvents) {
            $.call("gnar.track", "checkingInFieldToggled", {
                /** @type {Function} */
                enabled : deepDataAndEvents
            });
            common.logger.checkingToggledInField(deepDataAndEvents);
        }), (0, t["default"])(r20, "button-change-state", function() {
        }), (0, t["default"])(r20, "login-attempt", function(labelPlacement) {
            $.call("gnar.track", "signInClicked", {
                placement : labelPlacement
            });
        }), (0, t["default"])(r20, "show-dictionary", function() {
            $.call("gnar.track", "showDictionary");
        }), (0, t["default"])(r20, "referral-shown", function(labelPlacement) {
            $.call("gnar.track", "referral/referralNotificationShown", {
                placement : labelPlacement
            });
        }), (0, t["default"])(r20, "referral-clicked", function(labelPlacement) {
            $.call("gnar.track", "referral/referralButtonClicked", {
                placement : labelPlacement
            });
        }), (0, t["default"])(r20, "tab-connected", function(filter, options, event, deepDataAndEvents, dataAndEvents) {
            var enabled = options.enabled;
            var related = event.cookiesDisabled;
            this["daily-ping"](filter.id, related);
            if (!enabled) {
                if (!(dataAndEvents === true)) {
                    common.logger.disabledTabLoad(deepDataAndEvents, filter.type);
                }
            }
        }), (0, t["default"])(r20, "session-invalidate", function(program, account, err, deepDataAndEvents, dataAndEvents) {
            var cycle = program.id;
            var statements = program.anonymous;
            var attributes = program.isTest;
            if (cycle !== account.id) {
                $.call("gnar.setUser", cycle, attributes);
                this["daily-ping"](cycle, deepDataAndEvents);
            }
            if (err) {
                common.logger.sessionInvalidated(err, cycle !== account.id);
            }
            if (account.email) {
                if (!account.anonymous) {
                    if (statements) {
                        common.logger.unexpectedAnonymous({
                            email : account.email,
                            token : account.token,
                            grauth : account.grauth,
                            tokenEqualsGrauth : account.token === account.grauth,
                            cookiesDisabled : deepDataAndEvents,
                            reason : err
                        });
                    }
                }
            }
        }), (0, t["default"])(r20, "set-dapi-prop", function(deepDataAndEvents, dataName) {
            if ("dialectWeak" === deepDataAndEvents) {
                $.call("gnar.track", "languageWeakPreference", {
                    dialect : dataName
                });
            }
            common.logger.dapiPropInitialized(deepDataAndEvents, dataName);
        }), (0, t["default"])(r20, "change-dialect", function(part) {
            var language = part.language;
            var body = part.dialectWeak;
            var attributes = {
                language : language
            };
            if (body) {
                /** @type {boolean} */
                attributes.sameAsWeak = language === body;
            }
            $.call("gnar.track", "languageStrongPreference", attributes);
        }), (0, t["default"])(r20, "change-defs", function(attributes) {
            $.call("gnar.track", "definitionsToggled", attributes);
            common.logger.toggleExtensionDefs(attributes.enabled);
        }), (0, t["default"])(r20, "checking-toggled", function(attributes) {
            $.call("gnar.track", "checkingToggled", attributes);
            common.logger.toggleExtension(attributes.enabled, attributes.placement);
        }), (0, t["default"])(r20, "disable-until-next-visit", function() {
            $.call("gnar.track", "disableUntilNextVisit");
            common.logger.disableUntilNextVisit();
        }), (0, t["default"])(r20, "disable-button-click", function() {
            $.call("gnar.track", "disableButtonClick");
            common.logger.disableButtonClick();
        }), (0, t["default"])(r20, "popup-open", function() {
            $.call("gnar.track", "browserToolbarButtonClicked");
        }), (0, t["default"])(r20, "popup-open-on-unsupported", function() {
            $.call("gnar.track", "browserToolbarButtonClicked/unsupported");
        }), (0, t["default"])(r20, "cookie-overflow", function(pixelWidth, deepDataAndEvents) {
            common.logger.cookieOverflow(pixelWidth, deepDataAndEvents);
        }), (0, t["default"])(r20, "premium-popup-show", function() {
            $.call("gnar.track", "upgradeReferralPopupShown");
        }), (0, t["default"])(r20, "premium-popup-upgrade-click", function() {
            $.call("gnar.track", "upgradeReferralPremiumBtnClicked");
        }), (0, t["default"])(r20, "premium-popup-referral-click", function() {
            $.call("gnar.track", "upgradeReferralInviteBtnClicked");
        }), (0, t["default"])(r20, "email-perception-popup-show", function(dataAndEvents) {
            $.call("gnar.track", "askForFeedback-popup-show", {
                isFirstShown : dataAndEvents
            });
            common.logger.emailPerceptionPopupShow();
        }), (0, t["default"])(r20, "email-perception-popup-cancel", function(dataAndEvents) {
            $.call("gnar.track", "askForFeedback-popup-cancel", {
                isFirstShown : dataAndEvents
            });
            common.logger.emailPerceptionPopupCancel();
        }), (0, t["default"])(r20, "email-perception-button-hover", function() {
            $.call("gnar.track", "askForFeedback-button-hover");
            common.logger.emailPerceptiongButtonHover();
        }), (0, t["default"])(r20, "email-perception-learn-more-click", function() {
            $.call("gnar.track", "emailPerceptionOptInLearnMore-button-click");
        }), (0, t["default"])(r20, "email-perception-disable-click", function() {
            $.call("gnar.track", "dontShowEmailPerceptionAgain-button-click");
        }), (0, t["default"])(r20, "onboarding-popup-show", function() {
            $.call("gnar.track", "onboarding-popup-show");
            common.logger.onboardingPopupShow();
        }), (0, t["default"])(r20, "onboarding-popup-cancel", function() {
            $.call("gnar.track", "onboarding-popup-cancel");
            common.logger.onboardingPopupCancel();
        }), (0, t["default"])(r20, "onboardingTutorial-popup-show", function() {
            $.call("gnar.track", "onboardingTutorial-popup-show");
            common.logger.onboardingTutorialShow();
        }), (0, t["default"])(r20, "onboardingTutorialNext-button-click", function() {
            $.call("gnar.track", "onboardingTutorialNext-button-click");
        }), (0, t["default"])(r20, "onboardingTutorialPersonalize-button-click", function() {
            $.call("gnar.track", "onboardingTutorialPersonalize-button-click");
        }), (0, t["default"])(r20, "onboardingTutorialSave-button-click", function() {
            $.call("gnar.track", "onboardingTutorialSave-button-click");
        }), (0, t["default"])(r20, "onboardingTutorialLetsWrite-button-click", function() {
            $.call("gnar.track", "onboardingTutorialLetsWrite-button-click");
        }), r20);
    }, {
        "../util" : 322,
        "./call" : 303,
        "./logger" : 308,
        "babel-runtime/core-js/promise" : 31,
        "babel-runtime/helpers/defineProperty" : 36,
        "babel-runtime/helpers/slicedToArray" : 40,
        "babel-runtime/regenerator" : 43,
        "extension-api" : 177,
        "universal/bg/prefs" : 331
    }],
    310 : [function(require, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} type
         * @return {?}
         */
        function iterator(type) {
            return type && type.__esModule ? type : {
                "default" : type
            };
        }
        var helper = require("babel-runtime/core-js/json/stringify");
        var __exports__ = iterator(helper);
        var nodes = require("babel-runtime/helpers/classCallCheck");
        var result = iterator(nodes);
        var type = require("babel-runtime/helpers/createClass");
        var key = iterator(type);
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var $$Log = require("./felog");
        /** @type {number} */
        var onComplete = 0.1;
        /** @type {number} */
        var which = 0.05;
        var Telemetry = function() {
            /**
             * @param {?} dataAndEvents
             * @param {?} deepDataAndEvents
             * @param {?} events
             * @param {?} keepData
             * @return {undefined}
             */
            function clone(dataAndEvents, deepDataAndEvents, events, keepData) {
                var self = this;
                (0, result["default"])(this, clone);
                this._sendFelog = dataAndEvents;
                this._sendFelogUsage = deepDataAndEvents;
                this._setUserId = events;
                this._setContainerId = keepData;
                /**
                 * @return {undefined}
                 */
                this.pageLoadTimeout = function() {
                    self._send("cs.connection.failover.pageLoad.timeout", "content script init failed", $$Log.LogLevel.ERROR);
                };
                /**
                 * @return {undefined}
                 */
                this.appLoadTimeout = function() {
                    self._send("cs.connection.failover.appLoad.timeout", "extension init timed out", $$Log.LogLevel.ERROR);
                };
                /**
                 * @param {?} dataAndEvents
                 * @return {undefined}
                 */
                this.differentStateDomain = function(dataAndEvents) {
                    self._send("cs.state.differentDomain", "received state for different domain", $$Log.LogLevel.INFO, {
                        stateDomain : dataAndEvents
                    });
                };
                /**
                 * @param {?} dataAndEvents
                 * @return {undefined}
                 */
                this.restoredBgConnection = function(dataAndEvents) {
                    self._send("cs.connection.bg.restored", "bg page connection restored", $$Log.LogLevel.INFO, {
                        timeWithoutConnection : dataAndEvents
                    });
                };
                /**
                 * @return {undefined}
                 */
                this.initWithoutBgConnection = function() {
                    self._send("cs.connection.bg.disconnected", "no connection to bg page", $$Log.LogLevel.INFO);
                };
                /**
                 * @return {undefined}
                 */
                this.fetchDefinitionsFail = function() {
                    self._send("cs.connection.api.definition.failed", "definitions fetch failed", $$Log.LogLevel.WARN);
                };
                /**
                 * @param {number} delay
                 * @return {undefined}
                 */
                this.infinityCheckResetFail = function(delay) {
                    self._send("cs.connection.infiniteCheck.failed", "infinite check reset failed", $$Log.LogLevel.ERROR, {
                        delay : delay
                    });
                };
                /**
                 * @param {?} type
                 * @return {undefined}
                 */
                this.tooLongPageConfigInit = function(type) {
                    self._send("cs.pageConfig.init.exceeded", "page config init timeout", $$Log.LogLevel.WARN, {
                        initTime : type
                    });
                };
                /**
                 * @param {?} type
                 * @return {undefined}
                 */
                this.tooLongUserUpdateTime = function(type) {
                    self._send("bg.state.user.update.exceeded", "user state update took too long", $$Log.LogLevel.WARN, {
                        updateTime : type
                    });
                };
                /**
                 * @return {undefined}
                 */
                this.lostBgPageConnection = function() {
                    self._send("cs.gbutton.bg\u0421onnection.lost", "gbutton connection to bg page lost", $$Log.LogLevel.INFO);
                };
                /**
                 * @param {number} dataAndEvents
                 * @return {undefined}
                 */
                this.restoreBgPageConnection = function(dataAndEvents) {
                    self._send("cs.gbutton.bg\u0421onnection.restored", "gbutton connection to bg page restored", $$Log.LogLevel.INFO, {
                        time : dataAndEvents
                    });
                };
                /**
                 * @return {undefined}
                 */
                this.badCursorPosition = function() {
                    self._send("cs.editor.badCursorPosition", "incorrect cursor position in grammarly-editor", $$Log.LogLevel.INFO);
                };
                /**
                 * @return {undefined}
                 */
                this.cursorJump = function() {
                    self._send("cs.editor.cursorJump", "cursor jump detected", $$Log.LogLevel.WARN);
                };
                /**
                 * @return {undefined}
                 */
                this.signinOpen = function() {
                    self._send("cs.signin.open", "sign in dialog opened", $$Log.LogLevel.INFO);
                };
                /**
                 * @param {?} dataAndEvents
                 * @return {undefined}
                 */
                this.signinClose = function(dataAndEvents) {
                    self._send("cs.signin.close", "sign in dialog closed", $$Log.LogLevel.INFO, {
                        openTime : dataAndEvents
                    });
                };
                /**
                 * @return {undefined}
                 */
                this.tabReloadClick = function() {
                    self._send("cs.gbutton.reload.click", "gbutton reload clicked", $$Log.LogLevel.WARN);
                };
                /**
                 * @param {string} output
                 * @param {string} errorName
                 * @return {undefined}
                 */
                this.popupLoadError = function(output, errorName) {
                    self._send("cs.popup.load.error", "could not open pop-up editor", $$Log.LogLevel.ERROR, {
                        message : output,
                        name : errorName
                    });
                };
                /**
                 * @param {string} output
                 * @return {undefined}
                 */
                this.loginNoBgPageConnection = function(output) {
                    self._send("debug.cs.connection.signin.bg.timeout", "can not connect to bg page on login", $$Log.LogLevel.INFO, {
                        message : output
                    });
                };
                /**
                 * @param {string} output
                 * @return {undefined}
                 */
                this.pageConfigCDNError = function(output) {
                    self._send("cs.pageConfig.cdn.error", "could not read page config", $$Log.LogLevel.ERROR, {
                        message : output
                    });
                };
                /**
                 * @param {string} output
                 * @param {string} errorName
                 * @return {undefined}
                 */
                this.pageConfigLocalStorageError = function(output, errorName) {
                    self._send("cs.pageConfig.localStorage.error", "could not read page config from localStorage", $$Log.LogLevel.INFO, {
                        message : output,
                        name : errorName
                    });
                };
                /**
                 * @param {number} keepData
                 * @param {Object} newVersion
                 * @return {undefined}
                 */
                this.pageConfigUpdated = function(keepData, newVersion) {
                    self._send("cs.pageConfig.updated", "page config updated", $$Log.LogLevel.INFO, {
                        oldVersion : keepData,
                        newVersion : newVersion
                    });
                };
                /**
                 * @return {undefined}
                 */
                this.settingsPopupTimeout = function() {
                    self._send("settings.popup.init.timeout", "settings popup open timeout", $$Log.LogLevel.WARN);
                };
                /**
                 * @param {?} dataAndEvents
                 * @return {undefined}
                 */
                this.settingsUsupportedShow = function(dataAndEvents) {
                    self._send("settings.popup.state.unsupported.show", "page unsupported message shown", $$Log.LogLevel.INFO, {
                        popupType : dataAndEvents
                    });
                };
                /**
                 * @param {?} dataAndEvents
                 * @return {undefined}
                 */
                this.settingsPopupToggled = function(dataAndEvents) {
                    self._send("settings.popup.experiment.toggle", "settings popup disabled/enabled for experiment on /personalize page", $$Log.LogLevel.INFO, {
                        isPopupDisabled : dataAndEvents
                    });
                };
                /**
                 * @return {undefined}
                 */
                this.socketBgError = function() {
                    self._send("bg.socket.error", "bg page socket error", $$Log.LogLevel.WARN);
                };
                /**
                 * @param {?} dataAndEvents
                 * @param {?} deepDataAndEvents
                 * @return {undefined}
                 */
                this.capiNotAuthorizedLoop = function(dataAndEvents, deepDataAndEvents) {
                    self._send("debug.socket.notAuthorizedLoop", "could not authenticate on capi and auth", $$Log.LogLevel.INFO, {
                        authDegradation : dataAndEvents,
                        cookiesDisabled : deepDataAndEvents
                    });
                };
                /**
                 * @return {undefined}
                 */
                this.socketDisabledCookie = function() {
                    self._send("debug.socket.disabledCookies", "disabled cookies after failed authentication", $$Log.LogLevel.INFO);
                };
                /**
                 * @param {?} dataAndEvents
                 * @return {undefined}
                 */
                this.socketBgRestored = function(dataAndEvents) {
                    self._send("debug.bg.socket.restored", "capi session restored", $$Log.LogLevel.INFO, {
                        tryCount : dataAndEvents
                    });
                };
                /**
                 * @param {string} oauth_token
                 * @param {?} dataAndEvents
                 * @return {undefined}
                 */
                this.socketBgReconnectFail = function(oauth_token, dataAndEvents) {
                    self._send("bg.socket.reconnect.fail", "could not restore ws connection", $$Log.LogLevel.WARN, {
                        token : oauth_token,
                        tryCount : dataAndEvents
                    });
                };
                /**
                 * @return {undefined}
                 */
                this.socketCsError = function() {
                    self._send("cs.socket.error", "content script socket error", $$Log.LogLevel.WARN);
                };
                /**
                 * @param {string} item
                 * @return {undefined}
                 */
                this.soketCsErrorMsg = function(item) {
                    self._send("cs.socket.errorMsg", "capi error", $$Log.LogLevel.WARN, {
                        message : item
                    });
                };
                /**
                 * @param {string} output
                 * @return {undefined}
                 */
                this.gnarClientInitFail = function(output) {
                    self._send("gnar.bg.tracking.gnar.init.fail", "gnar init failed", $$Log.LogLevel.WARN, {
                        message : output
                    });
                };
                /**
                 * @return {undefined}
                 */
                this.bgTrackingInitFail = function() {
                    self._send("debug.tracking.init.fail", "bg page tracking library init failed", $$Log.LogLevel.INFO);
                };
                /**
                 * @return {undefined}
                 */
                this.dailyPing = function() {
                    self._send("debug.dailyPing", "daily ping", $$Log.LogLevel.INFO);
                };
                /**
                 * @param {Error} deepDataAndEvents
                 * @return {undefined}
                 */
                this.userUpgradeClick = function(deepDataAndEvents) {
                    self._send("cs.ui.action.upgradeClick", "upgrade hook clicked", $$Log.LogLevel.INFO, {
                        placement : deepDataAndEvents
                    });
                };
                /**
                 * @return {undefined}
                 */
                this.gButtonClick = function() {
                    self._send("cs.ui.gbutton.click", "gbutton clicked", $$Log.LogLevel.INFO);
                };
                /**
                 * @param {Function} deepDataAndEvents
                 * @return {undefined}
                 */
                this.checkingToggledInField = function(deepDataAndEvents) {
                    self._send("cs.ui.gbutton.toggleInField", "checking toggled in field", $$Log.LogLevel.INFO, {
                        /** @type {Function} */
                        enabled : deepDataAndEvents
                    });
                };
                /**
                 * @param {?} err
                 * @param {boolean} dataAndEvents
                 * @return {undefined}
                 */
                this.sessionInvalidated = function(err, dataAndEvents) {
                    self._send("bg.session.invalidated", "user session invalidated", $$Log.LogLevel.INFO, {
                        reason : err,
                        userChanged : dataAndEvents
                    });
                };
                /**
                 * @param {?} opt_attributes
                 * @return {undefined}
                 */
                this.unexpectedAnonymous = function(opt_attributes) {
                    self._send("debug.bg.session.unexpectedAnonymous", "user changed to anonymous", $$Log.LogLevel.INFO, opt_attributes);
                };
                /**
                 * @param {string} deepDataAndEvents
                 * @param {?} i
                 * @return {undefined}
                 */
                this.dapiPropInitialized = function(deepDataAndEvents, i) {
                    self._send("bg.settings.dapi.prop.init", "save property to the DAPI", $$Log.LogLevel.INFO, {
                        name : deepDataAndEvents,
                        value : i
                    });
                };
                /**
                 * @param {string} fieldName
                 * @param {?} reqData
                 * @return {undefined}
                 */
                this.getDapiPropError = function(fieldName, reqData) {
                    self._send("bg.connection.dapi.getProp.error", "could not get dapi property", $$Log.LogLevel.WARN, {
                        property : fieldName,
                        body : reqData
                    });
                };
                /**
                 * @param {string} fieldName
                 * @param {?} reqData
                 * @return {undefined}
                 */
                this.setDapiPropError = function(fieldName, reqData) {
                    self._send("bg.connection.dapi.setProp.error", "could not set dapi property", $$Log.LogLevel.WARN, {
                        property : fieldName,
                        body : reqData
                    });
                };
                /**
                 * @param {Function} _enabled
                 * @return {undefined}
                 */
                this.toggleExtensionDefs = function(_enabled) {
                    self._send("bg.settings.definitions.toggle", "definitions toggled for domain", $$Log.LogLevel.INFO, {
                        /** @type {Function} */
                        enabled : _enabled
                    });
                };
                /**
                 * @param {boolean} _enabled
                 * @param {?} labelPlacement
                 * @return {undefined}
                 */
                this.toggleExtension = function(_enabled, labelPlacement) {
                    self._send("bg.settings.extension.toggle", "extension toggled for domain", $$Log.LogLevel.INFO, {
                        enabled : _enabled,
                        placement : labelPlacement
                    });
                };
                /**
                 * @return {undefined}
                 */
                this.disableUntilNextVisit = function() {
                    self._send("cs.gbutton.disableUntilNextVisit", "extension temporary disabled on the current tab", $$Log.LogLevel.INFO);
                };
                /**
                 * @return {undefined}
                 */
                this.disableButtonClick = function() {
                    self._send("cs.gbutton.disableButtonClick", "clicked on disable button in gButton", $$Log.LogLevel.INFO);
                };
                /**
                 * @param {number} size
                 * @param {?} deepDataAndEvents
                 * @return {undefined}
                 */
                this.cookieOverflow = function(size, deepDataAndEvents) {
                    self._send("debug.bg.state.cookie.overflow", "cookie is too big", $$Log.LogLevel.INFO, {
                        size : size,
                        biggestCookie : deepDataAndEvents
                    });
                };
                /**
                 * @return {undefined}
                 */
                this.externalChangePlan = function() {
                    self._send("bg.api.external.changePlan", "plan changed from editor", $$Log.LogLevel.INFO);
                };
                /**
                 * @return {undefined}
                 */
                this.externalChangeDialect = function() {
                    self._send("bg.api.external.changeDialect", "dialect changed from editor", $$Log.LogLevel.INFO);
                };
                /**
                 * @return {undefined}
                 */
                this.externalChangeUser = function() {
                    self._send("bg.api.external.changeUsed", "user changed from editor", $$Log.LogLevel.INFO);
                };
                /**
                 * @return {undefined}
                 */
                this.externalLogout = function() {
                    self._send("bg.api.external.logout", "user logged out form editor", $$Log.LogLevel.INFO);
                };
                /**
                 * @return {undefined}
                 */
                this.externalEnableEmailPerception = function() {
                    self._send("bg.api.external.enableEmailPerception", "user enabled email perception feature on the funnel", $$Log.LogLevel.INFO);
                };
                /**
                 * @param {string} output
                 * @param {?} stack
                 * @return {undefined}
                 */
                this.bgPageStartFail = function(output, stack) {
                    self._send("bg.start.fail", "bg page start failed", $$Log.LogLevel.ERROR, {
                        message : output,
                        stack : stack
                    });
                };
                /**
                 * @param {?} dataAndEvents
                 * @return {undefined}
                 */
                this.bgPageInitTimeout = function(dataAndEvents) {
                    self._send("bg.state.start.timeout", "bg page init timeout", $$Log.LogLevel.WARN, {
                        initTime : dataAndEvents
                    });
                };
                /**
                 * @param {?} dataAndEvents
                 * @return {undefined}
                 */
                this.bgPageInitFail = function(dataAndEvents) {
                    self._send("bg.state.init.fail", "bg page init failed", $$Log.LogLevel.ERROR, {
                        initAttempts : dataAndEvents
                    });
                };
                /**
                 * @param {?} currentVersion
                 * @param {?} dataAndEvents
                 * @return {undefined}
                 */
                this.extensionUpdated = function(currentVersion, dataAndEvents) {
                    self._send("bg.state.updated", "extension updated", $$Log.LogLevel.INFO, {
                        currentVersion : currentVersion,
                        previousVersion : dataAndEvents
                    });
                };
                /**
                 * @param {?} dataAndEvents
                 * @return {undefined}
                 */
                this.extensionUpdateFail = function(dataAndEvents) {
                    self._send("bg.state.update.fail", "extension update failed", $$Log.LogLevel.INFO, {
                        previousVersion : dataAndEvents
                    });
                };
                /**
                 * @return {undefined}
                 */
                this.cannotGetInstallSource = function() {
                    self._send("bg.getSource.fail", "failed to get extension install source", $$Log.LogLevel.WARN);
                };
                /**
                 * @param {string} key
                 * @return {undefined}
                 */
                this.extensionInstall = function(key) {
                    self._send("bg.state.install", "extension installed", $$Log.LogLevel.INFO, {
                        source : key
                    });
                };
                /**
                 * @param {number} newVersion
                 * @return {undefined}
                 */
                this.chromeForcedToUpdate = function(newVersion) {
                    self._send("bg.chrome.forcedToUpdate", "chrome forced update", $$Log.LogLevel.INFO, {
                        newVersion : newVersion
                    });
                };
                /**
                 * @param {string} output
                 * @param {string} paramType
                 * @return {undefined}
                 */
                this.chromeContentScriptLoadError = function(output, paramType) {
                    self._send("bg.chrome.cs.load.error", "content script execution error", $$Log.LogLevel.WARN, {
                        message : output,
                        type : paramType
                    });
                };
                /**
                 * @return {undefined}
                 */
                this.reloadNotificationShow = function() {
                    self._send("bg.ui.notification.tabsReload.show", "extension reload notification shown", $$Log.LogLevel.WARN);
                };
                /**
                 * @return {undefined}
                 */
                this.reloadNotificationClick = function() {
                    self._send("bg.ui.notification.tabsReload.click", "reload notification clicked", $$Log.LogLevel.INFO);
                };
                /**
                 * @param {?} err
                 * @param {Function} reqData
                 * @param {number} statusCode
                 * @return {undefined}
                 */
                this.fetchUserFail = function(err, reqData, statusCode) {
                    self._send("bg.user.fetch.fail", "failed to update user", $$Log.LogLevel.WARN, {
                        /** @type {Function} */
                        body : reqData,
                        statusCode : statusCode,
                        reason : err
                    });
                };
                /**
                 * @param {?} reqData
                 * @param {number} statusCode
                 * @return {undefined}
                 */
                this.fetchMimicFail = function(reqData, statusCode) {
                    self._send("bg.user.mimic.fail", "mimic request failed", $$Log.LogLevel.WARN, {
                        body : reqData,
                        statusCode : statusCode
                    });
                };
                /**
                 * @return {undefined}
                 */
                this.fetchCookieFail = function() {
                    self._send("bg.cookie.fail", "could not get grauth from cookie", $$Log.LogLevel.WARN);
                };
                /**
                 * @param {?} reqData
                 * @param {number} statusCode
                 * @return {undefined}
                 */
                this.fetchSettingsFail = function(reqData, statusCode) {
                    self._send("bg.user.settings.fail", "could not get settings from auth", $$Log.LogLevel.WARN, {
                        body : reqData,
                        statusCode : statusCode
                    });
                };
                /**
                 * @param {?} canceled
                 * @return {undefined}
                 */
                this.frequentCookieChanges = function(canceled) {
                    self._send("debug.cookie.onChange.error", "cookie change too frequent", $$Log.LogLevel.INFO, {
                        canceled : canceled
                    });
                };
                /**
                 * @param {string} errorName
                 * @return {undefined}
                 */
                this.initializePropFromDapi = function(errorName) {
                    self._send("bg.state.dapi.prop.initialize", "set property from dapi", $$Log.LogLevel.INFO, {
                        name : errorName
                    });
                };
                /**
                 * @return {undefined}
                 */
                this.emailPerceptionPopupShow = function() {
                    self._send("cs.emailPerception.popup.show", "show email perception popup on gmail/inbox domain", $$Log.LogLevel.INFO);
                };
                /**
                 * @return {undefined}
                 */
                this.emailPerceptionPopupCancel = function() {
                    self._send("cs.emailPerception.popup.cancel", "user canceled email perception popup on gmail/inbox", $$Log.LogLevel.INFO);
                };
                /**
                 * @return {undefined}
                 */
                this.emailPerceptiongButtonHover = function() {
                    self._send("cs.emailPerception.gbutton.hover", "user hovered gButton and ask for feedback btn is shown on gmail/inbox", $$Log.LogLevel.INFO);
                };
                /**
                 * @return {undefined}
                 */
                this.onboardingPopupShow = function() {
                    self._send("cs.onboarding.popup.show", "show onboarding popup to user after first time extension install", $$Log.LogLevel.INFO);
                };
                /**
                 * @return {undefined}
                 */
                this.onboardingPopupCancel = function() {
                    self._send("cs.onboarding.popup.cancel", "user canceled onboarding popup", $$Log.LogLevel.INFO);
                };
                /**
                 * @return {undefined}
                 */
                this.onboardingTutorialShow = function() {
                    self._send("cs.onboarding.tutorial.show", "opened onboarding dialog after popup", $$Log.LogLevel.INFO);
                };
                /**
                 * @return {undefined}
                 */
                this.onboardingVideoLoaded = function() {
                    self._send("cs.onboarding.tutorial.video.loaded", "load video data for onboarding tutorial", $$Log.LogLevel.INFO);
                };
                /**
                 * @param {?} reqData
                 * @return {undefined}
                 */
                this.saveEmailFeedbackError = function(reqData) {
                    self._send("bg.emailfeedback.save.error", "failed to save email feedback", $$Log.LogLevel.INFO, {
                        body : reqData
                    });
                };
                /**
                 * @return {undefined}
                 */
                this.incognitoInit = function() {
                    self._send("bg.incognito.init", "extension initialized in incognito mode", $$Log.LogLevel.INFO);
                };
                /**
                 * @return {undefined}
                 */
                this.disabledCookiesInit = function() {
                    self._send("bg.cookie.disabled", "extension initialized with disabled cookies", $$Log.LogLevel.INFO);
                };
                /**
                 * @return {undefined}
                 */
                this.proxyInit = function() {
                    self._sendWithProbability(which, "proxy.init", "proxy script initialized", $$Log.LogLevel.INFO);
                };
                /**
                 * @param {Object} _port
                 * @param {Error} err
                 * @return {undefined}
                 */
                this.proxyPortDisconnected = function(_port, err) {
                    self._sendWithProbability(which, "proxy.disconnect", "proxy port disconnected", $$Log.LogLevel.INFO, {
                        port : _port,
                        error : err
                    });
                };
                /**
                 * @param {Object} obj
                 * @return {undefined}
                 */
                this.unhandledBgPageException = function(obj) {
                    self._send("bg.unhandledException", "unhandled exception on background page", $$Log.LogLevel.ERROR, {
                        message : obj.error ? obj.error.message : obj.message
                    });
                };
                /**
                 * @param {Object} obj
                 * @return {undefined}
                 */
                this.unhandledBgPageRejection = function(obj) {
                    self._send("bg.unhandledRejection", "unhandled promise rejection on background page", $$Log.LogLevel.ERROR, {
                        message : null !== obj.reason ? "string" === typeof obj.reason ? obj.reason : obj.reason.message : void 0
                    });
                };
                /**
                 * @return {undefined}
                 */
                this.storageMigrationSucceeded = function() {
                    self._send("bg.storageMigration.success", "storage migration succeeded", $$Log.LogLevel.INFO, {});
                };
                /**
                 * @param {Object} e
                 * @return {undefined}
                 */
                this.storageMigrationFailed = function(e) {
                    self._send("bg.storageMigration.failure", "storage migration failed", $$Log.LogLevel.ERROR, {
                        message : e && e.message
                    });
                };
                /**
                 * @return {undefined}
                 */
                this.cardShowAction = function() {
                    self._sendWithProbability(onComplete, "cs.editor.card.show", "show card action", $$Log.LogLevel.INFO);
                };
                /**
                 * @return {undefined}
                 */
                this.cardHideAction = function() {
                    self._sendWithProbability(onComplete, "cs.editor.card.hide", "hide card action", $$Log.LogLevel.INFO);
                };
                /**
                 * @return {undefined}
                 */
                this.cardReplacementAction = function() {
                    self._sendWithProbability(onComplete, "cs.editor.card.replacement", "click on the replacement in the card", $$Log.LogLevel.INFO);
                };
                /**
                 * @return {undefined}
                 */
                this.cardAddToDictAction = function() {
                    self._sendWithProbability(onComplete, "cs.editor.card.addToDict", "click add to dictionary button in the card", $$Log.LogLevel.INFO);
                };
                /**
                 * @return {undefined}
                 */
                this.cardIgnoreAction = function() {
                    self._sendWithProbability(onComplete, "cs.editor.card.ignore", "click ignore button in the card", $$Log.LogLevel.INFO);
                };
                /**
                 * @param {boolean} recurring
                 * @return {undefined}
                 */
                this.synonymCardShowAction = function(recurring) {
                    self._sendWithProbability(onComplete, "cs.editor.synonym.show", "show synonymous card action", $$Log.LogLevel.INFO, {
                        notFoundCard : recurring
                    });
                };
                /**
                 * @param {?} attr
                 * @return {undefined}
                 */
                this.synonymCardHideAction = function(attr) {
                    self._sendWithProbability(onComplete, "cs.editor.synonym.hide", "hide synonymous card action", $$Log.LogLevel.INFO, {
                        notFoundCard : attr
                    });
                };
                /**
                 * @return {undefined}
                 */
                this.synonymReplacementAction = function() {
                    self._sendWithProbability(onComplete, "cs.editor.synonym.replacement", "click on the replacement in the synonym", $$Log.LogLevel.INFO);
                };
                /**
                 * @return {undefined}
                 */
                this.dictCardShowAction = function() {
                    self._sendWithProbability(onComplete, "cs.editor.dict.show", "show dictionary card action", $$Log.LogLevel.INFO);
                };
                /**
                 * @return {undefined}
                 */
                this.dictCardHideAction = function() {
                    self._sendWithProbability(onComplete, "cs.editor.dict.hide", "hide dictionary card action", $$Log.LogLevel.INFO);
                };
                /**
                 * @param {Array} wait
                 * @param {boolean} recurring
                 * @return {undefined}
                 */
                this.couldNotParseTransform = function(wait, recurring) {
                    self._send("cs.cards.transforms.parse.error", "Could not parse transform in inline cards", $$Log.LogLevel.WARN, {
                        transformHTML : wait,
                        fallbackParseSuccessful : recurring
                    });
                };
                /**
                 * @param {string} deepDataAndEvents
                 * @param {?} dataAndEvents
                 * @return {undefined}
                 */
                this.disabledTabLoad = function(deepDataAndEvents, dataAndEvents) {
                    self._sendUsage("usage.loadOnDisabledTab", "tab load event with disabled extension", $$Log.LogLevel.INFO, {
                        domain : deepDataAndEvents,
                        accountType : dataAndEvents
                    });
                };
                /**
                 * @param {string} domain
                 * @param {?} res
                 * @param {?} callback
                 * @param {boolean} recurring
                 * @return {undefined}
                 */
                this.initSession = function(domain, res, callback, recurring) {
                    self._sendUsage("usage.session.init", "init in the field", $$Log.LogLevel.INFO, {
                        domain : domain,
                        accountType : res,
                        fieldType : callback,
                        fieldSupported : recurring
                    });
                };
                /**
                 * @param {string} domain
                 * @param {?} dataAndEvents
                 * @param {?} inType
                 * @return {undefined}
                 */
                this.cardFirstInteraction = function(domain, dataAndEvents, inType) {
                    self._sendUsage("usage.card.interaction", "interaction with card in the field", $$Log.LogLevel.INFO, {
                        domain : domain,
                        accountType : dataAndEvents,
                        fieldType : inType
                    });
                };
            }
            return(0, key["default"])(clone, [{
                key : "_send",
                /**
                 * @param {string} expectedHashCode
                 * @param {string} type
                 * @param {?} opt_attributes
                 * @param {boolean} recurring
                 * @return {undefined}
                 */
                value : function(expectedHashCode, type, opt_attributes, recurring) {
                    var message = void 0;
                    try {
                        message = (0, __exports__["default"])(recurring);
                    } catch (ex) {
                        /** @type {string} */
                        message = "Failed to stringify event properties: '" + ex + "', '" + (ex && ex.message) + "'";
                        console.warn(message, "for " + type + "@" + expectedHashCode);
                    }
                    try {
                        this._sendFelog(expectedHashCode, type, opt_attributes, null !== recurring ? {
                            json : message
                        } : void 0);
                    } catch (error) {
                        console.warn("Failed to send felog for " + type + "@" + expectedHashCode + ": '" + error + "', '" + (error && error.message) + "'");
                    }
                }
            }, {
                key : "_sendUsage",
                /**
                 * @param {string} expectedHashCode
                 * @param {string} type
                 * @param {?} opt_attributes
                 * @param {boolean} recurring
                 * @return {undefined}
                 */
                value : function(expectedHashCode, type, opt_attributes, recurring) {
                    this._sendFelogUsage(expectedHashCode, type, opt_attributes, recurring);
                }
            }, {
                key : "_sendWithProbability",
                /**
                 * @param {string} expectedHashCode
                 * @param {string} type
                 * @param {?} opt_attributes
                 * @param {boolean} recurring
                 * @param {boolean} dataAndEvents
                 * @return {undefined}
                 */
                value : function(expectedHashCode, type, opt_attributes, recurring, dataAndEvents) {
                    if (expectedHashCode > Math.random()) {
                        this._send(type, opt_attributes, recurring, dataAndEvents);
                    }
                }
            }, {
                key : "setUserId",
                /**
                 * @param {string} expectedHashCode
                 * @return {undefined}
                 */
                value : function(expectedHashCode) {
                    this._setUserId(expectedHashCode);
                }
            }, {
                key : "setContainerId",
                /**
                 * @param {string} expectedHashCode
                 * @return {undefined}
                 */
                value : function(expectedHashCode) {
                    this._setContainerId(expectedHashCode);
                }
            }, {
                key : "notificationShown",
                /**
                 * @param {string} expectedHashCode
                 * @return {undefined}
                 */
                value : function(expectedHashCode) {
                    this._send("cs.notification.show", "show notification on the page", $$Log.LogLevel.INFO, {
                        type : expectedHashCode
                    });
                }
            }, {
                key : "notificationHide",
                /**
                 * @param {string} expectedHashCode
                 * @return {undefined}
                 */
                value : function(expectedHashCode) {
                    this._send("cs.notification.hide", "hide notification on the page", $$Log.LogLevel.INFO, {
                        type : expectedHashCode
                    });
                }
            }]), clone;
        }();
        expectedHashCode.Telemetry = Telemetry;
    }, {
        "./felog" : 304,
        "babel-runtime/core-js/json/stringify" : 22,
        "babel-runtime/helpers/classCallCheck" : 34,
        "babel-runtime/helpers/createClass" : 35
    }],
    311 : [function(dataAndEvents, deepDataAndEvents, expectedHashCode) {
        /**
         * @return {?}
         */
        function value() {
            return window.tracker = window.tracker || {}, window.tracker;
        }
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        /** @type {function (): ?} */
        expectedHashCode.tracker = value;
    }, {}],
    312 : [function(require, dataAndEvents, expectedHashCode) {
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var getActual = require("emitter");
        var _ = require("lodash");
        var filter = require("dompurify");
        var view = require("lib/dom");
        var c = require("lib/util");
        var editor = require("lib/wrap");
        /**
         * @param {Object} e
         * @return {?}
         */
        expectedHashCode.createHtmlDom = function(e) {
            /**
             * @param {Object} types
             * @param {?} index
             * @return {?}
             */
            function check(types, index) {
                var array = _.where(self.matches.get(), {
                    inDom : true
                });
                var result = _.difference(array, types);
                result.forEach(function(attributes) {
                    return remove(attributes);
                });
                /** @type {boolean} */
                var a = false;
                /** @type {number} */
                var i = 0;
                for (;i < types.length;i++) {
                    var node = types[i];
                    if (node.replaced) {
                        node._s = node.s;
                        node._e = node.e;
                    }
                    if (!node.inDom) {
                        /** @type {boolean} */
                        a = true;
                        fn(node, types);
                    }
                }
                return a ? (finish(function() {
                    return render(types, index);
                }), void view.invalidate()) : (view.invalidate(), view.emit("rendered"));
            }
            /**
             * @param {Function} onComplete
             * @return {undefined}
             */
            function finish(onComplete) {
                var elem = parse();
                onComplete();
                if (view.isFocused(el)) {
                    if (getText(elem)) {
                        add(elem.pos);
                    }
                }
            }
            /**
             * @param {(Node|string)} key
             * @param {Array} haystack
             * @return {undefined}
             */
            function fn(key, haystack) {
                /** @type {number} */
                var i = 0;
                for (;i < haystack.length;i++) {
                    var attributes = haystack[i];
                    if (key._e - key._s > attributes._e - attributes._s) {
                        if (editor.collision(key, attributes) > 0) {
                            if (attributes.inDom) {
                                remove(attributes);
                            }
                        }
                    }
                }
            }
            /**
             * @param {Object} data
             * @param {(Function|string)} property
             * @return {undefined}
             */
            function render(data, property) {
                /**
                 * @param {string} child
                 * @param {?} opt_attributes
                 * @return {?}
                 */
                function render(child, opt_attributes) {
                    var elem = d.createElement("g");
                    var childEl = self.getMatchClass(child, property || "");
                    return elem.className = "gr_ gr_" + child.id + childEl + " " + (child.cls || ""), elem.textContent = opt_attributes, elem.id = child.id.toString(), elem.setAttribute("data-gr-id", child.id.toString()), elem;
                }
                editor.render({
                    node : el,
                    matches : data,
                    /** @type {function (string, ?): ?} */
                    createElement : render,
                    isValidNode : e.isValidNode,
                    isValidMatchForNode : e.isValidMatchForNode,
                    type : "dom"
                });
                /** @type {number} */
                var i = 0;
                for (;i < data.length;i++) {
                    var attributes = data[i];
                    if (!attributes.inDom) {
                        self.matches.remove(attributes, true);
                    }
                }
                view.emit("rendered");
            }
            /**
             * @param {boolean} path
             * @return {?}
             */
            function bind(path) {
                return path && (view.emit("startInvalidateNode"), editor.invalidateNode(el), view.emit("endInvalidateNode")), editor.getText(el).replace(c.NBSP_RE, " ");
            }
            /**
             * @param {?} i
             * @return {undefined}
             */
            function evalScript(i) {
                el.innerHTML = c.br(_.escape(i));
            }
            /**
             * @param {?} str
             * @return {undefined}
             */
            function isEmpty(str) {
                el.innerHTML = filter.sanitize(str);
            }
            /**
             * @return {?}
             */
            function post() {
                var value = view.getDocSelection(d);
                var target = value.anchorNode;
                if (target) {
                    var node = target.parentNode;
                    var codeSegments = value.toString();
                    if (!(codeSegments.length > 1)) {
                        if (view.hasClass(node, "gr_")) {
                            return node.parentNode && (view.hasClass(node.parentNode, "gr_spell") && (node = node.parentNode)), self.selectById(node.id);
                        }
                        var next = target.nextElementSibling;
                        return next && (target.__node_text && (view.hasClass(next, "gr_tiny") && target.__node_text.length === value.focusOffset)) ? self.selectById(next.id) : void(self.selectedMatch && self.selectedMatch.deselect());
                    }
                }
            }
            /**
             * @return {?}
             */
            function parse() {
                var s = view.getDocSelection(d);
                var elem = s.anchorNode || {};
                var node = s.focusNode || {};
                return{
                    pos : promote(),
                    aNode : elem,
                    aNodeText : elem.textContent,
                    aNodeParent : elem.parentNode,
                    fNode : node,
                    fNodeText : node.textContent,
                    fNodeParent : node.parentNode
                };
            }
            /**
             * @param {?} elems
             * @return {?}
             */
            function getText(elems) {
                var s = view.getDocSelection(d);
                var elem = s.anchorNode || {};
                var node = s.focusNode || {};
                return elems.aNode !== elem || (elems.aNodeText !== elem.textContent || (elems.aNodeParent !== elem.parentNode || (elems.fNode !== node || (elems.fNodeText !== node.textContent || elems.fNodeParent !== node.parentNode))));
            }
            /**
             * @param {?} range
             * @param {number} details
             * @return {?}
             */
            function add(range, details) {
                details = details || 10;
                var index = editor.setCursorPos(el, range);
                return index === false && details <= 1 ? view.emit("badCursorPositionRetryFail") : index === false && range.s > 1 ? (view.emit("badCursorPosition"), add({
                    s : range.s - 1,
                    e : range.e - 1
                }, details - 1)) : void 0;
            }
            /**
             * @return {?}
             */
            function promote() {
                return editor.getCursorPos(el);
            }
            /**
             * @param {Object} cfg
             * @return {?}
             */
            function initialize(cfg) {
                return cfg._s = cfg.s, cfg._e = cfg.e, cfg.id = "tmp_id", cfg.cls = "gr_tmp_id", render([cfg]), [].slice.call(el.querySelectorAll(".gr_tmp_id"));
            }
            /**
             * @param {Object} self
             * @return {?}
             */
            function callback(self) {
                return ".gr_" + self.id;
            }
            /**
             * @param {string} selector
             * @return {undefined}
             */
            function init(selector) {
                var end = editor.getCursorPos(el);
                var template = el.querySelectorAll(selector);
                var len = template.length;
                /** @type {number} */
                var i = 0;
                for (;i < len;i++) {
                    editor.unwrap(template[i]);
                }
                if (view.isFocused(el)) {
                    editor.setCursorPos(el, end);
                }
            }
            /**
             * @param {Object} opt_attributes
             * @param {Object} deepDataAndEvents
             * @return {undefined}
             */
            function remove(opt_attributes, deepDataAndEvents) {
                var end = editor.getCursorPos(el);
                var heads = el.querySelectorAll(callback(opt_attributes));
                var numHeads = heads.length;
                /** @type {number} */
                var i = 0;
                for (;i < numHeads;i++) {
                    if (deepDataAndEvents) {
                        var tbody = heads[i].parentNode;
                        if (tbody) {
                            tbody.removeChild(heads[i]);
                        }
                    } else {
                        editor.unwrap(heads[i]);
                    }
                }
                /** @type {boolean} */
                opt_attributes.inDom = false;
                if (view.isFocused(el)) {
                    editor.setCursorPos(el, end);
                }
            }
            /**
             * @param {Array} c
             * @return {?}
             */
            function complete(c) {
                var e = void 0;
                var b = c[0];
                /** @type {string} */
                var byTag = "contains" in b ? "contains" : "compareDocumentPosition";
                /** @type {number} */
                var test = "contains" === byTag ? 1 : 16;
                e: for (;b.parentNode;) {
                    e = c.length;
                    b = b.parentNode;
                    for (;e--;) {
                        if ((b[byTag](c[e]) & test) !== test) {
                            continue e;
                        }
                    }
                    return b;
                }
                return null;
            }
            /**
             * @param {Array} data
             * @return {undefined}
             */
            function done(data) {
                var newState = complete(data);
                /** @type {Array} */
                var configList = data;
                var ln = data.length;
                if (ln > 1) {
                    var cycle = editor.mergeNodes(data);
                    /** @type {Array} */
                    configList = [];
                    configList.push(cycle);
                    /** @type {number} */
                    ln = configList.length;
                }
                /** @type {number} */
                var i = 0;
                for (;i < ln;i++) {
                    var node = configList[i];
                    var pn = node.parentNode;
                    /** @type {number} */
                    var l = 0;
                    for (;pn !== newState && l < 1E3;) {
                        var val = pn;
                        pn = pn && pn.parentNode;
                        editor.unwrap(val);
                        l++;
                    }
                    editor.unwrap(node);
                }
            }
            /**
             * @param {Node} s
             * @param {string} value
             * @param {boolean} success
             * @return {undefined}
             */
            function show(s, value, success) {
                fn(s, self.getFiltered());
                var cached = initialize({
                    s : s.s,
                    e : s.e
                });
                if (cached.length > 1) {
                    done(cached);
                }
                var wrapper = initialize({
                    s : s.s,
                    e : s.e
                })[0];
                /** @type {string} */
                wrapper.textContent = value;
                wrapper.id = s.id.toString();
                /** @type {boolean} */
                s.replaced = !success;
                /** @type {boolean} */
                s.inDom = !success;
                /** @type {string} */
                wrapper.className = "gr_ gr_" + s.id + self.getMatchClass(s, self.getText()) + " " + (s.cls || "");
                wrapper.setAttribute("data-gr-id", s.id.toString());
                if (success) {
                    editor.unwrap(wrapper);
                }
            }
            /**
             * @param {Function} v
             * @return {undefined}
             */
            function select(v) {
                var codeSegments = d.querySelectorAll(callback(v));
                var valuesLen = codeSegments.length;
                /** @type {number} */
                var i = 0;
                for (;i < valuesLen;i++) {
                    view.addClass(codeSegments[i], "sel");
                }
            }
            /**
             * @param {Function} object
             * @return {undefined}
             */
            function refresh(object) {
                var codeSegments = d.querySelectorAll(callback(object));
                var valuesLen = codeSegments.length;
                /** @type {number} */
                var i = 0;
                for (;i < valuesLen;i++) {
                    view.removeClass(codeSegments[i], "sel");
                }
            }
            /**
             * @param {HTMLElement} node
             * @param {?} item
             * @return {?}
             */
            function addClass(node, item) {
                var start = node.__pos;
                var end = start + (node.textContent || "").length;
                return start >= item._s && end <= item._e;
            }
            /**
             * @param {string} expectedHashCode
             * @return {undefined}
             */
            function load(expectedHashCode) {
                if (tref) {
                    clearTimeout(tref);
                }
                var values = el.querySelectorAll("g[data-gr-id]");
                var valuesLen = values.length;
                /** @type {Array} */
                var arr = [];
                editor.markChildPos(el);
                /** @type {number} */
                var i = 0;
                for (;i < valuesLen;i++) {
                    var node = values[i];
                    var c = self.matches.byId(node.id);
                    if (arr.push(node.id), c && addClass(node, c)) {
                        if (!c.inDom && (expectedHashCode && (c.inDom = true)), !c.selected && (view.hasClass(node, "sel") && view.removeClass(node, "sel")), !node.className) {
                            var pos = self.getMatchClass(c, self.getText());
                            /** @type {string} */
                            node.className = "gr_ gr_" + c.id + pos + " " + (c.cls || "");
                        }
                    } else {
                        var elem = parse();
                        editor.unwrap(node);
                        if (view.isFocused(el)) {
                            if (getText(elem)) {
                                add(elem.pos);
                            }
                        }
                    }
                }
                var classNames = self.getFiltered();
                /** @type {boolean} */
                var p = false;
                /** @type {number} */
                var j = 0;
                for (;j < classNames.length;j++) {
                    var widget = classNames[j];
                    var label = widget.id;
                    if (arr.indexOf(label) === -1) {
                        /** @type {boolean} */
                        widget.inDom = false;
                        /** @type {boolean} */
                        p = true;
                    }
                }
                if (p) {
                    check(classNames, self.getText());
                }
            }
            /**
             * @param {Node} type
             * @return {undefined}
             */
            function setup(type) {
                /** @type {number} */
                var i = 0;
                var valuesLen = type.childNodes.length;
                for (;i < valuesLen;++i) {
                    var cycle = type.childNodes[i];
                    if (3 !== cycle.nodeType) {
                        if (1 !== cycle.nodeType) {
                            ca.push(cycle);
                        }
                    }
                    if (3 === cycle.nodeType) {
                        setup(cycle);
                    }
                }
            }
            /**
             * @return {undefined}
             */
            function attributes() {
                setTimeout(function() {
                    setup(el);
                    /** @type {number} */
                    var i = 0;
                    for (;i < ca.length;i++) {
                        var c = ca[i];
                        if (c.parentNode) {
                            c.parentNode.removeChild(c);
                        }
                    }
                    if (ca.length > 0) {
                        el.normalize();
                        var node = el.firstChild;
                        if (node) {
                            if (node.parentNode) {
                                if ("" === (node.textContent || "").trim()) {
                                    node.parentNode.removeChild(node);
                                }
                            }
                        }
                        var style = el.lastChild;
                        if (style) {
                            if (style.parentNode) {
                                if ("" === (style.textContent || "").trim()) {
                                    style.parentNode.removeChild(style);
                                }
                            }
                        }
                        self.hardReset();
                    }
                    /** @type {Array} */
                    ca = [];
                    view.emit("startInvalidateNode");
                    editor.invalidateNode(el);
                    view.emit("endInvalidateNode");
                }, 0);
            }
            /**
             * @return {?}
             */
            function clean() {
                var div = el.cloneNode(true);
                var codeSegments = div.querySelectorAll(".gr-alert");
                /** @type {number} */
                var i = 0;
                for (;i < codeSegments.length;i++) {
                    editor.unwrap(codeSegments[i]);
                }
                return div.innerHTML;
            }
            /**
             * @return {undefined}
             */
            function query() {
                var codeSegments = el.querySelectorAll(".gr-alert");
                /** @type {number} */
                var i = 0;
                for (;i < codeSegments.length;i++) {
                    editor.unwrap(codeSegments[i]);
                }
            }
            /**
             * @return {?}
             */
            function escapeHTMLEncode() {
                return el.innerHTML;
            }
            /**
             * @return {undefined}
             */
            function startGame() {
                /** @type {number} */
                tref = setTimeout(load, backoff);
                self.on("paste", function() {
                    view.emit("startInvalidateNode");
                    editor.invalidateNode(el);
                    view.emit("endInvalidateNode");
                    view.invalidate();
                });
            }
            /**
             * @return {undefined}
             */
            function stop() {
                if (tref) {
                    clearTimeout(tref);
                }
            }
            var self = e.editor;
            var el = e.el;
            var d = el.ownerDocument;
            var view = getActual({
                /** @type {function (Object, ?): ?} */
                render : check,
                /** @type {function (Object, Object): undefined} */
                remove : remove,
                /** @type {function (Object): ?} */
                renderRange : initialize,
                /** @type {function (string): undefined} */
                removeBySelector : init,
                /** @type {function (Node, string, boolean): undefined} */
                replace : show,
                /** @type {function (): ?} */
                getCleanHtml : clean,
                /** @type {function (): undefined} */
                cleanHTML : query,
                /** @type {function (): ?} */
                getHtml : escapeHTMLEncode,
                /** @type {function (): undefined} */
                start : startGame,
                /** @type {function (): undefined} */
                stop : stop,
                /** @type {function (Function): undefined} */
                select : select,
                /** @type {function (Function): undefined} */
                deselect : refresh,
                /** @type {function (boolean): ?} */
                getText : bind,
                /** @type {function (?): undefined} */
                setText : evalScript,
                /** @type {function (?): undefined} */
                setHtml : isEmpty,
                /** @type {function (): ?} */
                changeSelection : post,
                /** @type {function (): ?} */
                getCursor : promote,
                /** @type {function (?, number): ?} */
                setCursor : add,
                /** @type {function (Array): undefined} */
                unwrapToCommonParent : done,
                /** @type {function (string): undefined} */
                invalidate : load
            });
            if (self) {
                if (self.on) {
                    self.on("immediatepaste", attributes);
                }
            }
            /** @type {number} */
            var backoff = 1E3;
            var tref = void 0;
            /** @type {Array} */
            var ca = [];
            return view;
        };
    }, {
        dompurify : "dompurify",
        emitter : "emitter",
        "lib/dom" : 215,
        "lib/util" : 322,
        "lib/wrap" : 324,
        lodash : "lodash"
    }],
    313 : [function(require, dataAndEvents, expectedHashCode) {
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var result = require("lib/wrap");
        var target = require("lib/dom");
        var e = require("lib/util");
        /**
         * @param {Object} item
         * @return {undefined}
         */
        expectedHashCode.HtmlTypingLimiter = function(item) {
            /**
             * @return {undefined}
             */
            function getSelectionStart() {
                var o = target.getDocSelection(s);
                if (o.anchorNode) {
                    result.invalidateNode(o.anchorNode);
                }
            }
            /**
             * @return {undefined}
             */
            function opt_attributes() {
                getSelectionStart();
            }
            /**
             * @param {KeyboardEvent} event
             * @return {?}
             */
            function f(event) {
                var value = target.getDocSelection(s);
                if (!(value.toString().length > 1)) {
                    var node = value.anchorNode;
                    result.invalidateNode(node);
                    var oEvent = event.originalEvent;
                    var related = event.commandKeyPressed;
                    var cur = event.navKey;
                    var next = node.parentNode;
                    var h = oEvent.metaKey || oEvent.ctrlKey;
                    if (!h && (related && (index = null), node && (node.nodeType && (3 === node.nodeType && !(cur || related && (13 !== e.keyCode(oEvent) && 32 !== e.keyCode(oEvent))))))) {
                        /** @type {null} */
                        index = null;
                        var oldStyle = node.textContent || "";
                        if (target.hasClass(next, "gr_") && (oldStyle.length === value.anchorOffset || 0 === value.anchorOffset)) {
                            if (13 === e.keyCode(oEvent)) {
                                return check(node.parentNode);
                            }
                            /** @type {string} */
                            var content = String.fromCharCode(e.keyCode(oEvent));
                            if (!oEvent.shiftKey) {
                                /** @type {string} */
                                content = content.toLowerCase();
                            }
                            var elem = s.createTextNode(content);
                            if (" " === elem.textContent) {
                                /** @type {string} */
                                elem.textContent = String.fromCharCode(160);
                            }
                            if (0 === value.anchorOffset) {
                                target.insertBefore(elem, next);
                            } else {
                                target.insertAfter(elem, next);
                            }
                            index = result.getPosInText(el, elem, 1);
                            result.setRange({
                                node : elem,
                                offset : 1
                            });
                            oEvent.preventDefault();
                            result.invalidateNode(elem);
                            setTimeout(element.oninput, 0);
                        }
                    }
                }
            }
            /**
             * @param {Element} self
             * @return {undefined}
             */
            function check(self) {
                setTimeout(function() {
                    if (self) {
                        if (self.parentNode) {
                            if (self.firstChild) {
                                if ("BR" === self.firstChild.tagName) {
                                    target.insertBefore(self.firstChild, self);
                                }
                            }
                            if (self.lastChild) {
                                if ("BR" === self.lastChild.tagName) {
                                    target.insertAfter(self.lastChild, self);
                                }
                            }
                            result.invalidateNode(self);
                        }
                    }
                }, 0);
            }
            /**
             * @param {KeyboardEvent} jqEvt
             * @return {undefined}
             */
            function attributes(jqEvt) {
                var evt = jqEvt.originalEvent;
                var n = evt.metaKey || evt.ctrlKey;
                if (n && (90 === e.keyCode(evt) && null !== index)) {
                    var obj = result.getCursorPos(el);
                    var info = result.getNodeByTextPos(el, index);
                    var t = result.getNodeText(info);
                    info.node.textContent = t.substr(0, info.offset - 1) + t.substr(info.offset);
                    result.invalidateNode(info.node);
                    /** @type {null} */
                    index = null;
                    obj.s--;
                    obj.e--;
                    result.setCursorPos(el, obj);
                    evt.preventDefault();
                    setTimeout(element.oninput, 0);
                }
            }
            var element = item.inputListener;
            var el = item.el;
            var s = el.ownerDocument;
            var index = void 0;
            element.on("keypress", f);
            element.on("keydown", attributes);
            element.on("input", opt_attributes);
        };
    }, {
        "lib/dom" : 215,
        "lib/util" : 322,
        "lib/wrap" : 324
    }],
    314 : [function(require, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} options
         * @return {?}
         */
        function formatter(options) {
            return options && options.__esModule ? options : {
                "default" : options
            };
        }
        var nodes = require("babel-runtime/core-js/object/assign");
        var result = formatter(nodes);
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var getActual = require("emitter");
        var _ = require("lodash");
        var assert = require("./matches");
        var $ = require("./input-listener");
        var Block = require("./html-typing-limiter");
        var toString = require("./html-dom");
        var helper = require("./textarea-dom");
        var config = require("lib/util");
        var util = require("lib/dom");
        /**
         * @param {Object} options
         * @return {?}
         */
        expectedHashCode.createEditor = function(options) {
            /**
             * @return {undefined}
             */
            function run() {
                event.start();
                el.start();
                if (options.value) {
                    func(options.value);
                }
                lang.update(self.currentText);
                call();
            }
            /**
             * @param {Array} fn
             * @return {undefined}
             */
            function connect(fn) {
                /** @type {boolean} */
                var result = fn.length > args;
                forOwn = result ? okay : failed;
                /** @type {boolean} */
                collection = result;
            }
            /**
             * @param {?} object
             * @return {undefined}
             */
            function add(object) {
                lang.update(object);
                lang.updateMatchesToCurrentRevision(self.matches.get());
            }
            /**
             * @param {boolean} p
             * @return {?}
             */
            function require(p) {
                return el.getText(p);
            }
            /**
             * @return {?}
             */
            function next() {
                return self.currentText;
            }
            /**
             * @return {undefined}
             */
            function test() {
                self.currentText = require(true);
                self.emit("afterReplace");
            }
            /**
             * @param {?} i
             * @return {undefined}
             */
            function func(i) {
                model.get().forEach(function(canvasHolder) {
                    /** @type {boolean} */
                    canvasHolder.inDom = false;
                });
                add(i);
                model.update(self.currentText, i);
                el.setText(i);
                if (self.isHtmlGhost) {
                    setTimeout(test, 100);
                } else {
                    test();
                }
            }
            /**
             * @param {?} position
             * @return {?}
             */
            function fn(position) {
                return el.setCursor(position);
            }
            /**
             * @return {?}
             */
            function attr() {
                return el.getCursor();
            }
            /**
             * @return {undefined}
             */
            function attributes() {
                self.latestCursor = attr();
            }
            /**
             * @return {undefined}
             */
            function Promise$_Scheduler() {
                fn(self.latestCursor);
            }
            /**
             * @param {boolean} isXML
             * @return {undefined}
             */
            function find(isXML) {
                event.skipInputEvents(isXML);
            }
            /**
             * @return {undefined}
             */
            function call() {
                lang.send();
            }
            /**
             * @param {KeyboardEvent} e
             * @return {undefined}
             */
            function move(e) {
                /** @type {number} */
                lastPreventedTime = Date.now();
                if (32 === e.originalEvent.charCode) {
                    if (he) {
                        check();
                    }
                }
            }
            /**
             * @return {undefined}
             */
            function listener() {
                if (!serializer) {
                    click(void 0, true);
                }
                call();
                self.emit("change", void 0);
            }
            /**
             * @return {?}
             */
            function setup() {
                return serializer ? self.el.value : self.el.innerHTML;
            }
            /**
             * @return {?}
             */
            function start() {
                if (self._currentText !== setup()) {
                    self._currentText = setup();
                    var user = require();
                    connect(user);
                    var attributes = {
                        text : user,
                        cancel : false
                    };
                    if (self.emit("beforeUpdate", attributes), attributes.cancel) {
                        return start();
                    }
                    add(user);
                    model.update(self.currentText, user);
                    self.currentText = user;
                }
            }
            /**
             * @param {Function} opt_attributes
             * @param {(Function|string)} dataAndEvents
             * @return {undefined}
             */
            function click(opt_attributes, dataAndEvents) {
                /** @type {boolean} */
                var actual = false;
                if (!serializer) {
                    var params = util.getDocSelection(doc);
                    actual = params.anchorNode && util.hasClass(params.anchorNode.parentNode, "gr_");
                }
                if (serializer || (dataAndEvents || (actual || self.isHtmlGhost))) {
                    callback();
                    attributes();
                    self.emit("input", opt_attributes);
                }
            }
            /**
             * @return {undefined}
             */
            function gl() {
                el.changeSelection();
            }
            /**
             * @param {?} id
             * @return {undefined}
             */
            function byId(id) {
                var element = self.matches.byId(id);
                if (element) {
                    if (self.selectedMatch) {
                        if (self.selectedMatch !== element) {
                            self.selectedMatch.deselect();
                        }
                    }
                }
                if (element) {
                    element.select();
                }
            }
            /**
             * @return {undefined}
             */
            function callback() {
                if (!de) {
                    start();
                    var key = iterator();
                    el.render(key, self.currentText);
                    self.emit("saveDoc", self.currentText);
                }
            }
            /**
             * @param {Object} data
             * @return {undefined}
             */
            function opt_attributes(data) {
                self.sid = data.sid;
                self.emit("saveSid", self.sid);
            }
            /**
             * @param {Object} o
             * @param {?} text
             * @return {?}
             */
            function encode(o, text) {
                return o._s = o._s || o.s, o._e = o._e || o.e, o.sd = o._s - o.s, o.ed = o._e - o.e, true;
            }
            /**
             * @param {string} e
             * @return {undefined}
             */
            function toggle(e) {
                if (collection) {
                    elements.push(e);
                    if (!abortTimeout) {
                        write();
                    }
                } else {
                    contains(e);
                }
                self.emit("tracking", {
                    event : "matchFound",
                    matches : e
                });
            }
            /**
             * @return {undefined}
             */
            function write() {
                /** @type {number} */
                abortTimeout = setTimeout(function() {
                    if (elements.length) {
                        if (Date.now() - lastPreventedTime > PREVENT_DURATION) {
                            check();
                        }
                    }
                    if (elements.length) {
                        write();
                    } else {
                        abortTimeout = void 0;
                    }
                }, 50);
            }
            /**
             * @return {?}
             */
            function check() {
                if (event.isUserTyping()) {
                    return clearTimeout(timer), void(timer = setTimeout(check, 200));
                }
                if (clearTimeout(timer), elements.length) {
                    var match = elements.shift();
                    if (match) {
                        contains(match);
                    } else {
                        check();
                    }
                }
            }
            /**
             * @param {Object} item
             * @param {boolean} dataAndEvents
             * @return {?}
             */
            function contains(item, dataAndEvents) {
                var text = require();
                if (self.currentText = text, lang.update(text), lang.updateMatch(item), self._removedByServer.indexOf(item.id) > -1) {
                    return console.log("skip because it is removed by server");
                }
                if (self.processMatch(item, text) !== false) {
                    var t = self.tryToAdd(item, text);
                    if (t) {
                        init(item);
                        if (dataAndEvents) {
                            callback();
                        } else {
                            forOwn();
                        }
                    }
                }
            }
            /**
             * @param {string} e
             * @return {undefined}
             */
            function handleInput(e) {
                if (e && elements.length) {
                    var from = e.match;
                    var p = e.position;
                    if (elements[p]) {
                        if (elements[p].id === from.id) {
                            /** @type {boolean} */
                            elements[p] = false;
                            contains(from, true);
                        }
                    }
                }
            }
            /**
             * @param {Object} opt_attributes
             * @param {string} type
             * @return {?}
             */
            function createDom(opt_attributes, type) {
                return model.tryToAdd(opt_attributes, type);
            }
            /**
             * @param {Object} items
             * @return {undefined}
             */
            function process(items) {
                if (items && 0 !== items.length) {
                    var test = require();
                    /** @type {number} */
                    var i = 0;
                    for (;i < items.length;i++) {
                        var options = items[i];
                        if (options.v === test.substring(options.s, options.e)) {
                            /** @type {boolean} */
                            options.rendered = false;
                            init(options);
                            model.add(options);
                        }
                    }
                    el.invalidate(true);
                    callback();
                }
            }
            /**
             * @return {?}
             */
            function match() {
                return model.get();
            }
            /**
             * @return {?}
             */
            function iterator() {
                return self.matchFilter(match());
            }
            /**
             * @param {Function} attributes
             * @return {undefined}
             */
            function init(attributes) {
                var uid = config.guid();
                /** @type {number} */
                var timestamp = Date.now();
                _.extend(attributes, {
                    uid : uid,
                    ts : timestamp,
                    /**
                     * @param {Node} pattern
                     * @param {string} obj
                     * @return {?}
                     */
                    replace : function(pattern, obj) {
                        return parse(pattern, obj, attributes);
                    },
                    /**
                     * @return {?}
                     */
                    undo : function() {
                        return change(attributes);
                    },
                    /**
                     * @return {?}
                     */
                    addToDict : function() {
                        return ready(attributes);
                    },
                    /**
                     * @return {?}
                     */
                    acknowledged : function() {
                        return sync(attributes);
                    },
                    /**
                     * @return {?}
                     */
                    ignore : function() {
                        return finish(attributes);
                    },
                    /**
                     * @return {?}
                     */
                    ignoreAll : function() {
                        return errorHandler(attributes);
                    },
                    /**
                     * @return {?}
                     */
                    remove : function() {
                        return error(attributes);
                    },
                    /**
                     * @return {?}
                     */
                    getEl : function() {
                        return _keys(attributes);
                    },
                    /**
                     * @param {Function} obj
                     * @return {?}
                     */
                    select : function(obj) {
                        return select(obj, attributes);
                    },
                    /**
                     * @param {Function} obj
                     * @return {?}
                     */
                    deselect : function(obj) {
                        return set(obj, attributes);
                    }
                });
                self.emit("matchExtend", attributes);
            }
            /**
             * @param {?} attributes
             * @param {boolean} value
             * @param {string} expectedHashCode
             * @return {undefined}
             */
            function parse(attributes, value, expectedHashCode) {
                self.emit("beforeReplace");
                var options = require();
                /** @type {number} */
                var cycle = attributes.length - expectedHashCode.oldVal.length;
                if (self.latestCursor.s < expectedHashCode.s) {
                    /** @type {number} */
                    cycle = 0;
                }
                self.beforeReplace(expectedHashCode, cycle, attributes);
                el.remove(expectedHashCode);
                el.replace(expectedHashCode, attributes, value);
                model.replace(expectedHashCode, attributes, value, options);
                concat(expectedHashCode, value ? "undoed" : "accepted");
                self.currentText = require();
                expectedHashCode.rev++;
                fn({
                    s : expectedHashCode._e,
                    e : expectedHashCode._e
                });
                if (!serializer) {
                    element.focus();
                    fn({
                        s : expectedHashCode._e,
                        e : expectedHashCode._e
                    });
                }
                callback();
                call();
                self.emit("afterReplace", expectedHashCode);
                if (!value) {
                    self.emit("fix", expectedHashCode);
                    self.emit("tracking", {
                        event : "matchAcceptedCard",
                        matches : expectedHashCode
                    });
                }
            }
            /**
             * @param {Function} item
             * @return {undefined}
             */
            function change(item) {
                var value = item.v;
                item.replace(value, true);
                /** @type {boolean} */
                item.undoed = true;
                item.beforeReplace = value;
                var $item = model.removeIntersectedWithReplace(item);
                if ($item) {
                    callback();
                }
                self.emit("undo");
                self.emit("tracking", {
                    event : "matchUndo",
                    /** @type {Function} */
                    matches : item
                });
            }
            /**
             * @param {string} key
             * @return {undefined}
             */
            function ready(key) {
                model.forceRemove(key);
                lang.addToDictionary(key);
                var actual = model.removeSimilar(key);
                actual.push(key);
                callback();
                self.emit("fix");
                self.emit("tracking", {
                    event : "matchAddToDict",
                    matches : actual
                });
            }
            /**
             * @param {Function} result
             * @return {undefined}
             */
            function finish(result) {
                model.forceRemove(result);
                lang.ignore(result);
                model.removeByPID(result);
                callback();
                self.emit("fix");
                self.emit("tracking", {
                    event : "matchIgnored",
                    /** @type {Function} */
                    matches : result
                });
            }
            /**
             * @param {Object} str
             * @return {undefined}
             */
            function sync(str) {
                model.forceRemove(str);
                lang.acknowledged(str);
                model.removeByPID(str);
                callback();
                self.emit("fix");
                self.emit("tracking", {
                    event : "acknowledged",
                    matches : str
                });
            }
            /**
             * @param {string} key
             * @return {undefined}
             */
            function errorHandler(key) {
                model.forceRemove(key);
                model.removeSimilar(key);
                lang.ignoreAll(key);
                var actual = model.removeSimilar(key);
                actual.push(key);
                self.emit("tracking", {
                    event : "matchIgnoredAll",
                    matches : actual
                });
                callback();
            }
            /**
             * @param {Object} attributes
             * @return {undefined}
             */
            function error(attributes) {
                model.remove(attributes, true);
                el.remove(attributes);
                self.emit("rendered");
            }
            /**
             * @return {?}
             */
            function Editor() {
                var result = attr();
                var test = require();
                return{
                    value : test.substring(result.s, result.e),
                    s : result.s,
                    e : result.e,
                    text : test
                };
            }
            /**
             * @param {Object} obj
             * @return {?}
             */
            function _keys(obj) {
                return doc.getElementById(String(obj.id));
            }
            /**
             * @param {Function} event
             * @param {Function} attributes
             * @return {undefined}
             */
            function select(event, attributes) {
                if (!attributes.selected) {
                    /** @type {boolean} */
                    attributes.selected = true;
                    if (!event) {
                        self.emit("selectedMatch", attributes);
                        concat(attributes, "looked");
                    }
                    el.select(attributes);
                    /** @type {Function} */
                    self.selectedMatch = attributes;
                }
            }
            /**
             * @param {Function} lock
             * @param {Function} attributes
             * @return {undefined}
             */
            function set(lock, attributes) {
                if (attributes.selected) {
                    /** @type {boolean} */
                    attributes.selected = false;
                    if (!lock) {
                        self.emit("deselectedMatch", attributes);
                    }
                    el.deselect(attributes);
                    self.selectedMatch = void 0;
                }
            }
            /**
             * @param {string} expectedHashCode
             * @param {string} cycle
             * @return {undefined}
             */
            function concat(expectedHashCode, cycle) {
                console.log("FEEDBACK", expectedHashCode.value, cycle);
                lang.feedback(expectedHashCode, cycle);
            }
            /**
             * @param {?} rows
             * @return {undefined}
             */
            function render(rows) {
                if (!rows) {
                    lang.reset();
                }
                remove();
                start();
                lang.start();
                call();
                self.emit("rendered");
            }
            /**
             * @return {undefined}
             */
            function remove() {
                model.get().forEach(function(attributes) {
                    return el.remove(attributes);
                });
                model.clear();
                /** @type {Array} */
                self._removedByServer = [];
                /** @type {string} */
                self._currentText = "";
                callback();
            }
            /**
             * @return {undefined}
             */
            function end() {
                /** @type {boolean} */
                de = true;
                event.stop();
                el.stop();
                util.unlisten(element, "click", attributes);
                self.emit("exit");
            }
            var element = options.el;
            var doc = element.ownerDocument;
            var lang = options.api;
            /** @type {number} */
            var PREVENT_DURATION = 500;
            /** @type {number} */
            var args = 3E3;
            /** @type {boolean} */
            var collection = false;
            if (!_.isUndefined(options.useBufferForAddingMatches)) {
                collection = options.useBufferForAddingMatches;
            }
            /** @type {boolean} */
            var de = false;
            var self = getActual({
                el : element,
                /**
                 * @param {boolean} el
                 * @return {?}
                 */
                getText : function(el) {
                    return el ? require() : next();
                },
                /** @type {function (?): undefined} */
                setText : func,
                /** @type {function (?): ?} */
                setCursor : fn,
                /** @type {function (): ?} */
                getCursor : attr,
                /** @type {function (): undefined} */
                saveCursor : attributes,
                /** @type {function (): undefined} */
                restoreCursor : Promise$_Scheduler,
                /** @type {function (Function): undefined} */
                addMethodsToMatch : init,
                /** @type {function (Object): undefined} */
                addMatches : process,
                /** @type {function (Object, string): ?} */
                tryToAdd : createDom,
                /** @type {function (): undefined} */
                render : callback,
                /** @type {function (): undefined} */
                check : call,
                /** @type {function (): ?} */
                getMatches : match,
                /** @type {function (): ?} */
                getFiltered : iterator,
                /** @type {function (): ?} */
                getSelection : Editor,
                close : close,
                /** @type {function (): undefined} */
                clearData : remove,
                /** @type {function (?): undefined} */
                hardReset : render,
                latestCursor : {
                    s : 0,
                    e : 0
                },
                /** @type {function (): undefined} */
                exit : end,
                waitTime : PREVENT_DURATION,
                /**
                 * @param {?} data
                 * @return {?}
                 */
                matchFilter : function(data) {
                    return data;
                },
                /** @type {function (Object, ?): ?} */
                processMatch : encode,
                /**
                 * @param {string} expectedHashCode
                 * @param {string} type
                 * @param {?} opt_attributes
                 * @return {undefined}
                 */
                beforeReplace : function(expectedHashCode, type, opt_attributes) {
                },
                /**
                 * @return {?}
                 */
                getMatchClass : function() {
                    return "";
                },
                processRemove : config._f,
                matchRemoved : config._f,
                extendMatch : config._f,
                /**
                 * @return {?}
                 */
                matchesEqual : function() {
                    return false;
                },
                canAddRemovedMatch : config._F,
                canShiftMatchEnd : config._F,
                /** @type {function (?): undefined} */
                selectById : byId,
                /** @type {function (boolean): undefined} */
                skipInputEvents : find,
                /** @type {function (): undefined} */
                run : run,
                api : lang,
                _removedByServer : [],
                matches : {},
                currentText : "",
                _currentText : "",
                isHtmlGhost : false
            });
            /** @type {number} */
            var lastPreventedTime = 0;
            var abortTimeout = void 0;
            /** @type {boolean} */
            var he = true;
            var model = assert.createMatches(self);
            var elements = model.matchesBuffer;
            self.matches = model;
            /** @type {boolean} */
            var serializer = "textarea" === options.editorType;
            /** @type {boolean} */
            self.isTextarea = serializer;
            var el = void 0;
            var timer = void 0;
            var value = (0, result["default"])({}, options, {
                editor : self
            });
            el = options.dom ? options.dom(value) : "contenteditable" === options.editorType ? toString.createHtmlDom(value) : serializer ? helper.createTextareaDom(value) : toString.createHtmlDom(value);
            self.dom = el;
            self.currentText = require() || "";
            var okay = _.debounce(callback, 1E3, {
                maxWait : 5E3
            });
            var cb = _.debounce(callback, 200, {
                maxWait : 1E3
            });
            var failed = window.requestIdleCallback ? function() {
                return window.requestIdleCallback(callback);
            } : cb;
            var forOwn = void 0;
            connect(self.currentText);
            model.on("remove", error);
            model.on("hasAvailableRenderDeletedMatch", handleInput);
            var event = $.createInputListener({
                el : element,
                editor : self
            });
            return self.inputListener = event, "contenteditable" === options.editorType && (Block.HtmlTypingLimiter({
                inputListener : event,
                el : element
            }), self.setHtml = function(html) {
                el.setHtml(html);
                test();
            }, self.getHtml = el.getHtml), event.on("changed", listener), event.on("input", click), event.on("keypress", move), event.on("selectionChanged", gl), util.listen(element, "click", attributes), event.delegate(self, "keydown"), event.delegate(self, "paste"), event.delegate(self, "immediatepaste"), lang.delegate(self, "sending"), lang.delegate(self, "finish"), lang.on("add", toggle), lang.on("start", opt_attributes), el.delegate(self, "rendered"), el.delegate(self, "startInvalidateNode"), el.delegate(self,
                "endInvalidateNode"), options.autorun && run(), self;
        };
    }, {
        "./html-dom" : 312,
        "./html-typing-limiter" : 313,
        "./input-listener" : 315,
        "./matches" : 317,
        "./textarea-dom" : 319,
        "babel-runtime/core-js/object/assign" : 24,
        emitter : "emitter",
        "lib/dom" : 215,
        "lib/util" : 322,
        lodash : "lodash"
    }],
    315 : [function(require, dataAndEvents, expectedHashCode) {
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var getActual = require("emitter");
        var util = require("lib/dom");
        var event = require("lib/util");
        var object = require("./watcher");
        /**
         * @param {Object} pane
         * @return {?}
         */
        expectedHashCode.createInputListener = function(pane) {
            /**
             * @return {?}
             */
            function $() {
                return config ? editor.getText(true) : editor.el.innerHTML;
            }
            /**
             * @return {undefined}
             */
            function start() {
                initialize();
                run();
            }
            /**
             * @return {undefined}
             */
            function stop() {
                CodeMirror();
                if (tref) {
                    clearTimeout(tref);
                }
            }
            /**
             * @param {Object} isXML
             * @return {undefined}
             */
            function find(isXML) {
                /** @type {boolean} */
                R = void 0 === isXML;
            }
            /**
             * @return {undefined}
             */
            function initialize() {
                util.listen(expectedHashCode, "input", opt_attributes);
                util.listen(expectedHashCode, "click", fn);
                util.listen(expectedHashCode, "keyup", gl);
                util.listen(expectedHashCode, "keypress", handler);
                util.listen(expectedHashCode, "keydown", init);
                util.listen(expectedHashCode, "paste", attributes);
                util.listen(doc, "mousedown", next);
                object.watch(expectedHashCode, attributes);
            }
            /**
             * @return {undefined}
             */
            function CodeMirror() {
                util.unlisten(expectedHashCode, "input", opt_attributes);
                util.unlisten(expectedHashCode, "click", fn);
                util.unlisten(expectedHashCode, "keyup", gl);
                util.unlisten(expectedHashCode, "keypress", handler);
                util.unlisten(expectedHashCode, "keydown", init);
                util.unlisten(expectedHashCode, "paste", attributes);
                util.unlisten(doc, "mousedown", next);
                object.unwatch(expectedHashCode, attributes);
            }
            /**
             * @param {Function} attributes
             * @return {undefined}
             */
            function opt_attributes(attributes) {
                self.emit("typed", attributes);
                if (!R) {
                    /** @type {number} */
                    lastPreventedTime = Date.now();
                    self.emit("input");
                }
            }
            /**
             * @return {undefined}
             */
            function attributes() {
                if (!self.ignorePaste) {
                    self.emit("immediatepaste");
                    if (!R) {
                        setTimeout(function() {
                            finish(true);
                            self.emit("paste");
                            self.emit("input");
                        }, 10);
                    }
                }
            }
            /**
             * @return {undefined}
             */
            function finish() {
                var AST_Node = arguments.length > 0 && (void 0 !== arguments[0] && arguments[0]);
                if (!R) {
                    var g = $();
                    var time = now();
                    /** @type {boolean} */
                    var methods = e.trim() !== g.trim();
                    if ("" !== g || methods) {
                        if (methods) {
                            if (commandKeyPressed) {
                                /** @type {boolean} */
                                AST_Node = true;
                                /** @type {boolean} */
                                commandKeyPressed = false;
                            }
                        }
                        if (methods && !time || AST_Node) {
                            self.emit("changed");
                            e = g;
                            error = e;
                        }
                    }
                }
            }
            /**
             * @return {undefined}
             */
            function flush() {
                self.emit("selectionChanged");
            }
            /**
             * @param {(Object|string)} event
             * @return {undefined}
             */
            function fn(event) {
                if (!R) {
                    if (!(window.event && !window.event.customWritted)) {
                        /** @type {boolean} */
                        event.customWritted = true;
                        /** @type {(Object|string)} */
                        window.event = event;
                    }
                    flush();
                }
            }
            /**
             * @param {Object} evt
             * @return {?}
             */
            function gl(evt) {
                if (!R) {
                    return appendModelPrefix(event.keyCode(evt)) ? void flush() : void self.emit("keyup");
                }
            }
            /**
             * @param {?} event
             * @return {?}
             */
            function fix(event) {
                return[37, 38, 39, 40, 17, 18, 91, 8, 16, 20, 9].indexOf(event) !== -1;
            }
            /**
             * @param {?} ss
             * @return {?}
             */
            function removeAll(ss) {
                return[32, 190, 188, 186, 59, 57, 48, 191, 49, 13, 8].indexOf(ss) !== -1;
            }
            /**
             * @param {?} value
             * @return {?}
             */
            function appendModelPrefix(value) {
                return[37, 38, 39, 40].indexOf(value) !== -1;
            }
            /**
             * @param {Object} evt
             * @return {undefined}
             */
            function init(evt) {
                if (!R) {
                    commandKeyPressed = removeAll(event.keyCode(evt));
                    self.emit("keydown", {
                        originalEvent : evt,
                        commandKeyPressed : commandKeyPressed,
                        listener : self
                    });
                }
            }
            /**
             * @param {Object} evt
             * @return {undefined}
             */
            function handler(evt) {
                if (!R) {
                    var fevt = fix(event.keyCode(evt));
                    var attributes = {
                        originalEvent : evt,
                        navKey : fevt,
                        commandKeyPressed : commandKeyPressed,
                        listener : self
                    };
                    self.emit("keypress", attributes);
                }
            }
            /**
             * @return {undefined}
             */
            function next() {
                if (!R) {
                    /** @type {number} */
                    lastPreventedTime = Date.now() - 1E5;
                    finish();
                }
            }
            /**
             * @return {?}
             */
            function now() {
                return!(Date.now() - lastPreventedTime > PREVENT_DURATION);
            }
            /**
             * @return {undefined}
             */
            function run() {
                /** @type {number} */
                tref = setTimeout(function() {
                    var err = $();
                    if (err !== error) {
                        /** @type {number} */
                        lastPreventedTime = Date.now();
                        error = err;
                        self.emit("input");
                    }
                    finish();
                    run();
                }, 200);
            }
            var expectedHashCode = pane.el;
            var editor = pane.editor;
            var doc = expectedHashCode.ownerDocument;
            var config = editor.isTextarea;
            /** @type {number} */
            var PREVENT_DURATION = 4E3;
            var tref = void 0;
            var commandKeyPressed = void 0;
            var e = $();
            /** @type {number} */
            var lastPreventedTime = Date.now();
            /** @type {string} */
            var error = "";
            var self = getActual({
                /** @type {function (): undefined} */
                start : start,
                /** @type {function (): undefined} */
                stop : stop,
                /** @type {function (Function): undefined} */
                oninput : opt_attributes,
                /** @type {function (): ?} */
                isUserTyping : now,
                /** @type {function (Object): undefined} */
                skipInputEvents : find,
                ignorePaste : void 0
            });
            /** @type {boolean} */
            var R = false;
            return self;
        };
    }, {
        "./watcher" : 320,
        emitter : "emitter",
        "lib/dom" : 215,
        "lib/util" : 322
    }],
    316 : [function(require, dataAndEvents, expectedHashCode) {
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var getActual = require("emitter");
        var _ = require("lodash");
        var assert = require("@grammarly-npm/textdiff");
        var str = require("lib/util");
        /**
         * @param {?} jQuery
         * @return {?}
         */
        expectedHashCode.createMatchUpdater = function(jQuery) {
            /**
             * @param {string} test
             * @param {(Array|string)} src
             * @return {undefined}
             */
            function output(test, src) {
                if (src) {
                    /** @type {Array} */
                    var counter = [];
                    /** @type {number} */
                    var i = 0;
                    for (;i < src.length;i++) {
                        var t = src[i];
                        var flag = void 0;
                        var val = test.substring(t.s, t.e);
                        if (!(t.skipUpdatePos && val)) {
                            /** @type {boolean} */
                            flag = t.value !== val;
                            if (flag) {
                                counter.push(i);
                            }
                        }
                    }
                    if (counter.length > 0) {
                        next(counter, src, true);
                    }
                }
            }
            /**
             * @param {string} expectedHashCode
             * @param {string} type
             * @param {?} opt_attributes
             * @param {boolean} recurring
             * @return {?}
             */
            function find(expectedHashCode, type, opt_attributes, recurring) {
                if (expectedHashCode.skipUpdatePos) {
                    return false;
                }
                if (_.isUndefined(opt_attributes)) {
                    opt_attributes = expectedHashCode.s;
                }
                if (_.isUndefined(recurring)) {
                    recurring = expectedHashCode.e;
                }
                var attributes = type.substring(opt_attributes, recurring);
                var ret = expectedHashCode.value;
                return attributes !== ret ? (console.log("%c removed '%s' '%s'", "color:rgba(239, 110, 105, 0.8)", attributes, ret), expectedHashCode.removed = true, true) : jQuery.matchRemoved(expectedHashCode, type, opt_attributes, recurring);
            }
            /**
             * @param {string} cycle
             * @param {Array} buffer
             * @param {Object} map
             * @return {?}
             */
            function parse(cycle, buffer, map) {
                /** @type {Array} */
                var resp = [];
                var letter;
                for (letter in map) {
                    var expectedHashCode = map[letter];
                    if (!(expectedHashCode.siblingValue !== cycle.substring(expectedHashCode._s - 1, expectedHashCode._e + 1))) {
                        if (!find(expectedHashCode, cycle)) {
                            delete map[letter];
                            buffer.push(expectedHashCode);
                            resp.push(expectedHashCode);
                        }
                    }
                }
                return resp;
            }
            /**
             * @param {Object} node
             * @param {string} type
             * @return {?}
             */
            function is(node, type) {
                if (node.siblingValue.length < 2) {
                    return false;
                }
                if (node.siblingValue === type.substring(node._s - 1, node._e + 1)) {
                    return true;
                }
                /** @type {number} */
                var right = 10;
                /** @type {number} */
                var left = -right;
                for (;left < right;left++) {
                    var otherNode = type.substring(node._s + left - 1, node._e + left + 1);
                    if (otherNode === node.siblingValue) {
                        return node._s += left, node._e += left, node.replaced || (node.s = node._s - node.sd, node.e = node._e - node.ed), true;
                    }
                }
                return false;
            }
            /**
             * @param {Object} s
             * @param {string} cycle
             * @param {Array} list
             * @return {undefined}
             */
            function remove(s, cycle, list) {
                var self = assert.diffPos(str.trimRight(s), str.trimRight(cycle));
                /** @type {Array} */
                var ls = [];
                if (self.s !== -1) {
                    var links = self.s;
                    var c = self.delta;
                    /** @type {Array} */
                    var p = [];
                    /** @type {number} */
                    var j = 0;
                    for (;j < list.length;j++) {
                        var expectedHashCode = list[j];
                        var attributes = expectedHashCode.s;
                        var recurring = expectedHashCode.e;
                        if ((attributes >= links || 0 !== c && (0 === expectedHashCode.s && 0 === links)) && (attributes += c, recurring += c), expectedHashCode.value !== cycle.substring(attributes, recurring) || (attributes < 0 || (expectedHashCode._value !== cycle.substring(attributes + expectedHashCode.sd, recurring + expectedHashCode.ed) || (expectedHashCode.removed || find(expectedHashCode, cycle, attributes, recurring))))) {
                            var base = jQuery.processRemove(expectedHashCode);
                            if (base) {
                                if (base.next) {
                                    continue;
                                }
                                if (base.add && (p = p.concat(base.add)), base.remove) {
                                    ls.push(j);
                                    /** @type {boolean} */
                                    expectedHashCode.removed = true;
                                    continue;
                                }
                            }
                            if (is(expectedHashCode, cycle)) {
                                continue;
                            }
                            ls.push(j);
                            /** @type {boolean} */
                            expectedHashCode.removed = true;
                        } else {
                            if (expectedHashCode.s >= links) {
                                if (0 === c && expectedHashCode.value !== cycle.substring(attributes, recurring)) {
                                    ls.push(j);
                                    /** @type {boolean} */
                                    expectedHashCode.removed = true;
                                    continue;
                                }
                                expectedHashCode.s = attributes;
                                expectedHashCode.e = recurring;
                                if (expectedHashCode.replaced) {
                                    expectedHashCode._s = expectedHashCode.s;
                                    expectedHashCode._e = expectedHashCode.e;
                                } else {
                                    expectedHashCode._s = expectedHashCode.s + expectedHashCode.sd;
                                    expectedHashCode._e = expectedHashCode.e + expectedHashCode.ed;
                                }
                            }
                        }
                    }
                    if (ls.length > 0 && next(ls, list, true), p.length > 0) {
                        /** @type {number} */
                        var i = 0;
                        for (;i < p.length;i++) {
                            list.push(p[i]);
                        }
                    }
                }
            }
            /**
             * @param {Array} attributes
             * @param {string} type
             * @return {?}
             */
            function attr(attributes, type) {
                /** @type {boolean} */
                var attrs = false;
                if (attributes) {
                    /** @type {number} */
                    var i = 0;
                    for (;i < attributes.length;i++) {
                        var value = attributes[i];
                        if (stringify(value, type)) {
                            return value;
                        }
                    }
                    return attrs;
                }
            }
            /**
             * @param {Object} a
             * @param {Object} b
             * @return {?}
             */
            function stringify(a, b) {
                /** @type {number} */
                var s = 3;
                /** @type {boolean} */
                var deepDataAndEvents = a.s - s >= b.s && a.s + s <= b.e || a.e >= b.s && a.e <= b.e;
                return jQuery.matchesEqual(a, b, deepDataAndEvents);
            }
            /**
             * @param {?} opt_attributes
             * @param {Object} attributes
             * @return {undefined}
             */
            function link(opt_attributes, attributes) {
                attributes = attributes.concat();
                /** @type {number} */
                var i = 0;
                for (;i < attributes.length;i++) {
                    var cycle = attributes[i];
                    var expectedHashCode = attr(opt_attributes, cycle);
                    if (expectedHashCode) {
                        jQuery.extendMatch(expectedHashCode, cycle);
                        console.log("%c SKIP MATCH it already exists", "color:rgba(239, 110, 105, 0.8)", cycle, expectedHashCode);
                    } else {
                        opt_attributes.push(cycle);
                    }
                }
            }
            /**
             * @param {Array} obj
             * @param {string} cycle
             * @return {undefined}
             */
            function move(obj, cycle) {
                var expectedHashCode = attr(obj, cycle);
                if (expectedHashCode) {
                    jQuery.extendMatch(expectedHashCode, cycle);
                }
            }
            /**
             * @param {Array} name
             * @param {Array} xs
             * @param {boolean} signal_eof
             * @return {undefined}
             */
            function next(name, xs, signal_eof) {
                /** @type {Array} */
                var players = [];
                /** @type {number} */
                var n = 0;
                for (;n < name.length;n++) {
                    /** @type {number} */
                    var i = name[n] - n;
                    var cycle = xs[i];
                    xs.splice(i, 1);
                    players.push(cycle);
                }
                /** @type {number} */
                var playerIndex = 0;
                for (;playerIndex < players.length;playerIndex++) {
                    if (signal_eof) {
                        socket.emit("remove", players[playerIndex]);
                    }
                }
            }
            /**
             * @param {Object} opt_attributes
             * @param {Object} raw
             * @return {undefined}
             */
            function process(opt_attributes, raw) {
                /** @type {number} */
                var i = 0;
                for (;i < raw.length;i++) {
                    if (raw[i].id === opt_attributes.id) {
                        raw.splice(i, 1);
                        i--;
                    }
                }
            }
            var socket = getActual({
                /** @type {function (Object, Object): undefined} */
                remove : process,
                /** @type {function (string, (Array|string)): undefined} */
                removeNotExisting : output,
                /** @type {function (string, string, ?, boolean): ?} */
                matchRemoved : find,
                /** @type {function (?, Object): undefined} */
                extend : link,
                /** @type {function (Array, string): undefined} */
                extendWithoutAdding : move,
                /** @type {function (Object, string, Array): undefined} */
                updatePos : remove,
                /** @type {function (Object, string): ?} */
                locateMatch : is,
                /** @type {function (string, Array, Object): ?} */
                tryToAddRemoved : parse
            });
            return socket;
        };
    }, {
        "@grammarly-npm/textdiff" : 16,
        emitter : "emitter",
        "lib/util" : 322,
        lodash : "lodash"
    }],
    317 : [function(require, dataAndEvents, expectedHashCode) {
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var getActual = require("emitter");
        var _ = require("lodash");
        var selector = require("./match-updater");
        /**
         * @param {?} elem
         * @return {?}
         */
        expectedHashCode.createMatches = function(elem) {
            /**
             * @return {?}
             */
            function woot() {
                return data || (data = []), data;
            }
            /**
             * @param {string} name
             * @return {undefined}
             */
            function addClass(name) {
                data.push(name);
            }
            /**
             * @param {string} oid
             * @return {?}
             */
            function find(oid) {
                return _.find(data, {
                    id : oid
                });
            }
            /**
             * @param {string} cycle
             * @param {string} test
             * @return {?}
             */
            function set(cycle, test) {
                if (cycle.value = test.substring(cycle.s, cycle.e), cycle.skipUpdatePos && (cycle.value = test.substring(cycle.s, cycle.e), cycle._value = test.substring(cycle._s, cycle._e), cycle.v = cycle.value), isEqual(cycle)) {
                    return console.log("match exist", cycle), false;
                }
                var prop = test.substring(cycle._s, cycle._e);
                var a = test.substring(cycle.s, cycle.e);
                return cycle.siblingValue = test.substring(cycle._s - 1, cycle._e + 1), cycle.skipUpdatePos || (cycle.removed = prop !== cycle._value || a !== cycle.v, cycle.removed && (console.log("%c match value does not correspondents to the value in a text", "color:rgba(239, 110, 105, 0.8)", "'" + cycle.v + "' vs '" + a + "'"), store.emit("lost_match_value_in_text", cycle))), cycle.removed ? (console.log("%c lost match", "color:rgba(239, 110, 105, 0.8)", cycle), false) : (trigger(cycle), true);
            }
            /**
             * @param {Object} data
             * @return {undefined}
             */
            function process(data) {
                /** @type {boolean} */
                data.removed = false;
                /** @type {boolean} */
                data.rendered = false;
                if (!elem.canAddRemovedMatch(data)) {
                    /** @type {Object} */
                    result[data.id] = data;
                }
            }
            /**
             * @return {?}
             */
            function getEnumerableProperties() {
                return result;
            }
            /**
             * @param {Object} item
             * @return {?}
             */
            function each(item) {
                var pid = item.pid;
                /** @type {Array} */
                var result = [];
                var queue = data.length;
                for (;queue--;) {
                    var attributes = data[queue];
                    if (attributes.pid === pid) {
                        if ("" !== attributes.value) {
                            if (item.value === attributes.value) {
                                callback(attributes);
                                result.push(attributes);
                            }
                        }
                    }
                }
                return result;
            }
            /**
             * @param {string} keepData
             * @return {?}
             */
            function remove(keepData) {
                var oldvalue = keepData.oldVal;
                /** @type {Array} */
                var result = [];
                var queue = data.length;
                for (;queue--;) {
                    var attributes = data[queue];
                    if (attributes.oldVal === oldvalue) {
                        /** @type {boolean} */
                        attributes.addedToDict = true;
                        callback(attributes);
                        result.push(attributes);
                    }
                }
                return result;
            }
            /**
             * @param {Object} obj
             * @return {undefined}
             */
            function wrapper(obj) {
                /** @type {number} */
                var i = 0;
                for (;i < data.length;i++) {
                    if (data[i].id === obj.id) {
                        callback(data[i]);
                    }
                }
                test(obj);
                delete result[obj.id];
            }
            /**
             * @param {Object} attributes
             * @param {Object} deepDataAndEvents
             * @return {undefined}
             */
            function callback(attributes, deepDataAndEvents) {
                if (!deepDataAndEvents) {
                    store.emit("remove", attributes);
                }
                self.remove(attributes, data);
                test(attributes);
            }
            /**
             * @param {Object} obj
             * @return {undefined}
             */
            function test(obj) {
                /**
                 * @param {?} a
                 * @return {undefined}
                 */
                function f(a) {
                    complete(a);
                    get(obj);
                }
                /**
                 * @param {?} id
                 * @return {undefined}
                 */
                function complete(id) {
                    /** @type {number} */
                    var i = 0;
                    for (;i < codeSegments.length;i++) {
                        if (codeSegments[i]) {
                            if (codeSegments[i].id === id) {
                                /** @type {boolean} */
                                codeSegments[i] = false;
                            }
                        }
                    }
                }
                if (obj && obj.id) {
                    var expectedHashCode = obj.id;
                    if (_.isArray(expectedHashCode)) {
                        /** @type {number} */
                        var i = 0;
                        for (;i < expectedHashCode.length;i++) {
                            f(expectedHashCode[i]);
                        }
                    } else {
                        f(expectedHashCode);
                    }
                }
            }
            /**
             * @param {Object} success
             * @return {undefined}
             */
            function get(success) {
                if (codeSegments.length) {
                    /** @type {number} */
                    var i = 0;
                    for (;i < codeSegments.length;i++) {
                        var child = codeSegments[i];
                        if (child) {
                            if (child.pid === success.pid) {
                                if (child.highlightBegin === success.highlightBegin) {
                                    if (child.highlightEnd === success.highlightEnd) {
                                        store.emit("hasAvailableRenderDeletedMatch", {
                                            match : child,
                                            position : i
                                        });
                                    }
                                }
                            }
                        }
                    }
                }
            }
            /**
             * @param {?} s
             * @param {string} val
             * @return {undefined}
             */
            function update(s, val) {
                log(s, val, data);
                self.removeNotExisting(val, data);
                if (val) {
                    self.tryToAddRemoved(val, data, result);
                }
            }
            /**
             * @param {Object} arg
             * @param {string} v
             * @param {Object} result
             * @return {undefined}
             */
            function log(arg, v, result) {
                self.updatePos(arg, v, result);
                store.emit("updatePos", {
                    matches : result,
                    text : v
                });
            }
            /**
             * @param {?} opt_attributes
             * @return {undefined}
             */
            function trigger(opt_attributes) {
                self.extend(data, [opt_attributes]);
            }
            /**
             * @param {Object} elem
             * @param {string} type
             * @return {?}
             */
            function _queueHooks(elem, type) {
                return self.locateMatch(elem, type);
            }
            /**
             * @param {Object} a
             * @return {?}
             */
            function isEqual(a) {
                /** @type {number} */
                var i = 0;
                for (;i < data.length;i++) {
                    var b = data[i];
                    /** @type {boolean} */
                    var r = a.s === b.s && a.e === b.e;
                    if (b.r && (b.ignored && r)) {
                        return true;
                    }
                }
                return false;
            }
            /**
             * @return {undefined}
             */
            function clear() {
                /** @type {Array} */
                data = [];
                result = {};
            }
            /**
             * @param {string} expectedHashCode
             * @param {string} var_args
             * @param {boolean} b
             * @param {?} attributes
             * @return {undefined}
             */
            function extend(expectedHashCode, var_args, b, attributes) {
                /** @type {string} */
                var value = var_args;
                if (_.isUndefined(value)) {
                    value = expectedHashCode.rFirst;
                }
                attributes = attributes.substring(0, expectedHashCode.s) + value + attributes.substring(expectedHashCode.e, attributes.length);
                /** @type {number} */
                var cycle = value.length - expectedHashCode.oldVal.length;
                is(expectedHashCode, cycle, attributes);
                expectedHashCode.e = expectedHashCode.s + value.length;
                if (b) {
                    expectedHashCode._s = expectedHashCode.s + expectedHashCode.sd;
                    expectedHashCode._e = expectedHashCode.e + expectedHashCode.ed;
                } else {
                    expectedHashCode._s = expectedHashCode.s;
                    expectedHashCode._e = expectedHashCode.e;
                }
                /** @type {boolean} */
                expectedHashCode.undoed = false;
                /** @type {boolean} */
                expectedHashCode.replaced = !b;
                expectedHashCode.beforeReplace = expectedHashCode.v;
                expectedHashCode.oldVal = value;
                expectedHashCode.value = value;
                expectedHashCode._value = attributes.substring(expectedHashCode._s, expectedHashCode._e);
            }
            /**
             * @param {string} expectedHashCode
             * @param {string} type
             * @param {?} opt_attributes
             * @return {undefined}
             */
            function is(expectedHashCode, type, opt_attributes) {
                /** @type {number} */
                var i = 0;
                for (;i < data.length;i++) {
                    var result = data[i];
                    if (expectedHashCode !== result) {
                        if (expectedHashCode.e < result.s) {
                            result.s += type;
                            result.e += type;
                            result._s += type;
                            result._e += type;
                        }
                        if (expectedHashCode.s >= result.s && (expectedHashCode.e <= result.e && elem.canShiftMatchEnd(expectedHashCode))) {
                            result.e += type;
                            result._e += type;
                            result.value = opt_attributes.substring(result.s, result.e);
                            result._value = opt_attributes.substring(result._s, result._e);
                            result.oldVal = result.value;
                        } else {
                            if (expectedHashCode.s >= result.s) {
                                if (expectedHashCode.e > result.e) {
                                    result.value = opt_attributes.substring(result.s, result.e);
                                    result._value = opt_attributes.substring(result._s, result._e);
                                    result.oldVal = result.value;
                                }
                            }
                        }
                        result.rev++;
                    }
                }
            }
            /**
             * @param {Function} i
             * @return {?}
             */
            function action(i) {
                /** @type {boolean} */
                var create = false;
                /** @type {number} */
                var d = 0;
                for (;d < data.length;d++) {
                    var e = data[d];
                    if (!(e.value.split(" ").length > 1 || i === e)) {
                        var attributes = done(i, e);
                        if (attributes) {
                            callback(attributes);
                            /** @type {boolean} */
                            create = true;
                        }
                    }
                }
                return create;
            }
            /**
             * @param {Object} r
             * @param {boolean} item
             * @return {?}
             */
            function done(r, item) {
                return(r.s <= item.s && r.e >= item.s || (r.s >= item.s && r.e <= item.e || r.s <= item.e && r.e >= item.e)) && item;
            }
            /** @type {Array} */
            var data = [];
            var result = {};
            /** @type {Array} */
            var codeSegments = [];
            /** @type {Array} */
            var matchesRmBuffer = [];
            var self = selector.createMatchUpdater(elem);
            var store = getActual({
                matchUpdater : self,
                /** @type {function (string): undefined} */
                add : addClass,
                /** @type {function (string, string): ?} */
                tryToAdd : set,
                /** @type {function (Object, boolean): ?} */
                isIntersected : done,
                /** @type {function (Function): ?} */
                removeIntersectedWithReplace : action,
                /** @type {function (?, string): undefined} */
                update : update,
                /** @type {function (Object): undefined} */
                forceRemove : wrapper,
                /** @type {function (string): ?} */
                byId : find,
                /** @type {function (string): ?} */
                removeSimilar : remove,
                /** @type {function (Object): ?} */
                removeByPID : each,
                /** @type {function (Object, string, Object): undefined} */
                updatePos : log,
                /** @type {function (string, string, ?): undefined} */
                shift : is,
                /** @type {function (?): undefined} */
                extend : trigger,
                /** @type {function (Object, Object): undefined} */
                remove : callback,
                /** @type {function (): undefined} */
                clear : clear,
                /** @type {function (Object, string): ?} */
                locateMatch : _queueHooks,
                /** @type {function (): ?} */
                get : woot,
                matchesBuffer : codeSegments,
                matchesRmBuffer : matchesRmBuffer,
                /** @type {function (): ?} */
                getRemoved : getEnumerableProperties,
                /** @type {function (Object): undefined} */
                addRemoved : process,
                /** @type {function (string, string, boolean, ?): undefined} */
                replace : extend,
                /** @type {function (Object): undefined} */
                rmMatchesBufferCache : test
            });
            return self.delegate(store, "remove"), store;
        };
    }, {
        "./match-updater" : 316,
        emitter : "emitter",
        lodash : "lodash"
    }],
    318 : [function(require, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} d
         * @return {?}
         */
        function messageHandler(d) {
            return d && d.__esModule ? d : {
                "default" : d
            };
        }
        var data = require("babel-runtime/core-js/object/assign");
        var conf = messageHandler(data);
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var obj = require("@grammarly-npm/changesets");
        var Base = require("emitter");
        var _ = require("lodash");
        var options = require("lib/dom");
        var other = require("lib/util");
        /**
         * @param {Object} options
         * @return {?}
         */
        expectedHashCode.createTextSplit = function(options) {
            /**
             * @param {?} obj2
             * @param {Array} args
             * @param {Function} $
             * @return {undefined}
             */
            function add(obj2, args, $) {
                var childNode = obj.diff(expected, obj2);
                var item = void 0;
                var ui = void 0;
                var promises = void 0;
                var text = void 0;
                var pos = void 0;
                if (!children.length) {
                    item = update(0, "");
                    parent.appendChild(item.el);
                    children.push(item);
                }
                childNode = childNode.sequencify();
                promises = obj.cs([]);
                /** @type {number} */
                var index = 0;
                for (;index < children.length;index++) {
                    item = children[index];
                    text = item.text;
                    pos = item.pos;
                    /** @type {number} */
                    var ii = 0;
                    for (;ii < promises.length;ii++) {
                        item.pos = item.transformAgainst(promises[ii]).pos;
                    }
                    if (promises.push(parse(item, childNode)), item.len) {
                        if (item.text !== text) {
                            /** @type {boolean} */
                            item.textUp = true;
                        }
                        if (!(item.text === text && item.pos === pos)) {
                            /** @type {boolean} */
                            item.posUp = true;
                        }
                        for (;item.len > maxItemLength;) {
                            ui = update(item.pos + end, item.text.substr(end));
                            item.text = item.text.substr(0, end);
                            item.len = item.text.length;
                            options.insertAfter(ui.el, item.el);
                            children.splice(index + 1, 0, ui);
                            index++;
                            item = ui;
                        }
                    } else {
                        children.splice(index, 1);
                        parent.removeChild(item.el);
                        index--;
                    }
                }
                var data = void 0;
                var self = void 0;
                var textAreaElementMaxlength = void 0;
                /** @type {Array} */
                var list = [];
                /** @type {number} */
                var idx = 0;
                for (;idx < children.length;idx++) {
                    item = children[idx];
                    /** @type {Array} */
                    list = [];
                    /** @type {number} */
                    var x = 0;
                    for (;x < args.length;x++) {
                        data = args[x];
                        /** @type {number} */
                        textAreaElementMaxlength = Math.min(item.pos + item.len, data.e) - Math.max(item.pos, data.s);
                        if (!(textAreaElementMaxlength < 0)) {
                            self = _.extend({}, data);
                            self.orig = data;
                            /** @type {number} */
                            self.s = Math.max(0, data.s - item.pos);
                            self.value = self.value.substr(Math.max(0, item.pos - data.s), textAreaElementMaxlength);
                            self.e = self.s + self.value.length;
                            /** @type {number} */
                            self._s = self.s;
                            self._e = self.e;
                            if (!data.replaced) {
                                self._s = self.s + data.sd;
                                self._e = self.e + data.ed;
                            }
                            if (!(self._s < 0)) {
                                if (!(self._e < 0)) {
                                    list.push(self);
                                }
                            }
                        }
                    }
                    if (item.matchesUp = true, item.matches.length || list.length) {
                        if (item.matches.length === list.length) {
                            /** @type {boolean} */
                            item.matchesUp = false;
                            /** @type {number} */
                            var i = 0;
                            for (;i < item.matches.length;i++) {
                                /** @type {boolean} */
                                var j = item.matches[i].orig === list[i].orig && (item.matches[i]._s === list[i]._s && item.matches[i]._e === list[i]._e);
                                if (!j) {
                                    /** @type {boolean} */
                                    item.matchesUp = true;
                                    break;
                                }
                            }
                        } else {
                            /** @type {boolean} */
                            item.matchesUp = true;
                        }
                    } else {
                        /** @type {boolean} */
                        item.matchesUp = false;
                    }
                    if (item.matchesUp) {
                        /** @type {Array} */
                        item.matches = list;
                    }
                }
                /** @type {number} */
                var ix = 0;
                for (;ix < children.length;ix++) {
                    if (item = children[ix], item.textUp || item.matchesUp) {
                        var value = item.text;
                        value = item.matches.length ? $(item.text, item.matches) : _.escape(value);
                        item.el.innerHTML = other.br(value, ix === children.length - 1);
                        /** @type {boolean} */
                        item.textUp = false;
                    }
                    if (item.posUp) {
                        item.el.setAttribute("p", [item.pos, item.pos + item.len].join(","));
                        /** @type {boolean} */
                        item.posUp = false;
                    }
                }
                that.emit("finish");
                expected = obj2;
            }
            /**
             * @param {Object} p
             * @param {Array} parentNode
             * @return {?}
             */
            function parse(p, parentNode) {
                var block = obj.cs([]);
                /** @type {Array} */
                var acc = [];
                var node = void 0;
                var o = void 0;
                /** @type {number} */
                var i = 0;
                for (;i < parentNode.length;i++) {
                    node = parentNode[i];
                    if ("=" !== node.type) {
                        if (node.len) {
                            if (!(node.pos < p.pos)) {
                                if (!(node.pos > p.pos + p.len)) {
                                    o = node.extend({
                                        tlen : p.len,
                                        pos : node.pos - p.pos
                                    });
                                    if ("+" === node.type) {
                                        block.push(node);
                                        acc.forEach(function(rec) {
                                            return rec.pos += node.len;
                                        });
                                    }
                                    if ("-" === node.type) {
                                        o.text = o.text.substr(0, p.pos + p.len - node.pos);
                                        o.len = o.text.length;
                                        node.text = node.text.substr(o.len);
                                        node.len = node.text.length;
                                        block.push(o);
                                        acc.push(node);
                                    }
                                    p.text = o.apply(p.text);
                                    p.len = p.text.length;
                                }
                            }
                        }
                    }
                }
                return block;
            }
            /**
             * @param {number} position
             * @param {string} val
             * @return {?}
             */
            function update(position, val) {
                /** @type {Element} */
                var li = document.createElement("gr_block");
                return li.style.display = "inline", (0, conf["default"])(obj.op({
                    type : "+",
                    tlen : 0,
                    pos : position,
                    text : val,
                    accessory : 0
                }), {
                    el : li,
                    textUp : true,
                    posUp : true,
                    matchesUp : false,
                    matches : []
                });
            }
            var parent = options.node;
            /** @type {Array} */
            var children = [];
            var end = options.blockSize || 1E3;
            var maxItemLength = options.maxBlockSize || 2E3;
            /** @type {string} */
            var expected = "";
            var that = Base({
                /** @type {function (?, Array, Function): undefined} */
                update : add
            });
            return that;
        };
    }, {
        "@grammarly-npm/changesets" : 1,
        "babel-runtime/core-js/object/assign" : 24,
        emitter : "emitter",
        "lib/dom" : 215,
        "lib/util" : 322,
        lodash : "lodash"
    }],
    319 : [function(require, dataAndEvents, expectedHashCode) {
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var getActual = require("emitter");
        var _ = require("lodash");
        var Dom = require("lib/dom");
        var config = require("lib/util");
        var self = require("lib/wrap");
        var $ = require("./html-dom");
        var path = require("./text-split");
        /**
         * @param {Object} object
         * @return {?}
         */
        expectedHashCode.createTextareaDom = function(object) {
            /**
             * @return {undefined}
             */
            function doSearch() {
                var position = self.getCursor();
                var val = el.value;
                /** @type {string} */
                el.value = val + " ";
                el.value = val;
                if (Dom.isFocused(el)) {
                    self.setCursor(position);
                }
            }
            /**
             * @return {?}
             */
            function walk() {
                var elem = render(document);
                var parent = elem.firstChild;
                return elem.id = value, elem.setAttribute("gramm_id", value), Dom.insertBefore(elem, el), {
                    clone : elem,
                    cloneVal : parent
                };
            }
            /**
             * @return {undefined}
             */
            function finish() {
                var data = container.insertGhost();
                clone = data.clone;
                item = data.cloneVal;
                me = $.createHtmlDom({
                    el : item,
                    editor : self
                });
                that = path.createTextSplit({
                    node : item
                });
                that.on("finish", function() {
                    container.emit("rendered");
                });
                container.htmlDom = me;
                result = _.throttle(fn, 100);
                container.clone = clone;
                container.cloneVal = item;
                self.emit("createdGhost");
            }
            /**
             * @param {?} object
             * @param {string} arg
             * @param {Function} value
             * @return {undefined}
             */
            function fn(object, arg, value) {
                try {
                    that.update(object, arg, value);
                } catch (err) {
                    console.error(err.stack || err);
                }
            }
            /**
             * @param {Object} types
             * @param {?} dataAndEvents
             * @param {boolean} deepDataAndEvents
             * @return {undefined}
             */
            function cb(types, dataAndEvents, deepDataAndEvents) {
                /** @type {number} */
                var i = 0;
                for (;i < types.length;i++) {
                    var node = types[i];
                    if (node.replaced) {
                        node._s = node.s;
                        node._e = node.e;
                    }
                }
                cloneNode(types, dataAndEvents, deepDataAndEvents);
            }
            /**
             * @param {Object} context
             * @param {string} fn
             * @return {?}
             */
            function run(context, fn) {
                var ctx = context.parent || context;
                var ret = self.getMatchClass(ctx, fn);
                return{
                    start : '<g class="gr_ gr_' + ctx.id + ret + '" data-gr-id="' + ctx.id + '" id="' + ctx.id + '">',
                    end : "</g>"
                };
            }
            /**
             * @param {Object} keepData
             * @param {?} dataAndEvents
             * @param {boolean} deepDataAndEvents
             * @return {undefined}
             */
            function cloneNode(keepData, dataAndEvents, deepDataAndEvents) {
                self.render({
                    node : el,
                    matches : keepData,
                    /** @type {function (Object, string): ?} */
                    createTag : run,
                    type : "text",
                    text : dataAndEvents,
                    updateMethod : deepDataAndEvents ? fn : result
                });
            }
            /**
             * @return {?}
             */
            function getText() {
                return el.value;
            }
            /**
             * @param {?} node
             * @return {undefined}
             */
            function selectInput(node) {
                el.value = node;
            }
            /**
             * @param {?} node
             * @return {undefined}
             */
            function push(node) {
                container.setTextareaValue(node);
                cb(self.getFiltered(), node, true);
            }
            /**
             * @return {undefined}
             */
            function some() {
                var result = Dom.getDocSelection(document);
                var codeSegments = result.toString();
                if (!(codeSegments.length > 1)) {
                    callback();
                }
            }
            /**
             * @return {?}
             */
            function method() {
                var start = el.selectionStart;
                var l = self.getFiltered();
                var codeSegments = l.concat();
                /** @type {boolean} */
                var r = false;
                codeSegments.sort(function(oldValue, newValue) {
                    return newValue._e - oldValue._e;
                });
                /** @type {Array} */
                var values = [];
                /** @type {number} */
                var i = 0;
                for (;i < codeSegments.length;i++) {
                    var a = codeSegments[i];
                    /** @type {boolean} */
                    var s = start >= a._s && start <= a._e;
                    if (s) {
                        values.push(a);
                    }
                }
                if (values.length > 0) {
                    values.sort(function(self, a) {
                        return self._e - self._s - (a._e - a._s);
                    });
                    /** @type {boolean} */
                    r = true;
                    var value = values[0];
                    return self.selectedMatch && (self.selectedMatch !== value && self.selectedMatch.deselect()), self.selectById(value.id);
                }
                if (!r) {
                    if (self.selectedMatch) {
                        self.selectedMatch.deselect();
                    }
                }
                if (!r) {
                    self.emit("deselectMatch");
                }
            }
            /**
             * @param {?} options
             * @return {undefined}
             */
            function onSelect(options) {
                el.selectionStart = options.s;
                el.selectionEnd = options.e;
            }
            /**
             * @return {?}
             */
            function makeSelection() {
                return{
                    s : el.selectionStart,
                    e : el.selectionEnd
                };
            }
            /**
             * @param {Object} opt_attributes
             * @return {?}
             */
            function createDom(opt_attributes) {
                return me.renderRange(opt_attributes);
            }
            /**
             * @param {string} selector
             * @return {undefined}
             */
            function clean(selector) {
                var values = el.querySelectorAll(selector);
                var valuesLen = values.length;
                /** @type {number} */
                var i = 0;
                for (;i < valuesLen;i++) {
                    self.unwrap(values[i]);
                }
            }
            /**
             * @return {undefined}
             */
            function remove() {
                var classNames = self.getFiltered();
                cb(classNames, self.currentText, true);
            }
            /**
             * @param {Node} s
             * @param {string} var_args
             * @return {undefined}
             */
            function format(s, var_args) {
                var t = el.value;
                t = t.substring(0, s.s) + var_args + t.substr(s.e);
                self.currentText = t;
                push(t);
            }
            /**
             * @param {Function} obj
             * @return {undefined}
             */
            function select(obj) {
                me.select(obj);
            }
            /**
             * @param {Function} index
             * @return {undefined}
             */
            function getByIndex(index) {
                me.deselect(index);
            }
            /**
             * @return {undefined}
             */
            function minIdx() {
                finish();
            }
            var self = object.editor;
            var el = self.el;
            var value = config.guid();
            var that = void 0;
            var me = void 0;
            var clone = void 0;
            var item = void 0;
            var result = void 0;
            /**
             * @param {Document} doc
             * @return {?}
             */
            var render = function(doc) {
                var elem = doc.createElement("div");
                /** @type {string} */
                elem.className = "gram-ghost";
                elem.setAttribute("gramm_editor", "true");
                elem.setAttribute("contenteditable", "true");
                elem.setAttribute("tabindex", "-1");
                var bar = doc.createElement("span");
                return bar.className = "clone-val", elem.appendChild(bar), elem;
            };
            var container = getActual({
                el : el,
                id : value,
                /** @type {function (Object, ?, boolean): undefined} */
                render : cb,
                /** @type {function (): undefined} */
                remove : remove,
                /** @type {function (Object): ?} */
                renderRange : createDom,
                /** @type {function (string): undefined} */
                removeBySelector : clean,
                /** @type {function (Node, string): undefined} */
                replace : format,
                /** @type {function (): undefined} */
                start : minIdx,
                stop : config._f,
                /** @type {function (Function): undefined} */
                select : select,
                /** @type {function (Function): undefined} */
                deselect : getByIndex,
                /** @type {function (): ?} */
                getText : getText,
                /** @type {function (?): undefined} */
                setText : push,
                /** @type {function (?): undefined} */
                setTextareaValue : selectInput,
                /** @type {function (): undefined} */
                changeSelection : some,
                /** @type {function (): ?} */
                getCursor : makeSelection,
                /** @type {function (?): undefined} */
                setCursor : onSelect,
                /** @type {function (): ?} */
                insertGhost : walk,
                /** @type {function (): undefined} */
                forceRedraw : doSearch,
                invalidate : config._f
            });
            var callback = _.debounce(method, 100);
            return setTimeout(doSearch, 10), container;
        };
    }, {
        "./html-dom" : 312,
        "./text-split" : 318,
        emitter : "emitter",
        "lib/dom" : 215,
        "lib/util" : 322,
        "lib/wrap" : 324,
        lodash : "lodash"
    }],
    320 : [function(require, dataAndEvents, expectedHashCode) {
        /**
         * @param {(Node|string)} target
         * @param {Function} cb
         * @return {undefined}
         */
        function init(target, cb) {
            if ("undefined" !== typeof MutationObserver) {
                var t = _.findLast(timers, {
                    node : target,
                    /** @type {Function} */
                    cb : cb
                });
                if (!t) {
                    /**
                     * @param {Array} middleware
                     * @return {undefined}
                     */
                    var init = function(middleware) {
                        /**
                         * @param {Event} e
                         * @param {Array} nodes
                         * @param {string} error
                         * @return {undefined}
                         */
                        function filter(e, nodes, error) {
                            /** @type {number} */
                            var i = 0;
                            var len = nodes.length;
                            for (;i < len;i++) {
                                var evt = nodes[i].tagName ? nodes[i].tagName : e.target.tagName;
                                var t = {
                                    node : e.target,
                                    tag : evt.toLowerCase(),
                                    action : error
                                };
                                if (e.target) {
                                    if (labels.indexOf(t) === -1) {
                                        labels.push(t);
                                    }
                                }
                            }
                        }
                        /**
                         * @param {Array} labels
                         * @param {Object} args
                         * @return {?}
                         */
                        function step(labels, args) {
                            /** @type {Array} */
                            var seq = [];
                            /** @type {boolean} */
                            var speed = false;
                            return labels.forEach(function(exports) {
                                if ("removedNodes" === exports.action) {
                                    if (args.tags.includes(exports.tag)) {
                                        /** @type {boolean} */
                                        speed = true;
                                    }
                                }
                            }), labels.forEach(function(o) {
                                var ua = o.tag;
                                var easing = args.tags.includes(ua);
                                var cycle = void 0;
                                if ("addedNodes" === o.action && easing || "removedNodes" === o.action && speed) {
                                    cycle = o.node;
                                }
                                if (cycle) {
                                    if (seq.indexOf(cycle) === -1) {
                                        seq.push(cycle);
                                    }
                                }
                            }), !!seq.length && seq;
                        }
                        /** @type {Array} */
                        var labels = [];
                        var options = {
                            tags : tags
                        };
                        middleware.forEach(function(data) {
                            if (0 !== data.addedNodes.length) {
                                filter(data, data.addedNodes, "addedNodes");
                            }
                            if (0 !== data.removedNodes.length) {
                                filter(data, data.removedNodes, "removedNodes");
                            }
                        });
                        var evt = step(labels, options);
                        if (evt) {
                            if (cb) {
                                cb(evt);
                            }
                        }
                    };
                    /** @type {MutationObserver} */
                    var observer = new MutationObserver(init);
                    var observerOptions = {
                        childList : true,
                        subtree : true,
                        attributes : false,
                        characterData : false
                    };
                    observer.observe(target, observerOptions);
                    timers.push({
                        node : target,
                        /** @type {Function} */
                        cb : cb,
                        mo : observer
                    });
                }
            }
        }
        /**
         * @param {(Node|string)} c
         * @param {Function} opt_attributes
         * @return {undefined}
         */
        function createDom(c, opt_attributes) {
            var promise = _.findLast(timers, {
                node : c,
                /** @type {Function} */
                cb : opt_attributes
            });
            if (promise) {
                promise.mo.disconnect();
                timers = _.without(timers, promise);
            }
        }
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var _ = require("lodash");
        /** @type {Array} */
        var tags = ["b", "strong", "i", "em", "u", "ins", "s", "font", "span", "ul", "li", "ol", "a", "img", "blockquote", "h1", "h2", "h3", "h4", "h5", "h6"];
        /** @type {Array} */
        var timers = [];
        /** @type {function ((Node|string), Function): undefined} */
        expectedHashCode.watch = init;
        /** @type {function ((Node|string), Function): undefined} */
        expectedHashCode.unwatch = createDom;
    }, {
        lodash : "lodash"
    }],
    321 : [function(requestAnimFrame, dataAndEvents, expectedHashCode) {
        /**
         * @param {string} url
         * @param {string} code
         * @return {?}
         */
        function show(url, code) {
            return url + "=" + encodeURIComponent(code);
        }
        /**
         * @param {string} funcToCall
         * @param {string} condition
         * @return {?}
         */
        function callFunc(funcToCall, condition) {
            return show("utm_medium", "internal") + "&" + show("utm_source", funcToCall) + "&" + show("utm_campaign", condition);
        }
        /**
         * @param {string} funcToCall
         * @param {string} condition
         * @return {?}
         */
        function testLoop(funcToCall, condition) {
            return req.URLS.signup + "?" + callFunc(funcToCall, condition);
        }
        /**
         * @return {?}
         */
        function showCenteredOverlay() {
            return req.URLS.signin + "?" + show("utm_medium", "internal");
        }
        /**
         * @return {?}
         */
        function startGame() {
            return req.URLS.resetPassword + "?" + show("utm_medium", "internal");
        }
        /**
         * @return {?}
         */
        function showNext() {
            return req.URLS.terms + "?" + show("utm_medium", "internal");
        }
        /**
         * @return {?}
         */
        function showCommentAdd() {
            return req.URLS.policy + "?" + show("utm_medium", "internal");
        }
        /**
         * @param {string} funcToCall
         * @param {string} condition
         * @return {?}
         */
        function testWatchMultiple(funcToCall, condition) {
            return req.URLS.upgrade + "?" + callFunc(funcToCall, condition);
        }
        /**
         * @return {?}
         */
        function loadFunc() {
            return req.URLS.welcomeC + "?" + show("utm_medium", "navigation");
        }
        /**
         * @return {?}
         */
        function showFullMapPreview() {
            /** @type {string} */
            var navigation = req.URLS.authCreatePage + "/?extension_install=true";
            return navigation + "&" + show("utm_medium", "navigation");
        }
        /**
         * @param {string} dataAndEvents
         * @param {string} funcToCall
         * @param {string} condition
         * @return {?}
         */
        function testWatchedByMultiple(dataAndEvents, funcToCall, condition) {
            return dataAndEvents + "&" + callFunc(funcToCall, condition);
        }
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var req = requestAnimFrame("./newConfig");
        /** @type {function (string, string): ?} */
        expectedHashCode.getSignUpURL = testLoop;
        /** @type {function (): ?} */
        expectedHashCode.getSignInURL = showCenteredOverlay;
        /** @type {function (): ?} */
        expectedHashCode.getResetPasswordURL = startGame;
        /** @type {function (): ?} */
        expectedHashCode.getTermsURL = showNext;
        /** @type {function (): ?} */
        expectedHashCode.getPrivatePolicyURL = showCommentAdd;
        /** @type {function (string, string): ?} */
        expectedHashCode.getUpgradeURL = testWatchMultiple;
        /** @type {function (): ?} */
        expectedHashCode.getExtensionSuccessURL = loadFunc;
        /** @type {function (): ?} */
        expectedHashCode.getAuthCreatePageURL = showFullMapPreview;
        /** @type {function (string, string, string): ?} */
        expectedHashCode.addParamsToUpgradeURL = testWatchedByMultiple;
    }, {
        "./newConfig" : 279
    }],
    322 : [function(require, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} type
         * @return {?}
         */
        function $(type) {
            return type && type.__esModule ? type : {
                "default" : type
            };
        }
        /**
         * @param {?} selector
         * @return {?}
         */
        function hasClass(selector) {
            /** @type {boolean} */
            var OPERA_QSAPI = ["freeeeeeee@grammarly.com", "premiumuser@grammarly.com"].indexOf(selector) !== -1;
            return!OPERA_QSAPI && /^.*@grammarly.com$/.test(selector);
        }
        /**
         * @return {?}
         */
        function onSet() {
            return window.chrome && (window.chrome.runtime && window.chrome.runtime.lastError);
        }
        /**
         * @param {Function} obj
         * @return {?}
         */
        function isFunction(obj) {
            return!!(obj && (obj.constructor && (obj.call && obj.apply)));
        }
        /**
         * @param {Function} key
         * @param {number} ms
         * @return {?}
         */
        function set(key, ms) {
            /**
             * @return {undefined}
             */
            function promise() {
                /**
                 * @return {undefined}
                 */
                function fn() {
                    resolve();
                    key();
                }
                /**
                 * @return {undefined}
                 */
                function resolve() {
                    /** @type {number} */
                    var id = setTimeout(fn, ms);
                    /** @type {number} */
                    values[key] = id;
                }
                resolve();
            }
            var values = set.items = set.items || {};
            var to = values[key];
            if (to || ms) {
                return to && !ms ? (clearTimeout(to), void delete values[key]) : void promise();
            }
        }
        /**
         * @param {Function} type
         * @return {undefined}
         */
        function createRecord(type) {
            set(type);
        }
        /**
         * @return {?}
         */
        function S4() {
            return(65536 * (1 + Math.random()) | 0).toString(16).substring(1);
        }
        /**
         * @return {?}
         */
        function guid() {
            return S4() + S4() + "-" + S4() + "-" + S4() + "-" + S4() + "-" + S4() + S4() + S4();
        }
        /**
         * @return {undefined}
         */
        function f() {
        }
        /**
         * @return {?}
         */
        function returnTrue() {
            return true;
        }
        /**
         * @return {undefined}
         */
        function reload() {
            if (window.chrome && (window.chrome.runtime && window.chrome.runtime.reload)) {
                window.chrome.runtime.reload();
            } else {
                window.location.reload();
            }
        }
        /**
         * @param {Object} doc
         * @return {?}
         */
        function load(doc) {
            if (doc.location) {
                /** @type {boolean} */
                var program = "mail.google.com" === doc.location.host;
                var inverse = doc.querySelector("iframe#js_frame") && doc.querySelector("iframe#sound_frame");
                return program || inverse;
            }
        }
        /**
         * @param {?} val
         * @return {?}
         */
        function isConstant(val) {
            return/^[-!#$%&\'*+\\.\/0-9=?A-Z^_`a-z{|}~]+@[-!#$%&\'*+\\/0-9=?A-Z^_`a-z{|}~]+\.[-!#$%&\'*+\\.\/0-9=?A-Z^_`a-z{|}~]+$/.test(val);
        }
        /**
         * @param {?} str
         * @return {?}
         */
        function removeNonASCII(str) {
            return str.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
        }
        /**
         * @param {(number|string)} regex
         * @param {Array} opt_attributes
         * @return {?}
         */
        function createDom(regex, opt_attributes) {
            return opt_attributes[1 === regex ? 0 : 1];
        }
        /**
         * @param {?} value
         * @return {?}
         */
        function stub(value) {
            return _.transform(value, function(b, g) {
                return b[g] = f;
            });
        }
        /**
         * @param {Function} fun
         * @param {Function} matcherFunction
         * @param {boolean} d
         * @return {?}
         */
        function e(fun, matcherFunction, d) {
            var expectedHashCode = {};
            /**
             * @return {?}
             */
            var s = function() {
                var cycle = "_memoize_" + (matcherFunction ? matcherFunction.apply(this, arguments) : arguments[0]);
                return window.hasOwnProperty.call(expectedHashCode, cycle) ? expectedHashCode[cycle] : (d && setTimeout(function() {
                    delete expectedHashCode[cycle];
                }, d), expectedHashCode[cycle] = fun.apply(this, arguments));
            };
            return s;
        }
        /**
         * @param {?} res
         * @param {string} expectedHashCode
         * @return {?}
         */
        function onSuccess(res, expectedHashCode) {
            return(0, option["default"])(expectedHashCode).reduce(function(deepDataAndEvents, method) {
                return(0, item["default"])({}, deepDataAndEvents, (0, result["default"])({}, method, function() {
                    /** @type {number} */
                    var expectedHashCode = arguments.length;
                    /** @type {Array} */
                    var fix = Array(expectedHashCode);
                    /** @type {number} */
                    var i = 0;
                    for (;i < expectedHashCode;i++) {
                        fix[i] = arguments[i];
                    }
                    return res.then(function() {
                        return expectedHashCode[method].apply(expectedHashCode, fix);
                    });
                }));
            }, {});
        }
        /**
         * @param {?} callback
         * @return {?}
         */
        function close(callback) {
            return new options["default"](function(basis) {
                return callback(basis);
            });
        }
        /**
         * @param {number} min
         * @param {number} max
         * @return {?}
         */
        function random(min, max) {
            return Math.floor(Math.random() * (max - min + 1)) + min;
        }
        /**
         * @param {number} wait
         * @return {?}
         */
        function delay(wait) {
            return new options["default"](function(fnc) {
                return setTimeout(fnc, wait);
            });
        }
        /**
         * @param {?} ts
         * @return {?}
         */
        function formatDate(ts) {
            if (ts) {
                /** @type {Date} */
                var date = new Date(ts);
                if ("Invalid Date" !== date.toString()) {
                    return monthsLong[date.getMonth()] + " " + date.getDate() + ", " + date.getFullYear();
                }
            }
        }
        /**
         * @param {?} object
         * @return {?}
         */
        function keys(object) {
            /**
             * @return {undefined}
             */
            var widget = function() {
            };
            return widget.prototype = object(), widget;
        }
        /**
         * @return {?}
         */
        function update() {
            /**
             * @param {string} result
             * @return {?}
             */
            function some(result) {
                return result.split(".").map(function(arg) {
                    return Number(arg) || 0;
                });
            }
            var expectationResult = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "";
            var obj = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "";
            var expectedHashCode = some(expectationResult);
            var values = some(obj);
            var otherArgs = Array(Math.abs(expectedHashCode.length - values.length)).fill(0);
            if (expectedHashCode.length > values.length ? values.push.apply(values, (0, ret["default"])(otherArgs)) : expectedHashCode.push.apply(expectedHashCode, (0, ret["default"])(otherArgs)), expectedHashCode.every(function(value, i) {
                    return value === values[i];
                })) {
                return 0;
            }
            /** @type {number} */
            var i = 0;
            var valuesLen = expectedHashCode.length;
            for (;i < valuesLen;i++) {
                if (expectedHashCode[i] > values[i]) {
                    return 1;
                }
                if (expectedHashCode[i] < values[i]) {
                    return-1;
                }
            }
            return-1;
        }
        /**
         * @return {?}
         */
        function listen() {
            return setup(this, void 0, void 0, elem["default"].mark(function end() {
                return elem["default"].wrap(function(stream) {
                    for (;;) {
                        switch(stream.prev = stream.next) {
                            case 0:
                                if (d.isChrome() || d.isFF()) {
                                    /** @type {number} */
                                    stream.next = 2;
                                    break;
                                }
                                return stream.abrupt("return", null);
                            case 2:
                                return stream.prev = 2, stream.next = 5, options["default"].race([new options["default"](function(url) {
                                    return window.chrome.runtime.sendMessage("ping", url);
                                }), delay(1E4).then(function(dataAndEvents) {
                                    return "timeouted";
                                })]);
                            case 5:
                                return stream.abrupt("return", stream.sent);
                            case 8:
                                return stream.prev = 8, stream.t0 = stream["catch"](2), stream.abrupt("return", "orphaned");
                            case 11:
                                ;
                            case "end":
                                return stream.stop();
                        }
                    }
                }, end, this, [[2, 8]]);
            }));
        }
        /**
         * @param {Function} func
         * @return {undefined}
         */
        function once(func) {
            var backoff = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 10;
            setTimeout(func, backoff);
        }
        /**
         * @return {?}
         */
        function run() {
            /**
             * @param {string} elem
             * @return {undefined}
             */
            function next(elem) {
                if (ql.length > 0) {
                    var fn = ql.shift();
                    fn(elem);
                } else {
                    if (id) {
                        matches.push(elem);
                    } else {
                        /** @type {string} */
                        matches[0] = elem;
                    }
                }
            }
            /**
             * @return {?}
             */
            function process() {
                return matches.length ? options["default"].resolve(matches.shift()) : new options["default"](function(fix) {
                    return ql.push(fix);
                });
            }
            var req = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
            var index = req.buffered;
            var id = void 0 === index || index;
            /** @type {Array} */
            var matches = [];
            /** @type {Array} */
            var ql = [];
            return{
                /** @type {function (): ?} */
                take : process,
                /** @type {function (string): undefined} */
                put : next
            };
        }
        /**
         * @param {?} obj
         * @return {?}
         */
        function parseResponse(obj) {
            var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 100;
            if (!obj) {
                return NaN;
            }
            var r = md5.createHash("superfasthash");
            return parseInt(r.hash(obj), 16) % t;
        }
        /**
         * @param {Object} oEvent
         * @return {?}
         */
        function onkeydown(oEvent) {
            return oEvent.which || (oEvent.charCode || (oEvent.keyCode || 0));
        }
        /**
         * @param {string} el
         * @param {boolean} text
         * @return {?}
         */
        function setText(el, text) {
            return el = el.replace(p, "<br>" + val).replace(pattern, "<br>"), text && (el = el.replace(url, val)), el;
        }
        /**
         * @param {string} stuff
         * @return {?}
         */
        function trim(stuff) {
            return stuff.replace(/^\s+/, "");
        }
        /**
         * @param {string} type
         * @return {?}
         */
        function extractId(type) {
            return type.replace(/\s+$/, "");
        }
        /**
         * @return {?}
         */
        function process() {
            /** @type {Date} */
            var currentTime = new Date;
            return currentTime.getHours() > 2 && currentTime.setDate(currentTime.getDate() + 1), currentTime.setHours(3), currentTime.setMinutes(Math.floor(60 * Math.random())), currentTime.getTime();
        }
        /**
         * @param {string} str
         * @return {?}
         */
        function escapeRegExp(str) {
            return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
        }
        var selector = require("babel-runtime/regenerator");
        var elem = $(selector);
        var ready = require("babel-runtime/helpers/toConsumableArray");
        var ret = $(ready);
        var nodes = require("babel-runtime/helpers/defineProperty");
        var result = $(nodes);
        var helper = require("babel-runtime/core-js/object/assign");
        var item = $(helper);
        var items = require("babel-runtime/core-js/object/keys");
        var option = $(items);
        var dom = require("babel-runtime/core-js/promise");
        var options = $(dom);
        /**
         * @param {string} expectedHashCode
         * @param {Array} args
         * @param {(Element|string)} config
         * @param {Text} fn
         * @return {?}
         */
        var setup = function(expectedHashCode, args, config, fn) {
            return new (config || (config = options["default"]))(function(success, done) {
                /**
                 * @param {string} expectedHashCode
                 * @return {undefined}
                 */
                function handler(expectedHashCode) {
                    try {
                        next(fn.next(expectedHashCode));
                    } catch (err) {
                        done(err);
                    }
                }
                /**
                 * @param {?} data
                 * @return {undefined}
                 */
                function loop(data) {
                    try {
                        next(fn["throw"](data));
                    } catch (err) {
                        done(err);
                    }
                }
                /**
                 * @param {Object} event
                 * @return {undefined}
                 */
                function next(event) {
                    if (event.done) {
                        success(event.value);
                    } else {
                        (new config(function(f) {
                            f(event.value);
                        })).then(handler, loop);
                    }
                }
                next((fn = fn.apply(expectedHashCode, args || [])).next());
            });
        };
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var _ = require("lodash");
        var md5 = require("non-crypto-hash");
        var d = require("./newConfig");
        var browser = require("./newConfig");
        expectedHashCode.isTestsMode = browser.isTestsMode;
        expectedHashCode.getBrowser = browser.getBrowser;
        expectedHashCode.isBg = browser.isBg;
        expectedHashCode.isBgOrPopup = browser.isBgOrPopup;
        expectedHashCode.isChrome = browser.isChrome;
        expectedHashCode.isFF = browser.isFF;
        expectedHashCode.isPopup = browser.isPopup;
        expectedHashCode.isSafari = browser.isSafari;
        expectedHashCode.isEdge = browser.isEdge;
        expectedHashCode.isWindows = browser.isWindows;
        /** @type {function (?): ?} */
        expectedHashCode.isGrammarlyEmail = hasClass;
        /** @type {function (): ?} */
        expectedHashCode.chromeBgError = onSet;
        /** @type {function (Function): ?} */
        expectedHashCode.isFunction = isFunction;
        /** @type {function (Function, number): ?} */
        expectedHashCode.interval = set;
        (function(pressed) {
            pressed.items = {};
        })(set = expectedHashCode.interval || (expectedHashCode.interval = {}));
        /** @type {function (Function): undefined} */
        expectedHashCode.cancelInterval = createRecord;
        /** @type {function (): ?} */
        expectedHashCode.guid = guid;
        /** @type {function (): undefined} */
        expectedHashCode._f = f;
        /** @type {function (): ?} */
        expectedHashCode._F = returnTrue;
        /** @type {function (): undefined} */
        expectedHashCode.bgPageReload = reload;
        /** @type {function (Object): ?} */
        expectedHashCode.isGmail = load;
        /** @type {function (?): ?} */
        expectedHashCode.isValidEmail = isConstant;
        /** @type {function (?): ?} */
        expectedHashCode.formatNumber = removeNonASCII;
        /** @type {function ((number|string), Array): ?} */
        expectedHashCode.declension = createDom;
        /** @type {function (?): ?} */
        expectedHashCode.stub = stub;
        /** @type {function (Function, Function, boolean): ?} */
        expectedHashCode.memoize = e;
        /** @type {function (?, string): ?} */
        expectedHashCode.syncWait = onSuccess;
        /** @type {function (?): ?} */
        expectedHashCode.promisify = close;
        /** @type {function (number, number): ?} */
        expectedHashCode.getRandomIntInclusive = random;
        /** @type {function (number): ?} */
        expectedHashCode.delay = delay;
        /** @type {Array} */
        var monthsLong = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
        /** @type {function (?): ?} */
        expectedHashCode.formatDate = formatDate;
        /** @type {function (?): ?} */
        expectedHashCode.createClass = keys;
        /** @type {function (): ?} */
        expectedHashCode.versionComparator = update;
        /** @type {function (): ?} */
        expectedHashCode.isBgAlive = listen;
        /** @type {function (Function): undefined} */
        expectedHashCode.asyncCall = once;
        /** @type {function (): ?} */
        expectedHashCode.createChannel = run;
        /** @type {function (?): ?} */
        expectedHashCode.normalizedHashCode = parseResponse;
        /** @type {function (Object): ?} */
        expectedHashCode.keyCode = onkeydown;
        /** @type {RegExp} */
        expectedHashCode.NBSP_RE = new RegExp(String.fromCharCode(160), "g");
        /** @type {string} */
        var val = String.fromCharCode(160);
        /** @type {RegExp} */
        var pattern = /\n/g;
        /** @type {RegExp} */
        var url = /\s$/g;
        /** @type {RegExp} */
        var p = new RegExp("\n" + String.fromCharCode(32), "g");
        /** @type {function (string, boolean): ?} */
        expectedHashCode.br = setText;
        /** @type {function (string): ?} */
        expectedHashCode.trimLeft = trim;
        /** @type {function (string): ?} */
        expectedHashCode.trimRight = extractId;
        /** @type {number} */
        expectedHashCode.SECOND = 1E3;
        /** @type {number} */
        expectedHashCode.MINUTE = 60 * expectedHashCode.SECOND;
        /** @type {number} */
        expectedHashCode.HOUR = 60 * expectedHashCode.MINUTE;
        /** @type {number} */
        expectedHashCode.DAY = 24 * expectedHashCode.HOUR;
        /** @type {number} */
        expectedHashCode.ESC_KEY = 27;
        /** @type {number} */
        expectedHashCode.ENTER_KEY = 13;
        /**
         * @param {?} curYear
         * @return {?}
         */
        expectedHashCode.pastDays = function(curYear) {
            return Math.round(Math.abs(+new Date - +new Date(curYear)) / expectedHashCode.DAY);
        };
        /** @type {function (): ?} */
        expectedHashCode.getNextPingDate = process;
        /** @type {function (string): ?} */
        expectedHashCode.escapeRegExp = escapeRegExp;
    }, {
        "./newConfig" : 279,
        "babel-runtime/core-js/object/assign" : 24,
        "babel-runtime/core-js/object/keys" : 29,
        "babel-runtime/core-js/promise" : 31,
        "babel-runtime/helpers/defineProperty" : 36,
        "babel-runtime/helpers/toConsumableArray" : 41,
        "babel-runtime/regenerator" : 43,
        lodash : "lodash",
        "non-crypto-hash" : "non-crypto-hash"
    }],
    323 : [function(require, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} type
         * @return {?}
         */
        function defer(type) {
            return type && type.__esModule ? type : {
                "default" : type
            };
        }
        /**
         * @param {string} event
         * @param {string} name
         * @param {string} selector
         * @param {boolean} useCapture
         * @return {undefined}
         */
        function next(event, name, selector, useCapture) {
            var cycle = useCapture ? name + "_forced" : name;
            var that = {
                listeners : []
            };
            /**
             * @return {undefined}
             */
            var handler = function() {
                var insert = that.listeners.indexOf(selector);
                if (insert > -1) {
                    that.listeners.splice(insert, 1);
                }
            };
            if ("on" === event || "once" === event) {
                if (args[cycle] = args[cycle] || {
                        /**
                         * @param {Function} attributes
                         * @return {undefined}
                         */
                        domEventListener : function(attributes) {
                            self.emit(cycle, attributes);
                            if ("once" === event) {
                                handler();
                            }
                        },
                        listeners : []
                    }, that = args[cycle], that.domEventListener) {
                    /**
                     * @param {Object} event
                     * @return {undefined}
                     */
                    var process = function(event) {
                        if (that.domEventListener) {
                            that.domEventListener((0, __exports__["default"])({
                                originalEvent : event,
                                preventDefault : $._f,
                                stopPropagation : $._f
                            }, event.detail));
                        }
                    };
                    that.listenerWrapper = that.listenerWrapper || process;
                }
                if (0 === that.listeners.length) {
                    if (that.domEventListener) {
                        window.addEventListener(name, that.domEventListener, useCapture);
                    }
                    if (that.listenerWrapper) {
                        window.addEventListener(name + "-gr", that.listenerWrapper, useCapture);
                    }
                }
                that.listeners.push(selector);
            }
            if ("un" === event) {
                var config = args[cycle];
                if (!config) {
                    return;
                }
                handler();
                if (0 === config.listeners.length) {
                    if (config.domEventListener) {
                        window.addEventListener(name, config.domEventListener, useCapture);
                    }
                    if (config.listenerWrapper) {
                        window.addEventListener(name + "-gr", config.listenerWrapper, useCapture);
                    }
                }
            }
            self[event](cycle, selector);
        }
        var ready = require("babel-runtime/core-js/object/keys");
        var ret = defer(ready);
        var nodes = require("babel-runtime/helpers/typeof");
        var result = defer(nodes);
        var helper = require("babel-runtime/core-js/object/assign");
        var __exports__ = defer(helper);
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var getActual = require("emitter");
        var $ = require("./util");
        var self = getActual({});
        var args = {};
        /**
         * @param {string} name
         * @return {?}
         */
        var test = function(name) {
            return function(node, until) {
                var useCapture = arguments.length > 2 && (void 0 !== arguments[2] && arguments[2]);
                if ("object" === ("undefined" === typeof node ? "undefined" : (0, result["default"])(node))) {
                    (0, ret["default"])(node).map(function(tag) {
                        return next(name, tag, node[tag], useCapture);
                    });
                } else {
                    if (until) {
                        next(name, node, until, useCapture);
                    }
                }
            };
        };
        expectedHashCode.on = test("on");
        expectedHashCode.off = test("un");
        expectedHashCode.once = test("one");
    }, {
        "./util" : 322,
        "babel-runtime/core-js/object/assign" : 24,
        "babel-runtime/core-js/object/keys" : 29,
        "babel-runtime/helpers/typeof" : 42,
        emitter : "emitter"
    }],
    324 : [function(require, dataAndEvents, expectedHashCode) {
        /**
         * @return {?}
         */
        function getNumber() {
            /** @type {string} */
            var ua = window.navigator.userAgent;
            /** @type {number} */
            var qpStart = ua.indexOf("MSIE ");
            if (qpStart > 0) {
                return parseInt(ua.substring(qpStart + 5, ua.indexOf(".", qpStart)), 10);
            }
            /** @type {number} */
            var Trident = ua.indexOf("Trident/");
            if (Trident > 0) {
                /** @type {number} */
                var i = ua.indexOf("rv:");
                return parseInt(ua.substring(i + 3, ua.indexOf(".", i)), 10);
            }
            /** @type {number} */
            var msie = ua.indexOf("Edge/");
            return msie > 0 && parseInt(ua.substring(msie + 5, ua.indexOf(".", msie)), 10);
        }
        /**
         * @param {(Object|string)} a
         * @return {?}
         */
        function array_to_hash(a) {
            return a ? void(codeSegments = a) : codeSegments;
        }
        /**
         * @param {boolean} dataAndEvents
         * @return {?}
         */
        function clone(dataAndEvents) {
            return dataAndEvents ? void(reserved = dataAndEvents) : reserved;
        }
        /**
         * @param {?} failing_message
         * @return {undefined}
         */
        function report(failing_message) {
            round = failing_message;
        }
        /**
         * @param {(Function|string)} parent
         * @return {?}
         */
        function promote(parent) {
            for (;parent.parent;) {
                parent = parent.parent;
            }
            return parent;
        }
        /**
         * @param {(RegExp|string)} keepData
         * @return {?}
         */
        function remove(keepData) {
            var expectedHashCode = keepData.concat();
            /** @type {number} */
            var index = 0;
            for (;index < expectedHashCode.length;index++) {
                var a = expectedHashCode[index];
                /** @type {Array} */
                var rest = [];
                if (void 0 === a._s) {
                    a._s = a.s;
                    a._e = a.e;
                }
                /** @type {number} */
                var i = index + 1;
                for (;i < expectedHashCode.length;i++) {
                    var b = expectedHashCode[i];
                    if (void 0 === b._s && (b._s = b.s, b._e = b.e), !(debug(a, b) <= 0)) {
                        if (a._s > b._s && a._e - b._e > 0) {
                            rest.push({
                                _s : a._s,
                                _e : b._e,
                                parent : a
                            });
                            rest.push({
                                _s : b._e,
                                _e : a._e,
                                parent : a
                            });
                            break;
                        }
                        if (a._e < b._e && b._s - a._s > 0) {
                            rest.push({
                                _s : a._s,
                                _e : b._s,
                                parent : a
                            });
                            rest.push({
                                _s : b._s,
                                _e : a._e,
                                parent : a
                            });
                            break;
                        }
                    }
                }
                if (rest.length) {
                    expectedHashCode.splice.apply(expectedHashCode, [index, 1].concat(rest));
                    /** @type {number} */
                    index = 0;
                }
            }
            return expectedHashCode.sort(function(a, b) {
                return a._s - b._s || b._e - a._e;
            }), expectedHashCode;
        }
        /**
         * @param {(RegExp|string)} object
         * @param {?} b
         * @return {?}
         */
        function debug(object, b) {
            return Math.min(object._e, b._e) - Math.max(object._s, b._s);
        }
        /**
         * @param {?} text
         * @return {?}
         */
        function _FormParagraphs(text) {
            return null === text ? "" : ("" + text).replace(opts.mark, function(offset) {
                return stack[offset];
            });
        }
        /**
         * @param {?} value
         * @return {?}
         */
        function clear(value) {
            return null === value ? "" : ("" + value).replace(opts.escape, function(name) {
                return old[name];
            });
        }
        /**
         * @param {Object} e
         * @return {undefined}
         */
        function handler(e) {
            var input = e.node;
            var name = e.matches;
            var file = e.createElement;
            var CB = e.isValidNode || function(dataAndEvents) {
                return true;
            };
            var doc = e.isValidMatchForNode;
            var val = remove(name).filter(function(parent) {
                return!parent.inDom && !promote(parent).inDom;
            });
            if (0 !== val.length) {
                parse(input, input, 0, val, null, file, CB, doc);
                val = remove(name).filter(function(parent) {
                    return!parent.inDom && !promote(parent).inDom;
                });
            }
        }
        /**
         * @param {string} text
         * @return {?}
         */
        function template(text) {
            return text.replace(/\n/g, "<br>");
        }
        /**
         * @param {Object} options
         * @return {undefined}
         */
        function start(options) {
            var value = options.text;
            var element = options.node;
            var key = options.matches;
            var prev = options.createTag;
            var callback = options.updateMethod;
            if (callback) {
                callback(value, key, function(user, key) {
                    var camelKey = remove(key);
                    return update(user, camelKey, prev);
                });
            } else {
                remove(key);
                element.innerHTML = template(update(value, key, prev));
            }
        }
        /**
         * @param {Object} types
         * @return {?}
         */
        function render(types) {
            return "dom" === types.type ? handler(types) : "text" === types.type ? start(types) : void 0;
        }
        /**
         * @param {Object} elem
         * @param {?} event
         * @return {?}
         */
        function next(elem, event) {
            var pluginMap = elem.parent || elem;
            /** @type {string} */
            var optsData = "";
            return{
                start : '<g class="gr_ gr_' + pluginMap.id + optsData + '" id="' + pluginMap.id + '">',
                end : "</g>"
            };
        }
        /**
         * @param {string} text
         * @param {Array} data
         * @param {Object} event
         * @return {?}
         */
        function update(text, data, event) {
            /** @type {string} */
            var context = text;
            text = _FormParagraphs(text);
            var jQuery = event || next;
            /** @type {Array} */
            var indices = [];
            var ret = void 0;
            var elem = void 0;
            var b = void 0;
            var lastIndex = void 0;
            var object = void 0;
            /** @type {number} */
            var index = 0;
            /** @type {number} */
            var i = 0;
            /** @type {number} */
            var offset = 0;
            /** @type {number} */
            offset = 0;
            for (;offset < data.length;offset++) {
                object = data[offset];
                /** @type {boolean} */
                object.calculatedPos = false;
                elem = object.parent || object;
                /** @type {boolean} */
                elem.inDom = true;
                if (elem.orig) {
                    /** @type {boolean} */
                    elem.orig.inDom = true;
                }
                elem = elem.orig || elem;
                ret = jQuery(elem, context);
                elem.renderTs = elem.renderTs || Date.now();
                b = ret.start;
                lastIndex = index + object._s;
                text = text.substring(0, lastIndex) + b + text.substring(lastIndex);
                index += b.length;
                /** @type {number} */
                i = 0;
                for (;i < indices.length;i++) {
                    if (indices[i] > lastIndex) {
                        indices[i] += b.length;
                    }
                }
                indices.push(index + object._e);
            }
            indices.sort(function(far, near) {
                return far - near;
            });
            /** @type {number} */
            index = 0;
            /** @type {number} */
            i = 0;
            for (;i < indices.length;i++) {
                lastIndex = index + indices[i];
                text = text.substring(0, lastIndex) + ret.end + text.substring(lastIndex);
                index += ret.end.length;
            }
            return clear(text);
        }
        /**
         * @param {Element} test
         * @param {?} str
         * @return {?}
         */
        function process(test, str) {
            /** @type {Element} */
            var el = document.createElement("g");
            return el.getElementsByTagName("g"), el.className = "gr_ gr_" + test.id, el.textContent = str, el.id = test.id.toString(), el;
        }
        /**
         * @param {Node} element
         * @param {number} pos
         * @param {number} index
         * @param {?} node
         * @param {Object} input
         * @return {undefined}
         */
        function getSelection(element, pos, index, node, input) {
            var doc = element.ownerDocument || element;
            var range = doc.createRange();
            /** @type {boolean} */
            var s = doc.activeElement !== input;
            var that = void 0;
            var el = void 0;
            if (s) {
                var sel = jQuery.getDocSelection(doc);
                that = {
                    node : sel.anchorNode,
                    activeElement : doc.activeElement,
                    offset : sel.anchorOffset,
                    selectionStart : doc.activeElement.selectionStart
                };
                el = {
                    node : sel.focusNode,
                    offset : sel.focusOffset,
                    selectionEnd : doc.activeElement.selectionEnd
                };
            }
            try {
                range.setStart(element, pos);
                range.setEnd(element, index);
                range.deleteContents();
                range.insertNode(node);
            } catch (num) {
                throw round && round("replaceRange"), num;
            }
            if (s) {
                if ("INPUT" === that.activeElement.tagName || "TEXTAREA" === that.activeElement.tagName) {
                    that.activeElement.focus();
                    that.activeElement.selectionStart = that.selectionStart;
                    that.activeElement.selectionEnd = el.selectionEnd;
                } else {
                    if (that.node) {
                        select(that, el);
                    }
                }
            }
        }
        /**
         * @param {Object} val
         * @param {Node} el
         * @param {(Function|string)} value
         * @param {Array} args
         * @param {Object} event
         * @param {string} test
         * @param {?} cb
         * @param {?} state
         * @return {?}
         */
        function parse(val, el, value, args, event, test, cb, state) {
            var element = void 0;
            var node = value || 0;
            /** @type {number} */
            var i = 0;
            var self = {
                _s : void 0,
                _e : void 0
            };
            test = test || process;
            event = event || {
                level : -1,
                validNodeForMatchLevel : 0
            };
            event.text = event.text || reset(val);
            /** @type {number} */
            var code = event.level;
            var returned = cb(el);
            if (returned) {
                if (event.level <= event.validNodeForMatchLevel) {
                    /** @type {boolean} */
                    event.validNodeForMatch = true;
                    /** @type {number} */
                    event.validNodeForMatchLevel = event.level;
                }
            } else {
                /** @type {boolean} */
                event.validNodeForMatch = false;
                /** @type {number} */
                event.validNodeForMatchLevel = event.level;
            }
            event.level++;
            el.__s = node;
            /** @type {number} */
            i = 0;
            for (;i < el.childNodes.length;i++) {
                if (element = el.childNodes[i], element.__jump_next && (i++, delete element.__jump_next, element = el.childNodes[i]), element && ((1 === element.nodeType || 3 === element.nodeType) && !fn(element))) {
                    var data = walk(val, element);
                    if (!filter(data) || 3 !== element.nodeType) {
                        if (3 !== element.nodeType) {
                            node = parse(val, element, node, args, event, test, cb, state);
                        }
                        var name = event.brAddedAtNode;
                        var item = event.prevIsBr;
                        var key = item && (name === element || (find(name, element) || find(element, name)));
                        data.prevIsBrWithinNode = key;
                        var ret = text(data);
                        var content = ret;
                        self._s = node;
                        self._e = node + ret.length;
                        node = self._e;
                        if (ret) {
                            /** @type {boolean} */
                            event.prevIsBr = false;
                        }
                        var newState = flush(data);
                        if (newState && (event.prevIsBr = true, node++, event.brAddedAtNode = element.parentNode), data.isPreWrap && (ret.indexOf("\n") !== -1 && (event.prevIsBr = true, event.brAddedAtNode = element.parentNode)), "IMG" === data.node.tagName && (event.prevIsBr = false), 3 === element.nodeType && self._s !== self._e) {
                            if (content !== element.textContent) {
                                element.textContent = content;
                            }
                            /** @type {number} */
                            var x = 0;
                            for (;x < args.length;x++) {
                                var parent = args[0];
                                var currentDocument = parent.parent || parent;
                                if (parent.__s = parent.__s || parent._s, parent.__e = parent.__e || parent._e, parent.__s >= self._e) {
                                    break;
                                }
                                for (;"\n" === event.text[parent.__s];) {
                                    parent.__s++;
                                }
                                if (element && parent.__s < self._s) {
                                    var dom = element.parentNode;
                                    for (;void 0 !== dom.__s && dom.__s > parent.__s;) {
                                        dom = dom.parentNode;
                                    }
                                    if (parent.__timesRendered = parent.__timesRendered || 0, parent.__timesRendered++, parent.__timesRendered > 5) {
                                        break;
                                    }
                                    parse(val, dom, dom.__s, args, event, test, cb, state);
                                }
                                if (self._e < parent._e) {
                                    var childNodes = parent.__s;
                                    parent.__s = self._e;
                                    parent = {
                                        __s : childNodes,
                                        __e : self._e,
                                        parent : parent
                                    };
                                } else {
                                    args.shift();
                                    x--;
                                }
                                if (event.validNodeForMatch || state(element, event.validNodeForMatch, currentDocument)) {
                                    /** @type {number} */
                                    var p = 0;
                                    if (void 0 !== parent.__s) {
                                        if (self._s < parent.__s) {
                                            /** @type {number} */
                                            p = parent.__s - self._s;
                                            ret = ret.substr(p);
                                        }
                                    }
                                    /** @type {boolean} */
                                    parent.calculatedPos = false;
                                    /** @type {number} */
                                    var length = parent.__e - parent.__s;
                                    /** @type {number} */
                                    var pos = p + length;
                                    var t = promote(parent);
                                    var e = test(t, ret.substr(0, length));
                                    if (t.renderTs = t.renderTs || Date.now(), currentDocument.inDom = true, value = node + parent.__s, ret = ret.substr(0, length), getSelection(element, p, pos, e, val), e.__node_info = null, e.previousSibling && (e.previousSibling.__node_info = null), e.nextSibling && (e.nextSibling.__node_info = null), $(element), element.parentNode === el) {
                                        i++;
                                        self._s = parent.__s;
                                        self._e = parent.__e;
                                        e.__s = parent.__s;
                                        node = parent.__e;
                                        var V = flush(walk(val, e));
                                        if (V) {
                                            node++;
                                        }
                                    }
                                    delete parent.__s;
                                    delete parent.__e;
                                    delete parent.__timesRendered;
                                    element = e.firstChild;
                                    if (e.parentNode !== el) {
                                        if (e.parentNode) {
                                            parse(val, e.parentNode, e.parentNode.__s, args, event, test, cb, state);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if (callback(el) && callback(el.nextElementSibling)) {
                var expected = args[0];
                if (expected) {
                    if (expected.__s === node) {
                        expected.__s++;
                    }
                }
                node++;
            }
            return event.level = code, node;
        }
        /**
         * @param {Array} c
         * @return {?}
         */
        function success(c) {
            if (!c || c && 0 === c.length) {
                return false;
            }
            if (1 === c.length) {
                return c[0];
            }
            var e = c[0];
            var cl = c.length;
            /** @type {number} */
            var i = 1;
            for (;i < cl;i++) {
                e.appendChild(c[i]);
                traverse(c[i].parentNode);
            }
            return e.innerHTML = reset(e), e.normalize(), c[0].parentNode.normalize(), traverse(e), traverse(c[0].parentNode), e;
        }
        /**
         * @param {string} str
         * @return {?}
         */
        function collapseWhitespace(str) {
            return str.replace(pattern, "");
        }
        /**
         * @param {string} arr
         * @return {?}
         */
        function map(arr) {
            return arr.replace(p, "");
        }
        /**
         * @param {string} text
         * @return {?}
         */
        function trim(text) {
            return text.replace(pattern, "").replace(p, "");
        }
        /**
         * @param {string} value
         * @return {?}
         */
        function removeClass(value) {
            return value.replace(pattern, " ").replace(p, " ");
        }
        /**
         * @param {?} node
         * @param {(Function|string)} var_args
         * @return {?}
         */
        function format(node, var_args) {
            if (node) {
                return node.__trimmed_content ? node.__trimmed_content : var_args ? (node.__trimmed_content = node.textContent, node.__trimmed_content) : node.textContent ? (node.__trimmed_content = trim(node.textContent), node.__trimmed_content) : void 0;
            }
        }
        /**
         * @param {Element} selector
         * @return {undefined}
         */
        function $(selector) {
            if (selector.__trimmed_content) {
                delete selector.__trimmed_content;
            }
            if (selector.__node_text) {
                delete selector.__node_text;
            }
        }
        /**
         * @param {Element} elem
         * @return {undefined}
         */
        function traverse(elem) {
            if (elem && ($(elem), elem.parentNode && ("HTML" !== elem.parentNode.nodeName && elem.parentNode.normalize()), elem.childNodes.length > 0)) {
                /** @type {number} */
                var i = 0;
                var valuesLen = elem.childNodes.length;
                for (;i < valuesLen;i++) {
                    traverse(elem.childNodes[i]);
                }
            }
        }
        /**
         * @param {string} str
         * @return {?}
         */
        function escape(str) {
            return str.replace(/\n+/g, " ").replace(match, " ");
        }
        /**
         * @param {Node} index
         * @param {Node} element
         * @return {?}
         */
        function find(index, element) {
            if (!element) {
                return false;
            }
            var parent = element.parentNode;
            for (;null !== parent;) {
                if (parent === index) {
                    return true;
                }
                parent = parent.parentNode;
            }
            return false;
        }
        /**
         * @param {Node} node
         * @return {undefined}
         */
        function replaceWith(node) {
            if (node.parentNode) {
                var doc = node.ownerDocument;
                var parentNode = node.parentNode;
                if (node.childNodes.length > 1) {
                    var wrapNode = doc.createDocumentFragment();
                    for (;node.childNodes.length > 0;) {
                        var element = node.childNodes[0];
                        wrapNode.appendChild(element);
                    }
                    parentNode.replaceChild(wrapNode, node);
                    traverse(parentNode);
                } else {
                    if (node.firstChild) {
                        parentNode.replaceChild(node.firstChild, node);
                        parentNode.normalize();
                        traverse(parentNode);
                    } else {
                        parentNode.removeChild(node);
                        parentNode.normalize();
                        traverse(parentNode);
                    }
                }
            }
        }
        /**
         * @param {Node} elem
         * @return {?}
         */
        function Redactor(elem) {
            if (!elem) {
                return false;
            }
            if (elem.__is_block) {
                return elem.__is_block;
            }
            if (!elem.ownerDocument || (!elem.tagName || fn(elem))) {
                return elem.__is_block = false, false;
            }
            var STACK_JUMP_SEPARATOR = elem.tagName.toLowerCase();
            /** @type {boolean} */
            var value = ["table", "div", "p", "blockquote", "body", "table", "tr", "th", "td", "ol", "ul", "li", "h1", "h2", "h3", "h4", "h5", "h6"].indexOf(STACK_JUMP_SEPARATOR) !== -1;
            return "block" === elem.style.display && (value = true), elem.__is_block = value, value;
        }
        /**
         * @param {Object} obj
         * @param {Object} target
         * @return {?}
         */
        function contains(obj, target) {
            if (obj.__white_space) {
                return "pre-wrap" === obj.__white_space;
            }
            var node = 3 === obj.nodeType ? obj.parentNode : obj;
            for (;node !== target || (obj === target || obj.parentNode === target);) {
                if (node.__white_space || (node.__white_space = getComputedStyle(node).whiteSpace), "pre-wrap" === node.__white_space) {
                    return obj.__white_space = node.__white_space, "pre-wrap" === obj.__white_space;
                }
                if (node = node.parentNode, obj === target || obj.parentNode === target) {
                    return false;
                }
            }
            return false;
        }
        /**
         * @return {?}
         */
        function getHash() {
            return expectedHashCode._shouldCache || document.location.hash.indexOf("cache") > -1;
        }
        /**
         * @param {Object} node
         * @param {Object} element
         * @return {?}
         */
        function func(node, element) {
            if ("SPAN" === node.parentNode.tagName) {
                /** @type {boolean} */
                var cnt = true;
                var parentNode = node.parentNode.parentNode;
                for (;parentNode !== element;) {
                    if (parentNode.parentNode.lastChild !== parentNode) {
                        /** @type {boolean} */
                        cnt = false;
                    }
                    parentNode = parentNode.parentNode;
                }
                return cnt;
            }
            return node.parentNode.parentNode.lastChild === node.parentNode;
        }
        /**
         * @param {HTMLElement} root
         * @param {HTMLElement} node
         * @return {?}
         */
        function walk(root, node) {
            if (node.__node_info && getHash()) {
                return node.__node_info.pos = node.__node_info.offset = node.__node_info.prevIsBrWithinNode = void 0, node.__node_info;
            }
            var normalizedRange = Redactor(node);
            var args = contains(node, root);
            var next = node.nextSibling;
            var previous = node.previousSibling;
            var msg = format(previous, args);
            var result = format(next, args);
            if (next) {
                if (3 === next.nodeType) {
                    if (!result) {
                        next = next.nextSibling;
                        result = format(next, args);
                    }
                }
            }
            if (previous) {
                if (3 === previous.nodeType) {
                    if (!msg) {
                        previous = previous.previousSibling;
                        msg = format(previous, args);
                    }
                }
            }
            var nextName = next && (next.parentNode && format(next.parentNode.lastChild, args));
            var timeout = Redactor(next);
            var other_index = Redactor(previous);
            var subrule = next && (!!next.tagName && !Redactor(next));
            var previousIds = previous && (!!previous.tagName && !Redactor(previous));
            /** @type {boolean} */
            var fn = "BR" === node.tagName;
            /** @type {boolean} */
            var nodeIsP = "P" === node.tagName;
            var next_next = next && "BR" === next.tagName;
            var lineBreakPrevious = previous && "BR" === previous.tagName;
            var nextIsLastChild = next && (next.parentNode.lastElementChild === next && !nextName);
            /** @type {boolean} */
            var b = node.parentNode.firstChild === node || !format(node.parentNode.firstChild, args) && node.parentNode.firstElementChild === node;
            /** @type {boolean} */
            var nodeIsLastChild = node.parentNode.lastChild === node || !nextName && node.parentNode.lastElementChild === node;
            /** @type {boolean} */
            var bup = b && node.parentNode === root;
            /** @type {boolean} */
            var nodeWithContent = !!format(node, args) || (!(!normalizedRange || !node.querySelector("br")) || !(!node.tagName || !node.querySelector("img")));
            var value = previous && !!msg;
            var option = next && !!result;
            /** @type {boolean} */
            var parentWithContent = !!format(node.parentNode, args);
            var call = fn && func(node, root);
            var nextIsElement = next && ((3 === next.nodeType || subrule) && option);
            var prevIsElement = previous && ((3 === previous.nodeType || previousIds) && value);
            var options = timeout && option;
            var proceed = other_index && value;
            var onlyOneChild = node.parentNode && (node.parentNode.children && 1 === node.parentNode.children.length);
            return node.__node_info = {
                pos : void 0,
                offset : void 0,
                node : node,
                root : root,
                preWrap : args,
                next : next,
                prev : previous,
                isTextNode : 3 === node.nodeType,
                nodeIsBlock : normalizedRange,
                nextIsBlock : timeout,
                prevIsBlock : other_index,
                nextInline : subrule,
                prevInline : previousIds,
                nodeIsBr : fn,
                nodeIsP : nodeIsP,
                nextIsBr : next_next,
                prevIsBr : lineBreakPrevious,
                prevIsBrWithinNode : void 0,
                nextIsLastChild : nextIsLastChild,
                nodeIsFirstChild : b,
                nodeIsLastChild : nodeIsLastChild,
                nodeIsRootFirstChild : bup,
                nodeWithContent : nodeWithContent,
                prevWithContent : value,
                nextWithContent : option,
                parentWithContent : parentWithContent,
                parentIsLastChildForBr : call,
                nextIsElement : nextIsElement,
                prevIsElement : prevIsElement,
                nextIsBlockWithContent : options,
                prevIsBlockWithContent : proceed,
                onlyOneChild : onlyOneChild,
                isPreWrap : false,
                isRoot : node === root
            }, node.__node_info;
        }
        /**
         * @param {Object} node
         * @return {?}
         */
        function flush(node) {
            /** @type {boolean} */
            var attrsNo = false;
            return node.nodeIsBlock && (node.nodeWithContent && (node.nextIsElement && (!node.prevIsBrWithinNode && (attrsNo = true)))), !node.nodeIsBlock && (node.nodeWithContent && ((node.nextIsBlock || node.nextIsBr) && (attrsNo = true))), node.nodeIsBlock && (node.nodeWithContent && (node.nextIsBlock && (!node.prevIsBrWithinNode && (attrsNo = true)))), node.nextIsBr && (!node.nextIsLastChild && (node.nodeWithContent && (attrsNo = true))), node.nodeIsBr && (!node.parentWithContent && (node.nodeIsLastChild &&
                (attrsNo = true, esc && (node.parentIsLastChildForBr && (attrsNo = false))))), node.nodeIsBr && (node.nextIsBr && (attrsNo = true)), node.nodeIsBr && (node.nodeIsFirstChild && (!node.onlyOneChild && (attrsNo = true))), node.nodeIsBr && (node.nextIsElement && (!node.prevWithContent && (!node.prevIsBr && (attrsNo = true)))), node.nodeIsBr && (node.nextIsBlockWithContent && (node.prevIsBlockWithContent && (attrsNo = true))), esc && (0 === node.node.childNodes.length && ("<br>" === node.node.innerHTML &&
                (attrsNo = true))), node.isRoot && (attrsNo = false), !(node.preWrap && (node.node && (node.node.textContent && "\n" === node.node.textContent[node.node.textContent.length - 1]))) || (node.prev && !node.prevIsBlock || (node.next && !node.nextIsBlock || (attrsNo = false))), node.isTextNode && (filter(node) && (attrsNo = false)), callback(node.node) && (attrsNo = false), attrsNo;
        }
        /**
         * @param {Object} event
         * @return {?}
         */
        function filter(event) {
            return event.node.parentNode && ["table", "tbody", "thead", "tr"].indexOf(event.node.parentNode.tagName.toLowerCase()) !== -1;
        }
        /**
         * @param {Object} item
         * @return {?}
         */
        function text(item) {
            if (!item.node.nodeValue) {
                return "";
            }
            if (filter(item)) {
                return "";
            }
            if (item.preWrap) {
                return item.node.nodeValue;
            }
            if (item.node.__node_text) {
                return item.node.__node_text;
            }
            var $keys = escape(item.node.nodeValue);
            return item.next && item.prev || (Redactor(item.node.parentNode) || item.prevIsBr) ? ((!item.prev || (item.prevIsBlock || item.prevIsBr)) && ($keys = collapseWhitespace($keys)), item.next && !item.nextIsBlock || (esc || ($keys = map($keys))), item.node.__node_text = $keys, $keys) : (item.node.__node_text = $keys, $keys);
        }
        /**
         * @param {Node} id
         * @return {?}
         */
        function callback(id) {
            if (id) {
                return "TD" === id.tagName || "TH" === id.tagName;
            }
        }
        /**
         * @param {Node} node
         * @return {?}
         */
        function fn(node) {
            return 1 === node.nodeType && (is(node) || toggleClass(node));
        }
        /**
         * @param {Node} node
         * @return {?}
         */
        function is(node) {
            var i = node.tagName.toLowerCase();
            return reserved.indexOf(i) >= 0;
        }
        /**
         * @param {HTMLElement} node
         * @return {?}
         */
        function toggleClass(node) {
            /** @type {number} */
            var i = 0;
            for (;i < codeSegments.length;i++) {
                if (node.classList.contains(codeSegments[i])) {
                    return true;
                }
            }
            return false;
        }
        /**
         * @param {Object} e
         * @param {(Function|string)} cb
         * @return {?}
         */
        function reset(e, cb) {
            /**
             * @param {Node} root
             * @return {?}
             */
            function create(root) {
                /**
                 * @param {Node} node
                 * @return {?}
                 */
                function init(node) {
                    if ((3 === node.nodeType || 1 === node.nodeType) && !fn(node)) {
                        var expectedHashCode = walk(root, node);
                        var cycle = prevChunksLen;
                        if (!filter(expectedHashCode) || 3 !== node.nodeType) {
                            if (expectedHashCode.isTextNode) {
                                var fix = text(expectedHashCode);
                                prevChunksLen += fix.length;
                                if (fix) {
                                    result.push(fix);
                                }
                                if (expectedHashCode.preWrap) {
                                    if ("\n" === fix[fix.length - 1]) {
                                        element = node.parentNode;
                                    }
                                }
                            }
                            if (node.childNodes && !fn(node)) {
                                /** @type {number} */
                                var i = 0;
                                var valuesLen = node.childNodes.length;
                                for (;i < valuesLen;++i) {
                                    if (init(node.childNodes[i]) === false) {
                                        return false;
                                    }
                                }
                            }
                            if ("IMG" === node.tagName) {
                                result.push("");
                            }
                            if (callback(node)) {
                                if (callback(node.nextElementSibling)) {
                                    result.push(ready);
                                    prevChunksLen++;
                                }
                            }
                            var tail = result[result.length - 1];
                            var prevIsBrWithinNode = !!tail && ("\n" === tail[tail.length - 1] && (element === node || (find(element, node) || find(node, element))));
                            expectedHashCode.prevIsBrWithinNode = prevIsBrWithinNode;
                            var m = flush(expectedHashCode);
                            return m && (result.push("\n"), prevChunksLen++, element = node.parentNode), (!cb || cb(expectedHashCode, cycle) !== false) && void 0;
                        }
                    }
                }
                /** @type {Array} */
                var result = [];
                /** @type {number} */
                var prevChunksLen = 0;
                var element = void 0;
                return init(root), result.join("");
            }
            /** @type {boolean} */
            var r = !!cb;
            if (cb = cb || config._f, e.normalize(), !r && (e.__getText && (e.__getText.getText && e.__getText.innerHTML === e.innerHTML))) {
                return e.__getText.getText;
            }
            var model = create(e);
            return r && (e.__getText && delete e.__getText), r || (e.__getText = {
                getText : model,
                innerHTML : e.innerHTML
            }), model;
        }
        /**
         * @param {string} d
         * @param {number} i
         * @param {Object} options
         * @return {?}
         */
        function check(d, i, options) {
            /** @type {string} */
            var result = d;
            if (options.isTextNode) {
                var value = (options.node.textContent || "").substr(0, i);
                if (!options.preWrap) {
                    if (trim(value)) {
                        value = map(value);
                    }
                }
                var datum = {
                    prev : options.prev,
                    preWrap : options.preWrap,
                    prevIsBlock : options.prevIsBlock,
                    prevIsBr : options.prevIsBr,
                    node : {
                        nodeValue : value
                    }
                };
                var check = text(datum);
                /** @type {number} */
                result = i + d - (value.length - check.length);
            } else {
                if (options.nodeIsBr) {
                    if (!options.onlyOneChild) {
                        result--;
                    }
                }
            }
            return result;
        }
        /**
         * @param {Object} element
         * @param {Element} node
         * @param {number} index
         * @return {?}
         */
        function css(element, node, index) {
            /** @type {number} */
            var string = 0;
            return node.childNodes.length && (index > 0 && (node = node.childNodes[index], index = 0)), reset(element, function(p, key) {
                if (p.node === node) {
                    return string = check(key, index, p), false;
                }
            }), string;
        }
        /**
         * @param {boolean} e
         * @return {undefined}
         */
        function run(e) {
            reset(e, function(item, dataAndEvents) {
                if (!item.isTextNode) {
                    item.node.__pos = dataAndEvents;
                }
            });
        }
        /**
         * @param {Object} element
         * @param {Function} col
         * @return {?}
         */
        function init(element, col) {
            var returnItem = void 0;
            return element.normalize(), reset(element, function(item, start) {
                /** @type {string} */
                item.pos = start;
                /** @type {number} */
                item.offset = 0;
                var end = start + text(item).length;
                if (start === end && !esc) {
                    return true;
                }
                if (col >= start && col <= end) {
                    var header = item.node.nodeValue || "";
                    /** @type {number} */
                    var index = 0;
                    for (;index <= header.length;index++) {
                        if (!(col !== check(start, index, item))) {
                            /** @type {number} */
                            item.offset = index;
                        }
                    }
                    return!((!item.nodeIsBr || 0 !== item.offset) && (!item.isTextNode || (item.nodeWithContent || esc && "" !== removeClass(header)))) || (returnItem = item, false);
                }
            }), returnItem;
        }
        /**
         * @param {Object} element
         * @return {?}
         */
        function setup(element) {
            var selection = jQuery.getDocSelection(element.ownerDocument);
            if (!selection.anchorNode) {
                return{
                    s : -1,
                    e : -1
                };
            }
            var s = css(element, selection.anchorNode, selection.anchorOffset);
            var e = selection.isCollapsed ? s : css(element, selection.focusNode, selection.focusOffset);
            return{
                s : s,
                e : e
            };
        }
        /**
         * @param {Object} el
         * @param {?} a
         * @return {?}
         */
        function add(el, a) {
            var node = init(el, a.s);
            if (!node) {
                return false;
            }
            if (getHash()) {
                node = _.clone(node);
            }
            var parent = a.s === a.e ? node : init(el, a.e);
            if (!(!node || (node < 0 || parent < 0))) {
                if (esc) {
                    select(node, parent);
                    var data = setup(el);
                    if (data.s !== a.s) {
                        if (node.offset > 0) {
                            node.offset--;
                            parent.offset--;
                            select(node, parent);
                            node.offset++;
                            parent.offset++;
                            select(node, parent);
                        }
                    }
                } else {
                    select(node, parent);
                }
            }
        }
        /**
         * @param {Object} node
         * @param {Object} item
         * @return {undefined}
         */
        function select(node, item) {
            var doc = node.node.ownerDocument;
            try {
                if (!item) {
                    /** @type {Object} */
                    item = node;
                }
                var selection = jQuery.getDocSelection(doc);
                var self = doc.createRange();
                self.setStart(node.node, node.offset);
                self.setEnd(item.node, item.offset);
                selection.removeAllRanges();
                selection.addRange(self);
            } catch (expectedHashCode) {
                console.log(expectedHashCode);
            }
        }
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var _ = require("lodash");
        var config = require("lib/util");
        var jQuery = require("lib/dom");
        /** @type {Array.<?>} */
        var UNICODE_SPACES = [10, 8, 32, 8194, 8195, 8196, 8197, 8198, 8199, 8200, 8201, 8202, 8203, 8287, 12288].map(function(lo) {
            return String.fromCharCode(lo);
        });
        /** @type {RegExp} */
        var pattern = new RegExp("^[" + UNICODE_SPACES.join("") + "]+", "g");
        /** @type {RegExp} */
        var p = new RegExp("[" + UNICODE_SPACES.join("") + "]+$", "g");
        /** @type {RegExp} */
        var match = new RegExp("[" + UNICODE_SPACES.join("") + "]+", "g");
        /** @type {string} */
        var ready = String.fromCharCode(9);
        /** @type {Array} */
        var codeSegments = [];
        /** @type {Array} */
        var reserved = ["pre", "code", "blockquote"];
        var stack = {
            "&" : "\u1aa5",
            "<" : "\u1c89",
            ">" : "\u1c86",
            '"' : "\u1bfc",
            "'" : "\u1a0b",
            "/" : "\u1a57"
        };
        var old = {
            "\u1aa5" : "&amp;",
            "\u1c89" : "&lt;",
            "\u1c86" : "&gt;",
            "\u1bfc" : "&quot;",
            "\u1a0b" : "&#x27;",
            "\u1a57" : "&#x2F;"
        };
        /** @type {boolean} */
        expectedHashCode._shouldCache = false;
        /** @type {boolean} */
        var esc = !!getNumber();
        var opts = {
            mark : new RegExp("[" + _.keys(stack).join("") + "]", "g"),
            escape : new RegExp("[" + _.keys(old).join("") + "]", "g")
        };
        /** @type {function ((Object|string)): ?} */
        expectedHashCode.skipClass = array_to_hash;
        /** @type {function (boolean): ?} */
        expectedHashCode.skipTag = clone;
        var round = void 0;
        /** @type {function (?): undefined} */
        expectedHashCode.setOnError = report;
        /** @type {function ((RegExp|string), ?): ?} */
        expectedHashCode.collision = debug;
        /** @type {function (Object): ?} */
        expectedHashCode.render = render;
        /** @type {function (Node, number, number, ?, Object): undefined} */
        expectedHashCode.replaceRange = getSelection;
        /** @type {function (Array): ?} */
        expectedHashCode.mergeNodes = success;
        /** @type {function (Element): undefined} */
        expectedHashCode.invalidateNode = traverse;
        /** @type {function (Node): undefined} */
        expectedHashCode.unwrap = replaceWith;
        /** @type {function (Object): ?} */
        expectedHashCode.getNodeText = text;
        /** @type {function (Node): ?} */
        expectedHashCode.hasSkipNode = fn;
        /** @type {function (Node): ?} */
        expectedHashCode.hasSkipTag = is;
        /** @type {function (HTMLElement): ?} */
        expectedHashCode.hasSkipClass = toggleClass;
        /** @type {function (Object, (Function|string)): ?} */
        expectedHashCode.getText = reset;
        /** @type {function (Object, Element, number): ?} */
        expectedHashCode.getPosInText = css;
        /** @type {function (boolean): undefined} */
        expectedHashCode.markChildPos = run;
        /** @type {function (Object, Function): ?} */
        expectedHashCode.getNodeByTextPos = init;
        /** @type {function (Object): ?} */
        expectedHashCode.getCursorPos = setup;
        /** @type {function (Object, ?): ?} */
        expectedHashCode.setCursorPos = add;
        /** @type {function (Object, Object): undefined} */
        expectedHashCode.setRange = select;
    }, {
        "lib/dom" : 215,
        "lib/util" : 322,
        lodash : "lodash"
    }],
    325 : [function(require, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} value
         * @return {?}
         */
        function h(value) {
            return value && value.__esModule ? value : {
                "default" : value
            };
        }
        /**
         * @param {Function} fn
         * @param {Array} array
         * @return {?}
         */
        function init(fn, array) {
            var expectedHashCode;
            return(expectedHashCode = []).concat.apply(expectedHashCode, (0, conf["default"])(array.map(fn)));
        }
        /**
         * @param {?} makeIterator
         * @param {?} failing_message
         * @param {Array} codeSegments
         * @return {?}
         */
        function report(makeIterator, failing_message, codeSegments) {
            /** @type {Array} */
            var domWaiters = [failing_message];
            var callback = failing_message;
            /** @type {number} */
            var i = 0;
            for (;i < codeSegments.length;i++) {
                callback = makeIterator(callback, codeSegments[i]);
                domWaiters.push(callback);
            }
            return domWaiters;
        }
        /**
         * @param {Array} versions
         * @return {?}
         */
        function max(versions) {
            return versions.reduce(function(date2, date1) {
                return date1 > date2 ? date1 : date2;
            }, versions[0]);
        }
        /**
         * @param {Array} list
         * @param {?} cb
         * @return {?}
         */
        function write(list, cb) {
            return 0 === list.length ? void 0 : list.reduce(function(dataAndEvents, arg) {
                var keyName = cb(arg);
                return keyName > dataAndEvents[1] ? [arg, keyName] : dataAndEvents;
            }, [list[0], cb(list[0])])[0];
        }
        /**
         * @param {Object} array
         * @return {?}
         */
        function nlargest(array) {
            return array.slice().reverse();
        }
        /**
         * @param {?} fn
         * @param {Array} elems
         * @return {?}
         */
        function access(fn, elems) {
            /** @type {Array} */
            var first = [];
            /** @type {Array} */
            var res = [];
            /** @type {number} */
            var pos = 0;
            /** @type {number} */
            var resLength = 0;
            /** @type {number} */
            var j = 0;
            for (;j < elems.length;j++) {
                if (fn(elems[j])) {
                    first[pos++] = elems[j];
                } else {
                    res[resLength++] = elems[j];
                }
            }
            return[first, res];
        }
        /**
         * @param {number} size
         * @param {string} filter
         * @return {?}
         */
        function parse(size, filter) {
            if (size < 1) {
                throw new Error("Invalid chunk size, expected > 0");
            }
            if (0 === filter.length) {
                return[[]];
            }
            /** @type {Array} */
            var resp = [];
            /** @type {number} */
            var i = 0;
            for (;i < Math.ceil(filter.length / size);i++) {
                resp.push(filter.slice(i * size, (i + 1) * size));
            }
            return resp;
        }
        /**
         * @param {?} fn
         * @param {?} item
         * @return {?}
         */
        function clean(fn, item) {
            /** @type {Array} */
            var ret = [];
            var elems = fn(item);
            for (;void 0 !== elems;) {
                ret.push(elems[0]);
                elems = fn(elems[1]);
            }
            return ret;
        }
        /**
         * @param {string} expectedHashCode
         * @param {number} width
         * @return {?}
         */
        function map(expectedHashCode, width) {
            return void 0 !== width ? (0, elem["default"])(Array(width - expectedHashCode), function(deepDataAndEvents, dataAndEvents) {
                return dataAndEvents + expectedHashCode;
            }) : (0, elem["default"])(Array(expectedHashCode), function(dataAndEvents, result) {
                return result;
            });
        }
        var selector = require("babel-runtime/core-js/array/from");
        var elem = h(selector);
        var data = require("babel-runtime/helpers/toConsumableArray");
        var conf = h(data);
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        /** @type {function (Function, Array): ?} */
        expectedHashCode.flatMap = init;
        /** @type {function (?, ?, Array): ?} */
        expectedHashCode.scan = report;
        /** @type {function (Array): ?} */
        expectedHashCode.maximum = max;
        /** @type {function (Array, ?): ?} */
        expectedHashCode.maximumBy = write;
        /** @type {function (Object): ?} */
        expectedHashCode.reverse = nlargest;
        /** @type {function (?, Array): ?} */
        expectedHashCode.partition = access;
        /** @type {function (number, string): ?} */
        expectedHashCode.chunkBySize = parse;
        /** @type {function (?, ?): ?} */
        expectedHashCode.unfold = clean;
        /** @type {function (string, number): ?} */
        expectedHashCode.range = map;
    }, {
        "babel-runtime/core-js/array/from" : 19,
        "babel-runtime/helpers/toConsumableArray" : 41
    }],
    326 : [function(require, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} value
         * @return {?}
         */
        function String(value) {
            return value && value.__esModule ? value : {
                "default" : value
            };
        }
        /**
         * @param {boolean} guard
         * @param {string} msg
         * @return {undefined}
         */
        function assert(guard, msg) {
            if (!guard) {
                throw new AssertionError(msg);
            }
        }
        /**
         * @param {number} o
         * @param {string} dataAndEvents
         * @return {?}
         */
        function clone(o, dataAndEvents) {
            if (null === o) {
                throw new AssertionError(function() {
                    return dataAndEvents ? "Expected " + dataAndEvents + " to be non-null" : "Expected non-null";
                });
            }
            return o;
        }
        var ex = require("babel-runtime/core-js/object/get-prototype-of");
        var result = String(ex);
        var b = require("babel-runtime/helpers/classCallCheck");
        var field = String(b);
        var header = require("babel-runtime/helpers/possibleConstructorReturn");
        var t = String(header);
        var one = require("babel-runtime/helpers/inherits");
        var type = String(one);
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var AssertionError = function(_super) {
            /**
             * @param {string} method
             * @return {?}
             */
            function value(method) {
                return(0, field["default"])(this, value), (0, t["default"])(this, (value.__proto__ || (0, result["default"])(value)).call(this, "Assertion failed: " + (method ? "string" === typeof method ? method : method() : "(unnamed)")));
            }
            return(0, type["default"])(value, _super), value;
        }(Error);
        expectedHashCode.AssertionError = AssertionError;
        /** @type {function (boolean, string): undefined} */
        expectedHashCode.assert = assert;
        /** @type {function (number, string): ?} */
        expectedHashCode.assertNonNull = clone;
    }, {
        "babel-runtime/core-js/object/get-prototype-of" : 28,
        "babel-runtime/helpers/classCallCheck" : 34,
        "babel-runtime/helpers/inherits" : 38,
        "babel-runtime/helpers/possibleConstructorReturn" : 39
    }],
    327 : [function(require, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} value
         * @return {?}
         */
        function h(value) {
            return value && value.__esModule ? value : {
                "default" : value
            };
        }
        var selector = require("babel-runtime/helpers/classCallCheck");
        var elem = h(selector);
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var indexOf = require("emitter");
        /**
         * @return {undefined}
         */
        var Emitter = function create() {
            var that = this;
            var dontCloseTags = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
            (0, elem["default"])(this, create);
            /**
             * @param {string} type
             * @param {Function} opt_attributes
             * @return {?}
             */
            this.on = function(type, opt_attributes) {
                return that._internalEmitter.on(type, opt_attributes);
            };
            /**
             * @param {string} type
             * @param {Function} callback
             * @return {?}
             */
            this.one = function(type, callback) {
                return that._internalEmitter.one(type, callback);
            };
            /**
             * @param {string} type
             * @param {Function} opt_attributes
             * @return {?}
             */
            this.off = function(type, opt_attributes) {
                return that._internalEmitter.off(type, opt_attributes);
            };
            /**
             * @param {string} type
             * @param {Function} opt_attributes
             * @return {?}
             */
            this.emit = function(type, opt_attributes) {
                return that._internalEmitter.emit(type, opt_attributes);
            };
            /**
             * @param {?} type
             * @param {string} event
             * @param {?} cont
             * @return {?}
             */
            this.delegate = function(type, event, cont) {
                return that._internalEmitter.delegate(type, event, cont);
            };
            this._internalEmitter = indexOf(dontCloseTags);
        };
        /** @type {function (): undefined} */
        expectedHashCode.Emitter = Emitter;
    }, {
        "babel-runtime/helpers/classCallCheck" : 34,
        emitter : "emitter"
    }],
    328 : [function(require, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} value
         * @return {?}
         */
        function $(value) {
            return value && value.__esModule ? value : {
                "default" : value
            };
        }
        /**
         * @param {Array} obj
         * @param {?} message
         * @return {?}
         */
        function log(obj, message) {
            return obj.some(function(event) {
                return event === message;
            }) ? message : void 0;
        }
        /**
         * @param {(Array|string)} s
         * @param {string} data
         * @param {string} group
         * @return {?}
         */
        function encode(s, data, group) {
            var buf = log(s, data);
            if (void 0 !== buf) {
                return buf;
            }
            throw new TypeError('Unrecognized string union value "' + data + '"' + (group ? " for " + group : ""));
        }
        /**
         * @param {string} str
         * @return {?}
         */
        function parse(str) {
            throw new Parser(str);
        }
        /**
         * @param {string} value
         * @return {?}
         */
        function compare(value) {
            /** @type {number} */
            var state = parseInt(value, 10);
            return isNaN(state) ? void 0 : state;
        }
        /**
         * @param {string} isXML
         * @param {string} year
         * @return {?}
         */
        function find(isXML, year) {
            var result = compare(isXML);
            if (void 0 !== result) {
                return result;
            }
            throw new Error("Expected a number string, got '" + isXML + "'" + (void 0 !== year ? " for " + year : ""));
        }
        /**
         * @param {Function} func
         * @param {Function} add
         * @return {?}
         */
        function after(func, add) {
            try {
                return func();
            } catch (prefix) {
                return add(prefix);
            }
        }
        var one = require("babel-runtime/core-js/object/get-prototype-of");
        var column = $(one);
        var json = require("babel-runtime/helpers/possibleConstructorReturn");
        var obj = $(json);
        var dom = require("babel-runtime/helpers/inherits");
        var h = $(dom);
        var selector = require("babel-runtime/helpers/classCallCheck");
        var template = $(selector);
        var build = require("babel-runtime/helpers/createClass");
        var src = $(build);
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var chai = require("./assert");
        expectedHashCode.assert = chai.assert;
        expectedHashCode.assertNonNull = chai.assertNonNull;
        expectedHashCode.AssertionError = chai.AssertionError;
        var nodes = require("./promise");
        expectedHashCode.SafePromise = nodes.SafePromise;
        var helper = require("./array");
        expectedHashCode.Arr = helper;
        var Block = require("./object");
        expectedHashCode.Obj = Block;
        var Global = function() {
            /**
             * @param {(Object|number)} elem
             * @return {undefined}
             */
            function restoreScript(elem) {
                (0, template["default"])(this, restoreScript);
                /** @type {(Object|number)} */
                this._getFallbackValue = elem;
            }
            return(0, src["default"])(restoreScript, [{
                key : "init",
                /**
                 * @param {string} expectedHashCode
                 * @return {undefined}
                 */
                value : function(expectedHashCode) {
                    if (void 0 !== this._value) {
                        throw new Error("Global value already initialized.");
                    }
                    /** @type {string} */
                    this._value = expectedHashCode;
                }
            }, {
                key : "get",
                /**
                 * @return {?}
                 */
                value : function() {
                    if (void 0 === this._value) {
                        if (void 0 === this._getFallbackValue) {
                            throw new Error("Global value not initialized and no fallback value provided.");
                        }
                        this._value = this._getFallbackValue();
                    }
                    return this._value;
                }
            }]), restoreScript;
        }();
        expectedHashCode.Global = Global;
        /** @type {function (Array, ?): ?} */
        expectedHashCode.optionalStringUnion = log;
        /** @type {function ((Array|string), string, string): ?} */
        expectedHashCode.assertStringUnion = encode;
        var Parser = function(_super) {
            /**
             * @param {string} domain
             * @return {?}
             */
            function value(domain) {
                return(0, template["default"])(this, value), (0, obj["default"])(this, (value.__proto__ || (0, column["default"])(value)).call(this, "Matching not exhaustive" + (domain ? ": unexpected value " + domain : "")));
            }
            return(0, h["default"])(value, _super), value;
        }(Error);
        expectedHashCode.MatchingNotExhaustiveError = Parser;
        /** @type {function (string): ?} */
        expectedHashCode.assertNever = parse;
        /** @type {function (string): ?} */
        expectedHashCode.optionalIntString = compare;
        /** @type {function (string, string): ?} */
        expectedHashCode.assertIntString = find;
        /** @type {function (Function, Function): ?} */
        expectedHashCode.try_ = after;
    }, {
        "./array" : 325,
        "./assert" : 326,
        "./object" : 329,
        "./promise" : 330,
        "babel-runtime/core-js/object/get-prototype-of" : 28,
        "babel-runtime/helpers/classCallCheck" : 34,
        "babel-runtime/helpers/createClass" : 35,
        "babel-runtime/helpers/inherits" : 38,
        "babel-runtime/helpers/possibleConstructorReturn" : 39
    }],
    329 : [function(proceed, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} value
         * @return {?}
         */
        function lookupIterator(value) {
            return value && value.__esModule ? value : {
                "default" : value
            };
        }
        /**
         * @param {Function} callback
         * @param {Function} data
         * @return {?}
         */
        function setup(callback, data) {
            var employees = {};
            return(0, iterator["default"])(data).forEach(function(i) {
                return employees[i] = callback(i, data[i]);
            }), employees;
        }
        /**
         * @param {Function} callback
         * @param {Object} options
         * @return {?}
         */
        function close(callback, options) {
            var internalValues = {};
            return(0, iterator["default"])(options).forEach(function(key) {
                if (callback(key, options[key])) {
                    internalValues[key] = options[key];
                }
            }), internalValues;
        }
        /**
         * @param {string} expectedHashCode
         * @return {?}
         */
        function values(expectedHashCode) {
            return(0, iterator["default"])(expectedHashCode).map(function(timeoutKey) {
                return expectedHashCode[timeoutKey];
            });
        }
        /**
         * @param {Array} collection
         * @return {?}
         */
        function pluck(collection) {
            return(0, iterator["default"])(collection).map(function(method) {
                return[method, collection[method]];
            });
        }
        var value = proceed("babel-runtime/core-js/object/keys");
        var iterator = lookupIterator(value);
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        /** @type {function (Function, Function): ?} */
        expectedHashCode.map = setup;
        /** @type {function (Function, Object): ?} */
        expectedHashCode.filter = close;
        /** @type {function (string): ?} */
        expectedHashCode.values = values;
        /** @type {function (Array): ?} */
        expectedHashCode.pairs = pluck;
    }, {
        "babel-runtime/core-js/object/keys" : 29
    }],
    330 : [function(proceed, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} value
         * @return {?}
         */
        function lookupIterator(value) {
            return value && value.__esModule ? value : {
                "default" : value
            };
        }
        var value = proceed("babel-runtime/core-js/promise");
        var iterator = lookupIterator(value);
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var a;
        !function(calendar) {
            /**
             * @param {string} expectedHashCode
             * @return {?}
             */
            function create(expectedHashCode) {
                return new iterator["default"](expectedHashCode);
            }
            /**
             * @return {?}
             */
            function makeRequest() {
                var resolveWith = void 0;
                var error = void 0;
                var getPromise = new iterator["default"](function(dataAndEvents, err) {
                    /** @type {(number|string)} */
                    resolveWith = dataAndEvents;
                    /** @type {(number|string)} */
                    error = err;
                });
                return{
                    promise : getPromise,
                    /**
                     * @param {string} expectedHashCode
                     * @return {undefined}
                     */
                    resolve : function(expectedHashCode) {
                        resolveWith(expectedHashCode);
                    },
                    /**
                     * @param {Error} opt_attributes
                     * @return {undefined}
                     */
                    reject : function(opt_attributes) {
                        error(opt_attributes);
                    }
                };
            }
            /**
             * @param {Function} cb
             * @return {?}
             */
            function sync(cb) {
                return create(function(callback, dataAndEvents) {
                    return callback(cb());
                });
            }
            /** @type {function (string): ?} */
            calendar.create = create;
            /** @type {function (): ?} */
            calendar.createCompletionSource = makeRequest;
            /** @type {function (Function): ?} */
            calendar.sync = sync;
        }(a = expectedHashCode.SafePromise || (expectedHashCode.SafePromise = {}));
    }, {
        "babel-runtime/core-js/promise" : 31
    }],
    331 : [function(require, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} value
         * @return {?}
         */
        function $(value) {
            return value && value.__esModule ? value : {
                "default" : value
            };
        }
        var tag = require("babel-runtime/core-js/json/stringify");
        var h = $(tag);
        var info = require("babel-runtime/core-js/object/keys");
        var match = $(info);
        var items = require("babel-runtime/helpers/typeof");
        var option = $(items);
        var path = require("babel-runtime/helpers/defineProperty");
        var type = $(path);
        var one = require("babel-runtime/core-js/object/assign");
        var column = $(one);
        var nodes = require("babel-runtime/helpers/classCallCheck");
        var result = $(nodes);
        var selector = require("babel-runtime/regenerator");
        var elem = $(selector);
        var dom = require("babel-runtime/core-js/promise");
        var options = $(dom);
        /**
         * @param {string} expectedHashCode
         * @param {Array} opt_attributes
         * @param {(Element|string)} expectedNumberOfNonCommentArgs
         * @param {Text} f
         * @return {?}
         */
        var then = function(expectedHashCode, opt_attributes, expectedNumberOfNonCommentArgs, f) {
            return new (expectedNumberOfNonCommentArgs || (expectedNumberOfNonCommentArgs = options["default"]))(function(done, complete) {
                /**
                 * @param {string} expectedHashCode
                 * @return {undefined}
                 */
                function finish(expectedHashCode) {
                    try {
                        cb(f.next(expectedHashCode));
                    } catch (success) {
                        complete(success);
                    }
                }
                /**
                 * @param {?} e
                 * @return {undefined}
                 */
                function reject(e) {
                    try {
                        cb(f["throw"](e));
                    } catch (success) {
                        complete(success);
                    }
                }
                /**
                 * @param {Object} res
                 * @return {undefined}
                 */
                function cb(res) {
                    if (res.done) {
                        done(res.value);
                    } else {
                        (new expectedNumberOfNonCommentArgs(function(done) {
                            done(res.value);
                        })).then(finish, reject);
                    }
                }
                cb((f = f.apply(expectedHashCode, opt_attributes || [])).next());
            });
        };
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        /**
         * @param {Object} attributes
         * @param {Node} file
         * @return {?}
         */
        var initialize = function(attributes, file) {
            return then(void 0, void 0, void 0, elem["default"].mark(function end() {
                var data;
                return elem["default"].wrap(function(self) {
                    for (;;) {
                        switch(self.prev = self.next) {
                            case 0:
                                return self.prev = 0, self.next = 3, file.get(attributes);
                            case 3:
                                if (data = self.sent, "undefined" !== data) {
                                    /** @type {number} */
                                    self.next = 8;
                                    break;
                                }
                                return self.abrupt("return", void 0);
                            case 8:
                                return self.abrupt("return", data && JSON.parse(data));
                            case 9:
                                /** @type {number} */
                                self.next = 19;
                                break;
                            case 11:
                                if (self.prev = 11, self.t0 = self["catch"](0), !self.t0 || !self.t0.toString().includes("SyntaxError")) {
                                    /** @type {number} */
                                    self.next = 18;
                                    break;
                                }
                                throw file.remove(attributes), new Error("'" + attributes + "' has unparseable value, removing");;
                            case 18:
                                throw self.t0;;
                            case 19:
                                ;
                            case "end":
                                return self.stop();
                        }
                    }
                }, end, this, [[0, 11]]);
            }));
        };
        /**
         * @param {Object} contentHTML
         * @return {undefined}
         */
        var PrefsImpl = function initialize(contentHTML) {
            var self = this;
            (0, result["default"])(this, initialize);
            /** @type {Object} */
            this._api = contentHTML;
            /**
             * @param {string} expectedHashCode
             * @return {?}
             */
            this.get = function(expectedHashCode) {
                return then(self, void 0, void 0, elem["default"].mark(function initialize() {
                    var t;
                    var attributes;
                    var c;
                    var self = this;
                    return elem["default"].wrap(function(self) {
                        for (;;) {
                            switch(self.prev = self.next) {
                                case 0:
                                    if (t = Array.isArray(expectedHashCode), attributes = void 0, self.prev = 2, !t) {
                                        /** @type {number} */
                                        self.next = 11;
                                        break;
                                    }
                                    return expectedHashCode = expectedHashCode, self.next = 7, options["default"].all(expectedHashCode.map(function(opt_attributes) {
                                        return initialize(opt_attributes, self._api);
                                    }));
                                case 7:
                                    c = self.sent;
                                    attributes = expectedHashCode.reduce(function(deepDataAndEvents, opt_obj2, eventName) {
                                        return(0, column["default"])(deepDataAndEvents, (0, type["default"])({}, opt_obj2, c[eventName]));
                                    }, {});
                                    /** @type {number} */
                                    self.next = 15;
                                    break;
                                case 11:
                                    return expectedHashCode = expectedHashCode, self.next = 14, initialize(expectedHashCode, this._api);
                                case 14:
                                    attributes = self.sent;
                                case 15:
                                    /** @type {number} */
                                    self.next = 21;
                                    break;
                                case 17:
                                    /** @type {number} */
                                    self.prev = 17;
                                    self.t0 = self["catch"](2);
                                    if (t) {
                                        attributes = {};
                                    }
                                    console.warn("prefs get error:", self.t0);
                                case 21:
                                    return self.abrupt("return", attributes);
                                case 22:
                                    ;
                                case "end":
                                    return self.stop();
                            }
                        }
                    }, initialize, this, [[2, 17]]);
                }));
            };
            /**
             * @param {string} expectedHashCode
             * @param {string} type
             * @return {?}
             */
            this.set = function(expectedHashCode, type) {
                return then(self, void 0, void 0, elem["default"].mark(function next() {
                    var record = this;
                    return elem["default"].wrap(function(node) {
                        for (;;) {
                            switch(node.prev = node.next) {
                                case 0:
                                    if (null === expectedHashCode || "object" !== ("undefined" === typeof expectedHashCode ? "undefined" : (0, option["default"])(expectedHashCode))) {
                                        /** @type {number} */
                                        node.next = 5;
                                        break;
                                    }
                                    return node.next = 3, options["default"].all((0, match["default"])(expectedHashCode).map(function(name) {
                                        return record.set(name, expectedHashCode[name]);
                                    }));
                                case 3:
                                    /** @type {number} */
                                    node.next = 14;
                                    break;
                                case 5:
                                    return node.prev = 5, type = void 0 === type ? "undefined" : (0, h["default"])(type), node.next = 9, this._api.set(expectedHashCode, type);
                                case 9:
                                    /** @type {number} */
                                    node.next = 14;
                                    break;
                                case 11:
                                    /** @type {number} */
                                    node.prev = 11;
                                    node.t0 = node["catch"](5);
                                    console.warn("prefs set error", node.t0);
                                case 14:
                                    ;
                                case "end":
                                    return node.stop();
                            }
                        }
                    }, next, this, [[5, 11]]);
                }));
            };
            /**
             * @return {?}
             */
            this.all = function() {
                return then(self, void 0, void 0, elem["default"].mark(function end() {
                    var attributes;
                    var name;
                    var value;
                    return elem["default"].wrap(function(self) {
                        for (;;) {
                            switch(self.prev = self.next) {
                                case 0:
                                    return self.next = 2, this._api.getAll();
                                case 2:
                                    attributes = self.sent;
                                    for (name in attributes) {
                                        if ("undefined" === attributes[name]) {
                                            attributes[name] = void 0;
                                        } else {
                                            try {
                                                value = attributes[name];
                                                /** @type {*} */
                                                attributes[name] = value && JSON.parse(value);
                                            } catch (o) {
                                            }
                                        }
                                    }
                                    return self.abrupt("return", attributes);
                                case 5:
                                    ;
                                case "end":
                                    return self.stop();
                            }
                        }
                    }, end, this);
                }));
            };
            /**
             * @param {Object} opt_attributes
             * @return {?}
             */
            this.remove = function(opt_attributes) {
                try {
                    return self._api.remove(opt_attributes);
                } catch (cycle) {
                    return console.warn("prefs remove error", cycle), options["default"].resolve();
                }
            };
            /**
             * @return {?}
             */
            this.clearAll = function() {
                try {
                    return self._api.removeAll()["catch"](function(cycle) {
                        return console.warn("prefs clearAll error", cycle);
                    });
                } catch (cycle) {
                    return console.warn("prefs clearAll error", cycle), options["default"].resolve();
                }
            };
        };
        /** @type {function (Object): undefined} */
        expectedHashCode.PrefsImpl = PrefsImpl;
    }, {
        "babel-runtime/core-js/json/stringify" : 22,
        "babel-runtime/core-js/object/assign" : 24,
        "babel-runtime/core-js/object/keys" : 29,
        "babel-runtime/core-js/promise" : 31,
        "babel-runtime/helpers/classCallCheck" : 34,
        "babel-runtime/helpers/defineProperty" : 36,
        "babel-runtime/helpers/typeof" : 42,
        "babel-runtime/regenerator" : 43
    }],
    332 : [function(require, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} d
         * @return {?}
         */
        function h(d) {
            return d && d.__esModule ? d : {
                "default" : d
            };
        }
        var doc = require("babel-runtime/core-js/object/assign");
        var elem = h(doc);
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var nodes = require("./user/actions");
        var Block = require("./settings/actions");
        var helper = require("./connection/actions");
        expectedHashCode.pureActions = (0, elem["default"])({}, nodes, helper, Block);
    }, {
        "./connection/actions" : 333,
        "./settings/actions" : 335,
        "./user/actions" : 339,
        "babel-runtime/core-js/object/assign" : 24
    }],
    333 : [function(dataAndEvents, deepDataAndEvents, expectedHashCode) {
        /**
         * @param {Object} m
         * @return {?}
         */
        function error(m) {
            return{
                type : expectedHashCode.t.UPDATE_CONNECTION,
                data : m
            };
        }
        /**
         * @param {?} o
         * @return {?}
         */
        function compileNode(o) {
            return{
                type : expectedHashCode.t.ONLINE_STATE,
                online : o
            };
        }
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        expectedHashCode.t = {
            UPDATE_CONNECTION : "connection/UPDATE_CONNECTION",
            ONLINE_STATE : "connection/ONLINE_STATE"
        };
        /** @type {function (Object): ?} */
        expectedHashCode.updateConnection = error;
        /** @type {function (?): ?} */
        expectedHashCode.onlineConnection = compileNode;
    }, {}],
    334 : [function(require, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} value
         * @return {?}
         */
        function h(value) {
            return value && value.__esModule ? value : {
                "default" : value
            };
        }
        /**
         * @return {?}
         */
        function Node() {
            var r20 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : expectedHashCode.defaultConnection;
            var element = arguments[1];
            var type = element.type;
            var names = element.data;
            var online = element.online;
            switch(type) {
                case i18n.t.ONLINE_STATE:
                    return(0, elem["default"])({}, r20, {
                        online : online
                    });
                case i18n.t.UPDATE_CONNECTION:
                    return(0, elem["default"])({}, r20, names);
                default:
                    return r20;
            }
        }
        var selector = require("babel-runtime/core-js/object/assign");
        var elem = h(selector);
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var i18n = require("./actions");
        expectedHashCode.defaultConnection = {
            networkOffline : !window.navigator.onLine,
            cookiesDisabled : navigator.cookieEnabled === false,
            online : true
        };
        /** @type {function (): ?} */
        expectedHashCode.connectionReducer = Node;
    }, {
        "./actions" : 333,
        "babel-runtime/core-js/object/assign" : 24
    }],
    335 : [function(dataAndEvents, deepDataAndEvents, expectedHashCode) {
        /**
         * @param {?} textStatus
         * @param {Object} request
         * @return {?}
         */
        function error(textStatus, request) {
            return{
                type : expectedHashCode.t.SET_DAPI_PROP,
                propKey : textStatus,
                data : request
            };
        }
        /**
         * @param {Object} message
         * @return {?}
         */
        function equal(message) {
            return{
                type : expectedHashCode.t.CHANGE_WEAK_DIALECT,
                data : message
            };
        }
        /**
         * @param {Object} task
         * @return {?}
         */
        function fn(task) {
            return{
                type : expectedHashCode.t.CHANGE_STRONG_DIALECT,
                data : task
            };
        }
        /**
         * @param {Object} b
         * @return {?}
         */
        function selector_sortOrder(b) {
            return{
                type : expectedHashCode.t.SETTINGS_INITIAL,
                data : b
            };
        }
        /**
         * @param {boolean} options
         * @return {?}
         */
        function o(options) {
            return{
                type : expectedHashCode.t.TOGGLE_DEFS,
                enabledDefs : options
            };
        }
        /**
         * @param {boolean} recurring
         * @param {?} domain
         * @return {?}
         */
        function create(recurring, domain) {
            return{
                type : expectedHashCode.t.TOGGLE_SITE,
                domain : domain,
                enabled : recurring
            };
        }
        /**
         * @param {Object} task
         * @param {string} domain
         * @return {?}
         */
        function run(task, domain) {
            return{
                type : expectedHashCode.t.TOGGLE_FIELD,
                domain : domain,
                data : task
            };
        }
        /**
         * @return {?}
         */
        function scanPunctuator() {
            return{
                type : expectedHashCode.t.SEEN_NEWS
            };
        }
        /**
         * @return {?}
         */
        function getQuatertionFromEuler() {
            return{
                type : expectedHashCode.t.SHOW_ONBOARDING
            };
        }
        /**
         * @return {?}
         */
        function buildRule() {
            return{
                type : expectedHashCode.t.SEEN_ONBOARDING
            };
        }
        /**
         * @param {Function} failing_message
         * @return {?}
         */
        function report(failing_message) {
            return{
                type : expectedHashCode.t.SHOW_NEWS,
                /** @type {Function} */
                showNews : failing_message
            };
        }
        /**
         * @return {?}
         */
        function compileOptions() {
            return{
                type : expectedHashCode.t.SEEN_REFERRALS
            };
        }
        /**
         * @return {?}
         */
        function findIndex() {
            return{
                type : expectedHashCode.t.CLICK_REFERRALS
            };
        }
        /**
         * @param {?} dataAndEvents
         * @return {?}
         */
        function clone(dataAndEvents) {
            return{
                type : expectedHashCode.t.TOGGLE_POPUP,
                isPopupDisabled : dataAndEvents
            };
        }
        /**
         * @param {string} domain
         * @return {?}
         */
        function request(domain) {
            return{
                type : expectedHashCode.t.ENABLE_EMAIL_FEEDBACK,
                domain : domain
            };
        }
        /**
         * @param {Object} value
         * @return {?}
         */
        function ok(value) {
            return{
                type : expectedHashCode.t.SAVE_ANONYMOUS_PROPERTIES,
                props : value
            };
        }
        /**
         * @param {number} o
         * @return {?}
         */
        function compileNode(o) {
            return{
                type : expectedHashCode.t.SEEN_EMAIL_PERCEPTION_POPUP,
                seenEmailPerceptionPopupDate : o
            };
        }
        /**
         * @return {?}
         */
        function escaped() {
            return{
                type : expectedHashCode.t.SET_EMAIL_PERCEPTION_POPUP_STATE,
                emailPerceptionPopupEnabled : false
            };
        }
        /**
         * @return {?}
         */
        function kw() {
            return{
                type : expectedHashCode.t.SET_EMAIL_PERCEPTION_POPUP_STATE,
                emailPerceptionPopupEnabled : true
            };
        }
        /**
         * @param {string} a
         * @param {?} id
         * @return {?}
         */
        function text(a, id) {
            return{
                type : expectedHashCode.t.SAVE_FEEDBACK_DATA,
                subject : a,
                docId : id
            };
        }
        /**
         * @return {?}
         */
        function scanVarargLiteral() {
            return{
                type : expectedHashCode.t.DISABLE_ON_TAB
            };
        }
        /**
         * @param {string} domain
         * @return {?}
         */
        function store(domain) {
            return{
                type : expectedHashCode.t.SHOW_DISABLE_REMINDER,
                domain : domain
            };
        }
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        expectedHashCode.t = {
            SETTINGS_INITIAL : "settings/SETTINGS_INITIAL",
            TOGGLE_DEFS : "settings/TOGGLE_DEFS",
            TOGGLE_SITE : "settings/TOGGLE_SITE",
            TOGGLE_FIELD : "settings/TOGGLE_FIELD",
            TOGGLE_POPUP : "settings/TOGGLE_POPUP",
            DISABLE_ON_TAB : "settings/DISABLE_ON_TAB",
            SHOW_DISABLE_REMINDER : "settings/SHOW_DISABLE_REMINDER",
            SHOW_NEWS : "settings/SHOW_NEWS",
            SEEN_NEWS : "settings/SEEN_NEWS",
            SEEN_REFERRALS : "settings/SEEN_REFERRALS",
            CLICK_REFERRALS : "settings/CLICK_REFERRALS",
            SHOW_ONBOARDING : "settings/SHOW_ONBOARDING",
            SEEN_ONBOARDING : "settings/SEEN_ONBOARDING",
            SET_DAPI_PROP : "settings/SET_DAPI_PROP",
            CHANGE_WEAK_DIALECT : "settings/CHANGE_WEAK_DIALECT",
            CHANGE_STRONG_DIALECT : "settings/CHANGE_STRONG_DIALECT",
            SAVE_ANONYMOUS_PROPERTIES : "settings/SAVE_ANONYMOUS_PROPERTIES",
            ENABLE_EMAIL_FEEDBACK : "settings/ENABLE_EMAIL_FEEDBACK",
            SAVE_FEEDBACK_DATA : "settings/SAVE_FEEDBACK_DATA",
            SEEN_EMAIL_PERCEPTION_POPUP : "settings/EMAIL_PERCEPTION_POPUP_SEEN",
            SET_EMAIL_PERCEPTION_POPUP_STATE : "settings/SET_EMAIL_PERCEPTION_POPUP_STATE"
        };
        /** @type {Array} */
        expectedHashCode.DAPI_ACTIONS = [expectedHashCode.t.CHANGE_WEAK_DIALECT, expectedHashCode.t.CHANGE_STRONG_DIALECT];
        /** @type {Array} */
        expectedHashCode.CACHED_ACTIONS = [expectedHashCode.t.TOGGLE_DEFS, expectedHashCode.t.TOGGLE_SITE, expectedHashCode.t.TOGGLE_FIELD, expectedHashCode.t.SEEN_NEWS, expectedHashCode.t.SEEN_REFERRALS, expectedHashCode.t.CLICK_REFERRALS, expectedHashCode.t.SHOW_ONBOARDING, expectedHashCode.t.SEEN_ONBOARDING, expectedHashCode.t.SEEN_EMAIL_PERCEPTION_POPUP, expectedHashCode.t.SET_EMAIL_PERCEPTION_POPUP_STATE, expectedHashCode.t.SHOW_DISABLE_REMINDER];
        /** @type {function (?, Object): ?} */
        expectedHashCode.setDapiProp = error;
        /** @type {function (Object): ?} */
        expectedHashCode.changeWeakDialect = equal;
        /** @type {function (Object): ?} */
        expectedHashCode.changeStrongDialect = fn;
        /** @type {function (Object): ?} */
        expectedHashCode.initialSettings = selector_sortOrder;
        /** @type {function (boolean): ?} */
        expectedHashCode.toggleDefs = o;
        /** @type {function (boolean, ?): ?} */
        expectedHashCode.toggleSite = create;
        /** @type {function (Object, string): ?} */
        expectedHashCode.toggleField = run;
        /** @type {function (): ?} */
        expectedHashCode.seenNews = scanPunctuator;
        /** @type {function (): ?} */
        expectedHashCode.showOnboarding = getQuatertionFromEuler;
        /** @type {function (): ?} */
        expectedHashCode.seenOnboarding = buildRule;
        /** @type {function (Function): ?} */
        expectedHashCode.showNews = report;
        /** @type {function (): ?} */
        expectedHashCode.seenReferrals = compileOptions;
        /** @type {function (): ?} */
        expectedHashCode.clickReferrals = findIndex;
        /** @type {function (?): ?} */
        expectedHashCode.togglePopup = clone;
        /** @type {function (string): ?} */
        expectedHashCode.enableEmailFeedback = request;
        /** @type {function (Object): ?} */
        expectedHashCode.saveAnonymousProps = ok;
        /** @type {function (number): ?} */
        expectedHashCode.seenEmailPerceptionPopup = compileNode;
        /** @type {function (): ?} */
        expectedHashCode.disableEmailPerceptionPopup = escaped;
        /** @type {function (): ?} */
        expectedHashCode.enableEmailPerceptionPopup = kw;
        /** @type {function (string, ?): ?} */
        expectedHashCode.saveFeedbackData = text;
        /** @type {function (): ?} */
        expectedHashCode.disableOnTab = scanVarargLiteral;
        /** @type {function (string): ?} */
        expectedHashCode.showDisableReminder = store;
    }, {}],
    336 : [function(require, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} context
         * @return {?}
         */
        function getAll(context) {
            return context && context.__esModule ? context : {
                "default" : context
            };
        }
        /**
         * @return {?}
         */
        function update() {
            var data = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
            var options = arguments[1];
            var type = options.type;
            var value = options.data;
            var computed = void 0 === value ? {} : value;
            var domain = options.domain;
            var async = options.enabledDefs;
            var enabled = options.enabled;
            var successCb = options.showNews;
            var thisArg = options.isPopupDisabled;
            var stackStartFunction = options.seenEmailPerceptionPopupDate;
            var bench = options.emailPerceptionPopupEnabled;
            var which = options.propKey;
            var r20 = data[domain] || {};
            switch(type) {
                case i18n.t.SETTINGS_INITIAL:
                    return(0, result["default"])({}, data, computed);
                case i18n.t.TOGGLE_DEFS:
                    return(0, result["default"])({}, data, {
                        common : (0, result["default"])({}, data.common, {
                            enabledDefs : async
                        })
                    });
                case i18n.t.TOGGLE_SITE:
                    return(0, result["default"])({}, data, (0, __exports__["default"])({}, domain, (0, result["default"])({}, r20, {
                        enabled : enabled,
                        disabledDate : enabled === true ? null : Date.now()
                    })));
                case i18n.t.TOGGLE_FIELD:
                    return(0, result["default"])({}, data, (0, __exports__["default"])({}, domain, (0, result["default"])({}, data[domain], {
                        disabledFields : (0, result["default"])({}, r20.disabledFields, computed)
                    })));
                case i18n.t.ENABLE_EMAIL_FEEDBACK:
                    return(0, result["default"])({}, data, (0, __exports__["default"])({}, domain, (0, result["default"])({}, data[domain], {
                        emailFeedbackEnabled : true
                    })));
                case i18n.t.SHOW_NEWS:
                    return(0, result["default"])({}, data, {
                        common : (0, result["default"])({}, data.common, {
                            showNews : successCb
                        })
                    });
                case i18n.t.SHOW_ONBOARDING:
                    return(0, result["default"])({}, data, {
                        common : (0, result["default"])({}, data.common, {
                            showOnboarding : true
                        })
                    });
                case i18n.t.SEEN_ONBOARDING:
                    return(0, result["default"])({}, data, {
                        common : (0, result["default"])({}, data.common, {
                            showOnboarding : false
                        })
                    });
                case i18n.t.SEEN_EMAIL_PERCEPTION_POPUP:
                    return(0, result["default"])({}, data, {
                        common : (0, result["default"])({}, data.common, {
                            seenEmailPerceptionPopupDate : stackStartFunction
                        })
                    });
                case i18n.t.SET_EMAIL_PERCEPTION_POPUP_STATE:
                    return(0, result["default"])({}, data, {
                        common : (0, result["default"])({}, data.common, {
                            emailPerceptionPopupEnabled : bench
                        })
                    });
                case i18n.t.SEEN_NEWS:
                    return(0, result["default"])({}, data, {
                        common : (0, result["default"])({}, data.common, {
                            seenNewsVersion : Block.newsId
                        })
                    });
                case i18n.t.TOGGLE_POPUP:
                    return(0, result["default"])({}, data, {
                        common : (0, result["default"])({}, data.common, {
                            isPopupDisabled : thisArg
                        })
                    });
                case i18n.t.SEEN_REFERRALS:
                    return(0, result["default"])({}, data, {
                        common : (0, result["default"])({}, data.common, {
                            referralNewsBadge : true
                        })
                    });
                case i18n.t.CLICK_REFERRALS:
                    return(0, result["default"])({}, data, {
                        common : (0, result["default"])({}, data.common, {
                            referralWasClicked : true
                        })
                    });
                case i18n.t.SET_DAPI_PROP:
                    return(0, result["default"])({}, data, {
                        common : (0, result["default"])({}, data.common, (0, __exports__["default"])({}, which, computed))
                    });
                case i18n.t.SHOW_DISABLE_REMINDER:
                    return(0, result["default"])({}, data, (0, __exports__["default"])({}, domain, (0, result["default"])({}, r20, {
                        disabledDate : Date.now()
                    })));
                default:
                    return data;
            }
        }
        var clone = require("babel-runtime/helpers/defineProperty");
        var __exports__ = getAll(clone);
        var nodes = require("babel-runtime/core-js/object/assign");
        var result = getAll(nodes);
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var Block = require("lib/config");
        var i18n = require("./actions");
        /** @type {function (): ?} */
        expectedHashCode.settingsReducer = update;
    }, {
        "./actions" : 335,
        "babel-runtime/core-js/object/assign" : 24,
        "babel-runtime/helpers/defineProperty" : 36,
        "lib/config" : 211
    }],
    337 : [function(dataAndEvents, deepDataAndEvents, expectedHashCode) {
        /**
         * @param {Object} textStatus
         * @return {?}
         */
        function error(textStatus) {
            return{
                type : expectedHashCode.t.SET_ACTIVE_TAB,
                data : textStatus
            };
        }
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        expectedHashCode.t = {
            SET_ACTIVE_TAB : "tabs/SET_ACTIVE_TAB"
        };
        /** @type {function (Object): ?} */
        expectedHashCode.setActiveTab = error;
    }, {}],
    338 : [function(topic, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} value
         * @return {?}
         */
        function isUndefinedOrNull(value) {
            return value && value.__esModule ? value : {
                "default" : value
            };
        }
        /**
         * @return {?}
         */
        function Node() {
            var r20 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
            var event = arguments[1];
            var type = event.type;
            var active = event.data;
            switch(type) {
                case out.t.SET_ACTIVE_TAB:
                    return(0, __exports__["default"])({}, r20, {
                        active : active
                    });
                default:
                    return r20;
            }
        }
        var udataCur = topic("babel-runtime/core-js/object/assign");
        var __exports__ = isUndefinedOrNull(udataCur);
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var out = topic("./actions");
        /** @type {function (): ?} */
        expectedHashCode.tabsReducer = Node;
    }, {
        "./actions" : 337,
        "babel-runtime/core-js/object/assign" : 24
    }],
    339 : [function(dataAndEvents, deepDataAndEvents, expectedHashCode) {
        /**
         * @param {Object} textStatus
         * @return {?}
         */
        function error(textStatus) {
            return{
                type : expectedHashCode.t.SET_USER,
                data : textStatus
            };
        }
        /**
         * @param {Object} task
         * @return {?}
         */
        function fn(task) {
            return{
                type : expectedHashCode.t.SET_SETTINGS,
                data : task
            };
        }
        /**
         * @param {?} x
         * @return {?}
         */
        function sign(x) {
            return{
                type : expectedHashCode.t.SESSION_INVALIDATE,
                reason : x
            };
        }
        /**
         * @return {?}
         */
        function scanPunctuator() {
            return{
                type : expectedHashCode.t.INC_FIXED
            };
        }
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        expectedHashCode.t = {
            SET_USER : "user/SET_USER",
            SET_SETTINGS : "user/SET_SETTINGS",
            SESSION_INVALIDATE : "user/SESSION_INVALIDATE",
            INC_FIXED : "user/INC_FIXED"
        };
        /** @type {function (Object): ?} */
        expectedHashCode.setUser = error;
        /** @type {function (Object): ?} */
        expectedHashCode.setSettings = fn;
        /** @type {function (?): ?} */
        expectedHashCode.sessionInvalidate = sign;
        /** @type {function (): ?} */
        expectedHashCode.incFixed = scanPunctuator;
    }, {}],
    340 : [function(proceed, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} value
         * @return {?}
         */
        function lookupIterator(value) {
            return value && value.__esModule ? value : {
                "default" : value
            };
        }
        /**
         * @return {?}
         */
        function process() {
            var matches = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : expectedHashCode.defaultUser;
            var event = arguments[1];
            var type = event.type;
            var value = event.data;
            var settings = void 0 === value ? {} : value;
            switch(type) {
                case val.t.SET_USER:
                    return settings;
                case val.t.SET_SETTINGS:
                    return(0, iterator["default"])({}, matches, {
                        settings : settings
                    });
                case val.t.INC_FIXED:
                    var fixed_errors = matches.fixed_errors + 1;
                    return(0, iterator["default"])({}, matches, {
                        fixed_errors : fixed_errors
                    });
                default:
                    return matches;
            }
        }
        var value = proceed("babel-runtime/core-js/object/assign");
        var iterator = lookupIterator(value);
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var val = proceed("./actions");
        expectedHashCode.defaultUser = {
            anonymous : true,
            premium : false
        };
        /** @type {function (): ?} */
        expectedHashCode.userReducer = process;
    }, {
        "./actions" : 339,
        "babel-runtime/core-js/object/assign" : 24
    }],
    341 : [function($, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} type
         * @return {?}
         */
        function String(type) {
            return type && type.__esModule ? type : {
                "default" : type
            };
        }
        /**
         * @param {?} msg
         * @return {?}
         */
        function debug(msg) {
            var removeListener = device.combineReducers({
                user : subject.userReducer,
                tabs : emptyJ.tabsReducer,
                settings : opts.settingsReducer,
                connection : self.connectionReducer
            });
            var proplist = log({
                level : "debug",
                colors : {
                    /**
                     * @return {?}
                     */
                    title : function() {
                        return "green";
                    }
                }
            });
            return device.createStore(removeListener, {}, device.applyMiddleware(msg, proplist));
        }
        var message = $("babel-runtime/regenerator");
        var result = String(message);
        var html = $("babel-runtime/helpers/createClass");
        var h = String(html);
        var obj = $("babel-runtime/helpers/classCallCheck");
        var type = String(obj);
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var log = $("redux-logger");
        var device = $("redux");
        var history = $("redux-saga");
        var self = $("./state/connection/reducer");
        var opts = $("./state/settings/reducer");
        var subject = $("./state/user/reducer");
        var emptyJ = $("./state/tabs/reducer");
        var $spy = $("lib/config");
        var ctx = $("./state/actions");
        var $src = $("./state/actions");
        expectedHashCode.pureActions = $src.pureActions;
        var root = $("redux-saga/effects");
        var $window = $("lib/page-config");
        /**
         * @param {Object} details
         * @param {?} failing_message
         * @return {undefined}
         */
        var AuthSagaRunners = function report(details, failing_message) {
            var me = this;
            (0, type["default"])(this, report);
            /** @type {Object} */
            this._store = details;
            this._userSagas = failing_message;
            /**
             * @return {?}
             */
            this.refreshUser = function() {
                var expectedHashCode;
                /** @type {number} */
                var l = arguments.length;
                /** @type {Array} */
                var args = Array(l);
                /** @type {number} */
                var i = 0;
                for (;i < l;i++) {
                    args[i] = arguments[i];
                }
                return(expectedHashCode = me._store).runSaga.apply(expectedHashCode, [me._userSagas.externalUpdateUser.bind(me._userSagas)].concat(args)).done;
            };
            /**
             * @param {?} done
             * @return {?}
             */
            this.signin = function(done) {
                return me._store.runSaga(me._userSagas.authRequest.bind(me._userSagas), $spy.URLS.authSignin, done, "app_signin_success").done;
            };
            /**
             * @param {?} done
             * @return {?}
             */
            this.signup = function(done) {
                return me._store.runSaga(me._userSagas.authRequest.bind(me._userSagas), $spy.URLS.authSignup, done, "app_signup_success").done;
            };
        };
        /** @type {function (Object, ?): undefined} */
        expectedHashCode.AuthSagaRunners = AuthSagaRunners;
        var StoreControllerImpl = function() {
            /**
             * @param {Object} next
             * @param {Object} emitter
             * @param {Object} event
             * @param {Object} path
             * @return {undefined}
             */
            function update(next, emitter, event, path) {
                var _this = this;
                (0, type["default"])(this, update);
                /** @type {Object} */
                this._userSagas = next;
                /** @type {Object} */
                this._settingsSagas = emitter;
                /** @type {Object} */
                this._tabsSagas = event;
                /** @type {Object} */
                this._connectionSagas = path;
                var data = history["default"](next.start.bind(next), emitter.start.bind(emitter), path.start.bind(path));
                this.store = debug(data);
                this.runSaga = data.run;
                /**
                 * @return {?}
                 */
                this.initStore = function() {
                    return data.run(_this._startupFlow.bind(_this)).done.then(function() {
                        _this.store.subscribe(function() {
                            return data.run(event.sendStateToTabs.bind(event));
                        });
                    });
                };
                this.actions = device.bindActionCreators(ctx.pureActions, this.store.dispatch);
            }
            return(0, h["default"])(update, [{
                key : "_startupFlow",
                value : result["default"].mark(function end() {
                    return result["default"].wrap(function(current) {
                        for (;;) {
                            switch(current.prev = current.next) {
                                case 0:
                                    return current.next = 2, [root.call([this._settingsSagas, this._settingsSagas.setInitialSettings]), root.call([$window.pageConfig, $window.pageConfig.init]), root.call([this._userSagas, this._userSagas.updateUser], {
                                        failoverFromCache : true
                                    })];
                                case 2:
                                    return current.next = 4, root.fork([this._connectionSagas, this._connectionSagas.monitorIsIncognito]);
                                case 4:
                                    return current.next = 6, root.call([this._tabsSagas, this._tabsSagas.start]);
                                case 6:
                                    ;
                                case "end":
                                    return current.stop();
                            }
                        }
                    }, end, this);
                })
            }]), update;
        }();
        expectedHashCode.StoreControllerImpl = StoreControllerImpl;
    }, {
        "./state/actions" : 332,
        "./state/connection/reducer" : 334,
        "./state/settings/reducer" : 336,
        "./state/tabs/reducer" : 338,
        "./state/user/reducer" : 340,
        "babel-runtime/helpers/classCallCheck" : 34,
        "babel-runtime/helpers/createClass" : 35,
        "babel-runtime/regenerator" : 43,
        "lib/config" : 211,
        "lib/page-config" : 284,
        redux : "redux",
        "redux-logger" : "redux-logger",
        "redux-saga" : "redux-saga",
        "redux-saga/effects" : 159
    }],
    342 : [function(a, dataAndEvents, deepDataAndEvents) {
        a("index");
    }, {
        index : 185
    }],
    343 : [function(require, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} value
         * @return {?}
         */
        function walk(value) {
            return value && value.__esModule ? value : {
                "default" : value
            };
        }
        var ctor = require("babel-runtime/core-js/object/assign");
        var t = walk(ctor);
        var nodes = require("babel-runtime/helpers/classCallCheck");
        var result = walk(nodes);
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var server = require("universal/shared/socket");
        var handler = require("lib/util");
        var callback = require("emitter");
        var gamejs = require("./socket");
        /**
         * @param {?} content
         * @param {Function} element
         * @return {undefined}
         */
        var ContentScriptSocketManager = function Modal(content, element) {
            var self = this;
            (0, result["default"])(this, Modal);
            this._logger = content;
            /** @type {Function} */
            this._message = element;
            this._sockets = {};
            /**
             * @param {Object} req
             * @return {?}
             */
            this.createSocket = function(req) {
                var i = req.socketId || handler.guid();
                var cleanedState = {
                    socketId : i,
                    useStandBy : req.useStandBy,
                    url : req.url
                };
                /**
                 * @return {undefined}
                 */
                var close = function() {
                };
                if (!self._sockets[i]) {
                    self._sockets[i] = new gamejs.ContentScriptSocket(i, function(new_method, arg) {
                        self._message.emitBackground(server.MessageTypes.client, (0, t["default"])({}, cleanedState, {
                            method : new_method,
                            arg : arg
                        }));
                        if ("close" === new_method) {
                            close();
                        }
                    });
                }
                var socket = self._sockets[i];
                return socket.one("disconnect", close), socket.one("cleanup-socket-on-editor-remove", function() {
                    delete self._sockets[i];
                }), socket.on("error", self._onError), socket;
            };
            /**
             * @param {string} fix
             * @return {undefined}
             */
            this._onError = function(fix) {
                if ("disconnected" !== fix) {
                    var e = {};
                    if ("string" === typeof fix) {
                        /** @type {string} */
                        e.msg = fix;
                    } else {
                        if (fix.error) {
                            e.readyState = fix.error.currentTarget && fix.error.currentTarget.readyState;
                            e.returnValue = fix.error.returnValue;
                        }
                    }
                    self._logger.socketCsError();
                    console.error("capi error", fix);
                    if (!window.emit) {
                        callback(window);
                    }
                    window.emit("bgerror", fix || "when send message to the socket");
                }
            };
            /**
             * @param {Object} data
             * @param {?} callback
             * @return {undefined}
             */
            this._onMessage = function(data, callback) {
                var test = self._sockets[data.socketId];
                if (test) {
                    var group = data.msg || {};
                    if (group.action) {
                        if ("error" === group.action.toLowerCase()) {
                            self._logger.soketCsErrorMsg(group);
                        }
                    }
                    callback("ok");
                    test.emit(data.event, data.msg);
                }
            };
            element.on(server.MessageTypes.server, this._onMessage);
        };
        /** @type {function (?, Function): undefined} */
        expectedHashCode.ContentScriptSocketManager = ContentScriptSocketManager;
    }, {
        "./socket" : 344,
        "babel-runtime/core-js/object/assign" : 24,
        "babel-runtime/helpers/classCallCheck" : 34,
        emitter : "emitter",
        "lib/util" : 322,
        "universal/shared/socket" : 345
    }],
    344 : [function(require, dataAndEvents, expectedHashCode) {
        /**
         * @param {?} selector
         * @return {?}
         */
        function $(selector) {
            return selector && selector.__esModule ? selector : {
                "default" : selector
            };
        }
        var nodes = require("babel-runtime/core-js/object/get-prototype-of");
        var result = $(nodes);
        var b = require("babel-runtime/helpers/classCallCheck");
        var column = $(b);
        var selector = require("babel-runtime/helpers/possibleConstructorReturn");
        var elem = $(selector);
        var target = require("babel-runtime/helpers/inherits");
        var type = $(target);
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        var Particles = require("stdlib/emitter");
        var ContentScriptSocket = function(deepDataAndEvents) {
            /**
             * @param {?} user
             * @param {(RegExp|string)} noAnimation
             * @return {?}
             */
            function open(user, noAnimation) {
                (0, column["default"])(this, open);
                var self = (0, elem["default"])(this, (open.__proto__ || (0, result["default"])(open)).call(this));
                return self.socketId = user, self._send = noAnimation, self.send = function(opts) {
                    return self._send("send", opts);
                }, self.close = function() {
                    return self._send("close");
                }, self.connect = function(expectedNumberOfNonCommentArgs) {
                    return self._send("connect", expectedNumberOfNonCommentArgs);
                }, self.reconnect = function(cb) {
                    return self._send("reconnect", cb);
                }, self.release = function() {
                    return self._send("release");
                }, self.wsPlay = function() {
                    return self._send("wsPlay");
                }, self.wsPause = function() {
                    return self._send("wsPause");
                }, self.toString = function() {
                    return "[object SocketClient]";
                }, self;
            }
            return(0, type["default"])(open, deepDataAndEvents), open;
        }(Particles.Emitter);
        expectedHashCode.ContentScriptSocket = ContentScriptSocket;
    }, {
        "babel-runtime/core-js/object/get-prototype-of" : 28,
        "babel-runtime/helpers/classCallCheck" : 34,
        "babel-runtime/helpers/inherits" : 38,
        "babel-runtime/helpers/possibleConstructorReturn" : 39,
        "stdlib/emitter" : 327
    }],
    345 : [function(dataAndEvents, deepDataAndEvents, expectedHashCode) {
        Object.defineProperty(expectedHashCode, "__esModule", {
            value : true
        });
        expectedHashCode.MessageTypes = {
            server : "socket-server",
            client : "socket-client",
            serverIframe : "socket-server-iframe",
            iframeMode : "iframe-mode"
        };
    }, {}]
}, {}, [165]);
